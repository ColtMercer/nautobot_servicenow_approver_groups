{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Overview","text":"<p>Welcome to the Nautobot Core Documentation! Use the top navigation bar to read about:</p> <ul> <li>Installing Nautobot, Configuring Nautobot, Getting Started with the Web Interface, REST and GraphQL APIs, Plugins, additional features and much more can be found under the Documentation section.</li> <li>Learn about how to Develop and Contribute to Nautobot, Set up your Development Environment, and more under the Development Guide section.</li> <li>Nautobot has a thriving ecosystem of Apps (also known as Plugins), developed as separate projects, for which you can find links to documentation under the Nautobot Apps section.</li> </ul>"},{"location":"index.html#what-is-nautobot","title":"What is Nautobot?","text":"<p>Nautobot is an open source Network Source of Truth and Network Automation Platform. Nautobot was initially developed as a fork of NetBox (v2.10.4), which was originally created by Jeremy Stretch at DigitalOcean and by the NetBox open source community.</p>"},{"location":"index.html#key-use-cases","title":"Key Use Cases","text":"<p>Nautobot enables three (3) key use cases.</p> <ol> <li> <p>Flexible Source of Truth for Networking - Nautobot core data models are used to define the intended state of network infrastructure enabling it as a Source of Truth. While a baseline set of models are provided (such as IP networks and addresses, devices and racks, circuits and cable, etc.) it is Nautobot's goal to offer maximum data model flexibility. This is enabled through features such as user-defined relationships, custom fields on any model, and data validation that permits users to codify everything from naming standards to having automated tests run before data can be populated into Nautobot.</p> </li> <li> <p>Extensible Data Platform for Automation - Nautobot has a rich feature set to seamlessly integrate with network automation solutions.  Nautobot offers GraphQL and native Git integration along with REST APIs and webhooks.  Git integration dynamically loads YAML data files as Nautobot config contexts.  Nautobot also has an evolving plugin system that enables users to create custom models, APIs, and UI elements.  The plugin system is also used to unify and aggregate disparate data sources creating a Single Source of Truth to streamline data management for network automation.</p> </li> <li> <p>Platform for Network Automation Apps - The Nautobot plugin system enables users to create Network Automation Apps.  Apps can be as lightweight or robust as needed based on user needs.  Using Nautobot for creating custom applications saves up to 70% development time by re-using features such as authentication, permissions, webhooks, GraphQL, change logging, etc. all while having access to the data already stored in Nautobot. Some production ready applications include:</p> <ul> <li>Golden Configuration</li> <li>Device Lifecycle</li> <li>Firewall Models</li> <li>SSoT</li> <li>ChatOps</li> <li>Circuit Maintenance</li> <li>Capacity Metrics</li> <li>Device Onboarding</li> </ul> </li> </ol>"},{"location":"index.html#design-philosophy","title":"Design Philosophy","text":"<p>The following tenets drive the direction of Nautobot.</p>"},{"location":"index.html#replicate-the-real-world","title":"Replicate the Real World","text":"<p>Careful consideration has been given to the data model to ensure that it can accurately reflect a real-world network. For instance, IP addresses are assigned not to devices, but to specific interfaces attached to a device, and an interface may have multiple IP addresses assigned to it.</p>"},{"location":"index.html#serve-as-a-source-of-truth-sot","title":"Serve as a Source of Truth (SoT)","text":"<p>Nautobot intends to represent the desired state of a network versus its operational state. While plugins and apps can be built and integrated with Nautobot to extend its capabilities to various aspects of the operational state, the core platform's focus is on the desired state.</p>"},{"location":"index.html#serve-as-a-network-automation-platform","title":"Serve as a Network Automation Platform","text":"<p>Nautobot intends to be a vehicle to deliver high-value network automation apps.  Using the extensible plugin system, users have the choice and freedom to create the integrations that make sense for them.</p>"},{"location":"index.html#ensure-maximum-flexibility-extensibility","title":"Ensure Maximum Flexibility &amp; Extensibility","text":"<p>While Nautobot intends to replicate the real world and offer opinionated models to get started defining the intended state of the network, it is understood that organizations and networks have unique design considerations that may need to be addressed in the SoT or Network Automation Platform.  Nautobot strives to enable flexibility and extensibility to power and automate all types of networks.</p>"},{"location":"index.html#keep-it-simple","title":"Keep it Simple","text":"<p>When given a choice between a relatively simple 80% solution and a much more complex complete solution, the former will typically be favored. This ensures a lean codebase with a low learning curve.</p>"},{"location":"index.html#application-stack","title":"Application Stack","text":"<p>Nautobot is built on the Django Python Web framework and requires either a PostgreSQL or MySQL database backend. It runs as a WSGI service behind your choice of HTTP server.</p> Function Component HTTP service NGINX WSGI service uWSGI or Gunicorn Application Django/Python Database PostgreSQL 9.6+ or MySQL 8.0+ Cache Redis/django-cacheops Task queuing Redis/Celery/django-rq Live device access NAPALM <p>Added in version 1.1.0</p> <p>MySQL support was added.</p> <p>The following diagram displays how data travels through Nautobot's application stack.</p> <p></p>"},{"location":"index.html#supported-python-versions","title":"Supported Python Versions","text":"<p>Nautobot supports Python 3.8 through 3.11.</p> <p>Added in version 1.3.0</p> <p>Python 3.10 support was added.</p> <p>Removed in version 1.3.0</p> <p>Python 3.6 support was removed.</p> <p>Changed in version 1.6.0</p> <p>Python 3.11 support was added and Python 3.7 support was removed.</p>"},{"location":"index.html#getting-started","title":"Getting Started","text":"<p>See the installation guide for help getting Nautobot up and running quickly.</p>"},{"location":"additional-features/caching.html","title":"Caching","text":"<p>A fundamental trade-off in dynamic websites like Nautobot is that, well, they\u2019re dynamic. Each time a user requests a page, the Web server makes all sorts of calculations \u2013 from database queries to template rendering to business logic \u2013 to create the page that your site\u2019s visitor sees. This is a lot more expensive, from a processing-overhead perspective, than your standard read-a-file-off-the-filesystem server arrangement.</p> <p>That\u2019s where caching comes in.</p> <p>To cache something is to save the result of an expensive calculation so that you don\u2019t have to perform the calculation next time.</p> <p>Nautobot makes extensive use of caching; this is not a simple topic but it's a useful one for a Nautobot administrator to understand, so read on if you please.</p>"},{"location":"additional-features/caching.html#how-it-works","title":"How it Works","text":"<p>Nautobot optionally supports database query caching using <code>django-cacheops</code> and Redis. Caching can be enabled by toggling <code>CACHEOPS_ENABLED</code> to <code>True</code> (it is <code>False</code> by default). When caching is enabled, and a query is made, the results are cached in Redis for a short period of time, as defined by the <code>CACHEOPS_DEFAULTS</code> parameter (15 minutes by default). Within that time, all recurrences of that specific query will return the pre-fetched results from the cache.</p> <p>Changed in version 1.5.0</p> <p>Query caching is now disabled by default, and will be removed as a supported option in a future release.</p> <p>If a change is made to any of the objects returned by the cached query within that time, or if the timeout expires, the cached results are automatically invalidated and the next request for those results will be sent to the database.</p> <p>Caching is a complex topic and there are some important details to clarify with how caching is implemented and configured in Nautobot.</p>"},{"location":"additional-features/caching.html#caching-in-django","title":"Caching in Django","text":"<p>Django includes with its own cache framework that works for common cases, but does not work well for the wide array of use-cases within Nautobot. For that reason, Django's built-in caching is not used for the caching of web UI views, API results, and underlying database queries. Instead, we use <code>django-cacheops</code>. Please see below for more on this.</p>"},{"location":"additional-features/caching.html#caches-and-django-redis","title":"<code>CACHES</code> and <code>django-redis</code>","text":"<p>The <code>CACHES</code> setting is used to, among other things, configure Django's built-in caching. You'll observe that, even though we aren't using Django's built-in caching, we still have this as a required setting. Here's why:</p> <p>Nautobot uses the <code>django-redis</code> Django plugin which allows it to use Redis as a backend for caching and session storage. This is used to provide a concurrent write lock for preventing race conditions when allocating IP address objects, and also to define centralized Redis connection settings that will be used by RQ.</p> <p><code>django-redis</code> also uses the <code>CACHES</code> setting, in its case to simplify the configuration for establishing concurrent write locks, and also for referencing the correct Redis connection information when defining RQ task queues using the  <code>RQ_QUEUES</code> setting.</p> <p>Again: <code>CACHES</code> is not used for Django's built-in caching at this time, but it is still a required setting for <code>django-redis</code> to function properly.</p>"},{"location":"additional-features/caching.html#django-cacheops","title":"Django Cacheops","text":"<p>Cacheops (aka <code>django-cacheops</code>) is a Django plugin that does some very advanced caching, but does not leverage the built-in cache framework. Instead it uses a technique called \"monkey patching\". By monkey patching, a library can inject its own functionality into the core code behind the scenes.</p> <p>This technique allows Cacheops to do more advanced caching operations that are not provided by the Django built-in cache framework without requiring Nautobot to also include some elaborate code of its own. This is accomplished by intercepting calls to the underlying queryset methods that get and set cached results in Redis.</p> <p>For this purpose, Cacheops has its own <code>CACHEOPS_*</code> settings required to configure it that are not related to the <code>CACHES</code> setting.</p> <p>For more information on the required settings needed to configure Cacheops, please see the Caching section of the required settings documentation.</p> <p>The optional settings include:</p> <ul> <li><code>CACHEOPS_DEFAULTS</code>: To define the cache timeout value (Defaults to 15 minutes)</li> <li><code>CACHEOPS_ENABLED</code> : To turn on/off caching (Defaults to <code>False</code>)</li> </ul>"},{"location":"additional-features/caching.html#invalidating-cached-data","title":"Invalidating Cached Data","text":"<p>Although caching is performed automatically and rarely requires administrative intervention, Nautobot provides the <code>invalidate</code> management command to force invalidation of cached results. This command can reference a specific object my its type and UUID:</p> <p>Run these commands as the Nautobot user</p> <pre><code>nautobot-server invalidate dcim.Device.84ae706d-c189-4d13-a898-9737648e34b3\n</code></pre> <p>Alternatively, it can also delete all cached results for an object type:</p> <pre><code>nautobot-server invalidate dcim.Device\n</code></pre> <p>Finally, calling it with the <code>all</code> argument will force invalidation of the entire cache database:</p> <pre><code>nautobot-server invalidate all\n</code></pre>"},{"location":"additional-features/caching.html#high-availability-caching","title":"High Availability Caching","text":"<p>Redis provides two different methods to achieve high availability: The first is Redis Sentinel and the second is the newer Redis Clustering feature. Unfortunately, due to an known issue with django-cacheops (last updated November 2021) Nautobot is unable to support Redis Clustering at this time. Therefore, Nautobot only supports Redis Sentinel for high availability.</p>"},{"location":"additional-features/caching.html#using-redis-sentinel","title":"Using Redis Sentinel","text":"<p>The installation/configuration of the Redis Sentinel cluster itself is outside the scope of this document, this section is intended to provide the steps necessary to configure Nautobot to connect to a Sentinel cluster.</p> <p>We need to configure <code>django-redis</code>, <code>django-cacheops</code>, and <code>celery</code> to use Sentinel. Each library is configured differently, so please pay close attention to the details.</p>"},{"location":"additional-features/caching.html#django-redis-sentinel-configuration","title":"<code>django-redis</code> Sentinel Configuration","text":"<p>Notable settings:</p> <ul> <li><code>SENTINELS</code>: List of tuples or tuple of tuples with each inner tuple containing the name or IP address of the Redis server and port for each sentinel instance to connect to</li> <li><code>LOCATION</code>: Similar to a redis URL, however, the hostname in the URL is the master/service name in redis sentinel</li> <li><code>SENTINEL_KWARGS</code>: Options which will be passed directly to Redis Sentinel</li> <li><code>PASSWORD</code>: The redis password (if set), the <code>SENTINEL_KWARGS[\"password\"]</code> setting is the password for Sentinel</li> </ul> <p>Example:</p> <pre><code>DJANGO_REDIS_CONNECTION_FACTORY = \"django_redis.pool.SentinelConnectionFactory\"\nCACHES = {\n\"default\": {\n\"BACKEND\": \"django_redis.cache.RedisCache\",\n\"LOCATION\": \"redis://nautobot/0\",  # in this context 'nautobot' is the redis master/service name\n\"OPTIONS\": {\n\"CLIENT_CLASS\": \"django_redis.client.SentinelClient\",\n\"CONNECTION_POOL_CLASS\": \"redis.sentinel.SentinelConnectionPool\",\n\"PASSWORD\": \"\",\n\"SENTINEL_KWARGS\": {\n\"password\": \"\",  # likely the same password from above\n},\n\"SENTINELS\": [\n(\"mysentinel.redis.example.com\", 26379),\n(\"othersentinel.redis.example.com\", 26379),\n(\"thirdsentinel.redis.example.com\", 26379)\n],\n},\n},\n}\n</code></pre> <p>Note</p> <p>It is permissible to use Sentinel for only one database and not the other, see <code>RQ_QUEUES</code> for details.</p> <p>For more details on configuring django-redis with Redis Sentinel, please see the documentation for Django Redis.</p>"},{"location":"additional-features/caching.html#django-cacheops-sentinel-configuration","title":"<code>django-cacheops</code> Sentinel Configuration","text":"<p>Notable settings:</p> <ul> <li><code>locations</code>: List of tuples or tuple of tuples with each inner tuple containing the name or IP address of the Redis server and port for each sentinel instance to connect to</li> <li><code>service_name</code>: the master/service name in redis sentinel</li> <li>Additional parameters may be specified in the <code>CACHEOPS_SENTINEL</code> dictionary which are passed directly to Sentinel</li> </ul> <p>Note</p> <p><code>locations</code> for <code>django-cacheops</code> has a different meaning than the <code>LOCATION</code> value for <code>django-redis</code></p> <p>Warning</p> <p><code>CACHEOPS_REDIS</code> and <code>CACHEOPS_SENTINEL</code> are mutually exclusive and will result in an error if both are set.</p> <p>Example:</p> <pre><code>CACHEOPS_REDIS = False\nCACHEOPS_SENTINEL = {\n\"db\": 1,\n\"locations\": [\n(\"mysentinel.redis.example.com\", 26379),\n(\"othersentinel.redis.example.com\", 26379),\n(\"thirdsentinel.redis.example.com\", 26379)\n],\n\"service_name\": \"nautobot\",\n\"socket_timeout\": 10,\n\"sentinel_kwargs\": {\n\"password\": \"\"\n},\n\"password\": \"\",\n# Everything else is passed to `Sentinel()`\n}\n</code></pre> <p>For more details on how to configure Cacheops to use Redis Sentinel see the documentation for Cacheops setup.</p>"},{"location":"additional-features/caching.html#celery-sentinel-configuration","title":"<code>celery</code> Sentinel Configuration","text":"<p>Note</p> <p>Celery is not directly related caching but it does utilize Redis, therefore in more advanced deployments if Redis Sentinel is required for caching, Celery must also be configured to use Redis Sentinel to high availability.</p> <p>Celery Sentinel configuration is controlled by four settings within your <code>nautobot_config.py</code>:</p> <ul> <li><code>CELERY_BROKER_URL</code></li> <li><code>CELERY_BROKER_TRANSPORT_OPTIONS</code></li> <li><code>CELERY_RESULT_BACKEND</code></li> <li><code>CELERY_RESULT_BACKEND_TRANSPORT_OPTIONS</code></li> </ul> <p>By default Nautobot configures the celery broker and results backend with the same settings, so this pattern is mirrored here.</p> <pre><code>redis_password = \"\"\nsentinel_password = \"\"\nCELERY_BROKER_URL = (\nf\"sentinel://:{redis_password}@mysentinel.redis.example.com:26379;\"\nf\"sentinel://:{redis_password}@othersentinel.redis.example.com:26379;\"\n# The final entry must not have the `;` delimiter\nf\"sentinel://:{redis_password}@thirdsentinel.redis.example.com:26379\"\n)\nCELERY_BROKER_TRANSPORT_OPTIONS = {\n\"master_name\": \"nautobot\",\n\"sentinel_kwargs\": {\"password\": sentinel_password},\n}\nCELERY_RESULT_BACKEND = CELERY_BROKER_URL\nCELERY_RESULT_BACKEND_TRANSPORT_OPTIONS = CELERY_BROKER_TRANSPORT_OPTIONS\n</code></pre> <p>Please see the official Celery documentation for more information on how to configure Celery to use Redis Sentinel.</p> <p>Please also see the Nautobot documentation on required settings for Celery for additional information.</p>"},{"location":"additional-features/change-logging.html","title":"Change Logging","text":"<p>Every time an object in Nautobot is created, updated, or deleted, a serialized copy of that object is saved to the database, along with meta data including the current time and the user associated with the change. These records form a persistent record of changes both for each individual object as well as Nautobot as a whole. The global change log can be viewed by navigating to Extensibility &gt; Logging &gt; Change Log.</p> <p>A serialized representation of the instance being modified is included in JSON format. This is similar to how objects are conveyed within the REST API, but does not include any nested representations. For instance, the <code>tenant</code> field of a site will record only the tenant's ID, not a representation of the tenant.</p> <p>When a request is made, a UUID is generated and attached to any change records resulting from that request. For example, editing three objects in bulk will create a separate change record for each  (three in total), and each of those objects will be associated with the same UUID. This makes it easy to identify all the change records resulting from a particular request.</p> <p>Change records are exposed in the API via the read-only endpoint <code>/api/extras/object-changes/</code>. They may also be exported via the web UI in CSV format.</p> <p>Change records can also be accessed via the read-only GraphQL endpoint <code>/api/graphql/</code>. An example query to fetch change logs by action:</p> <pre><code>{ \n  query: object_changes(action: \"created\") {\n    action\n    user_name\n    object_repr\n  }\n}\n</code></pre>"},{"location":"additional-features/config-contexts.html","title":"Configuration Contexts &amp; Schemas","text":""},{"location":"additional-features/config-contexts.html#configuration-contexts","title":"Configuration Contexts","text":"<p>Sometimes it is desirable to associate additional data with a group of devices or virtual machines to aid in automated configuration. For example, you might want to associate a set of syslog servers for all devices within a particular region. Context data enables the association of extra user-defined data with devices and virtual machines grouped by one or more of the following assignments:</p> <ul> <li>Region</li> <li>Site</li> <li>Role</li> <li>Device type</li> <li>Platform</li> <li>Cluster group</li> <li>Cluster</li> <li>Tenant group</li> <li>Tenant</li> <li>Tag</li> </ul> <p>Added in version 1.5.0</p> <ul> <li>Device redundancy group</li> </ul> <p>Added in version 1.5.12</p> <ul> <li>Dynamic group - Need to set <code>settings.CONFIG_CONTEXT_DYNAMIC_GROUPS_ENABLED</code> to <code>True</code>. See notes here</li> </ul> <p>Context data not specifically assigned to one or more of the above groups is by default associated with all devices and virtual machines.</p> <p>Configuration contexts may be managed within Nautobot via the UI and/or API; they may also be managed externally to Nautobot in a Git repository if desired.</p>"},{"location":"additional-features/config-contexts.html#hierarchical-rendering","title":"Hierarchical Rendering","text":"<p>Context data is arranged hierarchically, so that data with a higher weight can be entered to override lower-weight data. Multiple instances of data are automatically merged by Nautobot to present a single dictionary for each object.</p> <p>For example, suppose we want to specify a set of syslog and NTP servers for all devices within a region. We could create a config context instance with a weight of 1000 assigned to the region, with the following JSON data:</p> <pre><code>{\n\"ntp-servers\": [\n\"172.16.10.22\",\n\"172.16.10.33\"\n],\n\"syslog-servers\": [\n\"172.16.9.100\",\n\"172.16.9.101\"\n]\n}\n</code></pre> <p>But suppose there's a problem at one particular site within this region preventing traffic from reaching the regional syslog server. Devices there need to use a local syslog server instead of the two defined above. We'll create a second config context assigned only to that site with a weight of 2000 and the following data:</p> <pre><code>{\n\"syslog-servers\": [\n\"192.168.43.107\"\n]\n}\n</code></pre> <p>When the context data for a device at this site is rendered, the second, higher-weight data overwrite the first, resulting in the following:</p> <pre><code>{\n\"ntp-servers\": [\n\"172.16.10.22\",\n\"172.16.10.33\"\n],\n\"syslog-servers\": [\n\"192.168.43.107\"\n]\n}\n</code></pre> <p>Data from the higher-weight context overwrites conflicting data from the lower-weight context, while the non-conflicting portion of the lower-weight context (the list of NTP servers) is preserved.</p>"},{"location":"additional-features/config-contexts.html#local-context-data","title":"Local Context Data","text":"<p>Devices and virtual machines may also have a local config context defined. This local context will always take precedence over any separate config context objects which apply to the device/VM. This is useful in situations where we need to call out a specific deviation in the data for a particular object.</p> <p>Warning</p> <p>If you find that you're routinely defining local context data for many individual devices or virtual machines, custom fields may offer a more effective solution.</p>"},{"location":"additional-features/config-contexts.html#config-context-schemas","title":"Config Context Schemas","text":"<p>Added in version 1.1.0</p> <p>While config contexts allow for arbitrary data structures to be stored within Nautobot, at scale it is desirable to apply validation constraints to that data to ensure its consistency and to avoid data entry errors. To service this need, Nautobot supports optionally backing config contexts with JSON Schemas for validation. These schema are managed via the config context schema model and are optionally linked to config context instances, in addition to devices and virtual machines for the purpose of validating their local context data.</p> <p>A JSON Schema is capable of validating the structure, format, and type of your data, and acts as a form of documentation useful in a number of automation use cases.</p> <p>A config context is linked to a single schema object and thus they are meant to model individual units of the overall context. In this way, they validate each config context object, not the fully rendered context as viewed on a particular device or virtual machine.</p> <p>When a config context schema is employed on a config or local context, the data therein is validated when the object in question is saved. Should validation against the schema fail, a relevant error message is returned to the user and they are prevented from saving the data until the validation issue has been resolved.</p> <p>Here is an example JSON Schema which can be used to validate an NTP server config context:</p> <pre><code>{\n\"type\": \"object\",\n\"properties\": {\n\"ntp-servers\": {\n\"type\": \"array\",\n\"minItems\": 2,\n\"maxItems\": 2,\n\"items\": {\n\"type\": \"string\",\n\"format\": \"ipv4\"\n}\n}\n},\n\"additionalProperties\": false\n}\n</code></pre> <p>This schema would allow a config context with this data to pass:</p> <pre><code>{\n\"ntp-servers\": [\n\"172.16.10.22\",\n\"172.16.10.33\"\n]\n}\n</code></pre> <p>However it would not allow any of these examples to be saved:</p> <pre><code>{\n\"ntp-servers\": [\n\"172.16.10.22\"\n]\n}\n</code></pre> <pre><code>{\n\"ntp\": \"172.16.10.22,172.16.10.22\"\n}\n</code></pre> <pre><code>{\n\"ntp-servers\": [\n\"172.16.10.22\",\n\"172.16.10.33\",\n\"5.5.4\"\n]\n}\n</code></pre> <p>For more information on JSON Schemas and specifically type formats for specialized objects like IP addresses, hostnames, and more see the JSON Schema docs.</p> <p>Note</p> <p>Config Context Schemas currently support the JSON Schema draft 7 specification.</p>"},{"location":"additional-features/graphql.html","title":"GraphQL","text":"<p>Nautobot supports a Read-Only GraphQL interface that can be used to query most information present in the database. The GraphQL interface is available at the endpoint <code>graphql/</code> for a human to explore and GraphQL can be queried as an API via the endpoint <code>api/graphql/</code>. Currently the support for GraphQL is limited to <code>query</code>, other operation type like <code>mutations</code> and <code>subscriptions</code> are not supported. Additionally, GraphQL variables are supported.</p> <p>The GraphQL implementation is leveraging the <code>graphene-django</code> library and supports the standard GraphQL language.</p>"},{"location":"additional-features/graphql.html#how-to-use-the-graphql-interface","title":"How to use the GraphQL interface","text":"<p>The GraphQL interface can be used to query multiple tables at once in a single request. In GraphQL, only the information requested will be returned which can be contrasted to REST APIs. In the example below, this query will return the name of all <code>interfaces</code> attached to the device <code>nyc-sw01</code> along with all <code>ip_addresses</code> attached to those interfaces.</p> <pre><code>query {\n  devices(name: \"nyc-sw01\") {\n    name\n    interfaces {\n      name\n      ip_addresses {\n        address\n      }\n    }\n  }\n}\n</code></pre> <p>Result</p> <pre><code>{\n\"data\": {\n\"devices\": [\n{\n\"name\": \"nyc-sw01\",\n\"interfaces\": [\n{\n\"name\": \"xe-0/0/0\",\n\"ip_addresses\": [\n{\n\"address\": \"10.52.0.1/30\"\n}\n]\n},\n{\n\"name\": \"xe-0/0/1\",\n\"ip_addresses\": []\n}\n]\n}\n]\n}\n}\n</code></pre> <p>It is possible to explore the Graph and create some queries in a human friendly UI at the endpoint <code>graphql/</code>. This interface (called <code>graphqli</code>) provides a great playground to build new queries as it provides full autocompletion and type validation.</p>"},{"location":"additional-features/graphql.html#querying-the-graphql-interface-over-the-rest-api","title":"Querying the GraphQL interface over the rest API","text":"<p>It is possible to query the GraphQL interface via the rest API as well, the endpoint is available at <code>api/graphql/</code> and supports the same Token based authentication as all other Nautobot APIs.</p> <p>A GraphQL Query must be encapsulated in a JSON payload with the <code>query</code> key and sent with a POST request. Optionally it is possible to provide a list of <code>variables</code> in the same payload as presented below.</p> <pre><code>{\n\"query\": \"query ($id: Int!) { device(id: $id) { name }}\",\n\"variables\": { \"id\": 3}\n}\n</code></pre>"},{"location":"additional-features/graphql.html#working-with-custom-fields","title":"Working with Custom Fields","text":"<p>GraphQL custom fields data data is provided in two formats, a \"greedy\" and a \"prefixed\" format. The greedy format provides all custom field data associated with this record under a single \"custom_field_data\" key. This is helpful in situations where custom fields are likely to be added at a later date, the data will simply be added to the same root key and immediately accessible without the need to adjust the query.</p> <pre><code>query {\n  sites {\n    name\n    custom_field_data\n  }\n}\n</code></pre> <p>Result</p> <pre><code>{\n\"data\": {\n\"sites\": [\n{\n\"name\": \"nyc-site-01\",\n\"custom_field_data\": {\n\"site_type\": \"large\"\n}\n},\n{\n\"name\": \"nyc-site-02\",\n\"custom_field_data\": {\n\"site_type\": \"small\"\n}\n}\n]\n}\n}\n</code></pre> <p>Additionally, by default, all custom fields in GraphQL will be prefixed with <code>cf_</code>. A custom field name <code>site_type</code> will appear in GraphQL as <code>cf_site_type</code> as an example. The prefix can be changed by setting the value of <code>GRAPHQL_CUSTOM_FIELD_PREFIX</code>.</p> <pre><code>query {\n  sites {\n    name\n    cf_site_type\n  }\n}\n</code></pre> <p>Result</p> <pre><code>{\n\"data\": {\n\"sites\": [\n{\n\"name\": \"nyc-site-01\",\n\"cf_site_type\": \"large\"\n},\n{\n\"name\": \"nyc-site-02\",\n\"cf_site_type\": \"small\"\n}\n]\n}\n}\n</code></pre> <p>Important</p> <p>Custom Fields with the prefixed <code>cf_</code> are only available in GraphQL after the custom field is created and the web service is restarted.</p>"},{"location":"additional-features/graphql.html#working-with-relationships","title":"Working with Relationships","text":"<p>Defined relationships are available in GraphQL as well. In most cases, the associated objects for a given relationship will be available under the key <code>rel_&lt;relationship_slug&gt;</code>. The one exception is for relationships between objects of the same type that are not defined as symmetric; for these relationships it's important to be able to distinguish between the two \"sides\" of the relationship, and so the associated objects will be available under <code>rel_&lt;relationship_slug&gt;_source</code> and/or <code>rel_&lt;relationship_slug&gt;_destination</code> as appropriate.</p> <p>Important</p> <p>Relationships are only available in GraphQL after the relationship is created and the web service is restarted.</p> <pre><code>query {\n  ip_addresses {\n    address\n    rel_peer_address {\n      address\n    }\n    rel_parent_child_source {\n      address\n    }\n    rel_parent_child_destination {\n      address\n    }\n  }\n}\n</code></pre> <p>Result</p> <pre><code>{\n\"data\": {\n\"ip_addresses\": [\n{\n\"address\": \"10.1.1.1/24\",\n\"rel_peer_address\": {\n\"address\": \"10.1.1.2/24\"\n},\n\"rel_parent_child_source\": null,\n\"rel_parent_child_destination\": [\n{\n\"address\": \"10.1.1.1/30\"\n},\n{\n\"address\": \"10.1.1.1/32\"\n}\n]\n},\n{\n\"address\": \"10.1.1.1/30\",\n\"rel_peer_address\": null,\n\"rel_parent_child_source\": {\n\"address\": \"10.1.1.1/24\"\n},\n\"rel_parent_child_destination\": []\n},\n{\n\"address\": \"10.1.1.1/32\",\n\"rel_peer_address\": null,\n\"rel_parent_child_source\": {\n\"address\": \"10.1.1.1/24\"\n},\n\"rel_parent_child_destination\": []\n},\n{\n\"address\": \"10.1.1.2/24\",\n\"rel_peer_address\": {\n\"address\": \"10.1.1.1/24\"\n},\n\"rel_parent_child_source\": null,\n\"rel_parent_child_destination\": []\n}\n]\n}\n}\n</code></pre>"},{"location":"additional-features/graphql.html#working-with-computed-fields","title":"Working with Computed Fields","text":"<p>By default, all custom fields in GraphQL will be prefixed with <code>cpf_</code>. A computed field name <code>ip_ptr_record</code> will appear in GraphQL as <code>cpf_ip_ptr_record</code> as an example. The prefix can be changed by setting the value of <code>GRAPHQL_COMPUTED_FIELD_PREFIX</code>.</p> <pre><code>{\n  ip_addresses {\n    address\n    dns_name\n    cpf_ip_ptr_record\n  }\n}\n</code></pre> <p>Result</p> <pre><code>{\n\"data\": {\n\"ip_addresses\": [\n{\n\"address\": \"10.0.0.0/32\",\n\"dns_name\": \"ip-10-0-0-0.server.atl01.atc.nautobot.com\",\n\"cpf_ip_ptr_record\": \"0.0.0.10.in-addr.arpa\"\n},\n{\n\"address\": \"10.0.1.0/32\",\n\"dns_name\": \"ip-10-0-1-0.server.atl01.atc.nautobot.com\",\n\"cpf_ip_ptr_record\": \"0.1.0.10.in-addr.arpa\"\n}\n]\n}\n}\n</code></pre> <p>Important</p> <p>Computed Fields with the prefixed <code>cpf_</code> are only available in GraphQL after the computed field is created and the web service is restarted.</p>"},{"location":"additional-features/graphql.html#saved-queries","title":"Saved Queries","text":"<p>Added in version 1.1.0</p> <p>Queries can now be stored inside of Nautobot, allowing the user to easily rerun previously defined queries.</p> <p>Inside of Extensibility -&gt; Data Management -&gt; GraphQL Queries, there are views to create and manage GraphQL queries.</p> <p>Saved queries can be executed from the detailed query view or via a REST API request. The queries can also be populated from the detailed query view into GraphiQL by using the \"Open in GraphiQL\" button. Additionally, in the GraphiQL UI, there is now a menu item, \"Queries\", which can be used to populate GraphiQL with any previously saved query.</p> <p>To execute a stored query via the REST API, a POST request can be sent to <code>/api/extras/graphql-queries/[slug]/run/</code>. Any GraphQL variables required by the query can be passed in as JSON data within the request body.</p>"},{"location":"additional-features/healthcheck.html","title":"Healthcheck Endpoint","text":"<p>Nautobot includes a health check endpoint <code>/health</code> which utilizes the django-health-check project and some custom health checks (database connection and cache availability).  This endpoint is designed for use by an optional load balancer placed in front of Nautobot to determine the health of the Nautobot application server.  By default the health check enables checks for the following:</p> <ul> <li>Database Backend</li> <li>Caching Backend</li> <li>Storage Backend</li> </ul> <p>In addition to exposing a health check URL the <code>nautobot-server</code> utility also provides a <code>health_check</code> management command which provides the same information as the web interface.</p> <p>Additional health checks are available as part of the django-health-check project and can be added to the <code>EXTRA_INSTALLED_APPS</code> configuration variable as desired.  The Nautobot server is healthy if the HTTP response is 200 from a GET request to <code>/health</code>, a web UI is also available at the same endpoint for human consumption.</p>"},{"location":"additional-features/job-scheduling-and-approvals.html","title":"Job Scheduling and Approvals","text":"<p>Added in version 1.2.0</p> <p>Oftentimes jobs will need to be run at a later date or periodically, or require approval from someone before they can be started. To this end, Nautobot offers facilities for scheduling and approving jobs.</p>"},{"location":"additional-features/job-scheduling-and-approvals.html#job-scheduling","title":"Job Scheduling","text":"<p>Jobs can be scheduled to be run immediately, at some point in the future, or at an interval.</p> <p>Jobs can be scheduled through the UI or the API.</p> <p>Warning</p> <p>A Job must be enabled and cannot have has_sensitive_variables set to <code>True</code> in order to be scheduled. If these requirements are not met, a warning banner will appear on the run Job view with the reason why Job Scheduling is not an option.</p>"},{"location":"additional-features/job-scheduling-and-approvals.html#scheduling-via-the-ui","title":"Scheduling via the UI","text":"<p>The Job Scheduling views can be accessed via the navigation at <code>Jobs &gt; Jobs</code>, selecting a Job as appropriate.</p> <p>The UI allows you to select a scheduling type. Further fields will be displayed as appropriate for that schedule type.</p> <p>If <code>Recurring custom</code> is chosen, you can schedule the recurrence in the <code>Crontab</code> field in crontab syntax.</p> <p>If the job requires no approval, it will then be added to the queue of scheduled jobs or run immediately. Otherwise, the job will be added to the approval queue where it can be approved by other users.</p>"},{"location":"additional-features/job-scheduling-and-approvals.html#scheduling-via-the-api","title":"Scheduling via the API","text":"<p>Jobs can also be scheduled via the REST API. The endpoint used for this is the regular job endpoint; specifying the optional <code>schedule</code> parameter will act just as scheduling in the UI.</p> <pre><code>curl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=1.3; indent=4\" \\\nhttp://nautobot/api/extras/jobs/$JOB_ID/run/ \\\n--data '{\"schedule\": {\"name\": \"test\", \"interval\": \"future\", \"start_time\": \"2030-01-01T01:00:00.000Z\"}}'\n</code></pre> <p>For custom interval, a <code>crontab</code> parameter must be added.</p> <p><code>start_time</code> becomes optional when <code>interval</code> is set to <code>custom</code>.</p> <p><code>--data '{\"schedule\": {\"name\": \"test\", \"interval\": \"custom\", \"start_time\": \"2030-01-01T01:00:00.000Z\", \"crontab\": \"*/15 * * * *\"}}'</code></p>"},{"location":"additional-features/job-scheduling-and-approvals.html#job-approvals","title":"Job Approvals","text":"<p>Jobs that have <code>approval_required</code> set to <code>True</code> on their <code>Meta</code> object require another user to approve a scheduled job.</p> <p>Warning</p> <p>Requiring approval for execution of Job Hooks by setting the <code>Meta.approval_required</code> attribute to <code>True</code> on your <code>JobHookReceiver</code> subclass is not supported. The value of this attribute will be ignored. Support for requiring approval of Job Hooks will be added in a future release.</p> <p>Scheduled jobs can be approved or denied via the UI and API by any user that has the <code>extras.approve_job</code> permission for the job in question, as well as the appropriate <code>extras.change_scheduledjob</code> and/or <code>extras.delete_scheduledjob</code> permissions.</p> <p>Changed in version 1.3.0</p> <p>The <code>extras.approve_job</code> permission is now required for job approvers.</p> <p>Note</p> <p>Jobs that are past their scheduled run date can still be approved, but the approver will be asked to confirm the operation.</p>"},{"location":"additional-features/job-scheduling-and-approvals.html#approval-via-the-ui","title":"Approval via the UI","text":"<p>The queue of jobs that need approval can be found under <code>Jobs &gt; Job Approval Queue</code>. This view lists all currently requested jobs that need approval before they are run. To approve a job, select it and click the button to approve. Please note that you will be  asked for confirmation if a job is being approved that is past its scheduled date and time.</p> <p>If the approver is unsure what a job would do, a dry run can also be started via that same view.</p>"},{"location":"additional-features/job-scheduling-and-approvals.html#approval-via-the-api","title":"Approval via the API","text":"<p>Approvals can also be given via the REST API. The endpoints to approve, deny, and dry run a scheduled job are found on the scheduled job endpoint under <code>approve</code>, <code>deny</code>, and <code>dry-run</code>, respectively.</p> <pre><code>curl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=1.3; indent=4\" \\\nhttp://nautobot/api/extras/scheduled-jobs/$JOB_ID/approve?force=true\n</code></pre> <p>The approval endpoint additionally provides a <code>force</code> query parameter that needs to be set if a job is past its scheduled datetime. This mimics the confirmation dialog in the UI.</p>"},{"location":"additional-features/jobs.html","title":"Jobs","text":"<p>Jobs are a way for users to execute custom logic on demand from within the Nautobot UI. Jobs can interact directly with Nautobot data to accomplish various data creation, modification, and validation tasks, such as:</p> <ul> <li>Automatically populate new devices and cables in preparation for a new site deployment</li> <li>Create a range of new reserved prefixes or IP addresses</li> <li>Fetch data from an external source and import it to Nautobot</li> <li>Check and report whether all top-of-rack switches have a console connection</li> <li>Check and report whether every router has a loopback interface with an assigned IP address</li> <li>Check and report whether all IP addresses have a parent prefix</li> </ul> <p>...and so on. Jobs are Python code and exist outside of the official Nautobot code base, so they can be updated and changed without interfering with the core Nautobot installation. And because they're completely customizable, there's practically no limit to what a job can accomplish.</p> <p>Note</p> <p>Jobs unify and supersede the functionality previously provided in NetBox by \"custom scripts\" and \"reports\". Jobs are backwards-compatible for now with the <code>Script</code> and <code>Report</code> class APIs, but you are urged to move to the new <code>Job</code> class API described below. Jobs may be optionally marked as read-only which equates to the <code>Report</code> functionally, but in all cases, user input is supported via job variables.</p>"},{"location":"additional-features/jobs.html#writing-jobs","title":"Writing Jobs","text":"<p>Jobs may be installed in one of three ways:</p> <ul> <li>Manually installed as files in the <code>JOBS_ROOT</code> path (which defaults to <code>$NAUTOBOT_ROOT/jobs/</code>).<ul> <li>The <code>JOBS_ROOT</code> directory must contain a file named <code>__init__.py</code>. Do not delete this file.</li> <li>Each file created within this path is considered a separate module; there is no support for cross-file dependencies (such as a file acting as a common \"library\" module of functions shared between jobs) for files installed in this way.</li> </ul> </li> <li>Imported from an external Git repository.<ul> <li>The repository's <code>jobs/</code> directory must contain a file named <code>__init__.py</code>.</li> <li>Each Job file in the repository is considered a separate module; there is no support for cross-file dependencies (such as a file acting as a common \"library\" module of functions shared between jobs) for files installed in this way.</li> </ul> </li> <li>Packaged as part of a plugin.<ul> <li>Jobs installed this way are part of the plugin module and can import code from elsewhere in the plugin or even have dependencies on other packages, if needed, via the standard Python packaging mechanisms.</li> </ul> </li> </ul> <p>In any case, each module holds one or more Jobs (Python classes), each of which serves a specific purpose. The logic of each job can be split into a number of distinct methods, each of which performs a discrete portion of the overall job logic.</p> <p>For example, we can create a module named <code>devices.py</code> to hold all of our jobs which pertain to devices in Nautobot. Within that module, we might define several jobs. Each job is defined as a Python class inheriting from <code>extras.jobs.Job</code>, which provides the base functionality needed to accept user input and log activity.</p> <p>Warning</p> <p>Make sure you are not inheriting <code>extras.jobs.models.Job</code> instead, otherwise Django will think you want to define a new database model.</p> <pre><code>from nautobot.extras.jobs import Job\nclass CreateDevices(Job):\n...\nclass DeviceConnectionsReport(Job):\n...\nclass DeviceIPsReport(Job):\n...\n</code></pre> <p>Each job class will implement some or all of the following components:</p> <ul> <li>Module and class attributes, providing for default behavior, documentation and discoverability</li> <li>a set of variables for user input via the Nautobot UI (if your job requires any user inputs)</li> <li>a <code>run()</code> method, which is executed first and receives the user input values, if any</li> <li>any number of <code>test_*()</code> methods, which will be invoked next in order of declaration. Log messages generated by the job will be grouped together by the test method they were invoked from.</li> <li>a <code>post_run()</code> method, which is executed last and can be used to handle any necessary cleanup or final events (such as sending an email or triggering a webhook). The status of the overall job is available at this time as <code>self.failed</code> and the <code>JobResult</code> data object is available as <code>self.result</code>.</li> </ul> <p>You can implement the entire job within the <code>run()</code> function, but for more complex jobs, you may want to provide more granularity in the output and logging of activity. For this purpose, you can implement portions of the logic as <code>test_*()</code> methods (i.e., methods whose name begins with <code>test_*</code>) and/or a <code>post_run()</code> method. Log messages generated by the job logging APIs (more below on this topic) will be grouped together according to their base method (<code>run</code>, <code>test_a</code>, <code>test_b</code>, ..., <code>post_run</code>) which can aid in understanding the operation of the job.</p> <p>Note</p> <p>Your job can of course define additional Python methods to compartmentalize and reuse logic as required; however the <code>run</code>, <code>test_*</code>, and <code>post_run</code> methods are the only ones that will be automatically invoked by Nautobot.</p> <p>It's important to understand that jobs execute on the server asynchronously as background tasks; they log messages and report their status to the database by updating <code>JobResult</code> records and creating <code>JobLogEntry</code> records.</p> <p>Note</p> <p>When actively developing a Job utilizing a development environment it's important to understand that the \"automatically reload when code changes are detected\" debugging functionality provided by <code>nautobot-server runserver</code> does not automatically restart the Celery <code>worker</code> process when code changes are made; therefore, it is required to restart the <code>worker</code> after each update to your Job source code or else it will continue to run the version of the Job code that was present when it first started.</p> <p>Additionally, as of Nautobot 1.3, the Job database records corresponding to installed Jobs are not automatically refreshed when the development server auto-restarts. If you make changes to any of the class and module metadata attributes described in the following sections, the database will be refreshed to reflect these changes only after running <code>nautobot-server migrate</code> or <code>nautobot-server post_upgrade</code> (recommended) or if you manually edit a Job database record to force it to be refreshed.</p>"},{"location":"additional-features/jobs.html#module-metadata-attributes","title":"Module Metadata Attributes","text":""},{"location":"additional-features/jobs.html#name-grouping","title":"<code>name</code> (Grouping)","text":"<p>You can define a global constant called <code>name</code> within a job module (the Python file which contains one or more job classes) to set the default grouping under which jobs in this module will be displayed in the Nautobot UI. If this value is not defined, the module's file name will be used. This \"grouping\" value may also be defined or overridden when editing Job records in the database.</p> <p>Note</p> <p>In some UI elements and API endpoints, the module file name is displayed in addition to or in place of this attribute, so even if defining this attribute, you should still choose an appropriately explanatory file name as well.</p>"},{"location":"additional-features/jobs.html#class-metadata-attributes","title":"Class Metadata Attributes","text":"<p>Job-specific attributes may be defined under a class named <code>Meta</code> within each job class you implement. All of these are optional, but encouraged.</p>"},{"location":"additional-features/jobs.html#name","title":"<code>name</code>","text":"<p>This is the human-friendly name of your job, as will be displayed in the Nautobot UI. If not set, the class name will be used.</p> <p>Note</p> <p>In some UI elements and API endpoints, the class name is displayed in addition to or in place of this attribute, so even if defining this attribute, you should still choose an appropriately explanatory class name as well.</p>"},{"location":"additional-features/jobs.html#description","title":"<code>description</code>","text":"<p>An optional human-friendly description of what this job does. This can accept either plain text or Markdown-formatted text. It can also be multiple lines:</p> <pre><code>class ExampleJob(Job):\nclass Meta:\ndescription = \"\"\"\n            This job does a number of interesting things.\n             1. It hacks the Gibson\n             2. It immanentizes the eschaton\n             3. It's a floor wax *and* a dessert topping\n        \"\"\"\n</code></pre> <p>If you code a multi-line description, the first line only will be used in the description column of the jobs list, while the full description will be rendered in the job detail view, submission, approval, and results pages.</p>"},{"location":"additional-features/jobs.html#approval_required","title":"<code>approval_required</code>","text":"<p>Default: <code>False</code></p> <p>A boolean that will mark this job as requiring approval from another user to be run. For more details on approvals, please refer to the section on scheduling and approvals.</p>"},{"location":"additional-features/jobs.html#commit_default","title":"<code>commit_default</code>","text":"<p>Default: <code>True</code></p> <p>The checkbox to commit database changes when executing a job is checked by default in the Nautobot UI. You can set <code>commit_default</code> to <code>False</code> under the <code>Meta</code> class if you want this option to instead be unchecked by default.</p> <pre><code>class MyJob(Job):\nclass Meta:\ncommit_default = False\n</code></pre>"},{"location":"additional-features/jobs.html#field_order","title":"<code>field_order</code>","text":"<p>Default: <code>[]</code></p> <p>A list of strings (field names) representing the order your job variables should be rendered as form fields in the job submission UI. If not defined, the variables will be listed in order of their definition in the code. If variables are defined on a parent class and no field order is defined, the parent class variables will appear before the subclass variables.</p>"},{"location":"additional-features/jobs.html#has_sensitive_variables","title":"<code>has_sensitive_variables</code>","text":"<p>Added in version 1.3.10</p> <p>Default: <code>True</code></p> <p>Unless set to False, it prevents the job's input parameters from being saved to the database. This defaults to True so as to protect against inadvertent database exposure of input parameters that may include sensitive data such as passwords or other user credentials. Review whether each job's inputs contain any such variables before setting this to False; if a job does contain sensitive inputs, if possible you should consider whether the job could be re-implemented using Nautobot's <code>Secrets</code> feature as a way to ensure that the sensitive data is not directly provided as a job variable at all.</p> <p>Important notes about jobs with sensitive variables:</p> <ul> <li>Such jobs cannot be scheduled to run in the future or on a recurring schedule (as scheduled jobs must by necessity store their variables in the database for future reference).</li> <li>Jobs with sensitive variables cannot be marked as requiring approval (as jobs pending approval must store their variables in the database until approved).</li> </ul>"},{"location":"additional-features/jobs.html#hidden","title":"<code>hidden</code>","text":"<p>Default: <code>False</code></p> <p>A Boolean that if set to <code>True</code> prevents the job from being displayed by default in the list of Jobs in the Nautobot UI.</p> <p>Since the jobs execution framework is designed to be generic, there may be several technical jobs defined by users which interact with or are invoked by external systems. In such cases, these jobs are not meant to be executed by a human and likely do not make sense to expose to end users for execution, and thus having them exposed in the UI at all is extraneous.</p> <p>Important notes about hidden jobs:</p> <ul> <li>This is merely hiding them by default from the web interface. It is NOT a security feature.</li> <li>In the Jobs list view it is possible to filter to \"Hidden: (no selection)\" or even \"Hidden: Yes\" to list the hidden jobs.</li> <li>All Job UI and REST API endpoints still exist for hidden jobs and can be accessed by any user who is aware of their existence.</li> <li>Hidden jobs can still be executed through the UI or the REST API given the appropriate URL.</li> <li>Results for hidden jobs will still appear in the Job Results list after they are run.</li> </ul>"},{"location":"additional-features/jobs.html#read_only","title":"<code>read_only</code>","text":"<p>Added in version 1.1.0</p> <p>Default: <code>False</code></p> <p>A boolean that designates whether the job is able to make changes to data in the database. The value defaults to <code>False</code> but when set to <code>True</code>, any data modifications executed from the job's code will be automatically aborted at the end of the job. The job input form is also modified to remove the <code>commit</code> checkbox as it is irrelevant for read-only jobs. When a job is marked as read-only, log messages that are normally automatically emitted about the DB transaction state are not included because no changes to data are allowed. Note that user input may still be optionally collected with read-only jobs via job variables, as described below.</p>"},{"location":"additional-features/jobs.html#soft_time_limit","title":"<code>soft_time_limit</code>","text":"<p>Added in version 1.3.0</p> <p>An int or float value, in seconds, which can be used to override the default soft time limit for a job task to complete.</p> <p>The <code>celery.exceptions.SoftTimeLimitExceeded</code> exception will be raised when this soft time limit is exceeded. The job task can catch this to clean up before the hard time limit (10 minutes by default) is reached:</p> <pre><code>from celery.exceptions import SoftTimeLimitExceeded\nfrom nautobot.extras.jobs import Job\nclass ExampleJobWithSoftTimeLimit(Job):\nclass Meta:\nname = \"Soft Time Limit\"\ndescription = \"Set a soft time limit of 10 seconds`\"\nsoft_time_limit = 10\ndef run(self, data, commit):\ntry:\n# code which might take longer than 10 seconds to run\njob_code()\nexcept SoftTimeLimitExceeded:\n# any clean up code\ncleanup_in_a_hurry()\n</code></pre>"},{"location":"additional-features/jobs.html#task_queues","title":"<code>task_queues</code>","text":"<p>Added in version 1.5.0</p> <p>Default: <code>[]</code></p> <p>A list of task queue names that the job can be routed to. An empty list will default to only allowing the user to select the default queue (<code>default</code> unless changed by an administrator). The first queue in the list will be used if a queue is not specified in a job run API call.</p> <p>Note</p> <p>A worker must be listening on the requested queue or the job will not run. See the documentation on task queues for more information.</p>"},{"location":"additional-features/jobs.html#template_name","title":"<code>template_name</code>","text":"<p>Added in version 1.4.0</p> <p>A path relative to the job source code containing a Django template which provides additional code to customize the Job's submission form. This template should extend the existing job template, <code>extras/job.html</code>, otherwise the base form and functionality may not be available.</p> <p>A template can provide additional JavaScript, CSS, or even display HTML. A good starting template would be:</p> <pre><code>{% extends 'extras/job.html' %}\n\n{% block extra_styles %}\n    {{ block.super }}\n    &lt;!-- Add additional CSS here. --&gt;\n{% endblock %}\n{% block content %}\n    {{ block.super }}\n    &lt;!-- Add additional HTML here. --&gt;\n{% endblock content %}\n{% block javascript %}\n    {{ block.super }}\n    &lt;!-- Add additional JavaScript here. --&gt;\n{% endblock javascript %}\n</code></pre> <p>For another example checkout the template used in example plugin in the GitHub repo.</p>"},{"location":"additional-features/jobs.html#time_limit","title":"<code>time_limit</code>","text":"<p>Added in version 1.3.0</p> <p>An int or float value, in seconds, which can be used to override the default hard time limit (10 minutes by default) for a job task to complete.</p> <p>Unlike the <code>soft_time_limit</code> above, no exceptions are raised when a <code>time_limit</code> is exceeded. The task will just terminate silently:</p> <pre><code>from nautobot.extras.jobs import Job\nclass ExampleJobWithHardTimeLimit(Job):\nclass Meta:\nname = \"Hard Time Limit\"\ndescription = \"Set a hard time limit of 10 seconds`\"\ntime_limit = 10\ndef run(self, data, commit):\n# code which might take longer than 10 seconds to run\n# this code will fail silently if the time_limit is exceeded\njob_code()\n</code></pre> <p>Note</p> <p>If the <code>time_limit</code> is set to a value less than or equal to the <code>soft_time_limit</code>, a warning log is generated to inform the user that this job will fail silently after the <code>time_limit</code> as the <code>soft_time_limit</code> will never be reached.</p>"},{"location":"additional-features/jobs.html#variables","title":"Variables","text":"<p>Variables allow your job to accept user input via the Nautobot UI, but they are optional; if your job does not require any user input, there is no need to define any variables. Conversely, if you are making use of user input in your job, you must also implement the <code>run()</code> method, as it is the only entry point to your job that has visibility into the variable values provided by the user.</p> <pre><code>from nautobot.extras.jobs import Job, StringVar, IntegerVar, ObjectVar\nclass CreateDevices(Job):\nvar1 = StringVar(...)\nvar2 = IntegerVar(...)\nvar3 = ObjectVar(...)\ndef run(self, data, commit):\n...\n</code></pre> <p>The remainder of this section documents the various supported variable types and how to make use of them.</p>"},{"location":"additional-features/jobs.html#default-variable-options","title":"Default Variable Options","text":"<p>All job variables support the following default options:</p> <ul> <li><code>default</code> - The field's default value</li> <li><code>description</code> - A brief user-friendly description of the field</li> <li><code>label</code> - The field name to be displayed in the rendered form</li> <li><code>required</code> - Indicates whether the field is mandatory (all fields are required by default)</li> <li><code>widget</code> - The class of form widget to use (see the Django documentation)</li> </ul>"},{"location":"additional-features/jobs.html#stringvar","title":"<code>StringVar</code>","text":"<p>Stores a string of characters (i.e. text). Options include:</p> <ul> <li><code>min_length</code> - Minimum number of characters</li> <li><code>max_length</code> - Maximum number of characters</li> <li><code>regex</code> - A regular expression against which the provided value must match</li> </ul> <p>Note that <code>min_length</code> and <code>max_length</code> can be set to the same number to effect a fixed-length field.</p>"},{"location":"additional-features/jobs.html#textvar","title":"<code>TextVar</code>","text":"<p>Arbitrary text of any length. Renders as a multi-line text input field.</p>"},{"location":"additional-features/jobs.html#integervar","title":"<code>IntegerVar</code>","text":"<p>Stores a numeric integer. Options include:</p> <ul> <li><code>min_value</code> - Minimum value</li> <li><code>max_value</code> - Maximum value</li> </ul>"},{"location":"additional-features/jobs.html#booleanvar","title":"<code>BooleanVar</code>","text":"<p>A true/false flag. This field has no options beyond the defaults listed above.</p>"},{"location":"additional-features/jobs.html#choicevar","title":"<code>ChoiceVar</code>","text":"<p>A set of choices from which the user can select one.</p> <ul> <li><code>choices</code> - A list of <code>(value, label)</code> tuples representing the available choices. For example:</li> </ul> <pre><code>CHOICES = (\n('n', 'North'),\n('s', 'South'),\n('e', 'East'),\n('w', 'West')\n)\ndirection = ChoiceVar(choices=CHOICES)\n</code></pre> <p>In the example above, selecting the choice labeled \"North\" will submit the value <code>n</code>.</p>"},{"location":"additional-features/jobs.html#multichoicevar","title":"<code>MultiChoiceVar</code>","text":"<p>Similar to <code>ChoiceVar</code>, but allows for the selection of multiple choices.</p>"},{"location":"additional-features/jobs.html#objectvar","title":"<code>ObjectVar</code>","text":"<p>A particular object within Nautobot. Each ObjectVar must specify a particular model, and allows the user to select one of the available instances. ObjectVar accepts several arguments, listed below.</p> <ul> <li><code>model</code> - The model class</li> <li><code>display_field</code> - The name of the REST API object field to display in the selection list (default: <code>'display'</code>)</li> <li><code>query_params</code> - A dictionary of REST API query parameters to use when retrieving available options (optional)</li> <li><code>null_option</code> - A label representing a \"null\" or empty choice (optional)</li> </ul> <p>The <code>display_field</code> argument is useful in cases where using the <code>display</code> API field is not desired for referencing the object. For example, when displaying a list of IP Addresses, you might want to use the <code>dns_name</code> field:</p> <pre><code>device_type = ObjectVar(\nmodel=IPAddress,\ndisplay_field=\"dns_name\",\n)\n</code></pre> <p>To limit the selections available within the list, additional query parameters can be passed as the <code>query_params</code> dictionary. For example, to show only devices with an \"active\" status:</p> <pre><code>device = ObjectVar(\nmodel=Device,\nquery_params={\n'status': 'active'\n}\n)\n</code></pre> <p>Multiple values can be specified by assigning a list to the dictionary key. It is also possible to reference the value of other fields in the form by prepending a dollar sign (<code>$</code>) to the variable's name. The keys you can use in this dictionary are the same ones that are available in the REST API - as an example it is also possible to filter the <code>Site</code> <code>ObjectVar</code> for its <code>tenant_group_id</code>.</p> <pre><code>region = ObjectVar(\nmodel=Region\n)\ntenant_group = ObjectVar(\nmodel=TenantGroup\n)\nsite = ObjectVar(\nmodel=Site,\nquery_params={\n'region_id': '$region',\n'tenant_group_id': '$tenant_group'\n}\n)\n</code></pre>"},{"location":"additional-features/jobs.html#multiobjectvar","title":"<code>MultiObjectVar</code>","text":"<p>Similar to <code>ObjectVar</code>, but allows for the selection of multiple objects.</p>"},{"location":"additional-features/jobs.html#filevar","title":"<code>FileVar</code>","text":"<p>An uploaded file. Note that uploaded files are present in memory only for the duration of the job's execution: They will not be automatically saved for future use. The job is responsible for writing file contents to disk where necessary.</p>"},{"location":"additional-features/jobs.html#ipaddressvar","title":"<code>IPAddressVar</code>","text":"<p>An IPv4 or IPv6 address, without a mask. Returns a <code>netaddr.IPAddress</code> object.</p>"},{"location":"additional-features/jobs.html#ipaddresswithmaskvar","title":"<code>IPAddressWithMaskVar</code>","text":"<p>An IPv4 or IPv6 address with a mask. Returns a <code>netaddr.IPNetwork</code> object which includes the mask.</p>"},{"location":"additional-features/jobs.html#ipnetworkvar","title":"<code>IPNetworkVar</code>","text":"<p>An IPv4 or IPv6 network with a mask. Returns a <code>netaddr.IPNetwork</code> object. Two attributes are available to validate the provided mask:</p> <ul> <li><code>min_prefix_length</code> - Minimum length of the mask</li> <li><code>max_prefix_length</code> - Maximum length of the mask</li> </ul>"},{"location":"additional-features/jobs.html#the-run-method","title":"The <code>run()</code> Method","text":"<p>The <code>run()</code> method, if you choose to implement it, should accept two arguments:</p> <ol> <li><code>data</code> - A dictionary which will contain all of the variable data passed in by the user (via the web UI or REST API)</li> <li><code>commit</code> - A boolean indicating whether database changes should be committed. If this is <code>False</code>, even if your Job attempts to make database changes, they will be automatically rolled back when the Job completes.</li> </ol> <pre><code>from nautobot.extras.jobs import Job, StringVar, IntegerVar, ObjectVar\nclass CreateDevices(Job):\nvar1 = StringVar(...)\nvar2 = IntegerVar(...)\nvar3 = ObjectVar(...)\ndef run(self, data, commit):\n...\n</code></pre> <p>Again, defining user variables is totally optional; you may create a job with just a <code>run()</code> method if no user input is needed, in which case <code>data</code> will be an empty dictionary.</p> <p>Note</p> <p>The <code>test_*()</code> and <code>post_run()</code> methods do not accept any arguments; if you need to access user <code>data</code> or the <code>commit</code> flag, your <code>run()</code> method is responsible for storing these values in the job instance, such as:</p> <pre><code>def run(self, data, commit):\n    self.data = data\n    self.commit = commit\n</code></pre> <p>Warning</p> <p>When writing Jobs that create and manipulate data it is recommended to make use of the <code>validated_save()</code> convenience method which exists on all core models. This method saves the instance data but first enforces model validation logic. Simply calling <code>save()</code> on the model instance does not enforce validation automatically and may lead to bad data. See the development best practices.</p> <p>Warning</p> <p>The Django ORM provides methods to create/edit many objects at once, namely <code>bulk_create()</code> and <code>update()</code>. These are best avoided in most cases as they bypass a model's built-in validation and can easily lead to database corruption if not used carefully.</p>"},{"location":"additional-features/jobs.html#the-test_-methods","title":"The <code>test_*()</code> Methods","text":"<p>If your job class defines any number of methods whose names begin with <code>test_</code>, these will be automatically invoked after the <code>run()</code> method (if any) completes. These methods must take no arguments (other than <code>self</code>).</p> <p>Log messages generated by any of these methods will be automatically grouped together by the test method they were invoked from, which can be helpful for readability.</p>"},{"location":"additional-features/jobs.html#the-post_run-method","title":"The <code>post_run()</code> Method","text":"<p>If your job class implements a <code>post_run()</code> method (which must take no arguments other than <code>self</code>), this method will be automatically invoked after the <code>run()</code> and <code>test_*()</code> methods (if any). It will be called even if one of the other methods raises an exception, so this method can be used to handle any necessary cleanup or final events (such as sending an email or triggering a webhook). The status of the overall job is available at this time as <code>self.failed</code> and the associated <code>JobResult</code> <code>data</code> field is available as <code>self.results</code>.</p>"},{"location":"additional-features/jobs.html#logging","title":"Logging","text":"<p>The following instance methods are available to log results from an executing job to be stored into <code>JobLogEntry</code> records associated with the current <code>JobResult</code>:</p> <ul> <li><code>self.log(message)</code></li> <li><code>self.log_debug(message)</code></li> <li><code>self.log_success(obj=None, message=None)</code></li> <li><code>self.log_info(obj=None, message=None)</code></li> <li><code>self.log_warning(obj=None, message=None)</code></li> <li><code>self.log_failure(obj=None, message=None)</code></li> </ul> <p>Messages recorded with <code>log()</code> or <code>log_debug()</code> will appear in a job's results but are never associated with a particular object; the other <code>log_*</code> functions may be invoked with or without a provided object to associate the message with.</p> <p>It is advised to log a message for each object that is evaluated so that the results will reflect how many objects are being manipulated or reported on.</p> <p>Markdown rendering is supported for log messages.</p> <p>Changed in version 1.3.4</p> <p>As a security measure, the <code>message</code> passed to any of these methods will be passed through the <code>nautobot.utilities.logging.sanitize()</code> function in an attempt to strip out information such as usernames/passwords that should not be saved to the logs. This is of course best-effort only, and Job authors should take pains to ensure that such information is not passed to the logging APIs in the first place. The set of redaction rules used by the <code>sanitize()</code> function can be configured as settings.SANITIZER_PATTERNS.</p> <p>Note</p> <p>Using <code>self.log_failure()</code>, in addition to recording a log message, will flag the overall job as failed, but it will not stop the execution of the job, nor will it result in an automatic rollback of any database changes made by the job. To end a job early, you can use a Python <code>raise</code> or <code>return</code> as appropriate. Raising any exception (e.g. <code>ValueError</code> for malformed input values) will ensure that any database changes are rolled back as part of the process of ending the job. <code>AbortTransaction</code> from Nautobot, which was recommended in past versions of the docs, should explicitly not be used, as it is only intended for use by Nautobot's internal job handling.</p>"},{"location":"additional-features/jobs.html#accessing-request-data","title":"Accessing Request Data","text":"<p>Details of the current HTTP request (the one being made to execute the job) are available as the instance attribute <code>self.request</code>. This can be used to infer, for example, the user executing the job and their client IP address:</p> <pre><code>username = self.request.user.username\nip_address = self.request.META.get('HTTP_X_FORWARDED_FOR') or \\\n    self.request.META.get('REMOTE_ADDR')\nself.log_info(f\"Running as user {username} (IP: {ip_address})...\")\n</code></pre> <p>For a complete list of available request parameters, please see the Django documentation.</p>"},{"location":"additional-features/jobs.html#reading-data-from-files","title":"Reading Data from Files","text":"<p>The <code>Job</code> class provides two convenience methods for reading data from files:</p> <ul> <li><code>load_yaml</code></li> <li><code>load_json</code></li> </ul> <p>These two methods will load data in YAML or JSON format, respectively, from files within the local path (i.e. <code>JOBS_ROOT/</code>).</p>"},{"location":"additional-features/jobs.html#managing-jobs","title":"Managing Jobs","text":"<p>As of Nautobot 1.3, each Job class installed in Nautobot is represented by a corresponding Job data record in the Nautobot database. These data records are refreshed when the <code>nautobot-server migrate</code> or <code>nautobot-server post_upgrade</code> command is run, or (for Jobs from a Git repository) when a Git repository is enabled or re-synced in Nautobot. These data records make it possible for an administrative user (or other user with appropriate access privileges) to exert a level of administrative control over the Jobs created and updated by Job authors.</p>"},{"location":"additional-features/jobs.html#enabling-jobs-for-running","title":"Enabling Jobs for Running","text":"<p>When a new Job record is created for a newly discovered Job class, it defaults to <code>enabled = False</code>, which prevents the Job from being run by any user. This is intended to provide a level of security and oversight regarding the installation of new Jobs into Nautobot.</p> <p>Important</p> <p>One exception to this default is when upgrading from a Nautobot release before 1.3 to Nautobot 1.3.0 or later. In this case, at the time of the upgrade, any Job class that shows evidence of having been run or scheduled under the older Nautobot version (that is, there is at least one JobResult and/or ScheduledJob record that references this Job class) will result in the creation of a Job database record with <code>enabled = True</code>. The reasoning for this feature is the assertion that because the Job has been run or scheduled previously, it has presumably already undergone appropriate review at that time, and so it should remain possible to run it as it was possible before the upgrade.</p> <p>An administrator or user with <code>extras.change_job</code> permission can edit the Job to change it to <code>enabled = True</code>, permitting running of the Job, when they have completed any appropriate review of the new Job to ensure that it meets their standards. Similarly, an obsolete or no-longer-used Job can be prevented from inadvertent execution by changing it back to <code>enabled = False</code>.</p> <p>By default when a Job is installed into Nautobot it is installed in a disabled state. In order to enable a Job:</p> <ul> <li>Navigate to Jobs &gt; Jobs menu</li> <li>Select a job that has been installed</li> <li>Select Edit button</li> <li>In the second section titled Job, select the Enabled checkbox</li> <li>Select Update button at the bottom</li> </ul>"},{"location":"additional-features/jobs.html#enabling-job-hooks","title":"Enabling Job Hooks","text":"<p>Job hooks are enabled in a similar fashion, but by using the default filters when navigating to the Jobs page the Job Hooks will not be visible. To enable job hooks:</p> <ul> <li>Navigate to Jobs &gt; Jobs menu</li> <li>Select the Filter button to bring up the Filter Jobs context</li> <li>Look for Is job hook receiver and change the drop down to Yes</li> <li>Select Apply button</li> <li>Select a job that has been installed</li> <li>Select Edit button</li> <li>In the second section titled Job, select the Enabled checkbox</li> <li>Select Update button at the bottom</li> </ul>"},{"location":"additional-features/jobs.html#overriding-metadata","title":"Overriding Metadata","text":"<p>An administrator or user with <code>extras.change_job</code> permission can also edit a Job database record to optionally override any or all of the following metadata attributes defined by the Job module or class:</p> <ul> <li><code>grouping</code></li> <li><code>name</code></li> <li><code>description</code></li> <li><code>approval_required</code></li> <li><code>commit_default</code></li> <li><code>has_sensitive_variables</code></li> <li><code>hidden</code></li> <li><code>read_only</code></li> <li><code>soft_time_limit</code></li> <li><code>time_limit</code></li> <li><code>task_queues</code></li> </ul> <p>This is done by setting the corresponding \"override\" flag (<code>grouping_override</code>, <code>name_override</code>, etc.) to <code>True</code> then providing a new value for the attribute in question. An overridden attribute will remain set to its overridden value even if the underlying Job class definition changes and <code>nautobot-server &lt;migrate|post_upgrade&gt;</code> gets run again. Conversely, clearing the \"override\" flag for an attribute and saving the database record will revert the attribute to the underlying value defined within the Job class source code.</p>"},{"location":"additional-features/jobs.html#deleting-jobs","title":"Deleting Jobs","text":"<p>When a previously installed Job class is removed, after running <code>nautobot-server &lt;migrate|post_upgrade&gt;</code> or refreshing the providing Git repository, the Job database record will not be automatically deleted, but will be flagged as <code>installed = False</code> and can no longer be run or scheduled.</p> <p>An administrator or user with <code>extras.delete_job</code> permissions may delete such a Job database record if desired, but be aware that doing so will result in any existing JobResult or ScheduledJob records that originated from this Job losing their association to the Job; this association will not be automatically restored even if the Job is later reinstalled or reintroduced.</p>"},{"location":"additional-features/jobs.html#running-jobs","title":"Running Jobs","text":"<p>Note</p> <p>To run any job, a user must be assigned the <code>extras.run_job</code> permission. This is achieved by assigning the user (or group) a permission on the <code>extras &gt; job</code> object and specifying the <code>run</code> action in the admin UI as shown below.</p> <p>Similarly, to approve a job request by another user, a user must be assigned the <code>extras.approve_job</code> permission via the same process. Job approvers also need the <code>extras.change_scheduledjob</code> and/or <code>extras.delete_scheduledjob</code> permissions as job approvals are implemented via the <code>ScheduledJob</code> data model.</p> <p></p>"},{"location":"additional-features/jobs.html#jobs-and-class_path","title":"Jobs and <code>class_path</code>","text":"<p>It is a key concept to understand the 3 <code>class_path</code> elements:</p> <ul> <li><code>grouping_name</code>: which can be one of <code>local</code>, <code>git</code>, or <code>plugins</code> - depending on where the <code>Job</code> has been defined.</li> <li><code>module_name</code>: which is the Python path to the job definition file, for a plugin-provided job, this might be something like <code>my_plugin_name.jobs.my_job_filename</code> or <code>nautobot_golden_config.jobs</code> and is the importable Python path name (which would not include the <code>.py</code> extension, as per Python syntax standards).</li> <li><code>JobClassName</code>: which is the name of the class inheriting from <code>nautobot.extras.jobs.Job</code> contained in the above file.</li> </ul> <p>The <code>class_path</code> is often represented as a string in the format of <code>&lt;grouping_name&gt;/&lt;module_name&gt;/&lt;JobClassName&gt;</code>, such as <code>local/example/MyJobWithNoVars</code> or <code>plugins/nautobot_golden_config.jobs/BackupJob</code>. Understanding the definitions of these elements will be important in running jobs programmatically.</p> <p>Changed in version 1.3.0</p> <p>With the addition of Job database models, it is now generally possible and preferable to refer to a job by its UUID primary key, similar to other Nautobot database models, rather than its <code>class_path</code>.</p>"},{"location":"additional-features/jobs.html#via-the-web-ui","title":"Via the Web UI","text":"<p>Jobs can be run via the web UI by navigating to the job, completing any required form data (if any), and clicking the \"Run Job\" button.</p> <p>Once a job has been run, the latest <code>JobResult</code> for that job will be summarized in the job list view.</p>"},{"location":"additional-features/jobs.html#via-the-api","title":"Via the API","text":"<p>To run a job via the REST API, issue a POST request to the job's endpoint <code>/api/extras/jobs/&lt;uuid&gt;/run/</code>. You can optionally provide JSON data to set the <code>commit</code> flag, specify any required user input <code>data</code>, optional <code>task_queue</code>, and/or provide optional scheduling information as described in the section on scheduling and approvals.</p> <p>For example, to run a job with no user inputs and without committing any anything to the database:</p> <pre><code>curl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=1.3; indent=4\" \\\nhttp://nautobot/api/extras/jobs/$JOB_ID/run/\n</code></pre> <p>Or to run a job that expects user inputs, and commit changes to the database:</p> <pre><code>curl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=1.3; indent=4\" \\\nhttp://nautobot/api/extras/jobs/$JOB_ID/run/ \\\n--data '{\"data\": {\"string_variable\": \"somevalue\", \"integer_variable\": 123}, \"commit\": true}'\n</code></pre> <p>When providing input data, it is possible to specify complex values contained in <code>ObjectVar</code>s, <code>MultiObjectVar</code>s, and <code>IPAddressVar</code>s.</p> <ul> <li><code>ObjectVar</code>s can be specified by either using their primary key directly as the value, or as a dictionary containing a more complicated query that gets passed into the Django ORM as keyword arguments.</li> <li><code>MultiObjectVar</code>s can be specified as a list of primary keys.</li> <li><code>IPAddressVar</code>s can be provided as strings in CIDR notation.</li> </ul>"},{"location":"additional-features/jobs.html#jobs-with-files","title":"Jobs with Files","text":"<p>To run a job that contains <code>FileVar</code> inputs via the REST API, you must use <code>multipart/form-data</code> content type requests instead of <code>application/json</code>. This also requires a slightly different request payload than the example above. The <code>commit</code>, <code>task_queue</code>, and <code>schedule</code> data are flattened and prefixed with underscore to differentiate them from job-specific data. Job specific data is also flattened and not located under the top-level <code>data</code> dictionary key.</p> <p>An example of running a job with both <code>FileVar</code> (named <code>myfile</code>) and <code>StringVar</code> (named <code>interval</code>) input:</p> <pre><code>curl -X POST \\\n-H 'Authorization: Token $TOKEN' \\\n-H 'Content-Type: multipart/form-data' \\\n-H \"Accept: application/json; version=1.3; indent=4\" \\\n'http://nautobot/api/extras/jobs/$JOB_ID/run/' \\\n-F '_commit=\"true\"' \\\n-F '_schedule_interval=\"immediately\"' \\\n-F '_schedule_start_time=\"2022-10-18T17:31:23.698Z\"' \\\n-F 'interval=\"3\"' \\\n-F 'myfile=@\"/path/to/my/file.txt\"' \\\n</code></pre>"},{"location":"additional-features/jobs.html#via-the-cli","title":"Via the CLI","text":"<p>Jobs can be run from the CLI by invoking the management command:</p> <pre><code>nautobot-server runjob [--username &lt;username&gt;] [--commit] [--local] [--data &lt;data&gt;] &lt;class_path&gt;\n</code></pre> <p>Note</p> <p>See above for <code>class_path</code> definitions.</p> <p>Added in version 1.3.10</p> <p>The <code>--data</code> and <code>--local</code> parameters were added.</p> <p>The <code>--data</code> parameter must be a JSON string, e.g. <code>--data='{\"string_variable\": \"somevalue\", \"integer_variable\": 123}'</code></p> <p>Using the same example shown in the API:</p> <pre><code>nautobot-server runjob --username myusername local/example/MyJobWithNoVars\n</code></pre> <p>Warning</p> <p>The <code>--username &lt;username&gt;</code> parameter can be used to specify the user that will be identified as the requester of the job. It is optional if the job will not be modifying the database, but is mandatory if you are running with <code>--commit</code>, as the specified user will own any resulting database changes.</p> <p>Note that <code>nautobot-server</code> commands, like all management commands and other direct interactions with the Django database, are not gated by the usual Nautobot user authentication flow. It is possible to specify any existing <code>--username</code> with the <code>nautobot-server runjob</code> command in order to impersonate any defined user in Nautobot. Use this power wisely and be cautious who you allow to access it.</p>"},{"location":"additional-features/jobs.html#testing-jobs","title":"Testing Jobs","text":"<p>Jobs are Python code and can be tested as such, usually via Django unit-test features. That said, there are a few useful tricks specific to testing Jobs.</p> <p>While individual methods within your Job can and should be tested in isolation, you'll likely also want to test the entire execution of the Job. Nautobot 1.3.3 introduced a few enhancements to make this simpler to do, but it's also quite possible to test in earlier releases with a bit more effort.</p>"},{"location":"additional-features/jobs.html#nautobot-133-and-later","title":"Nautobot 1.3.3 and later","text":"<p>The simplest way to test the entire execution of Jobs from 1.3.3 on is via calling the <code>nautobot.utilities.testing.run_job_for_testing()</code> method, which is a helper wrapper around the <code>run_job</code> function used to execute a Job via Nautobot's Celery worker process.</p> <p>Because of the way <code>run_job_for_testing</code> and more specifically <code>run_job()</code> works, which is somewhat complex behind the scenes, you need to inherit from <code>nautobot.utilities.testing.TransactionTestCase</code> instead of <code>django.test.TestCase</code> (Refer to the Django documentation if you're interested in the differences between these classes - <code>TransactionTestCase</code> from Nautobot is a small wrapper around Django's <code>TransactionTestCase</code>).</p> <p>When using <code>TransactionTestCase</code> (whether from Django or from Nautobot) each tests runs on a completely empty database. Furthermore, Nautobot requires new jobs to be enabled before they can run. Therefore, we need to make sure the job is enabled before each run which <code>run_job_for_testing</code> handles for us.</p> <p>A simple example of a Job test case for 1.3.3 and forward might look like the following:</p> <pre><code>from nautobot.extras.models import Job, JobLogEntry\nfrom nautobot.utilities.testing import run_job_for_testing, TransactionTestCase\nclass MyJobTestCase(TransactionTestCase):\ndef test_my_job(self):\n# Testing of Job \"MyJob\" in file \"my_job_file.py\" in $JOBS_ROOT\njob = Job.objects.get(job_class_name=\"MyJob\", module_name=\"my_job_file\", source=\"local\")\n# or, job = Job.objects.get_for_class_path(\"local/my_job_file/MyJob\")\njob_result = run_job_for_testing(job, data={}, commit=False)\n# Since we ran with commit=False, any database changes made by the job won't persist,\n# but we can still inspect the logs created by running the job\nlog_entries = JobLogEntry.objects.filter(job_result=job_result)\nfor log_entry in log_entries:\nself.assertEqual(log_entry.message, \"...\")\n</code></pre> <p>Tip</p> <p>For more advanced examples (such as testing jobs executed with <code>commit=True</code>, for example) refer to the Nautobot source code, specifically <code>nautobot/extras/tests/test_jobs.py</code>.</p>"},{"location":"additional-features/jobs.html#nautobot-132-and-earlier-including-12","title":"Nautobot 1.3.2 and earlier (including 1.2)","text":"<p>If your test case needs to be backwards-compatible with test execution against Nautobot 1.3.2 and/or earlier, you need to handle a couple more things manually:</p> <p>Set up the <code>\"job_logs\"</code> database correctly for testing:</p> <pre><code>from django.conf import settings\nif \"job_logs\" in settings.DATABASES:\nsettings.DATABASES[\"job_logs\"] = settings.DATABASES[\"job_logs\"].copy()\nsettings.DATABASES[\"job_logs\"][\"TEST\"] = {\"MIRROR\": \"default\"}\n</code></pre> <p>Replicate the behavior of <code>run_job_for_testing</code> manually so that your test execution most closely resembles the way the celery worker would run the test:</p> <pre><code>import uuid\nfrom django.contrib.auth import get_user_model\nfrom django.contrib.contenttypes.models import ContentType\nfrom nautobot.extras.context_managers import web_request_context\nfrom nautobot.extras.jobs import run_job\nfrom nautobot.extras.models import JobResult, Job\ndef run_job_for_testing(job, data=None, commit=True, username=\"test-user\"):\nif data is None:\ndata = {}\nuser_model = get_user_model()\nuser, _ = user_model.objects.get_or_create(username=username, is_superuser=True, password=\"password\")\njob_result = JobResult.objects.create(\nname=job.class_path,\nobj_type=ContentType.objects.get_for_model(Job),\nuser=user,\njob_id=uuid.uuid4(),\n)\nwith web_request_context(user=user) as request:\nrun_job(data=data, request=request, commit=commit, job_result_pk=job_result.pk)\nreturn job_result\n</code></pre> <p>Setup the <code>databases</code> field on the test class correctly, and re-create the default Statuses on <code>setUp</code> in your test classes, because <code>django.test.TransactionTestCase</code> truncates them on every <code>tearDown</code>:</p> <pre><code>from django.apps import apps\nfrom django.conf import settings\nfrom django.test import TransactionTestCase\nfrom nautobot.extras.management import populate_status_choices\nclass MyJobTestCase(TransactionTestCase):\n# 'job_logs' is a proxy connection to the same (default) database that's used exclusively for Job logging\nif \"job_logs\" in settings.DATABASES:\ndatabases = (\"default\", \"job_logs\")\ndef setUp(self):\nsuper().setUp()\npopulate_status_choices(apps, None)\n</code></pre>"},{"location":"additional-features/jobs.html#debugging-job-performance","title":"Debugging job performance","text":"<p>Added in version 1.5.17</p> <p>Debugging the performance of Nautobot jobs can be tricky, because they are executed in the worker context. In order to gain extra visibility, cProfile can be used to profile the job execution.</p> <p>The 'profile' form field on jobs is automatically available when the <code>DEBUG</code> settings is <code>True</code>. When you select that checkbox, a profiling report in the pstats format will be written to the file system of the environment where the job runs. Normally, this is on the file system of the worker process, but if you are using the <code>nautobot-server runjob</code> command with <code>--local</code>, it will end up in the file system of the web application itself. The path of the written file will be logged in the job.</p> <p>Note</p> <p>If you need to run this in an environment where <code>DEBUG</code> is <code>False</code>, you have the option of using <code>nautobot-server runjob</code> with the <code>--profile</code> flag. According to the docs, <code>cProfile</code> should have minimal impact on the performance of the job; still, proceed with caution when using this in a production environment.</p>"},{"location":"additional-features/jobs.html#reading-profiling-reports","title":"Reading profiling reports","text":"<p>A full description on how to deal with the output of <code>cProfile</code> can be found in the Instant User's Manual, but here is something to get you started:</p> <pre><code>import pstats\njob_result_uuid = \"66b70231-002f-412b-8cc4-1cc9609c2c9b\"\nstats = pstats.Stats(f\"/tmp/job-result-{job_result_uuid}.pstats\")\nstats.sort_stats(pstats.SortKey.CUMULATIVE).print_stats(10)\n</code></pre> <p>This will print the 10 functions that the job execution spent the most time in - adapt this to your needs!</p>"},{"location":"additional-features/jobs.html#example-jobs","title":"Example Jobs","text":""},{"location":"additional-features/jobs.html#creating-objects-for-a-planned-site","title":"Creating objects for a planned site","text":"<p>This job prompts the user for three variables:</p> <ul> <li>The name of the new site</li> <li>The device model (a filtered list of defined device types)</li> <li>The number of access switches to create</li> </ul> <p>These variables are presented as a web form to be completed by the user. Once submitted, the job's <code>run()</code> method is called to create the appropriate objects, and it returns simple CSV output to the user summarizing the created objects.</p> <pre><code>from django.utils.text import slugify\nfrom nautobot.dcim.models import Device, DeviceRole, DeviceType, Manufacturer, Site\nfrom nautobot.extras.models import Status\nfrom nautobot.extras.jobs import *\nclass NewBranch(Job):\nclass Meta:\nname = \"New Branch\"\ndescription = \"Provision a new branch site\"\nfield_order = ['site_name', 'switch_count', 'switch_model']\nsite_name = StringVar(\ndescription=\"Name of the new site\"\n)\nswitch_count = IntegerVar(\ndescription=\"Number of access switches to create\"\n)\nmanufacturer = ObjectVar(\nmodel=Manufacturer,\nrequired=False\n)\nswitch_model = ObjectVar(\ndescription=\"Access switch model\",\nmodel=DeviceType,\nquery_params={\n'manufacturer_id': '$manufacturer'\n}\n)\ndef run(self, data, commit):\nSTATUS_PLANNED = Status.objects.get(slug='planned')\n# Create the new site\nsite = Site(\nname=data['site_name'],\nslug=slugify(data['site_name']),\nstatus=STATUS_PLANNED,\n)\nsite.validated_save()\nself.log_success(obj=site, message=\"Created new site\")\n# Create access switches\nswitch_role = DeviceRole.objects.get(name='Access Switch')\nfor i in range(1, data['switch_count'] + 1):\nswitch = Device(\ndevice_type=data['switch_model'],\nname=f'{site.slug}-switch{i}',\nsite=site,\nstatus=STATUS_PLANNED,\ndevice_role=switch_role\n)\nswitch.validated_save()\nself.log_success(obj=switch, message=\"Created new switch\")\n# Generate a CSV table of new devices\noutput = [\n'name,make,model'\n]\nfor switch in Device.objects.filter(site=site):\nattrs = [\nswitch.name,\nswitch.device_type.manufacturer.name,\nswitch.device_type.model\n]\noutput.append(','.join(attrs))\nreturn '\\n'.join(output)\n</code></pre>"},{"location":"additional-features/jobs.html#device-validation","title":"Device validation","text":"<p>A job to perform various validation of Device data in Nautobot. As this job does not require any user input, it does not define any variables, nor does it implement a <code>run()</code> method.</p> <pre><code>from nautobot.dcim.models import ConsolePort, Device, PowerPort\nfrom nautobot.extras.models import Status\nfrom nautobot.extras.jobs import Job\nclass DeviceConnectionsReport(Job):\ndescription = \"Validate the minimum physical connections for each device\"\ndef test_console_connection(self):\nSTATUS_ACTIVE = Status.objects.get(slug='active')\n# Check that every console port for every active device has a connection defined.\nfor console_port in ConsolePort.objects.prefetch_related('device').filter(device__status=STATUS_ACTIVE):\nif console_port.connected_endpoint is None:\nself.log_failure(\nobj=console_port.device,\nmessage=\"No console connection defined for {}\".format(console_port.name)\n)\nelif not console_port.connection_status:\nself.log_warning(\nobj=console_port.device,\nmessage=\"Console connection for {} marked as planned\".format(console_port.name)\n)\nelse:\nself.log_success(obj=console_port.device)\ndef test_power_connections(self):\nSTATUS_ACTIVE = Status.objects.get(slug='active')\n# Check that every active device has at least two connected power supplies.\nfor device in Device.objects.filter(status=STATUS_ACTIVE):\nconnected_ports = 0\nfor power_port in PowerPort.objects.filter(device=device):\nif power_port.connected_endpoint is not None:\nconnected_ports += 1\nif not power_port.connection_status:\nself.log_warning(\nobj=device,\nmessage=\"Power connection for {} marked as planned\".format(power_port.name)\n)\nif connected_ports &lt; 2:\nself.log_failure(\nobj=device,\nmessage=\"{} connected power supplies found (2 needed)\".format(connected_ports)\n)\nelse:\nself.log_success(obj=device)\n</code></pre>"},{"location":"additional-features/napalm.html","title":"NAPALM","text":"<p>Nautobot supports integration with the NAPALM automation library. NAPALM allows Nautobot to serve a proxy for operational data, fetching live data from network devices and returning it to a requester via its REST API. Note that Nautobot does not store any NAPALM data locally.</p> <p>Note</p> <p>To enable this integration, the NAPALM library must be installed. See installation steps for more information.</p> <p>Below is an example REST API request and response:</p> <pre><code>GET /api/dcim/devices/1/napalm/?method=get_environment\n\n{\n    \"get_environment\": {\n        ...\n    }\n}\n</code></pre> <p>Note</p> <p>To make NAPALM requests via the Nautobot REST API, a Nautobot user must have assigned a permission granting the <code>napalm_read</code> action for the device object type.</p>"},{"location":"additional-features/napalm.html#authentication","title":"Authentication","text":"<p>As of Nautobot 1.2, there are three ways to specify the authentication credentials to use for a given device:</p> <ol> <li><code>NAPALM_USERNAME</code> and <code>NAPALM_PASSWORD</code> configuration parameters, setting global defaults to use for all devices.</li> <li>Assigning an appropriately defined secrets group to the device to specify its specific credentials.</li> <li>In a REST API call, specifying the credentials as HTTP headers.</li> </ol>"},{"location":"additional-features/napalm.html#configuration-parameters","title":"Configuration Parameters","text":"<p>By default, the <code>NAPALM_USERNAME</code> and <code>NAPALM_PASSWORD</code> configuration parameters are used for NAPALM authentication.</p>"},{"location":"additional-features/napalm.html#secrets-groups","title":"Secrets Groups","text":"<p>If a given device has an associated secrets group, and that secrets group contains secrets assigned as access type <code>Generic</code> and secrets types <code>Username</code> and <code>Password</code> (and optionally an additional <code>Secret</code> entry as well, which will be used for a Cisco enable secret as needed), these credentials will be used for NAPALM authentication, overriding any global defaults specified in <code>nautobot_config.py</code>.</p> <p>Note that in the case where many devices in your network share common credentials (such as a standardized service account), it's straightforward to define an appropriate secrets group and then use the device \"bulk editing\" functionality in Nautobot to quickly assign this group to a collection of devices.</p>"},{"location":"additional-features/napalm.html#rest-api-http-headers","title":"REST API HTTP Headers","text":"<p>The NAPALM credentials specified by either of the above methods can be overridden for an individual REST API call by specifying the <code>X-NAPALM-Username</code> and <code>X-NAPALM-Password</code> headers.</p> <pre><code>curl \"http://localhost/api/dcim/devices/1/napalm/?method=get_environment\" \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\n-H \"X-NAPALM-Username: foo\" \\\n-H \"X-NAPALM-Password: bar\"\n</code></pre>"},{"location":"additional-features/napalm.html#method-support","title":"Method Support","text":"<p>The list of supported NAPALM methods depends on the NAPALM driver configured for the platform of a device. Because there is no granular mechanism in place for limiting potentially disruptive requests, Nautobot supports only read-only get methods.</p>"},{"location":"additional-features/napalm.html#multiple-methods","title":"Multiple Methods","text":"<p>It is possible to request the output of multiple NAPALM methods in a single API request by passing multiple <code>method</code> parameters. For example:</p> <pre><code>GET /api/dcim/devices/1/napalm/?method=get_ntp_servers&amp;method=get_ntp_peers\n\n{\n    \"get_ntp_servers\": {\n        ...\n    },\n    \"get_ntp_peers\": {\n        ...\n    }\n}\n</code></pre>"},{"location":"additional-features/napalm.html#optional-arguments","title":"Optional Arguments","text":"<p>The behavior of NAPALM drivers can be adjusted according to the optional arguments. Nautobot exposes those arguments using headers prefixed with <code>X-NAPALM-</code>. For example, the SSH port is changed to 2222 in this API call:</p> <pre><code>curl \"http://localhost/api/dcim/devices/1/napalm/?method=get_environment\" \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\n-H \"X-NAPALM-port: 2222\"\n</code></pre>"},{"location":"additional-features/prometheus-metrics.html","title":"Prometheus Metrics","text":"<p>Nautobot supports optionally exposing native Prometheus metrics from the application. Prometheus is a popular time series metric platform used for monitoring.</p>"},{"location":"additional-features/prometheus-metrics.html#configuration","title":"Configuration","text":"<p>Metrics are not exposed by default. Metric exposition can be toggled with the <code>METRICS_ENABLED</code> configuration setting which exposes metrics at the <code>/metrics</code> HTTP endpoint, e.g. <code>https://nautobot.local/metrics</code>.</p> <p>In addition to the <code>METRICS_ENABLED</code> setting, database and/or caching metrics can also be enabled by changing the database engine and/or caching backends from <code>django.db.backends</code> / <code>django_redis.cache</code> to <code>django_prometheus.db.backends</code> / <code>django_prometheus.cache.backends.redis</code>:</p> <pre><code>DATABASES = {\n\"default\": {\n# Other settings...\n\"ENGINE\": \"django_prometheus.db.backends.postgresql\",  # use \"django_prometheus.db.backends.mysql\" with MySQL\n}\n}\n# Other settings...\nCACHES = {\n\"default\": {\n# Other settings...\n\"BACKEND\": \"django_prometheus.cache.backends.redis.RedisCache\",\n}\n}\n</code></pre> <p>For more information see the django-prometheus docs.</p>"},{"location":"additional-features/prometheus-metrics.html#metric-types","title":"Metric Types","text":"<p>Nautobot makes use of the django-prometheus library to export a number of different types of metrics, including:</p> <ul> <li>Per model insert, update, and delete counters</li> <li>Per view request counters</li> <li>Per view request latency histograms</li> <li>Request body size histograms</li> <li>Response body size histograms</li> <li>Response code counters</li> <li>Database connection, execution, and error counters</li> <li>Cache hit, miss, and invalidation counters</li> <li>Django middleware latency histograms</li> <li>Other Django related metadata metrics</li> </ul> <p>For the exhaustive list of exposed metrics, visit the <code>/metrics</code> endpoint on your Nautobot instance.</p>"},{"location":"additional-features/prometheus-metrics.html#multi-processing-notes","title":"Multi Processing Notes","text":"<p>When deploying Nautobot in a multi-process manner (e.g. running multiple uWSGI workers) the Prometheus client library requires the use of a shared directory to collect metrics from all worker processes. To configure this, first create or designate a local directory to which the worker processes have read and write access, and then configure your WSGI service (e.g. uWSGI) to define this path as the <code>prometheus_multiproc_dir</code> environment variable.</p> <p>Warning</p> <p>If having accurate long-term metrics in a multi-process environment is crucial to your deployment, it's recommended you use the <code>uwsgi</code> library instead of <code>gunicorn</code>. The issue lies in the way <code>gunicorn</code> tracks worker processes (vs <code>uwsgi</code>) which helps manage the metrics files created by the above configurations. If you're using Nautobot with gunicorn in a containerized environment following the one-process-per-container methodology, then you will likely not need to change to <code>uwsgi</code>. More details can be found in  issue #3779.</p> <p>Note</p> <p>Metrics from the celery worker are not available from Nautobot at this time.  However, additional tools such as flower can be used to monitor the celery workers until these metrics are exposed through Nautobot.</p>"},{"location":"additional-features/template-filters.html","title":"Additional Template Filters","text":""},{"location":"additional-features/template-filters.html#introduction","title":"Introduction","text":"<p>Nautobot uses 2 template engines internally, Django Template and Jinja2. Django Template is used to render the UI pages and Jinja2 is used for features such as computed fields, custom links, export templates, etc.</p> <p>Note</p> <p>Jinja2 and Django Template are very similar, the main difference between them is the syntax of the template. Historically, Django Template has been the go-to solution to generate webpage in Django and Jinja2 is the industry standard outside of Django.</p> <p>Both Django Template and Jinja2 can be extended with a library of functions, called <code>filters</code>, that apply formatting or transformations to a provided input. Nautobot provides many built-in <code>filters</code>, including network specific <code>filters</code> from the netutils library.</p>"},{"location":"additional-features/template-filters.html#netutils-filters","title":"Netutils Filters","text":"<p>Added in version 1.2.0</p> <p>Netutils is an external library, maintained by Network to Code, that is focusing on providing a collection of functions for common network automation tasks. Please check the netutils documentation to see the list of available functions.</p> <p>These functions are available automatically in Jinja2 rendered by Nautobot. For example you could define a computed field on Circuit objects, using the Netutils <code>bits_to_name</code> function, to display the \"Commit Rate\" as a human-readable value by using the template code <code>{{ (obj.commit_rate * 1000) | bits_to_name }}</code>. (This particular example is contrived, as the Nautobot UI already humanizes the raw <code>commit_rate</code> value for display, but it demonstrates the kinds of things that these filters can be used for.)</p> <p>In general the syntax for using a netutils filter in a Jinja2 template is something like <code>{{ arg1 | function_name }}</code> for functions that take a single argument, and <code>{{ arg1 | function_name(arg_name2=arg2, arg_name3=arg3) }}</code> for functions that take multiple arguments.</p> <p>Added in version 1.5.11</p> <p>Netutils functions are also available in Django templates after using the <code>{% load netutils %}</code> directive in a template. The syntax to use these functions is then generally <code>{% function_name arg_name1=arg1 arg_name2=arg2 %}</code>.</p>"},{"location":"additional-features/template-filters.html#nautobot-built-in-filters","title":"Nautobot Built-In Filters","text":"<p>The Nautobot project also provides the following built-in <code>filters</code> that can be used in both Jinja2 and Django Template.</p>"},{"location":"additional-features/template-filters.html#as_range","title":"as_range","text":"<p>Given a list of n items, return a corresponding range of n integers.</p> <pre><code># Django template\n{% for i in record.parents|as_range %}\n    &lt;i class=\"mdi mdi-circle-small\"&gt;&lt;/i&gt;\n{% endfor %}\n</code></pre>"},{"location":"additional-features/template-filters.html#bettertitle","title":"bettertitle","text":"<p>Alternative to the built-in <code>title</code> filter; capitalizes words without replacing letters that are already uppercase.</p> <p>For example, <code>title(\"IP address\") == \"Ip Address\"</code>, while <code>bettertitle(\"IP address\") == \"IP Address\"</code>.</p> <pre><code>{{ obj_type.name|bettertitle }}\n</code></pre>"},{"location":"additional-features/template-filters.html#divide","title":"divide","text":"<p>Return x/y (rounded).</p> <pre><code># Django Template\n{{ powerfeed.available_power|divide:3 }}VA\n# Jinja\n{{ powerfeed.available_power|divide(3) }}\n</code></pre>"},{"location":"additional-features/template-filters.html#fgcolor","title":"fgcolor","text":"<p>Return the ideal foreground color (black <code>\"#000000\"</code> or white <code>\"#ffffff\"</code>) given an arbitrary background color in RRGGBB format.</p> <pre><code>color: {{ object.status.color|fgcolor }}\n</code></pre>"},{"location":"additional-features/template-filters.html#get_docs_url","title":"get_docs_url","text":"<p>Return the static URL of the documentation for the specified model.</p> <pre><code>{{ obj | get_docs_url }}\n</code></pre>"},{"location":"additional-features/template-filters.html#get_item","title":"get_item","text":"<p>Access a specific item/key in a dictionary.</p> <pre><code># Django Template\n{{ labels|get_item:key }}\n# Jinja\n{{ labels|get_item(key) }}\n</code></pre>"},{"location":"additional-features/template-filters.html#has_one_or_more_perms","title":"has_one_or_more_perms","text":"<p>Return True if the user has at least one of the permissions in the list.</p> <pre><code># Django Template\n{{ request.user|has_one_or_more_perms:panel_details.permissions }}\n# Jinja\n{{ request.user|has_one_or_more_perms(panel_details.permissions) }}\n</code></pre>"},{"location":"additional-features/template-filters.html#has_perms","title":"has_perms","text":"<p>Return True if the user has all permissions in the list.</p> <pre><code># Django Template\n{{ request.user|has_perms:group_item_details.permissions }}\n# Jinja\n{{ request.user|has_perms(group_item_details.permissions) }}\n</code></pre>"},{"location":"additional-features/template-filters.html#humanize_speed","title":"humanize_speed","text":"<p>Humanize speeds given in Kbps.     1544 =&gt; \"1.544 Mbps\"     100000 =&gt; \"100 Mbps\"     10000000 =&gt; \"10 Gbps\"</p> <pre><code>{{ speed_value | humanize_speed }}\n</code></pre>"},{"location":"additional-features/template-filters.html#hyperlinked_object","title":"hyperlinked_object","text":"<p>Added in version 1.4.0</p> <p>Render and link to a Django model instance, if any, or render a placeholder if not.</p> <p>Uses <code>object.display</code> if available, otherwise uses the string representation of the object. If the object defines <code>get_absolute_url()</code> this will be used to hyperlink the displayed object; additionally if there is an <code>object.description</code> this will be used as the title of the hyperlink.</p> <pre><code>{{ device|hyperlinked_object }}\n</code></pre> <p>Added in version 1.5.0</p> <p>This filter now accepts an optional <code>field</code> parameter, which allows you to use a field other than <code>object.display</code> for the object representation if desired. For example, to display the object's <code>name</code> field instead:</p> <pre><code># Django Template\n{{ location|hyperlinked_object:\"name\" }}\n# Jinja\n{{ location|hyperlinked_object(\"name\") }}\n</code></pre>"},{"location":"additional-features/template-filters.html#meta","title":"meta","text":"<p>Return the specified Meta attribute of a model.</p> <pre><code>{{ obj | meta('app_label') }}\n</code></pre>"},{"location":"additional-features/template-filters.html#meters_to_feet","title":"meters_to_feet","text":"<p>Convert a length from meters to feet.</p> <pre><code>{{ meter_value | meters_to_feet }}\n</code></pre>"},{"location":"additional-features/template-filters.html#percentage","title":"percentage","text":"<p>Return x/y as a percentage.</p> <pre><code># Django Template\n{{ powerfeed.available_power|percentage:total_power }}VA\n# Jinja\n{{ powerfeed.available_power|percentage(total_power) }}\n</code></pre>"},{"location":"additional-features/template-filters.html#placeholder","title":"placeholder","text":"<p>Render a muted placeholder (<code>&lt;span class=\"text-muted\"&gt;&amp;mdash;&lt;/span&gt;</code>) if value is falsey, else render the provided value.</p> <pre><code>{{ html | placeholder }}\n</code></pre>"},{"location":"additional-features/template-filters.html#render_boolean","title":"render_boolean","text":"<p>Render HTML from a computed boolean value.</p> <p>If value is (for example) a non-empty string or True or a non-zero number, this renders <code>&lt;span class=\"text-success\"&gt;&lt;i class=\"mdi mdi-check-bold\" title=\"Yes\"&gt;&lt;/i&gt;&lt;/span&gt;</code></p> <p>If value is (for example) \"\" or 0 or False, this renders <code>&lt;span class=\"text-danger\"&gt;&lt;i class=\"mdi mdi-close-thick\" title=\"No\"&gt;&lt;/i&gt;&lt;/span&gt;</code></p> <p>If value is None this renders <code>&lt;span class=\"text-muted\"&gt;&amp;mdash;&lt;/span&gt;</code></p> <pre><code>{{ value | render_boolean }}\n</code></pre>"},{"location":"additional-features/template-filters.html#render_json","title":"render_json","text":"<p>Render a dictionary as formatted JSON.</p> <pre><code>{{ data | render_json }}\n</code></pre>"},{"location":"additional-features/template-filters.html#render_markdown","title":"render_markdown","text":"<p>Render text as Markdown.</p> <pre><code>{{ text | render_markdown }}\n</code></pre>"},{"location":"additional-features/template-filters.html#render_yaml","title":"render_yaml","text":"<p>Render a dictionary as formatted YAML.</p> <pre><code>{{ data | render_yaml }}\n</code></pre>"},{"location":"additional-features/template-filters.html#settings_or_config","title":"settings_or_config","text":"<p>Get a value from Django settings (if specified) or Constance configuration (otherwise).</p> <pre><code>{{ \"RELEASE_CHECK_URL\" | settings_or_config }}\n</code></pre>"},{"location":"additional-features/template-filters.html#split","title":"split","text":"<p>Split a string by the given value (default: comma)</p> <pre><code># Django Template\n{{ string | split }}\n{{ string | split:';' }}\n# Jinja\n{{ string | split }}\n{{ string | split(';') }}\n</code></pre>"},{"location":"additional-features/template-filters.html#tzoffset","title":"tzoffset","text":"<p>Returns the hour offset of a given time zone using the current time.</p> <pre><code>{{ object.time_zone|tzoffset }}\n</code></pre>"},{"location":"additional-features/template-filters.html#validated_viewname","title":"validated_viewname","text":"<p>Return the view name for the given model and action if valid, or None if invalid.</p> <pre><code># Django Template\n{{ obj | validated_viewname:'list' }}\n# Jinja\n{{ obj | validated_viewname('list') }}\n</code></pre>"},{"location":"additional-features/template-filters.html#viewname","title":"viewname","text":"<p>Return the view name for the given model and action. Does not perform any validation.</p> <pre><code># Django Template\n{{ obj | viewname:'list' }}\n# Jinja\n{{ obj | viewname('list') }}\n</code></pre>"},{"location":"administration/celery-queues.html","title":"Celery Task Queues","text":"<p>If you're planning to run multiple jobs, leverage job hooks or are finding that your jobs are taking too long to complete you may want to consider deploying multiple celery workers with different queues for different types of tasks.</p>"},{"location":"administration/celery-queues.html#how-celery-task-queues-work","title":"How Celery Task Queues Work","text":"<p>The default celery behavior is:</p> <ul> <li><code>--queue celery</code></li> <li><code>--concurrency</code> set to the number of CPUs detected on the system</li> <li><code>worker_prefetch_multiplier=4</code></li> </ul> <p>This means that a worker running on a 4 core system will run 4 tasks concurrently and reserve a maximum of 16 more tasks from the queue named <code>celery</code>. If you have a mixture of long running and short running tasks with a single queue, you could find your long running tasks blocking the shorter tasks.</p>"},{"location":"administration/celery-queues.html#recommended-worker-deployment","title":"Recommended Worker Deployment","text":"<p>Each environment is unique but it's generally a good idea to add at least one extra worker on a separate queue for running jobs. Nautobot uses the default <code>celery</code> queue to perform some background tasks and if the queue is full of long running jobs these system tasks could take a long time to execute. This could cause performance problems or unexpected behavior in Nautobot. A new worker can be deployed on a separate queue by using the <code>nautobot-worker.service</code> systemd service and modifying the <code>ExecStart</code> line to include a <code>--queues</code> option. Example:</p> <pre><code>ExecStart=/opt/nautobot/bin/nautobot-server celery worker --loglevel INFO --pidfile /var/tmp/nautobot-worker-jobqueue.pid --queues job_queue\n</code></pre> <p>This will create a worker that will only process tasks sent to the <code>job_queue</code> celery queue. You can use this worker to run jobs while the rest of Nautobot's background tasks will be processed by the default celery worker listening to the <code>celery</code> queue.</p> <p>Info</p> <p>Workers can be configured to listen to multiple queues by supplying a comma separated list of queues to the <code>--queues</code> argument. See the celery workers guide for more information.</p> <p>Warning</p> <p>If a job is sent to a queue that no workers are listening to, that job will remain in pending status until it's purged or a worker starts listening to that queue and processes the job. Be sure that the queue name on the worker and jobs match.</p>"},{"location":"administration/celery-queues.html#concurrency-setting","title":"Concurrency Setting","text":"<p>If you have long running jobs that use little CPU resources you may want to increase your <code>--concurrency</code> setting on your worker to increase the number of jobs that run in parallel. For example, you may have a job that logs into a device over ssh and collects some information from the command line. This task could take a long time to run but consume minimal CPU so your system may be able to run many more of these tasks in parallel than the default concurrency setting allows. The <code>--concurrency</code> setting can be modified by adding the command line option in the <code>ExecStart</code> line in your systemd service:</p> <pre><code>ExecStart=/opt/nautobot/bin/nautobot-server celery worker --loglevel INFO --pidfile /var/tmp/nautobot-worker-jobqueue.pid --queues job_queue --concurrency 64\n</code></pre> <p>You may have to change this setting multiple times to find what works best in your environment.</p> <p>Warning</p> <p>Modifying your concurrency setting may increase the CPU and will increase the memory load on your celery worker by at least 175MB per concurrent thread. Only change this setting if you have monitoring systems in place to monitor the system resources on your worker.</p>"},{"location":"administration/nautobot-server.html","title":"The Nautobot Server Command","text":"<p>Nautobot includes a command-line (CLI) management utility called <code>nautobot-server</code>, that is used as a single entrypoint for common administrative tasks.</p>"},{"location":"administration/nautobot-server.html#background","title":"Background","text":"<p>For those familiar with Django applications, this CLI utility works exactly as a project's <code>manage.py</code> script would, except that it comes bundled with the Nautobot code and therefore it gets automatically installed in the <code>bin</code> directory of your application environment.</p> <p>Important</p> <p>Since Nautobot is a Django application, there are a number of built-in management commands that will not be covered in this document. Please see the official Django documentation on management commands for more information.</p> <p>Important</p> <p>Django does not recognize <code>nautobot-server</code>. Anywhere <code>python manage.py</code> is mentioned, it is safe to replace with <code>nautobot-server</code>.</p>"},{"location":"administration/nautobot-server.html#getting-help","title":"Getting Help","text":"<p>To see all available management commands as the Nautobot user:</p> <pre><code>nautobot-server help\n</code></pre> <p>All management commands have a <code>-h/--help</code> flag to list all available arguments for that command, for example:</p> <pre><code>nautobot-server migrate --help\n</code></pre>"},{"location":"administration/nautobot-server.html#available-commands","title":"Available Commands","text":""},{"location":"administration/nautobot-server.html#celery","title":"<code>celery</code>","text":"<p><code>nautobot-server celery</code></p> <p>Celery command entrypoint which serves as a thin wrapper to the <code>celery</code> command that includes the Nautobot Celery application context. This allows us to execute Celery commands without having to worry about the chicken-and-egg problem with bootstrapping the Django settings.</p> <p>Most commonly you will be using this command to start the Celery worker process:</p> <pre><code>nautobot-server celery worker --loglevel INFO --pidfile $(pwd)/nautobot-celery.pid -n worker1\n</code></pre> <p>Output:</p> <pre><code>celery@worker1 v5.1.1 (sun-harmonics)\n\n[config]\n.&gt; app:         nautobot:0x10c357eb0\n.&gt; transport:   redis://localhost:6379/0\n.&gt; results:     redis://localhost:6379/0\n.&gt; concurrency: 8 (prefork)\n.&gt; task events: OFF (enable -E to monitor tasks in this worker)\n\n[queues]\n.&gt; celery           exchange=celery(direct) key=celery\n\n[tasks]\n  . nautobot.extras.datasources.git.pull_git_repository_and_refresh_data\n  . nautobot.extras.jobs.run_job\n  . nautobot.extras.tasks.delete_custom_field_data\n  . nautobot.extras.tasks.process_webhook\n  . nautobot.extras.tasks.provision_field\n  . nautobot.extras.tasks.update_custom_field_choice_data\n  . nautobot.utilities.tasks.get_releases\n\n[2021-07-01 21:32:40,680: INFO/MainProcess] Connected to redis://localhost:6379/0\n[2021-07-01 21:32:40,690: INFO/MainProcess] mingle: searching for neighbors\n[2021-07-01 21:32:41,713: INFO/MainProcess] mingle: all alone\n[2021-07-01 21:32:41,730: INFO/MainProcess] celery@worker1 ready.\n</code></pre> <p>Note</p> <p>The internals of this command are built into Celery. Please see the official Celery workers guide for more information.</p>"},{"location":"administration/nautobot-server.html#collectstatic","title":"<code>collectstatic</code>","text":"<p><code>nautobot-server collectstatic</code></p> <p>Collect static files into <code>STATIC_ROOT</code>.</p> <pre><code>nautobot-server collectstatic\n</code></pre> <p>Output:</p> <pre><code>965 static files copied to '/opt/nautobot/static'.\n</code></pre> <p>Note</p> <p>This is a built-in Django command. Please see the official documentation on <code>collectstatic</code> for more information.</p>"},{"location":"administration/nautobot-server.html#createsuperuser","title":"<code>createsuperuser</code>","text":"<p><code>nautobot-server createsuperuser</code></p> <p>Creates a superuser account that has all permissions.</p> <pre><code>nautobot-server createsuperuser\n</code></pre> <p>This provides the following output:</p> <pre><code>Username (leave blank to use 'jathan'): example\nEmail address: example@localhost\nPassword:\nPassword (again):\nSuperuser created successfully.\n</code></pre> <p>Note</p> <p>This is a built-in Django command. Please see the official documentation on <code>createsuperuser</code> for more information.</p>"},{"location":"administration/nautobot-server.html#dbshell","title":"<code>dbshell</code>","text":"<p><code>nautobot-server dbshell</code></p> <p>A shell for your database. This can be very useful in troubleshooting raw database issues.</p> <p>Danger</p> <p>This is an advanced feature that gives you direct access to run raw SQL queries. Use this very cautiously as you can cause irreparable damage to your Nautobot installation.</p> <pre><code>nautobot-server dbshell\n</code></pre> <p>Output:</p> <pre><code>psql (12.6 (Ubuntu 12.6-0ubuntu0.20.04.1))\nSSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)\nType \"help\" for help.\n\nnautobot=&gt; \\conninfo\nYou are connected to database \"nautobot\" as user \"nautobot\" on host \"localhost\" (address \"::1\") at port \"5432\".\nSSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)\nnautobot=&gt; \\q\n</code></pre> <p>Note</p> <p>This is a built-in Django command. Please see the official documentation on <code>dbshell</code> for more information.</p>"},{"location":"administration/nautobot-server.html#dumpdata","title":"<code>dumpdata</code>","text":"<p>Changed in version 1.3.0</p> <ul> <li><code>extras.job</code> should now be included in the dump (removed <code>--exclude extras.job</code> from the example usage)</li> <li><code>django_rq</code> should now be excluded from the dump (added <code>--exclude django_rq</code> to the example usage)</li> </ul> <p>Changed in version 1.5.23</p> <ul> <li>We do not recommend at this time using <code>--natural-primary</code> as this can result in inconsistent or incorrect data for data models that use GenericForeignKeys, such as <code>Cable</code>, <code>Note</code>, <code>ObjectChange</code>, and <code>Tag</code>.</li> <li>We also do not recommend at this time using <code>--natural-foreign</code> as it can potentially result in errors if any data models incorrectly implement their <code>natural_key()</code> and/or <code>get_by_natural_key()</code> API methods.</li> <li><code>contenttypes</code> must not be excluded from the dump (it could be excluded previously due to the use of <code>--natural-foreign</code>).</li> </ul> <pre><code>nautobot-server dumpdata \\\n  --exclude auth.permission \\\n  --exclude django_rq \\\n  --format json \\\n  --indent 2 \\\n  --traceback \\\n  &gt; nautobot_dump.json\n</code></pre> <p>Use this command to generate a JSON dump of the database contents.</p> <p>One example of using this command would be to export data from PostgreSQL and then import the data dump into MySQL.</p>"},{"location":"administration/nautobot-server.html#fix_custom_fields","title":"<code>fix_custom_fields</code>","text":"<p><code>nautobot-server fix_custom_fields</code></p> <p>Adds/Removes any custom fields which should or should not exist on an object. This command should not be run unless a custom fields jobs has failed:</p> <pre><code>nautobot-server fix_custom_fields\n</code></pre> <p>Example output:</p> <pre><code>Processing ContentType dcim | device\nProcessing ContentType dcim | site\nProcessing ContentType dcim | rack\nProcessing ContentType dcim | cable\nProcessing ContentType dcim | power feed\nProcessing ContentType circuits | circuit\nProcessing ContentType ipam | prefix\n... (truncated for brevity of documentation) ...\n</code></pre>"},{"location":"administration/nautobot-server.html#generate_secret_key","title":"<code>generate_secret_key</code>","text":"<p><code>nautobot-server generate_secret_key</code></p> <p>Generates a new <code>SECRET_KEY</code> that can be used in your <code>nautobot_config.py</code>:</p> <pre><code>nautobot-server generate_secret_key\n</code></pre> <p>Output:</p> <pre><code>e!j=vrlhz-!wl8p_3+q5s5cph29nzj$xm81eap-!&amp;n!_9^du09\n</code></pre>"},{"location":"administration/nautobot-server.html#generate_test_data","title":"<code>generate_test_data</code>","text":"<p>Added in version 1.5.0</p> <p><code>nautobot-server generate_test_data [--flush] --seed SEED</code></p> <p>Populate the database with various data as a baseline for testing (automated or manual).</p> <p><code>--flush</code> Flush any existing data from the database before generating new data.</p> <p>Danger</p> <p>Running this command with the <code>--flush</code> argument will clear all existing data in your database. You have been warned.</p> <p><code>--seed SEED</code> String to use as a random generator seed for reproducible results.</p> <pre><code>nautobot-server generate_test_data --flush --seed \"Nautobot\"\n</code></pre> <p>Sample output:</p> <pre><code>Flushing all existing data from the database...\nSeeding the pseudo-random number generator with seed \"Nautobot\"...\nCreating Statuses...\nCreating TenantGroups...\nCreating Tenants...\nCreating RIRs...\nCreating Aggregates...\nCreating RouteTargets...\nCreating VRFs...\nCreating IP/VLAN Roles...\nCreating VLANGroups...\nCreating VLANs...\nDatabase populated successfully!\n</code></pre>"},{"location":"administration/nautobot-server.html#health_check","title":"<code>health_check</code>","text":"<p><code>nautobot-server health_check</code></p> <p>Run health checks and exit 0 if everything went well.</p> <pre><code>nautobot-server health_check\n</code></pre> <p>Output</p> <pre><code>DatabaseBackend          ... working\nDefaultFileStorageHealthCheck ... working\nRedisBackend             ... working\n</code></pre> <p>Please see the healthcheck documentation for more information.</p>"},{"location":"administration/nautobot-server.html#init","title":"<code>init</code>","text":"<p><code>nautobot-server init [--disable-installation-metrics] [config_path]</code></p> <p>Generates a new configuration with all of the default settings provided for you, and will also generate a unique<code>SECRET_KEY</code>.</p> <p>By default the file will be created at <code>$HOME/.nautobot/nautobot_config.py</code>:</p> <pre><code>nautobot-server init\n</code></pre> <p>Output:</p> <pre><code>Nautobot would like to send anonymized installation metrics to the project's maintainers.\nThese metrics include the installed Nautobot version, the Python version in use, an anonymous \"deployment ID\", and a list of one-way-hashed names of enabled Nautobot Apps and their versions.\nAllow Nautobot to send these metrics? [y/n]: y\nInstallation metrics will be sent when running 'nautobot-server post_upgrade'. Thank you!\nConfiguration file created at /home/example/.nautobot/nautobot_config.py\n</code></pre> <p>Added in version 1.6.0</p> <p>The <code>nautobot-server init</code> command will now prompt you to set the initial value for the <code>INSTALLATION_METRICS_ENABLED</code> setting. See the send_installation_metrics command for more information about the feature that this setting toggles.</p> <p>For more information on configuring Nautobot for the first time or on more advanced configuration patterns, please see the guide on Nautobot Configuration.</p>"},{"location":"administration/nautobot-server.html#invalidate","title":"<code>invalidate</code>","text":"<p><code>nautobot-server invalidate</code></p> <p>Invalidates cache for entire app, model or particular instance. Most commonly you will see us recommend clearing the entire cache using <code>invalidate all</code>:</p> <pre><code>nautobot-server invalidate all\n</code></pre> <p>There are a number of other options not covered here.</p> <p>Note</p> <p>This is a built-in management command provided by the Cacheops plugin Nautobot for caching. Please see the official Cacheops documentation on <code>invalidate</code> for more information.</p>"},{"location":"administration/nautobot-server.html#loaddata","title":"<code>loaddata</code>","text":"<p><code>nautobot-server loaddata --traceback nautobot_dump.json</code></p> <p>To import the data that was exported with <code>nautobot-server dumpdata ...</code> see the following documentation:</p> <ul> <li>Remove auto-populated records from the database</li> <li>Import the database dump</li> <li>Rebuild cached cable path traces</li> </ul>"},{"location":"administration/nautobot-server.html#migrate","title":"<code>migrate</code>","text":"<p><code>nautobot-server migrate [app_label] [migration_name]</code></p> <p>Initialize a new database or run any pending database migrations to an existing database.</p> <pre><code>nautobot-server migrate\n</code></pre> <p>Output:</p> <pre><code>Wrapping model clean methods for custom validators failed because the ContentType table was not available or populated. This is normal during the execution of the migration command for the first time.\nOperations to perform:\n  Apply all migrations: admin, auth, circuits, contenttypes, dcim, extras, ipam, sessions, taggit, tenancy, users, virtualization\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n... (truncated for brevity of documentation) ...\n</code></pre> <p>Note</p> <p>This is a built-in Django command. Please see the official documentation on <code>migrate</code> for more information.</p>"},{"location":"administration/nautobot-server.html#nbshell","title":"<code>nbshell</code>","text":"<p><code>nautobot-server nbshell</code></p> <p>An interactive Python shell with all of the database models and various other utilities already imported for you. This is immensely useful for direct access to manipulating database objects.</p> <p>Danger</p> <p>This is an advanced feature that gives you direct access to the Django database models. Use this very cautiously as you can cause irreparable damage to your Nautobot installation.</p> <pre><code>nautobot-server nbshell\n</code></pre> <p>Prompt provided:</p> <pre><code>### Nautobot interactive shell (localhost)\n### Python 3.11.4 | Django 3.2.20 | Nautobot 1.6.0\n### lsmodels() will show available models. Use help(&lt;model&gt;) for more info.\n&gt;&gt;&gt;\n</code></pre> <p>Please see the dedicated guide on the Nautobot Shell for more information.</p>"},{"location":"administration/nautobot-server.html#pre_migrate","title":"<code>pre_migrate</code>","text":"<p>Added in version 1.5.23</p> <p><code>nautobot-server pre_migrate</code></p> <p>Performs pre-migration validation checks for Nautobot 2.0.</p> <p>If the Nautobot 1.5 instance cannot be upgraded, this command will exit uncleanly making it suitable for use in continuous integration workflows.</p> <p>For example, if any of the pre-migration checks fail, you may see an error message like this:</p> <pre><code>$ nautobot-server pre_migrate\n&gt;&gt;&gt; Running check: check_configcontext_uniqueness...\n&gt;&gt;&gt; Running check: check_exporttemplate_uniqueness...\n&gt;&gt;&gt; Running check: check_virtualchassis_uniqueness...\nCommandError: One or more pre-migration checks failed:\n    You cannot migrate ConfigContext or ConfigContextSchema objects that have non-unique names:\n    - ConfigContext: [{'name': 'cc1', 'count': 2}]\n    - ConfigContextSchema: [{'name': 'ccs1', 'count': 2}]\n\n    You cannot migrate VirtualChassis objects with non-unique names:\n     - [{'name': 'vc1', 'count': 2}]\n</code></pre> <p>Otherwise, a clean exit displays \"All pre-migration checks passed.\" incidating that your Nautobot instance is ready to be upgraded to Nautobot 2.0:</p> <pre><code>$ nautobot-server pre_migrate\n&gt;&gt;&gt; Running check: check_configcontext_uniqueness...\n&gt;&gt;&gt; Running check: check_exporttemplate_uniqueness...\n&gt;&gt;&gt; Running check: check_virtualchassis_uniqueness...\nAll pre-migration checks passed.\n</code></pre>"},{"location":"administration/nautobot-server.html#post_upgrade","title":"<code>post_upgrade</code>","text":"<p><code>nautobot-server post_upgrade</code></p> <p>Performs common server post-upgrade operations using a single entrypoint.</p> <p>This will run the following management commands with default settings, in order:</p> <p>Changed in version 1.6.0</p> <p>Added the <code>send_installation_metrics</code> command to the list of commands run by <code>post_upgrade</code>.</p> <ul> <li><code>migrate</code></li> <li><code>trace_paths</code></li> <li><code>collectstatic</code></li> <li><code>remove_stale_contenttypes</code></li> <li><code>clearsessions</code></li> <li><code>invalidate all</code></li> <li><code>send_installation_metrics</code></li> <li><code>refresh_content_type_cache</code></li> <li><code>refresh_dynamic_group_member_caches</code></li> </ul> <p>Note</p> <p>Commands listed here that are not covered in this document here are Django built-in commands.</p> <p><code>--no-clearsessions</code> Do not automatically clean out expired sessions.</p> <p><code>--no-collectstatic</code> Do not automatically collect static files into a single location.</p> <p><code>--no-invalidate-all</code> Do not automatically invalidate cache for entire application.</p> <p><code>--no-migrate</code> Do not automatically perform any database migrations.</p> <p><code>--no-remove-stale-contenttypes</code> Do not automatically remove stale content types.</p> <p><code>--no-trace-paths</code> Do not automatically generate missing cable paths.</p> <p><code>--no-refresh-content-type-cache</code> Do not automatically refresh the content type cache.</p> <p><code>--no-refresh-dynamic-group-member-caches</code> Do not automatically refresh the dynamic group member lists.</p> <pre><code>nautobot-server post_upgrade\n</code></pre> <p>Example Output:</p> <pre><code>Performing database migrations...\nOperations to perform:\n  Apply all migrations: admin, auth, circuits, contenttypes, dcim, extras, ipam, sessions, taggit, tenancy, users, virtualization\nRunning migrations:\n  No migrations to apply.\n\nGenerating cable paths...\nFound no missing circuit termination paths; skipping\nFound no missing console port paths; skipping\nFound no missing console server port paths; skipping\nFound no missing interface paths; skipping\nFound no missing power feed paths; skipping\nFound no missing power outlet paths; skipping\nFound no missing power port paths; skipping\nFinished.\n\nCollecting static files...\n\n0 static files copied to '/opt/nautobot/static', 965 unmodified.\n\nRemoving stale content types...\n\nRemoving expired sessions...\n\nInvalidating cache...\n</code></pre>"},{"location":"administration/nautobot-server.html#refresh_dynamic_group_member_caches","title":"<code>refresh_dynamic_group_member_caches</code>","text":"<p>Added in version 1.6.0</p> <p><code>nautobot-server refresh_dynamic_group_member_caches</code></p> <p>Refresh the cached members of all Dynamic Groups. This is useful to periodically update the cached list of members of a Dynamic Group without having to wait for caches to expire, which defaults to one hour.</p>"},{"location":"administration/nautobot-server.html#refresh_content_type_caches","title":"<code>refresh_content_type_caches</code>","text":"<p>Added in version 1.6.0</p> <p><code>nautobot-server refresh_content_type_caches</code></p> <p>Refresh the cached ContentType object property available via <code>Model._content_type_cached</code>. If content types are added or removed, this command will update the cache to reflect the current state of the database, but should already be done through the <code>post_upgrade</code> command.</p>"},{"location":"administration/nautobot-server.html#remove_stale_scheduled_jobs","title":"<code>remove_stale_scheduled_jobs</code>","text":"<p>Added in version 1.3.10</p> <p><code>nautobot-server remove_stale_scheduled_jobs [max-age of days]</code></p> <p>Delete non-recurring scheduled jobs that were scheduled to run more than <code>max-age</code> days ago.</p>"},{"location":"administration/nautobot-server.html#renaturalize","title":"<code>renaturalize</code>","text":"<p><code>nautobot-server renaturalize [app_label.ModelName [app_label.ModelName ...]]</code></p> <p>Recalculate natural ordering values for the specified models.</p> <p>This defaults to recalculating natural ordering on all models which have one or more fields of type <code>NaturalOrderingField</code>:</p> <pre><code>nautobot-server renaturalize\n</code></pre> <p>Example output:</p> <pre><code>Renaturalizing 21 models.\ndcim.ConsolePort.name (_name)... 196\ndcim.ConsoleServerPort.name (_name)... 0\ndcim.PowerPort.name (_name)... 392\ndcim.PowerOutlet.name (_name)... 0\ndcim.Interface.name (_name)... 7161\ndcim.FrontPort.name (_name)... 0\ndcim.RearPort.name (_name)... 0\ndcim.DeviceBay.name (_name)... 0\ndcim.InventoryItem.name (_name)... 1\ndcim.Device.name (_name)... 208\ndcim.ConsolePortTemplate.name (_name)... 2\ndcim.ConsoleServerPortTemplate.name (_name)... 0\ndcim.PowerPortTemplate.name (_name)... 4\ndcim.PowerOutletTemplate.name (_name)... 0\ndcim.InterfaceTemplate.name (_name)... 221\ndcim.FrontPortTemplate.name (_name)... 0\ndcim.RearPortTemplate.name (_name)... 0\ndcim.DeviceBayTemplate.name (_name)... 0\ndcim.Rack.name (_name)... 156\ndcim.Site.name (_name)... 22\nvirtualization.VMInterface.name (_name)... 0\nDone.\n</code></pre> <p>You may optionally specify or more specific models (each prefixed with its app_label) to renaturalize:</p> <pre><code>nautobot-server renaturalize dcim.Device\n</code></pre> <p>Example output:</p> <pre><code>Renaturalizing 1 models.\ndcim.Device.name (_name)... 208\nDone.\n</code></pre>"},{"location":"administration/nautobot-server.html#runjob","title":"<code>runjob</code>","text":"<p><code>nautobot-server runjob [job]</code></p> <p>Run a job (script, report) to validate or update data in Nautobot.</p> <p><code>--commit</code> Commit changes to DB (defaults to dry-run if unset). <code>--username</code> is mandatory if using this argument.</p> <p><code>--username &lt;username&gt;</code> User account to impersonate as the requester of this job.</p> <pre><code>nautobot-server runjob --commit --username someuser local/example/MyJobWithNoVars\n</code></pre> <p>Note that there is presently no option to provide input parameters (<code>data</code>) for jobs via the CLI.</p> <p>Please see the guide on Jobs for more information on working with and running jobs.</p>"},{"location":"administration/nautobot-server.html#send_installation_metrics","title":"<code>send_installation_metrics</code>","text":"<p>Added in version 1.6.0</p> <p><code>nautobot-server send_installation_metrics</code></p> <p>Send anonymized installation metrics to the Nautobot maintainers. This management command is called by <code>post_upgrade</code> and is not intended to be run manually.</p> <p>If the <code>INSTALLATION_METRICS_ENABLED</code> setting is <code>True</code>, this command will send a list of all installed plugins and their versions, as well as the currently installed Nautobot and Python versions, to the Nautobot maintainers. A randomized UUID will be generated and saved in the <code>DEPLOYMENT_ID</code> setting to anonymously but uniquely identify this installation. The plugin names will be one-way hashed with SHA256 to further anonymize the data sent. This enables tracking the installation metrics of publicly released plugins without disclosing the names of any private plugins.</p> <p>The following is an example of the data that is sent:</p> <pre><code>{\n\"deployment_id\": \"1de3dacf-f046-4a98-8d4a-17419080db79\",\n\"nautobot_version\": \"1.6.0b1\",\n\"python_version\": \"3.10.12\",\n\"installed_apps\": {\n# \"example_plugin\" hashed by sha256\n\"3ffee4622af3aad6f78257e3ae12da99ca21d71d099f67f4a2e19e464453bee7\": \"1.0.0\"\n}\n}\n</code></pre>"},{"location":"administration/nautobot-server.html#start","title":"<code>start</code>","text":"<p><code>nautobot-server start</code></p> <p>Directly invoke uWSGI to start a Nautobot server suitable for production use. This command behaves exactly as uWSGI does, but allows us to maintain a single entrypoint into the Nautobot application.</p> <p>Note</p> <p>uWSGI offers an overwhelming amount of command-line arguments that could not possibly be covered here. Please see the official uWSGI Options guide for more information.</p> <pre><code>nautobot-server start --ini ./uwsgi.ini\n</code></pre> <p>Example output:</p> <pre><code>[uWSGI] getting INI configuration from ./uwsgi.ini\n[uwsgi-static] added mapping for /static =&gt; /opt/nautobot/static\n*** Starting uWSGI 2.0.19.1 (64bit) on [Thu Mar 11 21:13:22 2021] ***\ncompiled with version: 8.3.1 20190311 (Red Hat 8.3.1-3) on 23 September 2020 02:39:40\nos: Linux-5.4.0-52-generic #57-Ubuntu SMP Thu Oct 15 10:57:00 UTC 2020\nnodename: jathan-nautobot-testing\nmachine: x86_64\nclock source: unix\npcre jit disabled\ndetected number of CPU cores: 48\ncurrent working directory: /opt/nautobot\ndetected binary path: /usr/bin/python3.8\nyour processes number limit is 256070\nyour memory page size is 4096 bytes\ndetected max file descriptor number: 1024\nbuilding mime-types dictionary from file /etc/mime.types...567 entry found\nlock engine: pthread robust mutexes\nthunder lock: disabled (you can enable it with --thunder-lock)\nuwsgi socket 0 bound to TCP address 0.0.0.0:9191 fd 7\nPython version: 3.8.5 (default, Jan 27 2021, 15:41:15)  [GCC 9.3.0]\n--- Python VM already initialized ---\nPython main interpreter initialized at 0x2573e30\npython threads support enabled\nyour server socket listen backlog is limited to 1024 connections\nyour mercy for graceful operations on workers is 60 seconds\nmapped 636432 bytes (621 KB) for 15 cores\n*** Operational MODE: preforking+threaded ***\nWSGI app 0 (mountpoint='') ready in 0 seconds on interpreter 0x2573e30 pid: 112153 (default app)\nspawned uWSGI master process (pid: 112153)\nspawned uWSGI worker 1 (pid: 112159, cores: 3)\nspawned uWSGI worker 2 (pid: 112162, cores: 3)\nspawned uWSGI worker 3 (pid: 112165, cores: 3)\nspawned uWSGI worker 4 (pid: 112168, cores: 3)\nspawned uWSGI worker 5 (pid: 112171, cores: 3)\n</code></pre> <p>Please see the guide on Deploying Nautobot Services for our recommended configuration for use with uWSGI.</p>"},{"location":"administration/nautobot-server.html#startplugin","title":"<code>startplugin</code>","text":"<p><code>nautobot-server startplugin &lt;name&gt; [directory]</code></p> <p>Create a new plugin with <code>name</code>.</p> <p>This command is similar to the django-admin startapp command, but with a default template directory (<code>--template</code>) of <code>nautobot/core/templates/plugin_template</code>. This command assists with creating a basic file structure for beginning development of a new Nautobot plugin.</p> <p>Without passing in the destination directory, <code>nautobot-server startplugin</code> will use your current directory and the <code>name</code> argument provided to create a new directory. We recommend providing a directory so that the plugin can be installed or published easily. Here is an example:</p> <pre><code>mkdir -p ~/myplugin/myplugin\nnautobot-server startplugin myplugin ~/myplugin/myplugin\n</code></pre> <p>Additional options such as <code>--name</code> or <code>--extension</code> can be found in the Django documentation.</p>"},{"location":"administration/nautobot-server.html#trace_paths","title":"<code>trace_paths</code>","text":"<p><code>nautobot-server trace_paths</code></p> <p>Generate any missing cable paths among all cable termination objects in Nautobot.</p> <p>After upgrading the database or working with Cables, Circuits, or other related objects, there may be a need to rebuild cached cable paths.</p> <p><code>--force</code> Force recalculation of all existing cable paths.</p> <p><code>--no-input</code> Do not prompt user for any input/confirmation.</p> <pre><code>nautobot-server trace_paths\n</code></pre> <p>Example output:</p> <pre><code>Found no missing circuit termination paths; skipping\nFound no missing console port paths; skipping\nFound no missing console server port paths; skipping\nFound no missing interface paths; skipping\nFound no missing power feed paths; skipping\nFound no missing power outlet paths; skipping\nFound no missing power port paths; skipping\nFinished.\n</code></pre> <p>Note</p> <p>This command is safe to run at any time. If it does detect any changes, it will exit cleanly.</p>"},{"location":"administration/nautobot-server.html#webhook_receiver","title":"<code>webhook_receiver</code>","text":"<p><code>nautobot-server webhook_receiver</code></p> <p>Start a simple listener to display received HTTP requests.</p> <p><code>--port PORT</code> Optional port number (default: <code>9000</code>)</p> <p><code>--no-headers</code> Hide HTTP request headers.</p> <pre><code>nautobot-server webhook_receiver --port 9001 --no-headers\n</code></pre> <p>Example output:</p> <pre><code>Listening on port http://localhost:9000. Stop with CONTROL-C.\n</code></pre> <p>Please see the guide on Troubleshooting Webhooks for more information.</p>"},{"location":"administration/nautobot-shell.html","title":"The Nautobot Python Shell","text":"<p>Nautobot includes a Python management shell within which objects can be directly queried, created, modified, and deleted. To enter the shell, run the following command:</p> <pre><code>nautobot-server nbshell\n</code></pre> <p>This will launch a lightly customized version of the built-in Django shell with all relevant Nautobot models pre-loaded. (If desired, the stock Django shell is also available by executing <code>nautobot-server shell</code>.)</p> <pre><code>nautobot-server nbshell\n</code></pre> <p>Example output:</p> <pre><code>### Nautobot interactive shell (localhost)\n### Python 3.11.4 | Django 3.2.20 | Nautobot 1.6.0\n### lsmodels() will show available models. Use help(&lt;model&gt;) for more info.\n</code></pre> <p>The function <code>lsmodels()</code> will print a list of all available Nautobot models:</p> <pre><code>&gt;&gt;&gt; lsmodels()\nDCIM:\nConsolePort\nConsolePortTemplate\nConsoleServerPort\nConsoleServerPortTemplate\nDevice\n...\n</code></pre> <p>Warning</p> <p>The Nautobot shell affords direct access to Nautobot data and function with very little validation in place. As such, it is crucial to ensure that only authorized, knowledgeable users are ever granted access to it. Never perform any action in the management shell without having a full backup in place.</p>"},{"location":"administration/nautobot-shell.html#querying-objects","title":"Querying Objects","text":"<p>Objects are retrieved from the database using a Django queryset. The base queryset for an object takes the form <code>&lt;model&gt;.objects.all()</code>, which will return a (truncated) list of all objects of that type.</p> <pre><code>&gt;&gt;&gt; Device.objects.all()\n&lt;QuerySet [&lt;Device: TestDevice1&gt;, &lt;Device: TestDevice2&gt;, &lt;Device: TestDevice3&gt;,\n&lt;Device: TestDevice4&gt;, &lt;Device: TestDevice5&gt;, '...(remaining elements truncated)...']&gt;\n</code></pre> <p>Use a <code>for</code> loop to cycle through all objects in the list:</p> <pre><code>&gt;&gt;&gt; for device in Device.objects.all():\n...   print(device.name, device.device_type)\n...\n('TestDevice1', &lt;DeviceType: PacketThingy 9000&gt;)\n('TestDevice2', &lt;DeviceType: PacketThingy 9000&gt;)\n('TestDevice3', &lt;DeviceType: PacketThingy 9000&gt;)\n('TestDevice4', &lt;DeviceType: PacketThingy 9000&gt;)\n('TestDevice5', &lt;DeviceType: PacketThingy 9000&gt;)\n...\n</code></pre> <p>To count all objects matching the query, replace <code>all()</code> with <code>count()</code>:</p> <pre><code>&gt;&gt;&gt; Device.objects.count()\n1274\n</code></pre> <p>To retrieve a particular object (typically by its primary key or other unique field), use <code>get()</code>:</p> <pre><code>&gt;&gt;&gt; Site.objects.get(pk=\"8a2c9c3b-076e-4688-8a0b-89362f343a26\")\n&lt;Site: Test Lab&gt;\n</code></pre>"},{"location":"administration/nautobot-shell.html#filtering-querysets","title":"Filtering Querysets","text":"<p>In most cases, you will want to retrieve only a specific subset of objects. To filter a queryset, replace <code>all()</code> with <code>filter()</code> and pass one or more keyword arguments. For example:</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(status__slug=\"active\")\n&lt;QuerySet [&lt;Device: TestDevice1&gt;, &lt;Device: TestDevice2&gt;, &lt;Device: TestDevice3&gt;,\n&lt;Device: TestDevice8&gt;, &lt;Device: TestDevice9&gt;, '...(remaining elements truncated)...']&gt;\n</code></pre> <p>Querysets support slicing to return a specific range of objects.</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(status__slug=\"active\")[:3]\n&lt;QuerySet [&lt;Device: TestDevice1&gt;, &lt;Device: TestDevice2&gt;, &lt;Device: TestDevice3&gt;]&gt;\n</code></pre> <p>The <code>count()</code> method can be appended to the queryset to return a count of objects rather than the full list.</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(status__slug=\"active\").count()\n982\n</code></pre> <p>Relationships with other models can be traversed by concatenating attribute names with a double-underscore. For example, the following will return all devices assigned to the tenant named \"Pied Piper.\"</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(tenant__name=\"Pied Piper\")\n</code></pre> <p>This approach can span multiple levels of relations. For example, the following will return all IP addresses assigned to a device in North America:</p> <pre><code>&gt;&gt;&gt; IPAddress.objects.filter(interface__device__site__region__slug=\"north-america\")\n</code></pre> <p>Note</p> <p>While the above query is functional, it's not very efficient. There are ways to optimize such requests, however they are out of scope for this document. For more information, see the Django queryset method reference documentation.</p> <p>Reverse relationships can be traversed as well. For example, the following will find all devices with an interface named \"em0\":</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(interfaces__name=\"em0\")\n</code></pre> <p>Character fields can be filtered against partial matches using the <code>contains</code> or <code>icontains</code> field lookup (the later of which is case-insensitive).</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(name__icontains=\"testdevice\")\n</code></pre> <p>Similarly, numeric fields can be filtered by values less than, greater than, and/or equal to a given value.</p> <pre><code>&gt;&gt;&gt; VLAN.objects.filter(vid__gt=2000)\n</code></pre> <p>Multiple filters can be combined to further refine a queryset.</p> <pre><code>&gt;&gt;&gt; VLAN.objects.filter(vid__gt=2000, name__icontains=\"engineering\")\n</code></pre> <p>To return the inverse of a filtered queryset, use <code>exclude()</code> instead of <code>filter()</code>.</p> <pre><code>&gt;&gt;&gt; Device.objects.count()\n4479\n&gt;&gt;&gt; Device.objects.filter(status=\"active\").count()\n4133\n&gt;&gt;&gt; Device.objects.exclude(status=\"active\").count()\n346\n</code></pre> <p>Info</p> <p>The examples above are intended only to provide a cursory introduction to queryset filtering. For an exhaustive list of the available filters, please consult the Django queryset API documentation.</p>"},{"location":"administration/nautobot-shell.html#creating-and-updating-objects","title":"Creating and Updating Objects","text":"<p>New objects can be created by instantiating the desired model, defining values for all required attributes, and calling <code>validated_save()</code> on the instance. For example, we can create a new VLAN by specifying its numeric ID, name, and assigned site:</p> <pre><code>&gt;&gt;&gt; lab1 = Site.objects.get(pk=\"8a2c9c3b-076e-4688-8a0b-89362f343a26\")\n&gt;&gt;&gt; myvlan = VLAN(vid=123, name=\"MyNewVLAN\", site=lab1)\n&gt;&gt;&gt; myvlan.validated_save()\n</code></pre> <p>Alternatively, the above can be performed as a single operation. (Note, however, that <code>validated_save()</code> does not return the new instance for reuse.)</p> <pre><code>&gt;&gt;&gt; VLAN(vid=123, name=\"MyNewVLAN\", site=Site.objects.get(pk=\"8a2c9c3b-076e-4688-8a0b-89362f343a26\")).validated_save()\n</code></pre> <p>To modify an existing object, we retrieve it, update the desired field(s), and call <code>validated_save()</code> again.</p> <pre><code>&gt;&gt;&gt; vlan = VLAN.objects.get(pk=\"b4b4344f-f6bb-4ceb-85bc-4f169c753157\")\n&gt;&gt;&gt; vlan.name\n'MyNewVLAN'\n&gt;&gt;&gt; vlan.name = 'BetterName'\n&gt;&gt;&gt; vlan.validated_save()\n&gt;&gt;&gt; VLAN.objects.get(pk=\"b4b4344f-f6bb-4ceb-85bc-4f169c753157\").name\n'BetterName'\n</code></pre> <p>Warning</p> <p>It is recommended to make use of the <code>validated_save()</code> convenience method which exists on all core models. While the Django <code>save()</code> method still exists, the <code>validated_save()</code> method saves the instance data but first enforces model validation logic. Simply calling <code>save()</code> on the model instance does not enforce validation automatically and may lead to bad data. See the development best practices.</p> <p>Warning</p> <p>The Django ORM provides methods to create/edit many objects at once, namely <code>bulk_create()</code> and <code>update()</code>. These are best avoided in most cases as they bypass a model's built-in validation and can easily lead to database corruption if not used carefully.</p>"},{"location":"administration/nautobot-shell.html#deleting-objects","title":"Deleting Objects","text":"<p>To delete an object, simply call <code>delete()</code> on its instance. This will return a dictionary of all objects (including related objects) which have been deleted as a result of this operation.</p> <pre><code>&gt;&gt;&gt; vlan\n&lt;VLAN: 123 (BetterName)&gt;\n&gt;&gt;&gt; vlan.delete()\n(1, {'ipam.VLAN': 1})\n</code></pre> <p>To delete multiple objects at once, call <code>delete()</code> on a filtered queryset. It's a good idea to always sanity-check the count of selected objects before deleting them.</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(name__icontains='test').count()\n27\n&gt;&gt;&gt; Device.objects.filter(name__icontains='test').delete()\n(35, {'dcim.DeviceBay': 0, 'dcim.InterfaceConnection': 4,\n'extras.ImageAttachment': 0, 'dcim.Device': 27, 'dcim.Interface': 4,\n'dcim.ConsolePort': 0, 'dcim.PowerPort': 0})\n</code></pre> <p>Warning</p> <p>Deletions are immediate and irreversible. Always consider the impact of deleting objects carefully before calling <code>delete()</code> on an instance or queryset.</p>"},{"location":"administration/nautobot-shell.html#change-logging-and-webhooks","title":"Change Logging and Webhooks","text":"<p>Note that Nautobot's change logging and webhook processing features operate under the context of an HTTP request. As such, these functions do not work automatically when using the ORM directly, either through the <code>nbshell</code> or otherwise. A special context manager is provided to allow these features to operate under an emulated HTTP request context. This context manager must be explicitly invoked for change log entries and webhooks to be created when interacting with objects through the ORM. Here is an example using the <code>web_request_context</code> context manager within the nbshell:</p> <pre><code>&gt;&gt;&gt; from nautobot.extras.context_managers import web_request_context\n&gt;&gt;&gt; user = User.objects.get(username=\"admin\")\n&gt;&gt;&gt; with web_request_context(user):\n...     lax = Site(name=\"LAX\")\n...     lax.validated_save()\n</code></pre> <p>A <code>User</code> object must be provided. A <code>WSGIRequest</code> may optionally be passed and one will automatically be created if not provided.</p>"},{"location":"administration/permissions.html","title":"Permissions","text":"<p>Nautobot provides an object-based permissions framework, which replace's Django's built-in permissions model. Object-based permissions enable an administrator to grant users or groups the ability to perform an action on arbitrary subsets of objects in Nautobot, rather than all objects of a certain type. For example, it is possible to grant a user permission to view only sites within a particular region, or to modify only VLANs with a numeric ID within a certain range.</p>"},{"location":"administration/permissions.html#object-permissions","title":"Object Permissions","text":"<p>A permission in Nautobot represents a relationship shared by several components:</p> <ul> <li>Object type(s) - One or more types of object in Nautobot</li> <li>User(s)/Group(s) - One or more users or groups of users</li> <li>Action(s) - The action(s) that can be performed on an object</li> <li>Constraints - An arbitrary filter used to limit the granted action(s) to a specific subset of objects</li> </ul> <p>At a minimum, a permission assignment must specify one object type, one user or group, and one action. The specification of constraints is optional: A permission without any constraints specified will apply to all instances of the selected model(s).</p>"},{"location":"administration/permissions.html#actions","title":"Actions","text":"<p>There are four core actions that can be permitted for each type of object within Nautobot, roughly analogous to the CRUD convention (create, read, update, and delete):</p> <ul> <li>View - Retrieve an object from the database</li> <li>Add - Create a new object</li> <li>Change - Modify an existing object</li> <li>Delete - Delete an existing object</li> </ul> <p>In addition to these, permissions can also grant custom actions that may be required by a specific model or plugin. For example, the <code>napalm_read</code> permission on the device model allows a user to execute NAPALM queries on a device via Nautobot's REST API. These can be specified when granting a permission in the \"additional actions\" field.</p> <p>Note</p> <p>Internally, all actions granted by a permission (both built-in and custom) are stored as strings in an array field named <code>actions</code>.</p>"},{"location":"administration/permissions.html#constraints","title":"Constraints","text":"<p>Constraints are expressed as a JSON object or list representing a Django query filter. This is the same syntax that you would pass to the QuerySet <code>filter()</code> method when performing a query using the Django ORM. As with query filters, double underscores can be used to traverse related objects or invoke lookup expressions. Some example queries and their corresponding definitions are shown below.</p> <p>All attributes defined within a single JSON object are applied with a logical AND. For example, suppose you assign a permission for the site model with the following constraints.</p> <pre><code>{\n\"status__name\": \"Active\",\n\"region__name\": \"Americas\"\n}\n</code></pre> <p>The permission will grant access only to sites which have a status of \"Active\" and which are assigned to the \"Americas\" region.</p> <p>To achieve a logical OR with a different set of constraints, define multiple objects within a list. For example, if you want to constrain the permission to VLANs with an ID between 100 and 199 or a status of \"reserved,\" do the following:</p> <pre><code>[\n{\n\"vid__gte\": 100,\n\"vid__lt\": 200\n},\n{\n\"status__name\": \"Reserved\"\n}\n]\n</code></pre> <p>Additionally, where multiple permissions have been assigned for an object type, their collective constraints will be merged using a logical \"OR\" operation.</p>"},{"location":"administration/permissions.html#example-constraint-definitions","title":"Example Constraint Definitions","text":"Constraints Description <code>{\"status__name\": \"Active\"}</code> Status name is active <code>{\"status__name__in\": [\"Planned\", \"Reserved\"]}</code> Status name is active OR reserved <code>{\"status__name\": \"Active\", \"role__name\": \"testing\"}</code> Status name is active OR role name is testing <code>{\"name__startswith\": \"Foo\"}</code> Name starts with \"Foo\" (case-sensitive) <code>{\"name__iendswith\": \"bar\"}</code> Name ends with \"bar\" (case-insensitive) <code>{\"vid__gte\": 100, \"vid__lt\": 200}</code> VLAN ID is greater than or equal to 100 AND less than 200 <code>[{\"vid__lt\": 200}, {\"status__name\": \"Reserved\"}]</code> VLAN ID is less than 200 OR status is reserved"},{"location":"administration/permissions.html#permissions-enforcement","title":"Permissions Enforcement","text":""},{"location":"administration/permissions.html#viewing-objects","title":"Viewing Objects","text":"<p>Object-based permissions work by filtering the database query generated by a user's request to restrict the set of objects returned. When a request is received, Nautobot first determines whether the user is authenticated and has been granted to perform the requested action. For example, if the requested URL is <code>/dcim/devices/</code>, Nautobot will check for the <code>dcim.view_device</code> permission. If the user has not been assigned this permission (either directly or via a group assignment), Nautobot will return a 403 (forbidden) HTTP response.</p> <p>If the permission has been granted, Nautobot will compile any specified constraints for the model and action. For example, suppose two permissions have been assigned to the user granting view access to the device model, with the following constraints:</p> <pre><code>[\n{\"site__name__in\":  [\"NYC1\", \"NYC2\"]},\n{\"status__name\":  \"Offline\", \"tenant__isnull\":  true}\n]\n</code></pre> <p>This grants the user access to view any device that is assigned to a site named NYC1 or NYC2, or which has a status name of \"Offline\" and has no tenant assigned. These constraints are equivalent to the following ORM query:</p> <pre><code>Site.objects.filter(\n    Q(site__name__in=['NYC1', 'NYC2']),\n    Q(status__name='Active', tenant__isnull=True)\n)\n</code></pre>"},{"location":"administration/permissions.html#creating-and-modifying-objects","title":"Creating and Modifying Objects","text":"<p>The same sort of logic is in play when a user attempts to create or modify an object in Nautobot, with a twist. Once validation has completed, Nautobot starts an atomic database transaction to facilitate the change, and the object is created or saved normally. Next, still within the transaction, Nautobot issues a second query to retrieve the newly created/updated object, filtering the restricted queryset with the object's primary key. If this query fails to return the object, Nautobot knows that the new revision does not match the constraints imposed by the permission. The transaction is then rolled back, leaving the database in its original state prior to the change, and the user is informed of the violation.</p>"},{"location":"administration/permissions.html#assigning-permissions","title":"Assigning Permissions","text":"<p>Permissions are implemented by assigning them to specific users and/or to groups of users. Users can have a combination of permissions and groups assigned to their account. All of the permissions granted to the user's groups and directly to the user's account will be used when determining authorization to access an object or view.</p>"},{"location":"administration/permissions.html#assigning-permissions-to-individual-users","title":"Assigning Permissions to Individual Users","text":"<p>Permissions can be related directly to users from the Admin UI or the API:</p> - Admin UI API Staff superusers Yes Yes Non-staff superusers No Yes Staff users with <code>users.add_permission</code> or <code>users.change_permission</code> Yes Yes Non-staff users with <code>users.add_permission</code> or <code>users.change_permission</code> No Yes <p>Multiple permissions can be assigned to a user account.</p> <p>Info</p> <p>User permission relationships can be managed in the Admin UI by modifying the user or the permission.</p> <p>Warning</p> <p>Granting a user <code>users.change_permission</code> or <code>users.add_permission</code> gives the user the ability to modify their own permissions. This permission should be restricted to trusted accounts and should be considered the same as giving a user full access.</p>"},{"location":"administration/permissions.html#creating-groups","title":"Creating Groups","text":"<p>Groups of users can be created to provide role-based access control and simplify user permissions management. Permissions related to a group will apply to all users in the group. A user can belong to any number of groups. Groups can be created from the Admin UI or the API:</p> - Admin UI API Superusers Yes Yes Users with <code>auth.add_group</code> or <code>auth.change_group</code> No Yes"},{"location":"administration/permissions.html#adding-users-to-groups","title":"Adding Users to Groups","text":"<p>Users can be added to groups through the Admin UI by superusers or automatically assigned to externally authenticated users through the <code>EXTERNAL_AUTH_DEFAULT_GROUPS</code> and <code>EXTERNAL_AUTH_DEFAULT_PERMISSIONS</code> settings. Nautobot groups can optionally be mapped to LDAP groups when using LDAP authentication.</p>"},{"location":"administration/permissions.html#assigning-permissions-to-groups","title":"Assigning Permissions to Groups","text":"<p>Permissions can be related to groups by superusers or users with <code>users.add_permission</code> or <code>users.change_permission</code> permissions.</p> - Admin UI API Superusers Yes Yes Staff users with <code>users.add_permission</code> or <code>users.change_permission</code> Yes Yes Regular users with <code>users.add_permission</code> or <code>users.change_permission</code> No Yes <p>Multiple permissions can be assigned to a user group.</p> <p>Info</p> <p>Group permission relationships can be managed in the Admin UI by modifying the group (superusers only) or the permission.</p>"},{"location":"administration/replicating-nautobot.html","title":"Replicating Nautobot","text":""},{"location":"administration/replicating-nautobot.html#replicating-the-database","title":"Replicating the Database","text":"<p>Nautobot employs a PostgreSQL database, so general PostgreSQL best practices apply here. The database can be written to a file and restored using the <code>pg_dump</code> and <code>psql</code> utilities, respectively.</p> <p>Note</p> <p>The examples below assume that your database is named <code>nautobot</code>.</p>"},{"location":"administration/replicating-nautobot.html#export-the-database","title":"Export the Database","text":"<p>Use the <code>pg_dump</code> utility to export the entire database to a file:</p> <pre><code>pg_dump nautobot &gt; nautobot.sql\n</code></pre> <p>When replicating a production database for development purposes, you may find it convenient to exclude changelog data, which can easily account for the bulk of a database's size. To do this, exclude the <code>extras_objectchange</code> table data from the export. The table will still be included in the output file, but will not be populated with any data.</p> <pre><code>pg_dump --exclude-table-data=extras_objectchange nautobot &gt; nautobot.sql\n</code></pre>"},{"location":"administration/replicating-nautobot.html#load-an-exported-database","title":"Load an Exported Database","text":"<p>When restoring a database from a file, it's recommended to delete any existing database first to avoid potential conflicts.</p> <p>Warning</p> <p>The following will destroy and replace any existing instance of the database.</p> <pre><code>psql -c 'drop database nautobot'\npsql -c 'create database nautobot'\npsql nautobot &lt; nautobot.sql\n</code></pre> <p>Keep in mind that PostgreSQL user accounts and permissions are not included with the dump: You will need to create those manually if you want to fully replicate the original database (see the installation docs). When setting up a development instance of Nautobot, it's strongly recommended to use different credentials anyway.</p>"},{"location":"administration/replicating-nautobot.html#export-the-database-schema","title":"Export the Database Schema","text":"<p>If you want to export only the database schema, and not the data itself (e.g. for development reference), do the following:</p> <pre><code>pg_dump -s nautobot &gt; nautobot_schema.sql\n</code></pre>"},{"location":"administration/replicating-nautobot.html#replicating-uploaded-media","title":"Replicating Uploaded Media","text":"<p>By default, Nautobot stores uploaded files (such as image attachments) in its media directory. To fully replicate an instance of Nautobot, you'll need to copy both the database and the media files.</p> <p>Note</p> <p>These operations are not necessary if your installation is utilizing a remote storage backend.</p>"},{"location":"administration/replicating-nautobot.html#archive-the-media-directory","title":"Archive the Media Directory","text":"<p>Execute the following command (which may need to be changed if you're using non-default storage path settings):</p> <pre><code>tar -czf nautobot_media.tar.gz $NAUTOBOT_ROOT/media/\n</code></pre>"},{"location":"administration/replicating-nautobot.html#restore-the-media-directory","title":"Restore the Media Directory","text":"<p>To extract the saved archive into a new installation, run the following from the installation root:</p> <pre><code>tar -xf nautobot_media.tar.gz\n</code></pre>"},{"location":"administration/replicating-nautobot.html#cache-invalidation","title":"Cache Invalidation","text":"<p>If you are migrating your instance of Nautobot to a different machine, be sure to first invalidate the cache on the original instance by issuing the <code>invalidate all</code> management command (within the Python virtual environment):</p> <pre><code>nautobot-server invalidate all\n</code></pre>"},{"location":"apps/index.html","title":"Nautobot Apps Overview","text":"<p>To view and search the full list of Apps, head over to the Nautobot App Ecosystem Page on networktocode.com. Below you will only find links to the documentation for the apps listed in the table.</p>"},{"location":"apps/index.html#community-developed-nautobot-apps","title":"Community-Developed Nautobot Apps","text":"<p>Find out more about what documentation is available for the various community developed Nautobot Apps by visiting the Community Apps page.</p>"},{"location":"apps/index.html#network-to-code-nautobot-apps","title":"Network to Code Nautobot Apps","text":"<p>These Nautobot Apps have their documentation hosted as a subproject of this docs site and they are built and structured according to the Network To Code documentation standards.</p> App Name Description Nautobot ChatOps Add chatbot functionality to Nautobot to facilitate getting data from Nautobot directly from a chat platform. The ChatOps app is a multi-platform chatbot for network operations and engineering teams. It is built to seamlessly work across Slack, MS Teams, WebEx Teams, and Mattermost, but also as a framework to help developers add more chat platforms in the future. Nautobot Device Lifecycle Management Make related associations to Devices, Device Types, and Inventory Items to help provide data about the hardware end of life notices, appropriate software versions to be running on the devices, and the maintenance contracts associated with devices. Nautobot Device Onboarding Simplify the onboarding process of a new device by allowing the user to specify a small amount of info and having the plugin populate a much larger amount of device data in Nautobot. Nautobot Firewall Models Construct firewall policies in Nautobot with the help of the provided collection of relevant models. Nautobot Golden Configuration Automate configuration backups, perform configuration compliance, and generate intended configurations. Nautobot Plugin Nornir Provides a small shim layer between nornir-nautobot and other plugins. The primary abilities that the plugin provides are a native Nornir ORM based inventory and a credential manager. Nautobot Single Source of Truth (SSoT) Integrate and synchronize data between various \"source of truth\" (SoT) systems, with Nautobot acting as a central clearinghouse for data - a Single Source of Truth"},{"location":"apps/nautobot-apps.html","title":"Nautobot Community Apps","text":"<p>The following is a manually curated list of Apps/Plugins from the wider Nautobot community, which have some sort of documentation.</p> App Name Links Description Nautobot SSoT vSphere DocsGitHub A plugin for Nautobot that leverages the SSoT plugin to create Virtual Machines, VMInterfaces, IPAddresses, Clusters, and Cluster Groups from VMWare vSphere. GWDG Networking Team Plugins GitLab nautobot-movenautobot-bulk-connectnautobot-cable-utilsnautobot-evpnnautobot-sfp-inventorynautobot-type-reapplyand more."},{"location":"code-reference/nautobot/apps/__init__.html","title":"nautobot.apps","text":""},{"location":"code-reference/nautobot/apps/__init__.html#nautobot.apps","title":"<code>nautobot.apps</code>","text":"<p>Core app functionality.</p>"},{"location":"code-reference/nautobot/apps/__init__.html#nautobot.apps.nautobot_database_ready","title":"<code>nautobot.apps.nautobot_database_ready = Signal()</code>  <code>module-attribute</code>","text":"<p>Signal sent to all installed apps and plugins after the database is ready.</p> <p>Specifically this is triggered by the Django built-in <code>post_migrate</code> signal, i.e., after <code>nautobot-server migrate</code> or <code>nautobot-server post_upgrade</code> commands are run.</p> <p>In other words, this signal is not emitted during the actual server execution; rather it is emitted when setting up the database prior to running the server.</p> <p>The intended purpose of this signal is for apps and plugins that need to populate or modify the database contents (not the database schema itself!), for example to ensure the existence of certain CustomFields, Jobs, Relationships, etc.</p>"},{"location":"code-reference/nautobot/apps/__init__.html#nautobot.apps.NautobotAppConfig","title":"<code>nautobot.apps.NautobotAppConfig</code>","text":"<p>             Bases: <code>NautobotConfig</code></p> <p>Subclass of Django's built-in AppConfig class, to be used for Nautobot plugins.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>class NautobotAppConfig(NautobotConfig):\n\"\"\"\n    Subclass of Django's built-in AppConfig class, to be used for Nautobot plugins.\n    \"\"\"\n# Plugin metadata\nauthor = \"\"\nauthor_email = \"\"\ndescription = \"\"\nversion = \"\"\n# Root URL path under /plugins. If not set, the plugin's label will be used.\nbase_url = None\n# Minimum/maximum compatible versions of Nautobot\nmin_version = None\nmax_version = None\n# Default configuration parameters\ndefault_settings = {}\n# Mandatory configuration parameters\nrequired_settings = []\n# Middleware classes provided by the plugin\nmiddleware = []\n# Extra installed apps provided or required by the plugin. These will be registered\n# along with the plugin.\ninstalled_apps = []\n# Cacheops configuration. Cache all operations by default.\ncaching_config = {\n\"*\": {\"ops\": \"all\"},\n}\n# URL reverse lookup names, a la \"plugins:myplugin:home\", \"plugins:myplugin:configure\", \"plugins:myplugin:docs\"\nhome_view_name = None\nconfig_view_name = None\ndocs_view_name = None\n# Default integration paths. Plugin authors can override these to customize the paths to\n# integrated components.\nbanner_function = \"banner.banner\"\ncustom_validators = \"custom_validators.custom_validators\"\ndatasource_contents = \"datasources.datasource_contents\"\nfilter_extensions = \"filter_extensions.filter_extensions\"\ngraphql_types = \"graphql.types.graphql_types\"\nhomepage_layout = \"homepage.layout\"\njinja_filters = \"jinja_filters\"\njobs = \"jobs.jobs\"\nmetrics = \"metrics.metrics\"\nmenu_items = \"navigation.menu_items\"\nsecrets_providers = \"secrets.secrets_providers\"\ntemplate_extensions = \"template_content.template_extensions\"\noverride_views = \"views.override_views\"\ndef ready(self):\n\"\"\"Callback after plugin app is loaded.\"\"\"\n# We don't call super().ready here because we don't need or use the on-ready behavior of a core Nautobot app\n# Introspect URL patterns and models to make available to the installed-plugins detail UI view.\nurlpatterns = import_object(f\"{self.__module__}.urls.urlpatterns\")\napi_urlpatterns = import_object(f\"{self.__module__}.api.urls.urlpatterns\")\nself.features = {\n\"api_urlpatterns\": sorted(\n(urlp for urlp in (api_urlpatterns or []) if isinstance(urlp, URLPattern)),\nkey=lambda urlp: (urlp.name, str(urlp.pattern)),\n),\n\"models\": sorted(model._meta.verbose_name for model in self.get_models()),\n\"urlpatterns\": sorted(\n(urlp for urlp in (urlpatterns or []) if isinstance(urlp, URLPattern)),\nkey=lambda urlp: (urlp.name, str(urlp.pattern)),\n),\n}\n# Register banner function (if defined)\nbanner_function = import_object(f\"{self.__module__}.{self.banner_function}\")\nif banner_function is not None:\nregister_banner_function(banner_function)\nself.features[\"banner\"] = True\n# Register model validators (if defined)\nvalidators = import_object(f\"{self.__module__}.{self.custom_validators}\")\nif validators is not None:\nregister_custom_validators(validators)\nself.features[\"custom_validators\"] = sorted(set(validator.model for validator in validators))\n# Register datasource contents (if defined)\ndatasource_contents = import_object(f\"{self.__module__}.{self.datasource_contents}\")\nif datasource_contents is not None:\nregister_datasource_contents(datasource_contents)\nself.features[\"datasource_contents\"] = datasource_contents\n# Register GraphQL types (if defined)\ngraphql_types = import_object(f\"{self.__module__}.{self.graphql_types}\")\nif graphql_types is not None:\nregister_graphql_types(graphql_types)\n# Import jobs (if present)\njobs = import_object(f\"{self.__module__}.{self.jobs}\")\nif jobs is not None:\nregister_jobs(jobs)\nself.features[\"jobs\"] = jobs\n# Import metrics (if present)\nmetrics = import_object(f\"{self.__module__}.{self.metrics}\")\nif metrics is not None:\nregister_metrics(metrics)\nself.features[\"metrics\"] = []  # Initialize as empty, to be filled by the signal handler\n# Inject the metrics to discover into the signal handler.\nsignal_callback = partial(discover_metrics, metrics=metrics)\nnautobot_database_ready.connect(signal_callback, sender=self)\n# Register plugin navigation menu items (if defined)\nmenu_items = import_object(f\"{self.__module__}.{self.menu_items}\")\nif menu_items is not None:\nregister_plugin_menu_items(self.verbose_name, menu_items)\nself.features[\"nav_menu\"] = menu_items\nhomepage_layout = import_object(f\"{self.__module__}.{self.homepage_layout}\")\nif homepage_layout is not None:\nregister_homepage_panels(self.path, self.label, homepage_layout)\nself.features[\"home_page\"] = homepage_layout\n# Register template content (if defined)\ntemplate_extensions = import_object(f\"{self.__module__}.{self.template_extensions}\")\nif template_extensions is not None:\nregister_template_extensions(template_extensions)\nself.features[\"template_extensions\"] = sorted(set(extension.model for extension in template_extensions))\n# Register custom jinja filters\ntry:\nimport_module(f\"{self.__module__}.{self.jinja_filters}\")\nself.features[\"jinja_filters\"] = True\nexcept ModuleNotFoundError:\npass\n# Register secrets providers (if any)\nsecrets_providers = import_object(f\"{self.__module__}.{self.secrets_providers}\")\nif secrets_providers is not None:\nfor secrets_provider in secrets_providers:\nregister_secrets_provider(secrets_provider)\nself.features[\"secrets_providers\"] = secrets_providers\n# Register custom filters (if any)\nfilter_extensions = import_object(f\"{self.__module__}.{self.filter_extensions}\")\nif filter_extensions is not None:\nregister_filter_extensions(filter_extensions, self.name)\nself.features[\"filter_extensions\"] = {\"filterset_fields\": [], \"filterform_fields\": []}\nfor filter_extension in filter_extensions:\nfor filterset_field_name in filter_extension.filterset_fields.keys():\nself.features[\"filter_extensions\"][\"filterset_fields\"].append(\nf\"{filter_extension.model} -&gt; {filterset_field_name}\"\n)\nfor filterform_field_name in filter_extension.filterform_fields.keys():\nself.features[\"filter_extensions\"][\"filterform_fields\"].append(\nf\"{filter_extension.model} -&gt; {filterform_field_name}\"\n)\n# Register override view (if any)\noverride_views = import_object(f\"{self.__module__}.{self.override_views}\")\nif override_views is not None:\nfor qualified_view_name, view in override_views.items():\nself.features.setdefault(\"overridden_views\", []).append(\n(qualified_view_name, f\"{view.__module__}.{view.__name__}\")\n)\nregister_override_views(override_views, self.name)\n@classmethod\ndef validate(cls, user_config, nautobot_version):\n\"\"\"Validate the user_config for baseline correctness.\"\"\"\nplugin_name = cls.__module__\n# Enforce version constraints\ncurrent_version = version.parse(nautobot_version)\nif cls.min_version is not None:\nmin_version = version.parse(cls.min_version)\nif current_version &lt; min_version:\nraise PluginImproperlyConfigured(\nf\"Plugin {plugin_name} requires Nautobot minimum version {cls.min_version}\"\n)\nif cls.max_version is not None:\nmax_version = version.parse(cls.max_version)\nif current_version &gt; max_version:\nraise PluginImproperlyConfigured(\nf\"Plugin {plugin_name} requires Nautobot maximum version {cls.max_version}\"\n)\n# Mapping of {setting_name: setting_type} used to validate user configs\n# TODO(jathan): This is fine for now, but as we expand the functionality\n# of plugins, we'll need to consider something like pydantic or attrs.\nsetting_validations = {\n\"caching_config\": dict,\n\"default_settings\": dict,\n\"installed_apps\": list,\n\"middleware\": list,\n\"required_settings\": list,\n}\n# Validate user settings\nfor setting_name, setting_type in setting_validations.items():\nif not isinstance(getattr(cls, setting_name), setting_type):\nraise PluginImproperlyConfigured(f\"Plugin {plugin_name} {setting_name} must be a {setting_type}\")\n# Validate the required_settings\nfor setting in cls.required_settings:\nif setting not in user_config:\nraise PluginImproperlyConfigured(\nf\"Plugin {plugin_name} requires '{setting}' to be present in \"\nf\"the PLUGINS_CONFIG['{plugin_name}'] section of your settings.\"\n)\n# Apply default configuration values\nfor setting, value in cls.default_settings.items():\nif setting not in user_config:\nuser_config[setting] = value\n</code></pre>"},{"location":"code-reference/nautobot/apps/__init__.html#nautobot.extras.plugins.NautobotAppConfig.ready","title":"<code>ready()</code>","text":"<p>Callback after plugin app is loaded.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>def ready(self):\n\"\"\"Callback after plugin app is loaded.\"\"\"\n# We don't call super().ready here because we don't need or use the on-ready behavior of a core Nautobot app\n# Introspect URL patterns and models to make available to the installed-plugins detail UI view.\nurlpatterns = import_object(f\"{self.__module__}.urls.urlpatterns\")\napi_urlpatterns = import_object(f\"{self.__module__}.api.urls.urlpatterns\")\nself.features = {\n\"api_urlpatterns\": sorted(\n(urlp for urlp in (api_urlpatterns or []) if isinstance(urlp, URLPattern)),\nkey=lambda urlp: (urlp.name, str(urlp.pattern)),\n),\n\"models\": sorted(model._meta.verbose_name for model in self.get_models()),\n\"urlpatterns\": sorted(\n(urlp for urlp in (urlpatterns or []) if isinstance(urlp, URLPattern)),\nkey=lambda urlp: (urlp.name, str(urlp.pattern)),\n),\n}\n# Register banner function (if defined)\nbanner_function = import_object(f\"{self.__module__}.{self.banner_function}\")\nif banner_function is not None:\nregister_banner_function(banner_function)\nself.features[\"banner\"] = True\n# Register model validators (if defined)\nvalidators = import_object(f\"{self.__module__}.{self.custom_validators}\")\nif validators is not None:\nregister_custom_validators(validators)\nself.features[\"custom_validators\"] = sorted(set(validator.model for validator in validators))\n# Register datasource contents (if defined)\ndatasource_contents = import_object(f\"{self.__module__}.{self.datasource_contents}\")\nif datasource_contents is not None:\nregister_datasource_contents(datasource_contents)\nself.features[\"datasource_contents\"] = datasource_contents\n# Register GraphQL types (if defined)\ngraphql_types = import_object(f\"{self.__module__}.{self.graphql_types}\")\nif graphql_types is not None:\nregister_graphql_types(graphql_types)\n# Import jobs (if present)\njobs = import_object(f\"{self.__module__}.{self.jobs}\")\nif jobs is not None:\nregister_jobs(jobs)\nself.features[\"jobs\"] = jobs\n# Import metrics (if present)\nmetrics = import_object(f\"{self.__module__}.{self.metrics}\")\nif metrics is not None:\nregister_metrics(metrics)\nself.features[\"metrics\"] = []  # Initialize as empty, to be filled by the signal handler\n# Inject the metrics to discover into the signal handler.\nsignal_callback = partial(discover_metrics, metrics=metrics)\nnautobot_database_ready.connect(signal_callback, sender=self)\n# Register plugin navigation menu items (if defined)\nmenu_items = import_object(f\"{self.__module__}.{self.menu_items}\")\nif menu_items is not None:\nregister_plugin_menu_items(self.verbose_name, menu_items)\nself.features[\"nav_menu\"] = menu_items\nhomepage_layout = import_object(f\"{self.__module__}.{self.homepage_layout}\")\nif homepage_layout is not None:\nregister_homepage_panels(self.path, self.label, homepage_layout)\nself.features[\"home_page\"] = homepage_layout\n# Register template content (if defined)\ntemplate_extensions = import_object(f\"{self.__module__}.{self.template_extensions}\")\nif template_extensions is not None:\nregister_template_extensions(template_extensions)\nself.features[\"template_extensions\"] = sorted(set(extension.model for extension in template_extensions))\n# Register custom jinja filters\ntry:\nimport_module(f\"{self.__module__}.{self.jinja_filters}\")\nself.features[\"jinja_filters\"] = True\nexcept ModuleNotFoundError:\npass\n# Register secrets providers (if any)\nsecrets_providers = import_object(f\"{self.__module__}.{self.secrets_providers}\")\nif secrets_providers is not None:\nfor secrets_provider in secrets_providers:\nregister_secrets_provider(secrets_provider)\nself.features[\"secrets_providers\"] = secrets_providers\n# Register custom filters (if any)\nfilter_extensions = import_object(f\"{self.__module__}.{self.filter_extensions}\")\nif filter_extensions is not None:\nregister_filter_extensions(filter_extensions, self.name)\nself.features[\"filter_extensions\"] = {\"filterset_fields\": [], \"filterform_fields\": []}\nfor filter_extension in filter_extensions:\nfor filterset_field_name in filter_extension.filterset_fields.keys():\nself.features[\"filter_extensions\"][\"filterset_fields\"].append(\nf\"{filter_extension.model} -&gt; {filterset_field_name}\"\n)\nfor filterform_field_name in filter_extension.filterform_fields.keys():\nself.features[\"filter_extensions\"][\"filterform_fields\"].append(\nf\"{filter_extension.model} -&gt; {filterform_field_name}\"\n)\n# Register override view (if any)\noverride_views = import_object(f\"{self.__module__}.{self.override_views}\")\nif override_views is not None:\nfor qualified_view_name, view in override_views.items():\nself.features.setdefault(\"overridden_views\", []).append(\n(qualified_view_name, f\"{view.__module__}.{view.__name__}\")\n)\nregister_override_views(override_views, self.name)\n</code></pre>"},{"location":"code-reference/nautobot/apps/__init__.html#nautobot.extras.plugins.NautobotAppConfig.validate","title":"<code>validate(user_config, nautobot_version)</code>  <code>classmethod</code>","text":"<p>Validate the user_config for baseline correctness.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>@classmethod\ndef validate(cls, user_config, nautobot_version):\n\"\"\"Validate the user_config for baseline correctness.\"\"\"\nplugin_name = cls.__module__\n# Enforce version constraints\ncurrent_version = version.parse(nautobot_version)\nif cls.min_version is not None:\nmin_version = version.parse(cls.min_version)\nif current_version &lt; min_version:\nraise PluginImproperlyConfigured(\nf\"Plugin {plugin_name} requires Nautobot minimum version {cls.min_version}\"\n)\nif cls.max_version is not None:\nmax_version = version.parse(cls.max_version)\nif current_version &gt; max_version:\nraise PluginImproperlyConfigured(\nf\"Plugin {plugin_name} requires Nautobot maximum version {cls.max_version}\"\n)\n# Mapping of {setting_name: setting_type} used to validate user configs\n# TODO(jathan): This is fine for now, but as we expand the functionality\n# of plugins, we'll need to consider something like pydantic or attrs.\nsetting_validations = {\n\"caching_config\": dict,\n\"default_settings\": dict,\n\"installed_apps\": list,\n\"middleware\": list,\n\"required_settings\": list,\n}\n# Validate user settings\nfor setting_name, setting_type in setting_validations.items():\nif not isinstance(getattr(cls, setting_name), setting_type):\nraise PluginImproperlyConfigured(f\"Plugin {plugin_name} {setting_name} must be a {setting_type}\")\n# Validate the required_settings\nfor setting in cls.required_settings:\nif setting not in user_config:\nraise PluginImproperlyConfigured(\nf\"Plugin {plugin_name} requires '{setting}' to be present in \"\nf\"the PLUGINS_CONFIG['{plugin_name}'] section of your settings.\"\n)\n# Apply default configuration values\nfor setting, value in cls.default_settings.items():\nif setting not in user_config:\nuser_config[setting] = value\n</code></pre>"},{"location":"code-reference/nautobot/apps/admin.html","title":"nautobot.apps.admin","text":""},{"location":"code-reference/nautobot/apps/admin.html#nautobot.apps.admin","title":"<code>nautobot.apps.admin</code>","text":"<p>Utilities for integrating with the Nautobot Admin UI.</p>"},{"location":"code-reference/nautobot/apps/admin.html#nautobot.apps.admin.NautobotModelAdmin","title":"<code>nautobot.apps.admin.NautobotModelAdmin</code>","text":"<p>             Bases: <code>ModelAdmin</code></p> <p>Extend Django's ModelAdmin to use some standard Nautobot UI widgets by default.</p> Source code in <code>nautobot/core/admin.py</code> <pre><code>class NautobotModelAdmin(ModelAdmin):\n\"\"\"Extend Django's ModelAdmin to use some standard Nautobot UI widgets by default.\"\"\"\nformfield_overrides = {\nmodels.DateField: {\"widget\": widgets.DatePicker},\nmodels.ForeignKey: {\"widget\": widgets.StaticSelect2},\nmodels.ManyToManyField: {\"widget\": widgets.StaticSelect2Multiple},\n}\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html","title":"nautobot.apps.api","text":""},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api","title":"<code>nautobot.apps.api</code>","text":"<p>Helpers for an app to implement a REST API.</p>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.BaseModelSerializer","title":"<code>nautobot.apps.api.BaseModelSerializer</code>","text":"<p>             Bases: <code>OptInFieldsMixin</code>, <code>serializers.ModelSerializer</code></p> <p>This base serializer implements common fields and logic for all ModelSerializers.</p> <p>Namely, it:</p> <ul> <li>defines the <code>display</code> field which exposes a human friendly value for the given object.</li> <li>ensures that <code>id</code> field is always present on the serializer as well</li> <li>ensures that <code>created</code> and <code>last_updated</code> fields are always present if applicable to this model and serializer.</li> </ul> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>class BaseModelSerializer(OptInFieldsMixin, serializers.ModelSerializer):\n\"\"\"\n    This base serializer implements common fields and logic for all ModelSerializers.\n    Namely, it:\n    - defines the `display` field which exposes a human friendly value for the given object.\n    - ensures that `id` field is always present on the serializer as well\n    - ensures that `created` and `last_updated` fields are always present if applicable to this model and serializer.\n    \"\"\"\ndisplay = serializers.SerializerMethodField(read_only=True, help_text=\"Human friendly display value\")\n@extend_schema_field(serializers.CharField)\ndef get_display(self, instance):\n\"\"\"\n        Return either the `display` property of the instance or `str(instance)`\n        \"\"\"\nreturn getattr(instance, \"display\", str(instance))\ndef extend_field_names(self, fields, field_name, at_start=False, opt_in_only=False):\n\"\"\"Prepend or append the given field_name to `fields` and optionally self.Meta.opt_in_fields as well.\"\"\"\nif field_name not in fields:\nif at_start:\nfields.insert(0, field_name)\nelse:\nfields.append(field_name)\nif opt_in_only:\nif not getattr(self.Meta, \"opt_in_fields\", None):\nself.Meta.opt_in_fields = [field_name]\nelif field_name not in self.Meta.opt_in_fields:\nself.Meta.opt_in_fields.append(field_name)\nreturn fields\ndef get_field_names(self, declared_fields, info):\n\"\"\"\n        Override get_field_names() to ensure certain fields are present even when not explicitly stated in Meta.fields.\n        DRF does not automatically add declared fields to `Meta.fields`, nor does it require that declared fields\n        on a super class be included in `Meta.fields` to allow for a subclass to include only a subset of declared\n        fields from the super. This means either we intercept and ensure the fields at this level, or\n        enforce by convention that all consumers of BaseModelSerializer include each of these standard fields in their\n        `Meta.fields` which would surely lead to errors of omission; therefore we have chosen the former approach.\n        Adds \"id\" and \"display\" to the start of `fields` for all models; also appends \"created\" and \"last_updated\"\n        to the end of `fields` if they are applicable to this model and this is not a Nested serializer.\n        \"\"\"\nfields = list(super().get_field_names(declared_fields, info))  # Meta.fields could be defined as a tuple\nself.extend_field_names(fields, \"display\", at_start=True)\nself.extend_field_names(fields, \"id\", at_start=True)\n# Needed because we don't have a common base class for all nested serializers vs non-nested serializers\nif not self.__class__.__name__.startswith(\"Nested\"):\nif hasattr(self.Meta.model, \"created\"):\nself.extend_field_names(fields, \"created\")\nif hasattr(self.Meta.model, \"last_updated\"):\nself.extend_field_names(fields, \"last_updated\")\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.serializers.BaseModelSerializer.extend_field_names","title":"<code>extend_field_names(fields, field_name, at_start=False, opt_in_only=False)</code>","text":"<p>Prepend or append the given field_name to <code>fields</code> and optionally self.Meta.opt_in_fields as well.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>def extend_field_names(self, fields, field_name, at_start=False, opt_in_only=False):\n\"\"\"Prepend or append the given field_name to `fields` and optionally self.Meta.opt_in_fields as well.\"\"\"\nif field_name not in fields:\nif at_start:\nfields.insert(0, field_name)\nelse:\nfields.append(field_name)\nif opt_in_only:\nif not getattr(self.Meta, \"opt_in_fields\", None):\nself.Meta.opt_in_fields = [field_name]\nelif field_name not in self.Meta.opt_in_fields:\nself.Meta.opt_in_fields.append(field_name)\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.serializers.BaseModelSerializer.get_display","title":"<code>get_display(instance)</code>","text":"<p>Return either the <code>display</code> property of the instance or <code>str(instance)</code></p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>@extend_schema_field(serializers.CharField)\ndef get_display(self, instance):\n\"\"\"\n    Return either the `display` property of the instance or `str(instance)`\n    \"\"\"\nreturn getattr(instance, \"display\", str(instance))\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.serializers.BaseModelSerializer.get_field_names","title":"<code>get_field_names(declared_fields, info)</code>","text":"<p>Override get_field_names() to ensure certain fields are present even when not explicitly stated in Meta.fields.</p> <p>DRF does not automatically add declared fields to <code>Meta.fields</code>, nor does it require that declared fields on a super class be included in <code>Meta.fields</code> to allow for a subclass to include only a subset of declared fields from the super. This means either we intercept and ensure the fields at this level, or enforce by convention that all consumers of BaseModelSerializer include each of these standard fields in their <code>Meta.fields</code> which would surely lead to errors of omission; therefore we have chosen the former approach.</p> <p>Adds \"id\" and \"display\" to the start of <code>fields</code> for all models; also appends \"created\" and \"last_updated\" to the end of <code>fields</code> if they are applicable to this model and this is not a Nested serializer.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>def get_field_names(self, declared_fields, info):\n\"\"\"\n    Override get_field_names() to ensure certain fields are present even when not explicitly stated in Meta.fields.\n    DRF does not automatically add declared fields to `Meta.fields`, nor does it require that declared fields\n    on a super class be included in `Meta.fields` to allow for a subclass to include only a subset of declared\n    fields from the super. This means either we intercept and ensure the fields at this level, or\n    enforce by convention that all consumers of BaseModelSerializer include each of these standard fields in their\n    `Meta.fields` which would surely lead to errors of omission; therefore we have chosen the former approach.\n    Adds \"id\" and \"display\" to the start of `fields` for all models; also appends \"created\" and \"last_updated\"\n    to the end of `fields` if they are applicable to this model and this is not a Nested serializer.\n    \"\"\"\nfields = list(super().get_field_names(declared_fields, info))  # Meta.fields could be defined as a tuple\nself.extend_field_names(fields, \"display\", at_start=True)\nself.extend_field_names(fields, \"id\", at_start=True)\n# Needed because we don't have a common base class for all nested serializers vs non-nested serializers\nif not self.__class__.__name__.startswith(\"Nested\"):\nif hasattr(self.Meta.model, \"created\"):\nself.extend_field_names(fields, \"created\")\nif hasattr(self.Meta.model, \"last_updated\"):\nself.extend_field_names(fields, \"last_updated\")\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.CustomFieldModelSerializerMixin","title":"<code>nautobot.apps.api.CustomFieldModelSerializerMixin</code>","text":"<p>             Bases: <code>ValidatedModelSerializer</code></p> <p>Extends ModelSerializer to render any CustomFields and their values associated with an object.</p> Source code in <code>nautobot/extras/api/customfields.py</code> <pre><code>class CustomFieldModelSerializerMixin(ValidatedModelSerializer):\n\"\"\"\n    Extends ModelSerializer to render any CustomFields and their values associated with an object.\n    \"\"\"\ncomputed_fields = SerializerMethodField(read_only=True)\ncustom_fields = CustomFieldsDataField(\nsource=\"_custom_field_data\",\ndefault=CreateOnlyDefault(CustomFieldDefaultValues()),\n)\n@extend_schema_field(OpenApiTypes.OBJECT)\ndef get_computed_fields(self, obj):\nreturn obj.get_computed_fields()\ndef get_field_names(self, declared_fields, info):\n\"\"\"Ensure that \"custom_fields\" and \"computed_fields\" are always included appropriately.\"\"\"\nfields = list(super().get_field_names(declared_fields, info))\nself.extend_field_names(fields, \"custom_fields\")\nself.extend_field_names(fields, \"computed_fields\", opt_in_only=True)\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.extras.api.customfields.CustomFieldModelSerializerMixin.get_field_names","title":"<code>get_field_names(declared_fields, info)</code>","text":"<p>Ensure that \"custom_fields\" and \"computed_fields\" are always included appropriately.</p> Source code in <code>nautobot/extras/api/customfields.py</code> <pre><code>def get_field_names(self, declared_fields, info):\n\"\"\"Ensure that \"custom_fields\" and \"computed_fields\" are always included appropriately.\"\"\"\nfields = list(super().get_field_names(declared_fields, info))\nself.extend_field_names(fields, \"custom_fields\")\nself.extend_field_names(fields, \"computed_fields\", opt_in_only=True)\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.CustomFieldModelViewSet","title":"<code>nautobot.apps.api.CustomFieldModelViewSet</code>","text":"<p>             Bases: <code>ModelViewSet</code></p> <p>Include the applicable set of CustomFields in the ModelViewSet context.</p> Source code in <code>nautobot/extras/api/views.py</code> <pre><code>class CustomFieldModelViewSet(ModelViewSet):\n\"\"\"\n    Include the applicable set of CustomFields in the ModelViewSet context.\n    \"\"\"\ndef get_serializer_context(self):\n# Gather all custom fields for the model\ncontent_type = ContentType.objects.get_for_model(self.queryset.model)\ncustom_fields = content_type.custom_fields.all()\ncontext = super().get_serializer_context()\ncontext.update(\n{\n\"custom_fields\": custom_fields,\n}\n)\nreturn context\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.ModelViewSet","title":"<code>nautobot.apps.api.ModelViewSet</code>","text":"<p>             Bases: <code>NautobotAPIVersionMixin</code>, <code>BulkUpdateModelMixin</code>, <code>BulkDestroyModelMixin</code>, <code>ModelViewSetMixin</code>, <code>ModelViewSet_</code></p> <p>Extend DRF's ModelViewSet to support bulk update and delete functions.</p> Source code in <code>nautobot/core/api/views.py</code> <pre><code>class ModelViewSet(\nNautobotAPIVersionMixin,\nBulkUpdateModelMixin,\nBulkDestroyModelMixin,\nModelViewSetMixin,\nModelViewSet_,\n):\n\"\"\"\n    Extend DRF's ModelViewSet to support bulk update and delete functions.\n    \"\"\"\ndef _validate_objects(self, instance):\n\"\"\"\n        Check that the provided instance or list of instances are matched by the current queryset. This confirms that\n        any newly created or modified objects abide by the attributes granted by any applicable ObjectPermissions.\n        \"\"\"\nif isinstance(instance, list):\n# Check that all instances are still included in the view's queryset\nconforming_count = self.queryset.filter(pk__in=[obj.pk for obj in instance]).count()\nif conforming_count != len(instance):\nraise ObjectDoesNotExist\nelse:\n# Check that the instance is matched by the view's queryset\nself.queryset.get(pk=instance.pk)\ndef perform_create(self, serializer):\nmodel = self.queryset.model\nlogger = logging.getLogger(\"nautobot.core.api.views.ModelViewSet\")\nlogger.info(f\"Creating new {model._meta.verbose_name}\")\n# Enforce object-level permissions on save()\ntry:\nwith transaction.atomic():\ninstance = serializer.save()\nself._validate_objects(instance)\nexcept ObjectDoesNotExist:\nraise PermissionDenied()\ndef perform_update(self, serializer):\nmodel = self.queryset.model\nlogger = logging.getLogger(\"nautobot.core.api.views.ModelViewSet\")\nlogger.info(f\"Updating {model._meta.verbose_name} {serializer.instance} (PK: {serializer.instance.pk})\")\n# Enforce object-level permissions on save()\ntry:\nwith transaction.atomic():\ninstance = serializer.save()\nself._validate_objects(instance)\nexcept ObjectDoesNotExist:\nraise PermissionDenied()\ndef perform_destroy(self, instance):\nmodel = self.queryset.model\nlogger = logging.getLogger(\"nautobot.core.api.views.ModelViewSet\")\nlogger.info(f\"Deleting {model._meta.verbose_name} {instance} (PK: {instance.pk})\")\nreturn super().perform_destroy(instance)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.NautobotModelSerializer","title":"<code>nautobot.apps.api.NautobotModelSerializer</code>","text":"<p>             Bases: <code>RelationshipModelSerializerMixin</code>, <code>CustomFieldModelSerializerMixin</code>, <code>NotesSerializerMixin</code>, <code>ValidatedModelSerializer</code></p> <p>Base class to use for serializers based on OrganizationalModel or PrimaryModel.</p> <p>Can also be used for models derived from BaseModel, so long as they support custom fields and relationships.</p> Source code in <code>nautobot/extras/api/serializers.py</code> <pre><code>class NautobotModelSerializer(\nRelationshipModelSerializerMixin, CustomFieldModelSerializerMixin, NotesSerializerMixin, ValidatedModelSerializer\n):\n\"\"\"Base class to use for serializers based on OrganizationalModel or PrimaryModel.\n    Can also be used for models derived from BaseModel, so long as they support custom fields and relationships.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.NautobotModelViewSet","title":"<code>nautobot.apps.api.NautobotModelViewSet</code>","text":"<p>             Bases: <code>CustomFieldModelViewSet</code>, <code>NotesViewSetMixin</code></p> <p>Base class to use for API ViewSets based on OrganizationalModel or PrimaryModel.</p> <p>Can also be used for models derived from BaseModel, so long as they support Notes.</p> Source code in <code>nautobot/extras/api/views.py</code> <pre><code>class NautobotModelViewSet(CustomFieldModelViewSet, NotesViewSetMixin):\n\"\"\"Base class to use for API ViewSets based on OrganizationalModel or PrimaryModel.\n    Can also be used for models derived from BaseModel, so long as they support Notes.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.NotesSerializerMixin","title":"<code>nautobot.apps.api.NotesSerializerMixin</code>","text":"<p>             Bases: <code>BaseModelSerializer</code></p> <p>Extend Serializer with a <code>notes</code> field.</p> Source code in <code>nautobot/extras/api/serializers.py</code> <pre><code>class NotesSerializerMixin(BaseModelSerializer):\n\"\"\"Extend Serializer with a `notes` field.\"\"\"\nnotes_url = serializers.SerializerMethodField()\ndef get_field_names(self, declared_fields, info):\n\"\"\"Ensure that fields includes \"notes_url\" field if applicable.\"\"\"\nfields = list(super().get_field_names(declared_fields, info))\nif hasattr(self.Meta.model, \"notes\"):\nself.extend_field_names(fields, \"notes_url\")\nreturn fields\n@extend_schema_field(serializers.URLField())\ndef get_notes_url(self, instance):\ntry:\nnotes_url = get_route_for_model(instance, \"notes\", api=True)\nreturn reverse(notes_url, args=[instance.id], request=self.context[\"request\"])\nexcept NoReverseMatch:\nmodel_name = type(instance).__name__\nlogger.warning(\n(\nf\"Notes feature is not available for model {model_name}. \"\n\"Please make sure to: \"\nf\"1. Include NotesMixin from nautobot.extras.model.mixins in the {model_name} class definition \"\nf\"2. Include NotesViewSetMixin from nautobot.extras.api.views in the {model_name}ViewSet \"\n\"before including NotesSerializerMixin in the model serializer\"\n)\n)\nreturn None\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.extras.api.serializers.NotesSerializerMixin.get_field_names","title":"<code>get_field_names(declared_fields, info)</code>","text":"<p>Ensure that fields includes \"notes_url\" field if applicable.</p> Source code in <code>nautobot/extras/api/serializers.py</code> <pre><code>def get_field_names(self, declared_fields, info):\n\"\"\"Ensure that fields includes \"notes_url\" field if applicable.\"\"\"\nfields = list(super().get_field_names(declared_fields, info))\nif hasattr(self.Meta.model, \"notes\"):\nself.extend_field_names(fields, \"notes_url\")\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.NotesViewSetMixin","title":"<code>nautobot.apps.api.NotesViewSetMixin</code>","text":"Source code in <code>nautobot/extras/api/views.py</code> <pre><code>class NotesViewSetMixin:\n@extend_schema(methods=[\"get\"], filters=False, responses={200: serializers.NoteSerializer(many=True)})\n@extend_schema(\nmethods=[\"post\"],\nrequest=serializers.NoteInputSerializer,\nresponses={201: serializers.NoteSerializer(many=False)},\n)\n@action(detail=True, url_path=\"notes\", methods=[\"get\", \"post\"])\ndef notes(self, request, pk=None):\n\"\"\"\n        API methods for returning or creating notes on an object.\n        \"\"\"\nobj = get_object_or_404(self.queryset, pk=pk)\nif request.method == \"POST\":\ncontent_type = ContentType.objects.get_for_model(obj)\ndata = request.data\ndata[\"assigned_object_id\"] = obj.pk\ndata[\"assigned_object_type\"] = f\"{content_type.app_label}.{content_type.model}\"\nserializer = serializers.NoteSerializer(data=data, context={\"request\": request})\n# Create the new Note.\nserializer.is_valid(raise_exception=True)\nserializer.save(user=request.user)\nreturn Response(serializer.data, status=status.HTTP_201_CREATED)\nelse:\nnotes = self.paginate_queryset(obj.notes)\nserializer = serializers.NoteSerializer(notes, many=True, context={\"request\": request})\nreturn self.get_paginated_response(serializer.data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.extras.api.views.NotesViewSetMixin.notes","title":"<code>notes(request, pk=None)</code>","text":"<p>API methods for returning or creating notes on an object.</p> Source code in <code>nautobot/extras/api/views.py</code> <pre><code>@extend_schema(methods=[\"get\"], filters=False, responses={200: serializers.NoteSerializer(many=True)})\n@extend_schema(\nmethods=[\"post\"],\nrequest=serializers.NoteInputSerializer,\nresponses={201: serializers.NoteSerializer(many=False)},\n)\n@action(detail=True, url_path=\"notes\", methods=[\"get\", \"post\"])\ndef notes(self, request, pk=None):\n\"\"\"\n    API methods for returning or creating notes on an object.\n    \"\"\"\nobj = get_object_or_404(self.queryset, pk=pk)\nif request.method == \"POST\":\ncontent_type = ContentType.objects.get_for_model(obj)\ndata = request.data\ndata[\"assigned_object_id\"] = obj.pk\ndata[\"assigned_object_type\"] = f\"{content_type.app_label}.{content_type.model}\"\nserializer = serializers.NoteSerializer(data=data, context={\"request\": request})\n# Create the new Note.\nserializer.is_valid(raise_exception=True)\nserializer.save(user=request.user)\nreturn Response(serializer.data, status=status.HTTP_201_CREATED)\nelse:\nnotes = self.paginate_queryset(obj.notes)\nserializer = serializers.NoteSerializer(notes, many=True, context={\"request\": request})\nreturn self.get_paginated_response(serializer.data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.OrderedDefaultRouter","title":"<code>nautobot.apps.api.OrderedDefaultRouter</code>","text":"<p>             Bases: <code>DefaultRouter</code></p> Source code in <code>nautobot/core/api/routers.py</code> <pre><code>class OrderedDefaultRouter(DefaultRouter):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\n# Extend the list view mappings to support the DELETE operation\nself.routes[0].mapping.update(\n{\n\"put\": \"bulk_update\",\n\"patch\": \"bulk_partial_update\",\n\"delete\": \"bulk_destroy\",\n}\n)\ndef get_api_root_view(self, api_urls=None):\n\"\"\"\n        Wrap DRF's DefaultRouter to return an alphabetized list of endpoints.\n        \"\"\"\napi_root_dict = OrderedDict()\nlist_name = self.routes[0].name\nfor prefix, _viewset, basename in sorted(self.registry, key=lambda x: x[0]):\napi_root_dict[prefix] = list_name.format(basename=basename)\nreturn self.APIRootView.as_view(api_root_dict=api_root_dict)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.routers.OrderedDefaultRouter.get_api_root_view","title":"<code>get_api_root_view(api_urls=None)</code>","text":"<p>Wrap DRF's DefaultRouter to return an alphabetized list of endpoints.</p> Source code in <code>nautobot/core/api/routers.py</code> <pre><code>def get_api_root_view(self, api_urls=None):\n\"\"\"\n    Wrap DRF's DefaultRouter to return an alphabetized list of endpoints.\n    \"\"\"\napi_root_dict = OrderedDict()\nlist_name = self.routes[0].name\nfor prefix, _viewset, basename in sorted(self.registry, key=lambda x: x[0]):\napi_root_dict[prefix] = list_name.format(basename=basename)\nreturn self.APIRootView.as_view(api_root_dict=api_root_dict)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.ReadOnlyModelViewSet","title":"<code>nautobot.apps.api.ReadOnlyModelViewSet</code>","text":"<p>             Bases: <code>NautobotAPIVersionMixin</code>, <code>ModelViewSetMixin</code>, <code>ReadOnlyModelViewSet_</code></p> <p>Extend DRF's ReadOnlyModelViewSet to support queryset restriction.</p> Source code in <code>nautobot/core/api/views.py</code> <pre><code>class ReadOnlyModelViewSet(NautobotAPIVersionMixin, ModelViewSetMixin, ReadOnlyModelViewSet_):\n\"\"\"\n    Extend DRF's ReadOnlyModelViewSet to support queryset restriction.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.RelationshipModelSerializerMixin","title":"<code>nautobot.apps.api.RelationshipModelSerializerMixin</code>","text":"<p>             Bases: <code>ValidatedModelSerializer</code></p> <p>Extend ValidatedModelSerializer with a <code>relationships</code> field.</p> Source code in <code>nautobot/extras/api/relationships.py</code> <pre><code>class RelationshipModelSerializerMixin(ValidatedModelSerializer):\n\"\"\"Extend ValidatedModelSerializer with a `relationships` field.\"\"\"\nrelationships = RelationshipsDataField(required=False, source=\"*\")\ndef create(self, validated_data):\nrelationships_data = validated_data.pop(\"relationships\", {})\nrequired_relationships_errors = self.Meta().model.required_related_objects_errors(\noutput_for=\"api\", initial_data=relationships_data\n)\nif required_relationships_errors:\nraise ValidationError({\"relationships\": required_relationships_errors})\ninstance = super().create(validated_data)\nif relationships_data:\ntry:\nself._save_relationships(instance, relationships_data)\nexcept DjangoValidationError as error:\nraise ValidationError(str(error))\nreturn instance\ndef update(self, instance, validated_data):\nrelationships_key_specified = \"relationships\" in self.context[\"request\"].data\nrelationships_data = validated_data.pop(\"relationships\", {})\nrequired_relationships_errors = self.Meta().model.required_related_objects_errors(\noutput_for=\"api\",\ninitial_data=relationships_data,\nrelationships_key_specified=relationships_key_specified,\ninstance=instance,\n)\nif required_relationships_errors:\nraise ValidationError({\"relationships\": required_relationships_errors})\ninstance = super().update(instance, validated_data)\nif relationships_data:\nself._save_relationships(instance, relationships_data)\nreturn instance\ndef _save_relationships(self, instance, relationships):\n\"\"\"Create/update RelationshipAssociations corresponding to a model instance.\"\"\"\n# relationships has already passed RelationshipsDataField.to_internal_value(), so we can skip some try/excepts\nlogger.debug(\"_save_relationships: %s : %s\", instance, relationships)\nfor relationship, relationship_data in relationships.items():\nfor other_side in [\"source\", \"destination\", \"peer\"]:\nif other_side not in relationship_data:\ncontinue\nother_type = getattr(relationship, f\"{other_side}_type\")\nother_side_model = other_type.model_class()\nother_side_serializer = get_serializer_for_model(other_side_model, prefix=\"Nested\")\nserializer_instance = other_side_serializer(context={\"request\": self.context.get(\"request\")})\nexpected_objects_data = relationship_data[other_side]\nexpected_objects = [\nserializer_instance.to_internal_value(object_data) for object_data in expected_objects_data\n]\nthis_side = RelationshipSideChoices.OPPOSITE[other_side]\nif this_side != RelationshipSideChoices.SIDE_PEER:\nexisting_associations = relationship.associations.filter(**{f\"{this_side}_id\": instance.pk})\nexisting_objects = [assoc.get_peer(instance) for assoc in existing_associations]\nelse:\nexisting_associations_1 = relationship.associations.filter(source_id=instance.pk)\nexisting_objects_1 = [assoc.get_peer(instance) for assoc in existing_associations_1]\nexisting_associations_2 = relationship.associations.filter(destination_id=instance.pk)\nexisting_objects_2 = [assoc.get_peer(instance) for assoc in existing_associations_2]\nexisting_associations = list(existing_associations_1) + list(existing_associations_2)\nexisting_objects = existing_objects_1 + existing_objects_2\nadd_objects = []\nremove_assocs = []\nfor obj, assoc in zip(existing_objects, existing_associations):\nif obj not in expected_objects:\nremove_assocs.append(assoc)\nfor obj in expected_objects:\nif obj not in existing_objects:\nadd_objects.append(obj)\nfor add_object in add_objects:\nif \"request\" in self.context and not self.context[\"request\"].user.has_perm(\n\"extras.add_relationshipassociation\"\n):\nraise PermissionDenied(\"This user does not have permission to create RelationshipAssociations.\")\nif other_side != RelationshipSideChoices.SIDE_SOURCE:\nassoc = RelationshipAssociation(\nrelationship=relationship,\nsource_type=relationship.source_type,\nsource_id=instance.id,\ndestination_type=relationship.destination_type,\ndestination_id=add_object.id,\n)\nelse:\nassoc = RelationshipAssociation(\nrelationship=relationship,\nsource_type=relationship.source_type,\nsource_id=add_object.id,\ndestination_type=relationship.destination_type,\ndestination_id=instance.id,\n)\nassoc.validated_save()  # enforce relationship filter logic, etc.\nlogger.debug(\"Created %s\", assoc)\nfor remove_assoc in remove_assocs:\nif \"request\" in self.context and not self.context[\"request\"].user.has_perm(\n\"extras.delete_relationshipassociation\"\n):\nraise PermissionDenied(\"This user does not have permission to delete RelationshipAssociations.\")\nlogger.debug(\"Deleting %s\", remove_assoc)\nremove_assoc.delete()\ndef get_field_names(self, declared_fields, info):\n\"\"\"Ensure that \"relationships\" is always included as an opt-in field.\"\"\"\nfields = list(super().get_field_names(declared_fields, info))\nself.extend_field_names(fields, \"relationships\", opt_in_only=True)\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.extras.api.relationships.RelationshipModelSerializerMixin.get_field_names","title":"<code>get_field_names(declared_fields, info)</code>","text":"<p>Ensure that \"relationships\" is always included as an opt-in field.</p> Source code in <code>nautobot/extras/api/relationships.py</code> <pre><code>def get_field_names(self, declared_fields, info):\n\"\"\"Ensure that \"relationships\" is always included as an opt-in field.\"\"\"\nfields = list(super().get_field_names(declared_fields, info))\nself.extend_field_names(fields, \"relationships\", opt_in_only=True)\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.StatusModelSerializerMixin","title":"<code>nautobot.apps.api.StatusModelSerializerMixin</code>","text":"<p>             Bases: <code>BaseModelSerializer</code></p> <p>Mixin to add <code>status</code> choice field to model serializers.</p> Source code in <code>nautobot/extras/api/serializers.py</code> <pre><code>class StatusModelSerializerMixin(BaseModelSerializer):\n\"\"\"Mixin to add `status` choice field to model serializers.\"\"\"\nstatus = StatusSerializerField(queryset=Status.objects.all())\ndef get_field_names(self, declared_fields, info):\n\"\"\"Ensure that \"status\" field is always present.\"\"\"\nfields = list(super().get_field_names(declared_fields, info))\nself.extend_field_names(fields, \"status\")\nreturn fields\n@classproperty  # https://github.com/PyCQA/pylint-django/issues/240\ndef status_choices(cls):  # pylint: disable=no-self-argument\n\"\"\"\n        Get the list of valid status values for this serializer.\n        In the case where multiple serializers have the same set of status choices, it's necessary to set\n        settings.SPECTACULAR_SETTINGS[\"ENUM_NAME_OVERRIDES\"] for at least one of the matching serializers,\n        or else drf-spectacular will report:\n        'enum naming encountered a non-optimally resolvable collision for fields named \"status\"'\n        \"\"\"\nreturn list(cls().fields[\"status\"].get_choices().keys())\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.extras.api.serializers.StatusModelSerializerMixin.get_field_names","title":"<code>get_field_names(declared_fields, info)</code>","text":"<p>Ensure that \"status\" field is always present.</p> Source code in <code>nautobot/extras/api/serializers.py</code> <pre><code>def get_field_names(self, declared_fields, info):\n\"\"\"Ensure that \"status\" field is always present.\"\"\"\nfields = list(super().get_field_names(declared_fields, info))\nself.extend_field_names(fields, \"status\")\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.extras.api.serializers.StatusModelSerializerMixin.status_choices","title":"<code>status_choices()</code>","text":"<p>Get the list of valid status values for this serializer.</p> <p>In the case where multiple serializers have the same set of status choices, it's necessary to set settings.SPECTACULAR_SETTINGS[\"ENUM_NAME_OVERRIDES\"] for at least one of the matching serializers, or else drf-spectacular will report: 'enum naming encountered a non-optimally resolvable collision for fields named \"status\"'</p> Source code in <code>nautobot/extras/api/serializers.py</code> <pre><code>@classproperty  # https://github.com/PyCQA/pylint-django/issues/240\ndef status_choices(cls):  # pylint: disable=no-self-argument\n\"\"\"\n    Get the list of valid status values for this serializer.\n    In the case where multiple serializers have the same set of status choices, it's necessary to set\n    settings.SPECTACULAR_SETTINGS[\"ENUM_NAME_OVERRIDES\"] for at least one of the matching serializers,\n    or else drf-spectacular will report:\n    'enum naming encountered a non-optimally resolvable collision for fields named \"status\"'\n    \"\"\"\nreturn list(cls().fields[\"status\"].get_choices().keys())\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.TaggedModelSerializerMixin","title":"<code>nautobot.apps.api.TaggedModelSerializerMixin</code>","text":"<p>             Bases: <code>BaseModelSerializer</code></p> Source code in <code>nautobot/extras/api/serializers.py</code> <pre><code>class TaggedModelSerializerMixin(BaseModelSerializer):\ntags = TagSerializerField(many=True, required=False)\ndef get_field_names(self, declared_fields, info):\n\"\"\"Ensure that 'tags' field is always present.\"\"\"\nfields = list(super().get_field_names(declared_fields, info))\nself.extend_field_names(fields, \"tags\")\nreturn fields\ndef create(self, validated_data):\ntags = validated_data.pop(\"tags\", None)\ninstance = super().create(validated_data)\nif tags is not None:\nreturn self._save_tags(instance, tags)\nreturn instance\ndef update(self, instance, validated_data):\ntags = validated_data.pop(\"tags\", None)\n# Cache tags on instance for change logging\ninstance._tags = tags or []\ninstance = super().update(instance, validated_data)\nif tags is not None:\nreturn self._save_tags(instance, tags)\nreturn instance\ndef _save_tags(self, instance, tags):\nif tags:\ninstance.tags.set([t.name for t in tags])\nelse:\ninstance.tags.clear()\nreturn instance\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.extras.api.serializers.TaggedModelSerializerMixin.get_field_names","title":"<code>get_field_names(declared_fields, info)</code>","text":"<p>Ensure that 'tags' field is always present.</p> Source code in <code>nautobot/extras/api/serializers.py</code> <pre><code>def get_field_names(self, declared_fields, info):\n\"\"\"Ensure that 'tags' field is always present.\"\"\"\nfields = list(super().get_field_names(declared_fields, info))\nself.extend_field_names(fields, \"tags\")\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.ValidatedModelSerializer","title":"<code>nautobot.apps.api.ValidatedModelSerializer</code>","text":"<p>             Bases: <code>BaseModelSerializer</code></p> <p>Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>class ValidatedModelSerializer(BaseModelSerializer):\n\"\"\"\n    Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during\n    validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)\n    \"\"\"\ndef validate(self, data):\n# Remove custom fields data and tags (if any) prior to model validation\nattrs = data.copy()\nattrs.pop(\"custom_fields\", None)\nattrs.pop(\"relationships\", None)\nattrs.pop(\"tags\", None)\n# Skip ManyToManyFields\nfor field in self.Meta.model._meta.get_fields():\nif isinstance(field, ManyToManyField):\nattrs.pop(field.name, None)\n# Run clean() on an instance of the model\nif self.instance is None:\ninstance = self.Meta.model(**attrs)\nelse:\ninstance = self.instance\nfor k, v in attrs.items():\nsetattr(instance, k, v)\ninstance.full_clean()\nreturn data\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.WritableNestedSerializer","title":"<code>nautobot.apps.api.WritableNestedSerializer</code>","text":"<p>             Bases: <code>BaseModelSerializer</code></p> <p>Returns a nested representation of an object on read, but accepts either the nested representation or the primary key value on write operations.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>class WritableNestedSerializer(BaseModelSerializer):\n\"\"\"\n    Returns a nested representation of an object on read, but accepts either the nested representation or the\n    primary key value on write operations.\n    \"\"\"\ndef get_queryset(self):\nreturn self.Meta.model.objects\ndef to_internal_value(self, data):\nif data is None:\nreturn None\n# Dictionary of related object attributes\nif isinstance(data, dict):\nparams = dict_to_filter_params(data)\n# Make output from a WritableNestedSerializer \"round-trip\" capable by automatically stripping from the\n# data any serializer fields that do not correspond to a specific model field\nfor field_name, field_instance in self.fields.items():\nif field_name in params and field_instance.source == \"*\":\nlogger.debug(\"Discarding non-database field %s\", field_name)\ndel params[field_name]\nqueryset = self.get_queryset()\ntry:\nreturn queryset.get(**params)\nexcept ObjectDoesNotExist:\nraise ValidationError(f\"Related object not found using the provided attributes: {params}\")\nexcept MultipleObjectsReturned:\nraise ValidationError(f\"Multiple objects match the provided attributes: {params}\")\nexcept FieldError as e:\nraise ValidationError(e)\nqueryset = self.get_queryset()\npk = None\nif isinstance(self.Meta.model._meta.pk, AutoField):\n# PK is an int for this model. This is usually the User model\ntry:\npk = int(data)\nexcept (TypeError, ValueError):\nraise ValidationError(\n\"Related objects must be referenced by ID or by dictionary of attributes. Received an \"\nf\"unrecognized value: {data}\"\n)\nelse:\n# We assume a type of UUIDField for all other models\n# PK of related object\ntry:\n# Ensure the pk is a valid UUID\npk = uuid.UUID(str(data))\nexcept (TypeError, ValueError):\nraise ValidationError(\n\"Related objects must be referenced by ID or by dictionary of attributes. Received an \"\nf\"unrecognized value: {data}\"\n)\ntry:\nreturn queryset.get(pk=pk)\nexcept ObjectDoesNotExist:\nraise ValidationError(f\"Related object not found using the provided ID: {pk}\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/choices.html","title":"nautobot.apps.choices","text":""},{"location":"code-reference/nautobot/apps/choices.html#nautobot.apps.choices","title":"<code>nautobot.apps.choices</code>","text":"<p>Utilities for implementing choices.</p>"},{"location":"code-reference/nautobot/apps/choices.html#nautobot.apps.choices.ChoiceSet","title":"<code>nautobot.apps.choices.ChoiceSet</code>","text":"<p>Base class for defining choices for a model and/or menu.</p> <p>Subclasses should define a CHOICES constant which consists of a list of tuples of the form <code>(value, display_str)</code>, or optionally as tuples of the form <code>(grouping, ((value, display_str), (value, display_str), ...))</code>.</p> Example <pre><code>class GreekCapitalLetterChoices(ChoiceSet):\nALPHA = \"\u0391\"\nBETA = \"\u0392\"\nGAMMA = \"\u0393\"\nCHOICES = (\n(ALPHA, \"alpha\"),\n(BETA, \"beta\"),\n(GAMMA, \"gamma\"),\n)\n</code></pre> Source code in <code>nautobot/utilities/choices.py</code> <pre><code>class ChoiceSet(metaclass=ChoiceSetMeta):\n\"\"\"\n    Base class for defining choices for a model and/or menu.\n    Subclasses should define a CHOICES constant which consists of a list of tuples of the form `(value, display_str)`,\n    or optionally as tuples of the form `(grouping, ((value, display_str), (value, display_str), ...))`.\n    Example:\n        ```python\n        class GreekCapitalLetterChoices(ChoiceSet):\n            ALPHA = \"\u0391\"\n            BETA = \"\u0392\"\n            GAMMA = \"\u0393\"\n            CHOICES = (\n                (ALPHA, \"alpha\"),\n                (BETA, \"beta\"),\n                (GAMMA, \"gamma\"),\n            )\n        ```\n    \"\"\"\nCHOICES = []\n@classmethod\ndef values(cls):\n\"\"\"Get a flat list of all values defined in this ChoiceSet's `CHOICES`.\"\"\"\nreturn [c[0] for c in unpack_grouped_choices(cls.CHOICES)]\n@classmethod\ndef as_dict(cls):\n\"\"\"Get a dictionary representation of this ChoiceSet's `CHOICES`.\"\"\"\n# Unpack grouped choices before casting as a dict\nreturn dict(unpack_grouped_choices(cls.CHOICES))\n</code></pre>"},{"location":"code-reference/nautobot/apps/choices.html#nautobot.utilities.choices.ChoiceSet.as_dict","title":"<code>as_dict()</code>  <code>classmethod</code>","text":"<p>Get a dictionary representation of this ChoiceSet's <code>CHOICES</code>.</p> Source code in <code>nautobot/utilities/choices.py</code> <pre><code>@classmethod\ndef as_dict(cls):\n\"\"\"Get a dictionary representation of this ChoiceSet's `CHOICES`.\"\"\"\n# Unpack grouped choices before casting as a dict\nreturn dict(unpack_grouped_choices(cls.CHOICES))\n</code></pre>"},{"location":"code-reference/nautobot/apps/choices.html#nautobot.utilities.choices.ChoiceSet.values","title":"<code>values()</code>  <code>classmethod</code>","text":"<p>Get a flat list of all values defined in this ChoiceSet's <code>CHOICES</code>.</p> Source code in <code>nautobot/utilities/choices.py</code> <pre><code>@classmethod\ndef values(cls):\n\"\"\"Get a flat list of all values defined in this ChoiceSet's `CHOICES`.\"\"\"\nreturn [c[0] for c in unpack_grouped_choices(cls.CHOICES)]\n</code></pre>"},{"location":"code-reference/nautobot/apps/datasources.html","title":"nautobot.apps.datasources","text":""},{"location":"code-reference/nautobot/apps/datasources.html#nautobot.apps.datasources","title":"<code>nautobot.apps.datasources</code>","text":"<p>Utilities for an app to register datasource contents (for Git, etc.).</p>"},{"location":"code-reference/nautobot/apps/datasources.html#nautobot.apps.datasources.DatasourceContent","title":"<code>nautobot.apps.datasources.DatasourceContent</code>","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Human-readable name for this content type, such as \"config contexts\"</p> required <code>content_identifier</code> <code>str</code> <p>Brief unique identifier of this content type; by convention a string such as \"extras.configcontext\"</p> required <code>icon</code> <code>str</code> <p>Material Design Icons icon name, such as \"mdi-code-json\" or \"mdi-script-text\"</p> required <code>callback</code> <code>callable</code> <p>Callback function to invoke whenever a given datasource is created, updated, or deleted.   This callback should take three arguments (record, job_result, delete) where \"record\" is the GitRepository, etc.   that is being refreshed, \"job_result\" is an extras.JobResult record for logging purposes, and   \"delete\" is a boolean flag to distinguish between the \"create/update\" and \"delete\" cases.</p> required <code>weight</code> <code>int</code> <p>Defines the order in which datasources will be loaded.</p> <code>1000</code> Source code in <code>nautobot/extras/registry.py</code> <pre><code>class DatasourceContent:\n\"\"\"\n    Args:\n      name (str): Human-readable name for this content type, such as \"config contexts\"\n      content_identifier (str): Brief unique identifier of this content type; by convention a string such as \"extras.configcontext\"\n      icon (str): Material Design Icons icon name, such as \"mdi-code-json\" or \"mdi-script-text\"\n      callback (callable): Callback function to invoke whenever a given datasource is created, updated, or deleted.\n          This callback should take three arguments (record, job_result, delete) where \"record\" is the GitRepository, etc.\n          that is being refreshed, \"job_result\" is an extras.JobResult record for logging purposes, and\n          \"delete\" is a boolean flag to distinguish between the \"create/update\" and \"delete\" cases.\n      weight (int): Defines the order in which datasources will be loaded.\n    \"\"\"\n__slots__ = [\"name\", \"content_identifier\", \"icon\", \"callback\", \"weight\"]\ndef __init__(self, name, content_identifier, icon, callback, weight=1000):\n\"\"\"Ensure datasource properties.\"\"\"\nself.name = name\nself.content_identifier = content_identifier\nself.icon = icon\nself.callback = callback\nself.weight = weight\n</code></pre>"},{"location":"code-reference/nautobot/apps/datasources.html#nautobot.extras.registry.DatasourceContent.__init__","title":"<code>__init__(name, content_identifier, icon, callback, weight=1000)</code>","text":"<p>Ensure datasource properties.</p> Source code in <code>nautobot/extras/registry.py</code> <pre><code>def __init__(self, name, content_identifier, icon, callback, weight=1000):\n\"\"\"Ensure datasource properties.\"\"\"\nself.name = name\nself.content_identifier = content_identifier\nself.icon = icon\nself.callback = callback\nself.weight = weight\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html","title":"nautobot.apps.filters","text":""},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters","title":"<code>nautobot.apps.filters</code>","text":"<p>Filterset base classes and mixins for app implementation.</p>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.BaseFilterSet","title":"<code>nautobot.apps.filters.BaseFilterSet</code>","text":"<p>             Bases: <code>django_filters.FilterSet</code></p> <p>A base filterset which provides common functionality to all Nautobot filtersets.</p> Source code in <code>nautobot/utilities/filters.py</code> <pre><code>class BaseFilterSet(django_filters.FilterSet):\n\"\"\"\n    A base filterset which provides common functionality to all Nautobot filtersets.\n    \"\"\"\nFILTER_DEFAULTS = deepcopy(django_filters.filterset.FILTER_FOR_DBFIELD_DEFAULTS)\nFILTER_DEFAULTS.update(\n{\nmodels.AutoField: {\"filter_class\": MultiValueNumberFilter},\nmodels.BigIntegerField: {\"filter_class\": MultiValueBigNumberFilter},\nmodels.CharField: {\"filter_class\": MultiValueCharFilter},\nmodels.DateField: {\"filter_class\": MultiValueDateFilter},\nmodels.DateTimeField: {\"filter_class\": MultiValueDateTimeFilter},\nmodels.DecimalField: {\"filter_class\": MultiValueNumberFilter},\nmodels.EmailField: {\"filter_class\": MultiValueCharFilter},\nmodels.FloatField: {\"filter_class\": MultiValueNumberFilter},\nmodels.IntegerField: {\"filter_class\": MultiValueNumberFilter},\n# Ref: https://github.com/carltongibson/django-filter/issues/1107\nmodels.JSONField: {\"filter_class\": MultiValueCharFilter, \"extra\": lambda f: {\"lookup_expr\": \"icontains\"}},\nmodels.PositiveIntegerField: {\"filter_class\": MultiValueNumberFilter},\nmodels.PositiveSmallIntegerField: {\"filter_class\": MultiValueNumberFilter},\nmodels.SlugField: {\"filter_class\": MultiValueCharFilter},\nmodels.SmallIntegerField: {\"filter_class\": MultiValueNumberFilter},\nmodels.TextField: {\"filter_class\": MultiValueCharFilter},\nmodels.TimeField: {\"filter_class\": MultiValueTimeFilter},\nmodels.URLField: {\"filter_class\": MultiValueCharFilter},\nmodels.UUIDField: {\"filter_class\": MultiValueUUIDFilter},\nMACAddressCharField: {\"filter_class\": MultiValueMACAddressFilter},\nTaggableManager: {\"filter_class\": TagFilter},\n}\n)\n@staticmethod\ndef _get_filter_lookup_dict(existing_filter):\n# Choose the lookup expression map based on the filter type\nif isinstance(\nexisting_filter,\n(\nMultiValueDateFilter,\nMultiValueDateTimeFilter,\nMultiValueNumberFilter,\nMultiValueTimeFilter,\n),\n):\nlookup_map = FILTER_NUMERIC_BASED_LOOKUP_MAP\n# These filter types support only negation\nelif isinstance(\nexisting_filter,\n(\ndjango_filters.ModelChoiceFilter,\ndjango_filters.ModelMultipleChoiceFilter,\nTagFilter,\nTreeNodeMultipleChoiceFilter,\n),\n):\nlookup_map = FILTER_NEGATION_LOOKUP_MAP\n# These filter types support only negation\nelif existing_filter.extra.get(\"choices\"):\nlookup_map = FILTER_NEGATION_LOOKUP_MAP\nelif isinstance(\nexisting_filter,\n(\ndjango_filters.filters.CharFilter,\ndjango_filters.MultipleChoiceFilter,\nMultiValueCharFilter,\nMultiValueMACAddressFilter,\n),\n):\nlookup_map = FILTER_CHAR_BASED_LOOKUP_MAP\nelse:\nlookup_map = None\nreturn lookup_map\n@classmethod\ndef _generate_lookup_expression_filters(cls, filter_name, filter_field):\n\"\"\"\n        For specific filter types, new filters are created based on defined lookup expressions in\n        the form `&lt;field_name&gt;__&lt;lookup_expr&gt;`\n        \"\"\"\nmagic_filters = {}\nif filter_field.method is not None or filter_field.lookup_expr not in [\"exact\", \"in\"]:\nreturn magic_filters\n# Choose the lookup expression map based on the filter type\nlookup_map = cls._get_filter_lookup_dict(filter_field)\nif lookup_map is None:\n# Do not augment this filter type with more lookup expressions\nreturn magic_filters\n# Get properties of the existing filter for later use\nfield_name = filter_field.field_name\nfield = get_model_field(cls._meta.model, field_name)\n# If there isn't a model field, return.\nif field is None:\nreturn magic_filters\n# Create new filters for each lookup expression in the map\nfor lookup_name, lookup_expr in lookup_map.items():\nnew_filter_name = f\"{filter_name}__{lookup_name}\"\ntry:\nif filter_name in cls.declared_filters:\n# The filter field has been explicity defined on the filterset class so we must manually\n# create the new filter with the same type because there is no guarantee the defined type\n# is the same as the default type for the field\nresolve_field(field, lookup_expr)  # Will raise FieldLookupError if the lookup is invalid\nnew_filter = type(filter_field)(\nfield_name=field_name,\nlookup_expr=lookup_expr,\nlabel=filter_field.label,\nexclude=filter_field.exclude,\ndistinct=filter_field.distinct,\n**filter_field.extra,\n)\nelse:\n# The filter field is listed in Meta.fields so we can safely rely on default behaviour\n# Will raise FieldLookupError if the lookup is invalid\nnew_filter = cls.filter_for_field(field, field_name, lookup_expr)\nexcept django_filters.exceptions.FieldLookupError:\n# The filter could not be created because the lookup expression is not supported on the field\ncontinue\nif lookup_name.startswith(\"n\"):\n# This is a negation filter which requires a queryset.exclude() clause\n# Of course setting the negation of the existing filter's exclude attribute handles both cases\nnew_filter.exclude = not filter_field.exclude\nmagic_filters[new_filter_name] = new_filter\nreturn magic_filters\n@classmethod\ndef add_filter(cls, new_filter_name, new_filter_field):\n\"\"\"\n        Allow filters to be added post-generation on import.\n        Will provide `&lt;field_name&gt;__&lt;lookup_expr&gt;` generation automagically.\n        \"\"\"\nif not isinstance(new_filter_field, django_filters.Filter):\nraise TypeError(f\"Tried to add filter ({new_filter_name}) which is not an instance of Django Filter\")\nif new_filter_name in cls.base_filters:\nraise AttributeError(\nf\"There was a conflict with filter `{new_filter_name}`, the custom filter was ignored.\"\n)\ncls.base_filters[new_filter_name] = new_filter_field\ncls.base_filters.update(\ncls._generate_lookup_expression_filters(filter_name=new_filter_name, filter_field=new_filter_field)\n)\n@classmethod\ndef get_fields(cls):\nfields = super().get_fields()\nif \"id\" not in fields and (cls._meta.exclude is None or \"id\" not in cls._meta.exclude):\n# Add \"id\" as the first key in the `fields` OrderedDict\nfields = OrderedDict(id=[django_filters.conf.settings.DEFAULT_LOOKUP_EXPR], **fields)\nreturn fields\n@classmethod\ndef get_filters(cls):\n\"\"\"\n        Override filter generation to support dynamic lookup expressions for certain filter types.\n        \"\"\"\nfilters = super().get_filters()\nnew_filters = {}\nfor existing_filter_name, existing_filter in filters.items():\nnew_filters.update(\ncls._generate_lookup_expression_filters(filter_name=existing_filter_name, filter_field=existing_filter)\n)\nfilters.update(new_filters)\nreturn filters\ndef __init__(self, data=None, queryset=None, *, request=None, prefix=None):\nsuper().__init__(data, queryset, request=request, prefix=prefix)\nself._is_valid = None\nself._errors = None\ndef is_valid(self):\n\"\"\"Extend FilterSet.is_valid() to potentially enforce settings.STRICT_FILTERING.\"\"\"\nif self._is_valid is None:\nself._is_valid = super().is_valid()\nif settings.STRICT_FILTERING:\nself._is_valid = self._is_valid and set(self.form.data.keys()).issubset(self.form.cleaned_data.keys())\nelse:\n# Trigger warning logs associated with generating self.errors\nself.errors\nreturn self._is_valid\n@property\ndef errors(self):\n\"\"\"Extend FilterSet.errors to potentially include additional errors from settings.STRICT_FILTERING.\"\"\"\nif self._errors is None:\nself._errors = ErrorDict(self.form.errors)\nfor extra_key in set(self.form.data.keys()).difference(self.form.cleaned_data.keys()):\n# If a given field was invalid, it will be omitted from cleaned_data; don't report extra errors\nif extra_key not in self._errors:\nif settings.STRICT_FILTERING:\nself._errors.setdefault(extra_key, ErrorList()).append(\"Unknown filter field\")\nelse:\nlogger.warning('%s: Unknown filter field \"%s\"', self.__class__.__name__, extra_key)\nreturn self._errors\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.utilities.filters.BaseFilterSet.errors","title":"<code>errors</code>  <code>property</code>","text":"<p>Extend FilterSet.errors to potentially include additional errors from settings.STRICT_FILTERING.</p>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.utilities.filters.BaseFilterSet.add_filter","title":"<code>add_filter(new_filter_name, new_filter_field)</code>  <code>classmethod</code>","text":"<p>Allow filters to be added post-generation on import.</p> <p>Will provide <code>&lt;field_name&gt;__&lt;lookup_expr&gt;</code> generation automagically.</p> Source code in <code>nautobot/utilities/filters.py</code> <pre><code>@classmethod\ndef add_filter(cls, new_filter_name, new_filter_field):\n\"\"\"\n    Allow filters to be added post-generation on import.\n    Will provide `&lt;field_name&gt;__&lt;lookup_expr&gt;` generation automagically.\n    \"\"\"\nif not isinstance(new_filter_field, django_filters.Filter):\nraise TypeError(f\"Tried to add filter ({new_filter_name}) which is not an instance of Django Filter\")\nif new_filter_name in cls.base_filters:\nraise AttributeError(\nf\"There was a conflict with filter `{new_filter_name}`, the custom filter was ignored.\"\n)\ncls.base_filters[new_filter_name] = new_filter_field\ncls.base_filters.update(\ncls._generate_lookup_expression_filters(filter_name=new_filter_name, filter_field=new_filter_field)\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.utilities.filters.BaseFilterSet.get_filters","title":"<code>get_filters()</code>  <code>classmethod</code>","text":"<p>Override filter generation to support dynamic lookup expressions for certain filter types.</p> Source code in <code>nautobot/utilities/filters.py</code> <pre><code>@classmethod\ndef get_filters(cls):\n\"\"\"\n    Override filter generation to support dynamic lookup expressions for certain filter types.\n    \"\"\"\nfilters = super().get_filters()\nnew_filters = {}\nfor existing_filter_name, existing_filter in filters.items():\nnew_filters.update(\ncls._generate_lookup_expression_filters(filter_name=existing_filter_name, filter_field=existing_filter)\n)\nfilters.update(new_filters)\nreturn filters\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.utilities.filters.BaseFilterSet.is_valid","title":"<code>is_valid()</code>","text":"<p>Extend FilterSet.is_valid() to potentially enforce settings.STRICT_FILTERING.</p> Source code in <code>nautobot/utilities/filters.py</code> <pre><code>def is_valid(self):\n\"\"\"Extend FilterSet.is_valid() to potentially enforce settings.STRICT_FILTERING.\"\"\"\nif self._is_valid is None:\nself._is_valid = super().is_valid()\nif settings.STRICT_FILTERING:\nself._is_valid = self._is_valid and set(self.form.data.keys()).issubset(self.form.cleaned_data.keys())\nelse:\n# Trigger warning logs associated with generating self.errors\nself.errors\nreturn self._is_valid\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.CustomFieldModelFilterSetMixin","title":"<code>nautobot.apps.filters.CustomFieldModelFilterSetMixin</code>","text":"<p>             Bases: <code>django_filters.FilterSet</code></p> <p>Dynamically add a Filter for each CustomField applicable to the parent model. Add filters for extra lookup expressions on supported CustomField types.</p> Source code in <code>nautobot/extras/filters/mixins.py</code> <pre><code>class CustomFieldModelFilterSetMixin(django_filters.FilterSet):\n\"\"\"\n    Dynamically add a Filter for each CustomField applicable to the parent model. Add filters for\n    extra lookup expressions on supported CustomField types.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\ncustom_field_filter_classes = {\nCustomFieldTypeChoices.TYPE_DATE: CustomFieldDateFilter,\nCustomFieldTypeChoices.TYPE_BOOLEAN: CustomFieldBooleanFilter,\nCustomFieldTypeChoices.TYPE_INTEGER: CustomFieldNumberFilter,\nCustomFieldTypeChoices.TYPE_JSON: CustomFieldJSONFilter,\nCustomFieldTypeChoices.TYPE_MULTISELECT: CustomFieldMultiSelectFilter,\n}\ncustom_fields = CustomField.objects.filter(\ncontent_types=ContentType.objects.get_for_model(self._meta.model)\n).exclude(filter_logic=CustomFieldFilterLogicChoices.FILTER_DISABLED)\nfor cf in custom_fields:\n# Determine filter class for this CustomField type, default to CustomFieldBaseFilter\n# 2.0 TODO: #824 use cf.slug instead\nnew_filter_name = f\"cf_{cf.name}\"\nfilter_class = custom_field_filter_classes.get(cf.type, CustomFieldCharFilter)\nnew_filter_field = filter_class(field_name=cf.name, custom_field=cf)\nnew_filter_field.label = f\"{cf.label}\"\n# Create base filter (cf_customfieldname)\nself.filters[new_filter_name] = new_filter_field\n# Create extra lookup expression filters (cf_customfieldname__lookup_expr)\nself.filters.update(\nself._generate_custom_field_lookup_expression_filters(filter_name=new_filter_name, custom_field=cf)\n)\n@staticmethod\ndef _get_custom_field_filter_lookup_dict(filter_type):\n# Choose the lookup expression map based on the filter type\nif issubclass(filter_type, (CustomFieldMultiValueNumberFilter, CustomFieldMultiValueDateFilter)):\nlookup_map = FILTER_NUMERIC_BASED_LOOKUP_MAP\nelse:\nlookup_map = FILTER_CHAR_BASED_LOOKUP_MAP\nreturn lookup_map\n# TODO 2.0: Transition CustomField filters to nautobot.utilities.filters.MultiValue* filters and\n# leverage BaseFilterSet to add dynamic lookup expression filters. Remove CustomField.filter_logic field\n@classmethod\ndef _generate_custom_field_lookup_expression_filters(cls, filter_name, custom_field):\n\"\"\"\n        For specific filter types, new filters are created based on defined lookup expressions in\n        the form `&lt;field_name&gt;__&lt;lookup_expr&gt;`. Copied from nautobot.utilities.filters.BaseFilterSet\n        and updated to work with custom fields.\n        \"\"\"\nmagic_filters = {}\ncustom_field_type_to_filter_map = {\nCustomFieldTypeChoices.TYPE_DATE: CustomFieldMultiValueDateFilter,\nCustomFieldTypeChoices.TYPE_INTEGER: CustomFieldMultiValueNumberFilter,\nCustomFieldTypeChoices.TYPE_SELECT: CustomFieldMultiValueCharFilter,\nCustomFieldTypeChoices.TYPE_TEXT: CustomFieldMultiValueCharFilter,\nCustomFieldTypeChoices.TYPE_URL: CustomFieldMultiValueCharFilter,\n}\nif custom_field.type in custom_field_type_to_filter_map:\nfilter_type = custom_field_type_to_filter_map[custom_field.type]\nelse:\nreturn magic_filters\n# Choose the lookup expression map based on the filter type\nlookup_map = cls._get_custom_field_filter_lookup_dict(filter_type)\n# Create new filters for each lookup expression in the map\nfor lookup_name, lookup_expr in lookup_map.items():\nnew_filter_name = f\"{filter_name}__{lookup_name}\"\nnew_filter = filter_type(\nfield_name=custom_field.name,\nlookup_expr=lookup_expr,\ncustom_field=custom_field,\nlabel=f\"{custom_field.label} ({verbose_lookup_expr(lookup_expr)})\",\nexclude=lookup_name.startswith(\"n\"),\n)\nmagic_filters[new_filter_name] = new_filter\nreturn magic_filters\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.FilterExtension","title":"<code>nautobot.apps.filters.FilterExtension</code>","text":"<p>Class that may be returned by a registered Filter Extension function.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>class FilterExtension:\n\"\"\"Class that may be returned by a registered Filter Extension function.\"\"\"\nmodel = None\nfilterset_fields = {}\nfilterform_fields = {}\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.NaturalKeyOrPKMultipleChoiceFilter","title":"<code>nautobot.apps.filters.NaturalKeyOrPKMultipleChoiceFilter</code>","text":"<p>             Bases: <code>django_filters.ModelMultipleChoiceFilter</code></p> <p>Filter that supports filtering on values matching the <code>pk</code> field and another field of a foreign-key related object. The desired field is set using the <code>to_field_name</code> keyword argument on filter initialization (defaults to <code>slug</code>).</p> Source code in <code>nautobot/utilities/filters.py</code> <pre><code>class NaturalKeyOrPKMultipleChoiceFilter(django_filters.ModelMultipleChoiceFilter):\n\"\"\"\n    Filter that supports filtering on values matching the `pk` field and another\n    field of a foreign-key related object. The desired field is set using the `to_field_name`\n    keyword argument on filter initialization (defaults to `slug`).\n    \"\"\"\nfield_class = MultiMatchModelMultipleChoiceField\ndef __init__(self, *args, **kwargs):\nself.natural_key = kwargs.setdefault(\"to_field_name\", \"slug\")\nsuper().__init__(*args, **kwargs)\ndef get_filter_predicate(self, v):\n\"\"\"\n        Override base filter behavior to force the filter to use the `pk` field instead of\n        the natural key in the generated filter.\n        \"\"\"\n# Null value filtering\nif v is None:\nreturn {f\"{self.field_name}__isnull\": True}\n# If value is a model instance, stringify it to a pk.\nif isinstance(v, models.Model):\nlogger.debug(\"Model instance detected. Casting to a PK.\")\nv = str(v.pk)\n# Try to cast the value to a UUID and set `is_pk` boolean.\ntry:\nuuid.UUID(str(v))\nexcept (AttributeError, TypeError, ValueError):\nlogger.debug(\"Non-UUID value detected: Filtering using natural key\")\nis_pk = False\nelse:\nv = str(v)  # Cast possible UUID instance to a string\nis_pk = True\n# If it's not a pk, then it's a slug and the filter predicate needs to be nested (e.g.\n# `{\"site__slug\": \"ams01\"}`) so that it can be usable in `Q` objects.\nif not is_pk:\nname = f\"{self.field_name}__{self.field.to_field_name}\"\nelse:\nlogger.debug(\"UUID detected: Filtering using field name\")\nname = self.field_name\nif name and self.lookup_expr != django_filters.conf.settings.DEFAULT_LOOKUP_EXPR:\nname = \"__\".join([name, self.lookup_expr])\nreturn {name: v}\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.utilities.filters.NaturalKeyOrPKMultipleChoiceFilter.get_filter_predicate","title":"<code>get_filter_predicate(v)</code>","text":"<p>Override base filter behavior to force the filter to use the <code>pk</code> field instead of the natural key in the generated filter.</p> Source code in <code>nautobot/utilities/filters.py</code> <pre><code>def get_filter_predicate(self, v):\n\"\"\"\n    Override base filter behavior to force the filter to use the `pk` field instead of\n    the natural key in the generated filter.\n    \"\"\"\n# Null value filtering\nif v is None:\nreturn {f\"{self.field_name}__isnull\": True}\n# If value is a model instance, stringify it to a pk.\nif isinstance(v, models.Model):\nlogger.debug(\"Model instance detected. Casting to a PK.\")\nv = str(v.pk)\n# Try to cast the value to a UUID and set `is_pk` boolean.\ntry:\nuuid.UUID(str(v))\nexcept (AttributeError, TypeError, ValueError):\nlogger.debug(\"Non-UUID value detected: Filtering using natural key\")\nis_pk = False\nelse:\nv = str(v)  # Cast possible UUID instance to a string\nis_pk = True\n# If it's not a pk, then it's a slug and the filter predicate needs to be nested (e.g.\n# `{\"site__slug\": \"ams01\"}`) so that it can be usable in `Q` objects.\nif not is_pk:\nname = f\"{self.field_name}__{self.field.to_field_name}\"\nelse:\nlogger.debug(\"UUID detected: Filtering using field name\")\nname = self.field_name\nif name and self.lookup_expr != django_filters.conf.settings.DEFAULT_LOOKUP_EXPR:\nname = \"__\".join([name, self.lookup_expr])\nreturn {name: v}\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.NautobotFilterSet","title":"<code>nautobot.apps.filters.NautobotFilterSet</code>","text":"<p>             Bases: <code>BaseFilterSet</code>, <code>CreatedUpdatedModelFilterSetMixin</code>, <code>RelationshipModelFilterSetMixin</code>, <code>CustomFieldModelFilterSetMixin</code></p> <p>This class exists to combine common functionality and is used as a base class throughout the codebase where all of BaseFilterSet, CreatedUpdatedModelFilterSetMixin, RelationshipModelFilterSetMixin and CustomFieldModelFilterSetMixin are needed.</p> Source code in <code>nautobot/extras/filters/__init__.py</code> <pre><code>class NautobotFilterSet(\nBaseFilterSet,\nCreatedUpdatedModelFilterSetMixin,\nRelationshipModelFilterSetMixin,\nCustomFieldModelFilterSetMixin,\n):\n\"\"\"\n    This class exists to combine common functionality and is used as a base class throughout the codebase where all of\n    BaseFilterSet, CreatedUpdatedModelFilterSetMixin, RelationshipModelFilterSetMixin and CustomFieldModelFilterSetMixin\n    are needed.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.RelatedMembershipBooleanFilter","title":"<code>nautobot.apps.filters.RelatedMembershipBooleanFilter</code>","text":"<p>             Bases: <code>django_filters.BooleanFilter</code></p> <p>BooleanFilter for related objects that will explicitly perform <code>exclude=True</code> and <code>isnull</code> lookups. The <code>field_name</code> argument is required and must be set to the related field on the model.</p> <p>This should be used instead of a default <code>BooleanFilter</code> paired <code>method=</code> argument to test for the existence of related objects.</p> Example <p>has_interfaces = RelatedMembershipBooleanFilter(     field_name=\"interfaces\",     label=\"Has interfaces\", )</p> Source code in <code>nautobot/utilities/filters.py</code> <pre><code>class RelatedMembershipBooleanFilter(django_filters.BooleanFilter):\n\"\"\"\n    BooleanFilter for related objects that will explicitly perform `exclude=True` and `isnull`\n    lookups. The `field_name` argument is required and must be set to the related field on the\n    model.\n    This should be used instead of a default `BooleanFilter` paired `method=`\n    argument to test for the existence of related objects.\n    Example:\n        has_interfaces = RelatedMembershipBooleanFilter(\n            field_name=\"interfaces\",\n            label=\"Has interfaces\",\n        )\n    \"\"\"\ndef __init__(\nself, field_name=None, lookup_expr=\"isnull\", *, label=None, method=None, distinct=False, exclude=True, **kwargs\n):\nif field_name is None:\nraise ValueError(f\"Field name is required for {self.__class__.__name__}\")\nsuper().__init__(\nfield_name=field_name,\nlookup_expr=lookup_expr,\nlabel=label,\nmethod=method,\ndistinct=distinct,\nexclude=exclude,\n**kwargs,\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.RelationshipModelFilterSetMixin","title":"<code>nautobot.apps.filters.RelationshipModelFilterSetMixin</code>","text":"<p>             Bases: <code>django_filters.FilterSet</code></p> <p>Filterset for relationships applicable to the parent model.</p> Source code in <code>nautobot/extras/filters/mixins.py</code> <pre><code>class RelationshipModelFilterSetMixin(django_filters.FilterSet):\n\"\"\"\n    Filterset for relationships applicable to the parent model.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nself.obj_type = ContentType.objects.get_for_model(self._meta.model)\nsuper().__init__(*args, **kwargs)\nself.relationships = []\nself._append_relationships(model=self._meta.model)\ndef _append_relationships(self, model):\n\"\"\"\n        Append form fields for all Relationships assigned to this model.\n        \"\"\"\nquery = Q(source_type=self.obj_type, source_hidden=False) | Q(\ndestination_type=self.obj_type, destination_hidden=False\n)\nrelationships = Relationship.objects.select_related(\"source_type\", \"destination_type\").filter(query)\nfor rel in relationships.iterator():\nif rel.source_type == self.obj_type and not rel.source_hidden:\nself._append_relationships_side([rel], RelationshipSideChoices.SIDE_SOURCE, model)\nif rel.destination_type == self.obj_type and not rel.destination_hidden:\nself._append_relationships_side([rel], RelationshipSideChoices.SIDE_DESTINATION, model)\ndef _append_relationships_side(self, relationships, initial_side, model):\n\"\"\"\n        Helper method to _append_relationships, for processing one \"side\" of the relationships for this model.\n        \"\"\"\nfor relationship in relationships:\nif relationship.symmetric:\nside = RelationshipSideChoices.SIDE_PEER\nelse:\nside = initial_side\npeer_side = RelationshipSideChoices.OPPOSITE[side]\n# If this model is on the \"source\" side of the relationship, then the field will be named\n# \"cr_&lt;relationship-slug&gt;__destination\" since it's used to pick the destination object(s).\n# If we're on the \"destination\" side, the field will be \"cr_&lt;relationship-slug&gt;__source\".\n# For a symmetric relationship, both sides are \"peer\", so the field will be \"cr_&lt;relationship-slug&gt;__peer\"\nfield_name = f\"cr_{relationship.slug}__{peer_side}\"\nif field_name in self.relationships:\n# This is a symmetric relationship that we already processed from the opposing \"initial_side\".\n# No need to process it a second time!\ncontinue\nif peer_side == \"source\":\nchoice_model = relationship.source_type.model_class()\nelif peer_side == \"destination\":\nchoice_model = relationship.destination_type.model_class()\nelse:\nchoice_model = model\n# Check for invalid_relationship unit test\nif choice_model:\nself.filters[field_name] = RelationshipFilter(\nrelationship=relationship,\nside=side,\nfield_name=field_name,\nqueryset=choice_model.objects.all(),\nqs=model.objects.all(),\n)\nself.relationships.append(field_name)\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.SearchFilter","title":"<code>nautobot.apps.filters.SearchFilter</code>","text":"<p>             Bases: <code>MappedPredicatesFilterMixin</code>, <code>django_filters.CharFilter</code></p> <p>Provide a search filter for use on filtersets as the <code>q=</code> parameter.</p> <p>See the docstring for <code>nautobot.utilities.filters.MappedPredicatesFilterMixin</code> for usage.</p> Source code in <code>nautobot/utilities/filters.py</code> <pre><code>class SearchFilter(MappedPredicatesFilterMixin, django_filters.CharFilter):\n\"\"\"\n    Provide a search filter for use on filtersets as the `q=` parameter.\n    See the docstring for `nautobot.utilities.filters.MappedPredicatesFilterMixin` for usage.\n    \"\"\"\nlabel = \"Search\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.StatusModelFilterSetMixin","title":"<code>nautobot.apps.filters.StatusModelFilterSetMixin</code>","text":"<p>             Bases: <code>django_filters.FilterSet</code></p> <p>Mixin to add a <code>status</code> filter field to a FilterSet.</p> Source code in <code>nautobot/extras/filters/mixins.py</code> <pre><code>class StatusModelFilterSetMixin(django_filters.FilterSet):\n\"\"\"\n    Mixin to add a `status` filter field to a FilterSet.\n    \"\"\"\nstatus = StatusFilter()\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.TenancyModelFilterSetMixin","title":"<code>nautobot.apps.filters.TenancyModelFilterSetMixin</code>","text":"<p>             Bases: <code>django_filters.FilterSet</code></p> <p>An inheritable FilterSet for models which support Tenant assignment.</p> Source code in <code>nautobot/tenancy/filters/mixins.py</code> <pre><code>class TenancyModelFilterSetMixin(django_filters.FilterSet):\n\"\"\"\n    An inheritable FilterSet for models which support Tenant assignment.\n    \"\"\"\ntenant_group_id = TreeNodeMultipleChoiceFilter(\nqueryset=TenantGroup.objects.all(),\nfield_name=\"tenant__group\",\nlabel=\"Tenant Group (ID)\",\n)\ntenant_group = TreeNodeMultipleChoiceFilter(\nqueryset=TenantGroup.objects.all(),\nfield_name=\"tenant__group\",\nto_field_name=\"slug\",\nlabel=\"Tenant Group (slug)\",\n)\ntenant_id = django_filters.ModelMultipleChoiceFilter(\nqueryset=Tenant.objects.all(),\nlabel='Tenant (ID) (deprecated, use \"tenant\" filter instead)',\n)\ntenant = NaturalKeyOrPKMultipleChoiceFilter(\nqueryset=Tenant.objects.all(),\nlabel=\"Tenant (slug or ID)\",\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.TreeNodeMultipleChoiceFilter","title":"<code>nautobot.apps.filters.TreeNodeMultipleChoiceFilter</code>","text":"<p>             Bases: <code>NaturalKeyOrPKMultipleChoiceFilter</code></p> <p>Filter that matches on the given model(s) (identified by slug and/or pk) as well as their tree descendants.</p> <p>For example, if we have:</p> <pre><code>Region \"Earth\"\n  Region \"USA\"\n    Region \"GA\" &lt;- Site \"Athens\"\n    Region \"NC\" &lt;- Site \"Durham\"\n</code></pre> <p>a NaturalKeyOrPKMultipleChoiceFilter on Site for {\"region\": \"USA\"} would have no matches, since there are no Sites whose immediate Region is \"USA\", but a TreeNodeMultipleChoiceFilter on Site for {\"region\": \"USA\"} or {\"region\": \"Earth\"} would match both \"Athens\" and \"Durham\".</p> Source code in <code>nautobot/utilities/filters.py</code> <pre><code>class TreeNodeMultipleChoiceFilter(NaturalKeyOrPKMultipleChoiceFilter):\n\"\"\"\n    Filter that matches on the given model(s) (identified by slug and/or pk) _as well as their tree descendants._\n    For example, if we have:\n        Region \"Earth\"\n          Region \"USA\"\n            Region \"GA\" &lt;- Site \"Athens\"\n            Region \"NC\" &lt;- Site \"Durham\"\n    a NaturalKeyOrPKMultipleChoiceFilter on Site for {\"region\": \"USA\"} would have no matches,\n    since there are no Sites whose immediate Region is \"USA\",\n    but a TreeNodeMultipleChoiceFilter on Site for {\"region\": \"USA\"} or {\"region\": \"Earth\"}\n    would match both \"Athens\" and \"Durham\".\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nkwargs.pop(\"lookup_expr\", None)  # Disallow overloading of `lookup_expr`.\nsuper().__init__(*args, **kwargs)\ndef generate_query(self, value, qs=None, **kwargs):\n\"\"\"\n        Given a filter value, return a `Q` object that accounts for nested tree node descendants.\n        \"\"\"\nif value:\nif any(isinstance(node, TreeNode) for node in value):\n# django-tree-queries\nvalue = [node.descendants(include_self=True) if not isinstance(node, str) else node for node in value]\nelif any(isinstance(node, MPTTModel) for node in value):\n# django-mptt\nvalue = [\nnode.get_descendants(include_self=True) if not isinstance(node, str) else node for node in value\n]\n# This new_value is going to be a list of querysets that needs to be flattened.\nvalue = list(flatten_iterable(value))\n# Construct a list of filter predicates that will be used to generate the Q object.\npredicates = []\nfor obj in value:\n# Try to get the `to_field_name` (e.g. `slug`) or just pass the object through.\nval = getattr(obj, self.field.to_field_name, obj)\nif val == self.null_value:\nval = None\npredicates.append(self.get_filter_predicate(val))\n# Construct a nested OR query from the list of filter predicates derived from the flattened\n# listed of descendant objects.\nquery = models.Q()\nfor predicate in predicates:\nquery |= models.Q(**predicate)\nreturn query\ndef filter(self, qs, value):\nif value in EMPTY_VALUES:\nreturn qs\n# Fetch the generated Q object and filter the incoming qs with it before passing it along.\nquery = self.generate_query(value)\nreturn self.get_method(qs)(query)\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.utilities.filters.TreeNodeMultipleChoiceFilter.generate_query","title":"<code>generate_query(value, qs=None, **kwargs)</code>","text":"<p>Given a filter value, return a <code>Q</code> object that accounts for nested tree node descendants.</p> Source code in <code>nautobot/utilities/filters.py</code> <pre><code>def generate_query(self, value, qs=None, **kwargs):\n\"\"\"\n    Given a filter value, return a `Q` object that accounts for nested tree node descendants.\n    \"\"\"\nif value:\nif any(isinstance(node, TreeNode) for node in value):\n# django-tree-queries\nvalue = [node.descendants(include_self=True) if not isinstance(node, str) else node for node in value]\nelif any(isinstance(node, MPTTModel) for node in value):\n# django-mptt\nvalue = [\nnode.get_descendants(include_self=True) if not isinstance(node, str) else node for node in value\n]\n# This new_value is going to be a list of querysets that needs to be flattened.\nvalue = list(flatten_iterable(value))\n# Construct a list of filter predicates that will be used to generate the Q object.\npredicates = []\nfor obj in value:\n# Try to get the `to_field_name` (e.g. `slug`) or just pass the object through.\nval = getattr(obj, self.field.to_field_name, obj)\nif val == self.null_value:\nval = None\npredicates.append(self.get_filter_predicate(val))\n# Construct a nested OR query from the list of filter predicates derived from the flattened\n# listed of descendant objects.\nquery = models.Q()\nfor predicate in predicates:\nquery |= models.Q(**predicate)\nreturn query\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html","title":"nautobot.apps.forms","text":""},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms","title":"<code>nautobot.apps.forms</code>","text":"<p>Forms and fields for apps to use.</p>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.BulkEditForm","title":"<code>nautobot.apps.forms.BulkEditForm</code>","text":"<p>             Bases: <code>forms.Form</code></p> <p>Base form for editing multiple objects in bulk.</p> <p>Note that for models supporting custom fields and relationships, nautobot.extras.forms.NautobotBulkEditForm is a more powerful subclass and should be used instead of directly inheriting from this class.</p> Source code in <code>nautobot/utilities/forms/forms.py</code> <pre><code>class BulkEditForm(forms.Form):\n\"\"\"\n    Base form for editing multiple objects in bulk.\n    Note that for models supporting custom fields and relationships, nautobot.extras.forms.NautobotBulkEditForm is\n    a more powerful subclass and should be used instead of directly inheriting from this class.\n    \"\"\"\ndef __init__(self, model, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.model = model\nself.nullable_fields = []\n# Copy any nullable fields defined in Meta\nif hasattr(self.Meta, \"nullable_fields\"):\nself.nullable_fields = self.Meta.nullable_fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.CSVModelChoiceField","title":"<code>nautobot.apps.forms.CSVModelChoiceField</code>","text":"<p>             Bases: <code>forms.ModelChoiceField</code></p> <p>Provides additional validation for model choices entered as CSV data.</p> Source code in <code>nautobot/utilities/forms/fields.py</code> <pre><code>class CSVModelChoiceField(forms.ModelChoiceField):\n\"\"\"\n    Provides additional validation for model choices entered as CSV data.\n    \"\"\"\ndefault_error_messages = {\n\"invalid_choice\": \"Object not found.\",\n}\ndef to_python(self, value):\ntry:\nreturn super().to_python(value)\nexcept MultipleObjectsReturned:\nraise forms.ValidationError(f'\"{value}\" is not a unique value for this field; multiple objects were found')\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.CSVModelForm","title":"<code>nautobot.apps.forms.CSVModelForm</code>","text":"<p>             Bases: <code>forms.ModelForm</code></p> <p>ModelForm used for the import of objects in CSV format.</p> Source code in <code>nautobot/utilities/forms/forms.py</code> <pre><code>class CSVModelForm(forms.ModelForm):\n\"\"\"\n    ModelForm used for the import of objects in CSV format.\n    \"\"\"\ndef __init__(self, *args, headers=None, **kwargs):\nsuper().__init__(*args, **kwargs)\n# Modify the model form to accommodate any customized to_field_name properties\nif headers:\nfor field, to_field in headers.items():\nif to_field is not None:\nself.fields[field].to_field_name = to_field\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.CustomFieldModelCSVForm","title":"<code>nautobot.apps.forms.CustomFieldModelCSVForm</code>","text":"<p>             Bases: <code>CSVModelForm</code>, <code>CustomFieldModelFormMixin</code></p> <p>Base class for CSV export of models that support custom fields.</p> Source code in <code>nautobot/extras/forms/forms.py</code> <pre><code>class CustomFieldModelCSVForm(CSVModelForm, CustomFieldModelFormMixin):\n\"\"\"Base class for CSV export of models that support custom fields.\"\"\"\ndef _append_customfield_fields(self):\n# Append form fields\nfor cf in CustomField.objects.filter(content_types=self.obj_type):\nfield_name = f\"cf_{cf.slug}\"\nself.fields[field_name] = cf.to_form_field(for_csv_import=True)\n# Annotate the field in the list of CustomField form fields\nself.custom_fields.append(field_name)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.CustomFieldModelFormMixin","title":"<code>nautobot.apps.forms.CustomFieldModelFormMixin</code>","text":"<p>             Bases: <code>forms.ModelForm</code></p> Source code in <code>nautobot/extras/forms/mixins.py</code> <pre><code>class CustomFieldModelFormMixin(forms.ModelForm):\ndef __init__(self, *args, **kwargs):\nself.obj_type = ContentType.objects.get_for_model(self._meta.model)\nself.custom_fields = []\nsuper().__init__(*args, **kwargs)\nself._append_customfield_fields()\ndef _append_customfield_fields(self):\n\"\"\"\n        Append form fields for all CustomFields assigned to this model.\n        \"\"\"\n# Append form fields; assign initial values if modifying and existing object\nfor cf in CustomField.objects.filter(content_types=self.obj_type):\nfield_name = f\"cf_{cf.slug}\"\nif self.instance.present_in_database:\nself.fields[field_name] = cf.to_form_field(set_initial=False)\n# 2.0 TODO: #824 self.instance.cf.get(cf.slug)\nself.fields[field_name].initial = self.instance.cf.get(cf.name)\nelse:\nself.fields[field_name] = cf.to_form_field()\n# Annotate the field in the list of CustomField form fields\nself.custom_fields.append(field_name)\ndef clean(self):\n# Save custom field data on instance\nfor field_name in self.custom_fields:\n# 2.0 TODO: #824 will let us just do:\n# self.instance.cf[field_name[3:]] = self.cleaned_data.get(field_name)\n# but for now we need:\ncf = CustomField.objects.get(slug=field_name[3:])\nself.instance.cf[cf.name] = self.cleaned_data.get(field_name)\nreturn super().clean()\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.DatePicker","title":"<code>nautobot.apps.forms.DatePicker</code>","text":"<p>             Bases: <code>forms.TextInput</code></p> <p>Date picker using Flatpickr.</p> Source code in <code>nautobot/utilities/forms/widgets.py</code> <pre><code>class DatePicker(forms.TextInput):\n\"\"\"\n    Date picker using Flatpickr.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.attrs[\"class\"] = \"date-picker\"\nself.attrs[\"placeholder\"] = \"YYYY-MM-DD\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.DateTimePicker","title":"<code>nautobot.apps.forms.DateTimePicker</code>","text":"<p>             Bases: <code>forms.TextInput</code></p> <p>DateTime picker using Flatpickr.</p> Source code in <code>nautobot/utilities/forms/widgets.py</code> <pre><code>class DateTimePicker(forms.TextInput):\n\"\"\"\n    DateTime picker using Flatpickr.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.attrs[\"class\"] = \"datetime-picker\"\nself.attrs[\"placeholder\"] = \"YYYY-MM-DD hh:mm:ss\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.DynamicModelChoiceField","title":"<code>nautobot.apps.forms.DynamicModelChoiceField</code>","text":"<p>             Bases: <code>DynamicModelChoiceMixin</code>, <code>forms.ModelChoiceField</code></p> <p>Override get_bound_field() to avoid pre-populating field choices with a SQL query. The field will be rendered only with choices set via bound data. Choices are populated on-demand via the APISelect widget.</p> Source code in <code>nautobot/utilities/forms/fields.py</code> <pre><code>class DynamicModelChoiceField(DynamicModelChoiceMixin, forms.ModelChoiceField):\n\"\"\"\n    Override get_bound_field() to avoid pre-populating field choices with a SQL query. The field will be\n    rendered only with choices set via bound data. Choices are populated on-demand via the APISelect widget.\n    \"\"\"\ndef clean(self, value):\n\"\"\"\n        When null option is enabled and \"None\" is sent as part of a form to be submitted, it is sent as the\n        string 'null'.  This will check for that condition and gracefully handle the conversion to a NoneType.\n        \"\"\"\nif self.null_option is not None and value == settings.FILTERS_NULL_CHOICE_VALUE:\nreturn None\nreturn super().clean(value)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.utilities.forms.fields.DynamicModelChoiceField.clean","title":"<code>clean(value)</code>","text":"<p>When null option is enabled and \"None\" is sent as part of a form to be submitted, it is sent as the string 'null'.  This will check for that condition and gracefully handle the conversion to a NoneType.</p> Source code in <code>nautobot/utilities/forms/fields.py</code> <pre><code>def clean(self, value):\n\"\"\"\n    When null option is enabled and \"None\" is sent as part of a form to be submitted, it is sent as the\n    string 'null'.  This will check for that condition and gracefully handle the conversion to a NoneType.\n    \"\"\"\nif self.null_option is not None and value == settings.FILTERS_NULL_CHOICE_VALUE:\nreturn None\nreturn super().clean(value)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.DynamicModelMultipleChoiceField","title":"<code>nautobot.apps.forms.DynamicModelMultipleChoiceField</code>","text":"<p>             Bases: <code>DynamicModelChoiceMixin</code>, <code>forms.ModelMultipleChoiceField</code></p> <p>A multiple-choice version of DynamicModelChoiceField.</p> Source code in <code>nautobot/utilities/forms/fields.py</code> <pre><code>class DynamicModelMultipleChoiceField(DynamicModelChoiceMixin, forms.ModelMultipleChoiceField):\n\"\"\"\n    A multiple-choice version of DynamicModelChoiceField.\n    \"\"\"\nfilter = django_filters.ModelMultipleChoiceFilter\nwidget = widgets.APISelectMultiple\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.NautobotBulkEditForm","title":"<code>nautobot.apps.forms.NautobotBulkEditForm</code>","text":"<p>             Bases: <code>BootstrapMixin</code>, <code>CustomFieldModelBulkEditFormMixin</code>, <code>RelationshipModelBulkEditFormMixin</code>, <code>NoteModelBulkEditFormMixin</code></p> <p>Base class for bulk-edit forms for models that support relationships, custom fields and notes.</p> Source code in <code>nautobot/extras/forms/base.py</code> <pre><code>class NautobotBulkEditForm(\nBootstrapMixin, CustomFieldModelBulkEditFormMixin, RelationshipModelBulkEditFormMixin, NoteModelBulkEditFormMixin\n):\n\"\"\"Base class for bulk-edit forms for models that support relationships, custom fields and notes.\"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.NautobotModelForm","title":"<code>nautobot.apps.forms.NautobotModelForm</code>","text":"<p>             Bases: <code>BootstrapMixin</code>, <code>CustomFieldModelFormMixin</code>, <code>RelationshipModelFormMixin</code>, <code>NoteModelFormMixin</code></p> <p>This class exists to combine common functionality and is used to inherit from throughout the codebase where all of BootstrapMixin, CustomFieldModelFormMixin, RelationshipModelFormMixin, and NoteModelFormMixin are needed.</p> Source code in <code>nautobot/extras/forms/base.py</code> <pre><code>class NautobotModelForm(BootstrapMixin, CustomFieldModelFormMixin, RelationshipModelFormMixin, NoteModelFormMixin):\n\"\"\"\n    This class exists to combine common functionality and is used to inherit from throughout the\n    codebase where all of BootstrapMixin, CustomFieldModelFormMixin, RelationshipModelFormMixin, and\n    NoteModelFormMixin are needed.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.NoteModelBulkEditFormMixin","title":"<code>nautobot.apps.forms.NoteModelBulkEditFormMixin</code>","text":"<p>             Bases: <code>BulkEditForm</code>, <code>NoteFormBase</code></p> <p>Bulk-edit form mixin for models that support Notes.</p> Source code in <code>nautobot/extras/forms/mixins.py</code> <pre><code>class NoteModelBulkEditFormMixin(BulkEditForm, NoteFormBase):\n\"\"\"Bulk-edit form mixin for models that support Notes.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.obj_type = ContentType.objects.get_for_model(self.model)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.RelationshipModelBulkEditFormMixin","title":"<code>nautobot.apps.forms.RelationshipModelBulkEditFormMixin</code>","text":"<p>             Bases: <code>BulkEditForm</code></p> <p>Bulk-edit form mixin for models that support Relationships.</p> Source code in <code>nautobot/extras/forms/mixins.py</code> <pre><code>class RelationshipModelBulkEditFormMixin(BulkEditForm):\n\"\"\"Bulk-edit form mixin for models that support Relationships.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.obj_type = ContentType.objects.get_for_model(self.model)\nself.relationships = []\nself._append_relationships()\ndef _append_relationships(self):\n\"\"\"\n        Append form fields for all Relationships assigned to this model.\n        \"\"\"\nsource_relationships = Relationship.objects.filter(source_type=self.obj_type, source_hidden=False)\nself._append_relationships_side(source_relationships, RelationshipSideChoices.SIDE_SOURCE)\ndest_relationships = Relationship.objects.filter(destination_type=self.obj_type, destination_hidden=False)\nself._append_relationships_side(dest_relationships, RelationshipSideChoices.SIDE_DESTINATION)\ndef _append_relationships_side(self, relationships, initial_side):\n\"\"\"\n        Helper method to _append_relationships, for processing one \"side\" of the relationships for this model.\n        For different relationship types there are different expectations of the UI:\n        - For one-to-one (symmetric or non-symmetric) it doesn't make sense to bulk-set this relationship,\n          but we want it to be clearable/nullable.\n        - For one-to-many (from the source, \"one\", side) we likewise want it clearable/nullable but not settable.\n        - For one-to-many (from the destination, \"many\", side) a single value can be set, or it can be nulled.\n        - For many-to-many (symmetric or non-symmetric) we provide \"add\" and \"remove\" multi-select fields,\n          similar to the TagsBulkEditFormMixin behavior. No nullability is provided here.\n        \"\"\"\nfor relationship in relationships:\nif relationship.symmetric:\nside = RelationshipSideChoices.SIDE_PEER\nelse:\nside = initial_side\npeer_side = RelationshipSideChoices.OPPOSITE[side]\n# If this model is on the \"source\" side of the relationship, then the field will be named\n# \"cr_&lt;relationship-slug&gt;__destination\" since it's used to pick the destination object(s).\n# If we're on the \"destination\" side, the field will be \"cr_&lt;relationship-slug&gt;__source\".\n# For a symmetric relationship, both sides are \"peer\", so the field will be \"cr_&lt;relationship-slug&gt;__peer\"\nfield_name = f\"cr_{relationship.slug}__{peer_side}\"\nif field_name in self.relationships:\n# This is a symmetric relationship that we already processed from the opposing \"initial_side\".\n# No need to process it a second time!\ncontinue\nif relationship.has_many(side):\nif relationship.type == RelationshipTypeChoices.TYPE_ONE_TO_MANY:\n# Destination side of a one-to-many field - provide a standard form field for selecting the \"one\",\n# as well as making this field nullable.\nself.fields[field_name] = relationship.to_form_field(side=side)\nself.nullable_fields.append(field_name)\nelse:\n# Many-to-many field - provide \"add\" and \"remove\" form fields like with tags, no nullable option.\nself.fields[f\"add_{field_name}\"] = relationship.to_form_field(side=side)\nself.fields[f\"add_{field_name}\"].label = \"Add \" + self.fields[f\"add_{field_name}\"].label\nself.fields[f\"remove_{field_name}\"] = relationship.to_form_field(side=side)\nself.fields[f\"remove_{field_name}\"].label = \"Remove \" + self.fields[f\"remove_{field_name}\"].label\nelse:\n# The \"one\" side of a one-to-one or one-to-many relationship.\n# In this case, the only valid bulk-edit operation is nulling/clearing the relationship,\n# but the \"Set null\" checkbox only appears if we have a form field for the the relationship itself.\n# This could probably be refined, but for now we just add the field and disable it.\nself.fields[field_name] = relationship.to_form_field(side=side)\nself.fields[field_name].disabled = True\nself.nullable_fields.append(field_name)\nself.relationships.append(field_name)\ndef save_relationships(self, *, instance, nullified_fields):\n\"\"\"Helper method to be called from BulkEditView.post().\"\"\"\n# The below may seem inefficient as it re-loads the Relationship objects afresh for each instance;\n# however this is necessary as it applies the source/destination filters (if any) to determine\n# whether each relationship actually applies to the given instance.\ninstance_relationships = instance.get_relationships(include_hidden=True)\nfor side, relationships_data in instance_relationships.items():\npeer_side = RelationshipSideChoices.OPPOSITE[side]\nfor relationship, relationshipassociation_queryset in relationships_data.items():\nfield_name = f\"cr_{relationship.slug}__{peer_side}\"\nlogger.debug(\n\"Processing relationship %s %s (field %s) for instance %s\",\nrelationship,\nside,\nfield_name,\ninstance,\n)\nif field_name in self.nullable_fields and field_name in nullified_fields:\nlogger.debug(\"Deleting existing relationship associations for %s on %s\", relationship, instance)\nrelationshipassociation_queryset.delete()\nelif field_name in self.cleaned_data:\nvalue = self.cleaned_data.get(field_name)\nif value and not relationship.has_many(peer_side):\nra, created = RelationshipAssociation.objects.update_or_create(\nrelationship=relationship,\nsource_type=relationship.source_type,\ndestination_type=relationship.destination_type,\ndefaults={f\"{peer_side}_id\": value.pk},\n**{f\"{side}_id\": instance.pk},\n)\nif created:\nlogger.debug(\"Created %s\", ra)\nelse:\nlogger.debug(\"Updated %s\", ra)\nelse:\nif f\"add_{field_name}\" in self.cleaned_data:\nadded = self.cleaned_data.get(f\"add_{field_name}\")\nfor target in added:\nif peer_side != RelationshipSideChoices.SIDE_PEER:\nra, created = RelationshipAssociation.objects.get_or_create(\nrelationship=relationship,\nsource_type=relationship.source_type,\ndestination_type=relationship.destination_type,\n**{\nf\"{side}_id\": instance.pk,\nf\"{peer_side}_id\": target.pk,\n},\n)\nelse:\nif (\nRelationshipAssociation.objects.filter(\nrelationship=relationship,\nsource_id=instance.pk,\ndestination_id=target.pk,\n).exists()\nor RelationshipAssociation.objects.filter(\nrelationship=relationship,\nsource_id=target.pk,\ndestination_id=instance.pk,\n).exists()\n):\nra = None\ncreated = False\nelse:\nra = RelationshipAssociation.objects.create(\nrelationship=relationship,\nsource_type=relationship.source_type,\nsource_id=instance.pk,\ndestination_type=relationship.destination_type,\ndestination_id=target.pk,\n)\ncreated = True\nif created:\nra.validated_save()\nlogger.debug(\"Created %s\", ra)\nif f\"remove_{field_name}\" in self.cleaned_data:\nremoved = self.cleaned_data.get(f\"remove_{field_name}\")\nsource_count = 0\ndestination_count = 0\nif side in [RelationshipSideChoices.SIDE_SOURCE, RelationshipSideChoices.SIDE_PEER]:\nsource_count, _ = RelationshipAssociation.objects.filter(\nrelationship=relationship,\nsource_id=instance.pk,\ndestination_id__in=[target.pk for target in removed],\n).delete()\nif side in [RelationshipSideChoices.SIDE_DESTINATION, RelationshipSideChoices.SIDE_PEER]:\ndestination_count, _ = RelationshipAssociation.objects.filter(\nrelationship=relationship,\nsource_id__in=[target.pk for target in removed],\ndestination_id=instance.pk,\n).delete()\nlogger.debug(\"Deleted %s RelationshipAssociation(s)\", source_count + destination_count)\ndef clean(self):\n# Get any initial required relationship objects errors (i.e. non-existent required objects)\nrequired_objects_errors = self.model.required_related_objects_errors(output_for=\"ui\")\nalready_invalidated_slugs = []\nfor field, errors in required_objects_errors.items():\nself.add_error(None, errors)\nrelationship_slug = field.split(\"__\")[0][3:]\nalready_invalidated_slugs.append(relationship_slug)\nrequired_relationships = []\n# The following query excludes already invalidated relationships (this happened above\n# by checking for the existence of required objects\n# with the call to self.Meta().model.required_related_objects_errors(output_for=\"ui\"))\nfor relationship in Relationship.objects.get_required_for_model(self.model).exclude(\nslug__in=already_invalidated_slugs\n):\nrequired_relationships.append(\n{\n\"slug\": relationship.slug,\n\"required_side\": RelationshipSideChoices.OPPOSITE[relationship.required_on],\n\"relationship\": relationship,\n}\n)\n# Get difference of add/remove objects for each required relationship:\nrequired_relationships_to_check = []\nfor required_relationship in required_relationships:\nrequired_field = f\"cr_{required_relationship['slug']}__{required_relationship['required_side']}\"\nadd_list = []\nif f\"add_{required_field}\" in self.cleaned_data:\nadd_list = self.cleaned_data[f\"add_{required_field}\"]\nremove_list = []\nif f\"remove_{required_field}\" in self.cleaned_data:\nremove_list = self.cleaned_data[f\"remove_{required_field}\"]\n# Determine difference of add/remove inputs\nto_add = [obj for obj in add_list if obj not in remove_list]\n# If we are adding at least one relationship association (and also not removing it), further validation is\n# not necessary because at least one object is required for every type of required relationship (one-to-one,\n# one-to-many and many-to-many)\nif len(to_add) &gt; 0:\ncontinue\nto_remove = [obj for obj in remove_list if obj not in add_list]\n# Add to list of required relationships to enforce on each object being bulk-edited\nrequired_relationships_to_check.append(\n{\n\"field\": required_field,\n\"to_add\": to_add,\n\"to_remove\": to_remove,\n\"relationship\": required_relationship[\"relationship\"],\n}\n)\nrelationship_data_errors = {}\nfor relationship_to_check in required_relationships_to_check:\nrelationship = relationship_to_check[\"relationship\"]\nfor editing in self.cleaned_data[\"pk\"]:\nrequired_target_side = RelationshipSideChoices.OPPOSITE[relationship.required_on]\nrequired_target_type = getattr(relationship, f\"{required_target_side}_type\")\nrequired_type_verbose_name = required_target_type.model_class()._meta.verbose_name\nfilter_kwargs = {\n\"relationship\": relationship,\nf\"{relationship.required_on}_id\": editing.pk,\n}\nexisting_objects = [\ngetattr(association, f\"get_{RelationshipSideChoices.OPPOSITE[relationship.required_on]}\")()\nfor association in RelationshipAssociation.objects.filter(**filter_kwargs)\n]\nrequires_message = (\nf\"{editing._meta.verbose_name_plural} require a {required_type_verbose_name} \"\nf'for the required relationship \"{str(relationship)}\"'\n)\nif len(existing_objects) == 0 and len(relationship_to_check[\"to_add\"]) == 0:\nrelationship_data_errors.setdefault(requires_message, []).append(str(editing))\nelse:\nremoved = relationship_to_check[\"to_remove\"]\ndifference = [obj for obj in existing_objects if obj not in removed]\nif len(difference) == 0:\nrelationship_data_errors.setdefault(requires_message, []).append(str(editing))\nfor relationship_message, object_list in relationship_data_errors.items():\nif len(object_list) &gt; 5:\nself.add_error(None, f\"{len(object_list)} {relationship_message}\")\nelse:\nself.add_error(None, f\"These {relationship_message}: {', '.join(object_list)}\")\nreturn super().clean()\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.extras.forms.mixins.RelationshipModelBulkEditFormMixin.save_relationships","title":"<code>save_relationships(*, instance, nullified_fields)</code>","text":"<p>Helper method to be called from BulkEditView.post().</p> Source code in <code>nautobot/extras/forms/mixins.py</code> <pre><code>def save_relationships(self, *, instance, nullified_fields):\n\"\"\"Helper method to be called from BulkEditView.post().\"\"\"\n# The below may seem inefficient as it re-loads the Relationship objects afresh for each instance;\n# however this is necessary as it applies the source/destination filters (if any) to determine\n# whether each relationship actually applies to the given instance.\ninstance_relationships = instance.get_relationships(include_hidden=True)\nfor side, relationships_data in instance_relationships.items():\npeer_side = RelationshipSideChoices.OPPOSITE[side]\nfor relationship, relationshipassociation_queryset in relationships_data.items():\nfield_name = f\"cr_{relationship.slug}__{peer_side}\"\nlogger.debug(\n\"Processing relationship %s %s (field %s) for instance %s\",\nrelationship,\nside,\nfield_name,\ninstance,\n)\nif field_name in self.nullable_fields and field_name in nullified_fields:\nlogger.debug(\"Deleting existing relationship associations for %s on %s\", relationship, instance)\nrelationshipassociation_queryset.delete()\nelif field_name in self.cleaned_data:\nvalue = self.cleaned_data.get(field_name)\nif value and not relationship.has_many(peer_side):\nra, created = RelationshipAssociation.objects.update_or_create(\nrelationship=relationship,\nsource_type=relationship.source_type,\ndestination_type=relationship.destination_type,\ndefaults={f\"{peer_side}_id\": value.pk},\n**{f\"{side}_id\": instance.pk},\n)\nif created:\nlogger.debug(\"Created %s\", ra)\nelse:\nlogger.debug(\"Updated %s\", ra)\nelse:\nif f\"add_{field_name}\" in self.cleaned_data:\nadded = self.cleaned_data.get(f\"add_{field_name}\")\nfor target in added:\nif peer_side != RelationshipSideChoices.SIDE_PEER:\nra, created = RelationshipAssociation.objects.get_or_create(\nrelationship=relationship,\nsource_type=relationship.source_type,\ndestination_type=relationship.destination_type,\n**{\nf\"{side}_id\": instance.pk,\nf\"{peer_side}_id\": target.pk,\n},\n)\nelse:\nif (\nRelationshipAssociation.objects.filter(\nrelationship=relationship,\nsource_id=instance.pk,\ndestination_id=target.pk,\n).exists()\nor RelationshipAssociation.objects.filter(\nrelationship=relationship,\nsource_id=target.pk,\ndestination_id=instance.pk,\n).exists()\n):\nra = None\ncreated = False\nelse:\nra = RelationshipAssociation.objects.create(\nrelationship=relationship,\nsource_type=relationship.source_type,\nsource_id=instance.pk,\ndestination_type=relationship.destination_type,\ndestination_id=target.pk,\n)\ncreated = True\nif created:\nra.validated_save()\nlogger.debug(\"Created %s\", ra)\nif f\"remove_{field_name}\" in self.cleaned_data:\nremoved = self.cleaned_data.get(f\"remove_{field_name}\")\nsource_count = 0\ndestination_count = 0\nif side in [RelationshipSideChoices.SIDE_SOURCE, RelationshipSideChoices.SIDE_PEER]:\nsource_count, _ = RelationshipAssociation.objects.filter(\nrelationship=relationship,\nsource_id=instance.pk,\ndestination_id__in=[target.pk for target in removed],\n).delete()\nif side in [RelationshipSideChoices.SIDE_DESTINATION, RelationshipSideChoices.SIDE_PEER]:\ndestination_count, _ = RelationshipAssociation.objects.filter(\nrelationship=relationship,\nsource_id__in=[target.pk for target in removed],\ndestination_id=instance.pk,\n).delete()\nlogger.debug(\"Deleted %s RelationshipAssociation(s)\", source_count + destination_count)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.RelationshipModelFormMixin","title":"<code>nautobot.apps.forms.RelationshipModelFormMixin</code>","text":"<p>             Bases: <code>forms.ModelForm</code></p> Source code in <code>nautobot/extras/forms/mixins.py</code> <pre><code>class RelationshipModelFormMixin(forms.ModelForm):\ndef __init__(self, *args, **kwargs):\nself.obj_type = ContentType.objects.get_for_model(self._meta.model)\nself.relationships = []\nsuper().__init__(*args, **kwargs)\nself._append_relationships()\ndef _append_relationships(self):\n\"\"\"\n        Append form fields for all Relationships assigned to this model.\n        One form field per side will be added to the list.\n        \"\"\"\nfor side, relationships in self.instance.get_relationships().items():\nfor relationship, queryset in relationships.items():\npeer_side = RelationshipSideChoices.OPPOSITE[side]\n# If this model is on the \"source\" side of the relationship, then the field will be named\n# cr_&lt;relationship-slug&gt;__destination since it's used to pick the destination object(s).\n# If we're on the \"destination\" side, the field will be cr_&lt;relationship-slug&gt;__source.\n# For a symmetric relationship, both sides are \"peer\", so the field will be cr_&lt;relationship-slug&gt;__peer\nfield_name = f\"cr_{relationship.slug}__{peer_side}\"\nself.fields[field_name] = relationship.to_form_field(side=side)\n# HTML5 validation for required relationship field:\nif relationship.required_on == side:\nself.fields[field_name].required = True\n# if the object already exists, populate the field with existing values\nif self.instance.present_in_database:\nif relationship.has_many(peer_side):\ninitial = [association.get_peer(self.instance) for association in queryset.all()]\nself.fields[field_name].initial = initial\nelse:\nassociation = queryset.first()\nif association:\nself.fields[field_name].initial = association.get_peer(self.instance)\n# Annotate the field in the list of Relationship form fields\nself.relationships.append(field_name)\ndef clean(self):\n\"\"\"\n        First check for any required relationships errors and if there are any, add them via form field errors.\n        Then verify that any requested RelationshipAssociations do not violate relationship cardinality restrictions.\n        - For TYPE_ONE_TO_MANY and TYPE_ONE_TO_ONE relations, if the form's object is on the \"source\" side of\n          the relationship, verify that the requested \"destination\" object(s) do not already have any existing\n          RelationshipAssociation to a different source object.\n        - For TYPE_ONE_TO_ONE relations, if the form's object is on the \"destination\" side of the relationship,\n          verify that the requested \"source\" object does not have an existing RelationshipAssociation to\n          a different destination object.\n        \"\"\"\nrequired_relationships_errors = self.Meta().model.required_related_objects_errors(\noutput_for=\"ui\", initial_data=self.cleaned_data, instance=self.instance\n)\nfor field, errors in required_relationships_errors.items():\nself.add_error(field, errors)\nfor side, relationships in self.instance.get_relationships().items():\nfor relationship in relationships:\n# The form field name reflects what it provides, i.e. the peer object(s) to link via this relationship.\npeer_side = RelationshipSideChoices.OPPOSITE[side]\nfield_name = f\"cr_{relationship.slug}__{peer_side}\"\n# Is the form trying to set this field (create/update a RelationshipAssociation(s))?\n# If not (that is, clearing the field / deleting RelationshipAssociation(s)), we don't need to check.\nif field_name not in self.cleaned_data or not self.cleaned_data[field_name]:\ncontinue\n# Are any of the objects we want a relationship with already entangled with another object?\nif relationship.has_many(peer_side):\ntarget_peers = list(self.cleaned_data[field_name])\nelse:\ntarget_peers = [self.cleaned_data[field_name]]\nfor target_peer in target_peers:\nif target_peer.pk == self.instance.pk:\nraise ValidationError(\n{field_name: f\"Object {self.instance} cannot form a relationship to itself!\"}\n)\nif relationship.has_many(side):\n# No need to check for existing RelationshipAssociations since this is a \"many\" relationship\ncontinue\nif not relationship.symmetric:\nexisting_peer_associations = RelationshipAssociation.objects.filter(\nrelationship=relationship,\n**{\nf\"{peer_side}_id\": target_peer.pk,\n},\n).exclude(**{f\"{side}_id\": self.instance.pk})\nelse:\nexisting_peer_associations = RelationshipAssociation.objects.filter(\n(\n(Q(source_id=target_peer.pk) &amp; ~Q(destination_id=self.instance.pk))\n| (Q(destination_id=target_peer.pk) &amp; ~Q(source_id=self.instance.pk))\n),\nrelationship=relationship,\n)\nif existing_peer_associations.exists():\nraise ValidationError(\n{field_name: f\"{target_peer} is already involved in a {relationship} relationship\"}\n)\nsuper().clean()\ndef _save_relationships(self):\n\"\"\"Update RelationshipAssociations for all Relationships on form save.\"\"\"\nfor field_name in self.relationships:\n# The field name tells us the side of the relationship that it is providing peer objects(s) to link into.\npeer_side = field_name.split(\"__\")[-1]\n# Based on the side of the relationship that our local object represents,\n# find the list of existing RelationshipAssociations it already has for this Relationship.\nside = RelationshipSideChoices.OPPOSITE[peer_side]\nfilters = {\n\"relationship\": self.fields[field_name].model,\n}\nif side != RelationshipSideChoices.SIDE_PEER:\nfilters.update({f\"{side}_type\": self.obj_type, f\"{side}_id\": self.instance.pk})\nexisting_associations = RelationshipAssociation.objects.filter(**filters)\nelse:\nexisting_associations = RelationshipAssociation.objects.filter(\n(\nQ(source_type=self.obj_type, source_id=self.instance.pk)\n| Q(destination_type=self.obj_type, destination_id=self.instance.pk)\n),\n**filters,\n)\n# Get the list of target peer ids (PKs) that are specified in the form\ntarget_peer_ids = []\nif hasattr(self.cleaned_data[field_name], \"__iter__\"):\n# One-to-many or many-to-many association\ntarget_peer_ids = [item.pk for item in self.cleaned_data[field_name]]\nelif self.cleaned_data[field_name]:\n# Many-to-one or one-to-one association\ntarget_peer_ids = [self.cleaned_data[field_name].pk]\nelse:\n# Unset/delete case\ntarget_peer_ids = []\n# Create/delete RelationshipAssociations as needed to match the target_peer_ids list\n# First, for each existing association, if it's one that's already in target_peer_ids,\n# we can discard it from target_peer_ids (no update needed to this association).\n# Conversely, if it's *not* in target_peer_ids, we should delete it.\nfor association in existing_associations:\nfor peer_id in target_peer_ids:\nif peer_side != RelationshipSideChoices.SIDE_PEER:\nif peer_id == getattr(association, f\"{peer_side}_id\"):\n# This association already exists, so we can ignore it\ntarget_peer_ids.remove(peer_id)\nbreak\nelse:\nif peer_id == association.source_id or peer_id == association.destination_id:\n# This association already exists, so we can ignore it\ntarget_peer_ids.remove(peer_id)\nbreak\nelse:\n# This association is not in target_peer_ids, so delete it\nassociation.delete()\n# Anything remaining in target_peer_ids now does not exist yet and needs to be created.\nfor peer_id in target_peer_ids:\nrelationship = self.fields[field_name].model\nif not relationship.symmetric:\nassociation = RelationshipAssociation(\nrelationship=relationship,\n**{\nf\"{side}_type\": self.obj_type,\nf\"{side}_id\": self.instance.pk,\nf\"{peer_side}_type\": getattr(relationship, f\"{peer_side}_type\"),\nf\"{peer_side}_id\": peer_id,\n},\n)\nelse:\n# Symmetric association - source/destination are interchangeable\nassociation = RelationshipAssociation(\nrelationship=relationship,\nsource_type=self.obj_type,\nsource_id=self.instance.pk,\ndestination_type=self.obj_type,  # since this is a symmetric relationship this is OK\ndestination_id=peer_id,\n)\nassociation.clean()\nassociation.save()\ndef save(self, commit=True):\nobj = super().save(commit)\nif commit:\nself._save_relationships()\nreturn obj\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.extras.forms.mixins.RelationshipModelFormMixin.clean","title":"<code>clean()</code>","text":"<p>First check for any required relationships errors and if there are any, add them via form field errors. Then verify that any requested RelationshipAssociations do not violate relationship cardinality restrictions.</p> <ul> <li>For TYPE_ONE_TO_MANY and TYPE_ONE_TO_ONE relations, if the form's object is on the \"source\" side of   the relationship, verify that the requested \"destination\" object(s) do not already have any existing   RelationshipAssociation to a different source object.</li> <li>For TYPE_ONE_TO_ONE relations, if the form's object is on the \"destination\" side of the relationship,   verify that the requested \"source\" object does not have an existing RelationshipAssociation to   a different destination object.</li> </ul> Source code in <code>nautobot/extras/forms/mixins.py</code> <pre><code>def clean(self):\n\"\"\"\n    First check for any required relationships errors and if there are any, add them via form field errors.\n    Then verify that any requested RelationshipAssociations do not violate relationship cardinality restrictions.\n    - For TYPE_ONE_TO_MANY and TYPE_ONE_TO_ONE relations, if the form's object is on the \"source\" side of\n      the relationship, verify that the requested \"destination\" object(s) do not already have any existing\n      RelationshipAssociation to a different source object.\n    - For TYPE_ONE_TO_ONE relations, if the form's object is on the \"destination\" side of the relationship,\n      verify that the requested \"source\" object does not have an existing RelationshipAssociation to\n      a different destination object.\n    \"\"\"\nrequired_relationships_errors = self.Meta().model.required_related_objects_errors(\noutput_for=\"ui\", initial_data=self.cleaned_data, instance=self.instance\n)\nfor field, errors in required_relationships_errors.items():\nself.add_error(field, errors)\nfor side, relationships in self.instance.get_relationships().items():\nfor relationship in relationships:\n# The form field name reflects what it provides, i.e. the peer object(s) to link via this relationship.\npeer_side = RelationshipSideChoices.OPPOSITE[side]\nfield_name = f\"cr_{relationship.slug}__{peer_side}\"\n# Is the form trying to set this field (create/update a RelationshipAssociation(s))?\n# If not (that is, clearing the field / deleting RelationshipAssociation(s)), we don't need to check.\nif field_name not in self.cleaned_data or not self.cleaned_data[field_name]:\ncontinue\n# Are any of the objects we want a relationship with already entangled with another object?\nif relationship.has_many(peer_side):\ntarget_peers = list(self.cleaned_data[field_name])\nelse:\ntarget_peers = [self.cleaned_data[field_name]]\nfor target_peer in target_peers:\nif target_peer.pk == self.instance.pk:\nraise ValidationError(\n{field_name: f\"Object {self.instance} cannot form a relationship to itself!\"}\n)\nif relationship.has_many(side):\n# No need to check for existing RelationshipAssociations since this is a \"many\" relationship\ncontinue\nif not relationship.symmetric:\nexisting_peer_associations = RelationshipAssociation.objects.filter(\nrelationship=relationship,\n**{\nf\"{peer_side}_id\": target_peer.pk,\n},\n).exclude(**{f\"{side}_id\": self.instance.pk})\nelse:\nexisting_peer_associations = RelationshipAssociation.objects.filter(\n(\n(Q(source_id=target_peer.pk) &amp; ~Q(destination_id=self.instance.pk))\n| (Q(destination_id=target_peer.pk) &amp; ~Q(source_id=self.instance.pk))\n),\nrelationship=relationship,\n)\nif existing_peer_associations.exists():\nraise ValidationError(\n{field_name: f\"{target_peer} is already involved in a {relationship} relationship\"}\n)\nsuper().clean()\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.StatusModelBulkEditFormMixin","title":"<code>nautobot.apps.forms.StatusModelBulkEditFormMixin</code>","text":"<p>             Bases: <code>forms.Form</code></p> <p>Mixin to add non-required <code>status</code> choice field to forms.</p> Source code in <code>nautobot/extras/forms/mixins.py</code> <pre><code>class StatusModelBulkEditFormMixin(forms.Form):\n\"\"\"Mixin to add non-required `status` choice field to forms.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.fields[\"status\"] = DynamicModelChoiceField(\nrequired=False,\nqueryset=Status.objects.all(),\nquery_params={\"content_types\": self.model._meta.label_lower},\n)\nself.order_fields(self.field_order)  # Reorder fields again\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.StatusModelCSVFormMixin","title":"<code>nautobot.apps.forms.StatusModelCSVFormMixin</code>","text":"<p>             Bases: <code>CSVModelForm</code></p> <p>Mixin to add a required <code>status</code> choice field to CSV import forms.</p> Source code in <code>nautobot/extras/forms/mixins.py</code> <pre><code>class StatusModelCSVFormMixin(CSVModelForm):\n\"\"\"Mixin to add a required `status` choice field to CSV import forms.\"\"\"\nstatus = CSVModelChoiceField(\nqueryset=Status.objects.all(),\nto_field_name=\"slug\",\nhelp_text=\"Operational status\",\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.TagFilterField","title":"<code>nautobot.apps.forms.TagFilterField</code>","text":"<p>             Bases: <code>forms.MultipleChoiceField</code></p> <p>A filter field for the tags of a model. Only the tags used by a model are displayed.</p> <p>:param model: The model of the filter</p> Source code in <code>nautobot/utilities/forms/fields.py</code> <pre><code>class TagFilterField(forms.MultipleChoiceField):\n\"\"\"\n    A filter field for the tags of a model. Only the tags used by a model are displayed.\n    :param model: The model of the filter\n    \"\"\"\nwidget = widgets.StaticSelect2Multiple\ndef __init__(self, model, *args, **kwargs):\ndef get_choices():\ntags = model.tags.annotate(count=Count(\"extras_taggeditem_items\")).order_by(\"name\")\nreturn [(str(tag.slug), f\"{tag.name} ({tag.count})\") for tag in tags]\n# Choices are fetched each time the form is initialized\nsuper().__init__(label=\"Tags\", choices=get_choices, required=False, *args, **kwargs)\nto_field_name = \"slug\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.TimePicker","title":"<code>nautobot.apps.forms.TimePicker</code>","text":"<p>             Bases: <code>forms.TextInput</code></p> <p>Time picker using Flatpickr.</p> Source code in <code>nautobot/utilities/forms/widgets.py</code> <pre><code>class TimePicker(forms.TextInput):\n\"\"\"\n    Time picker using Flatpickr.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.attrs[\"class\"] = \"time-picker\"\nself.attrs[\"placeholder\"] = \"hh:mm:ss\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.add_blank_choice","title":"<code>nautobot.apps.forms.add_blank_choice(choices)</code>","text":"<p>Add a blank choice to the beginning of a choices list.</p> Source code in <code>nautobot/utilities/forms/utils.py</code> <pre><code>def add_blank_choice(choices):\n\"\"\"\n    Add a blank choice to the beginning of a choices list.\n    \"\"\"\nreturn ((None, \"---------\"),) + tuple(choices)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html","title":"nautobot.apps.models","text":""},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models","title":"<code>nautobot.apps.models</code>","text":"<p>Data model classes and utilities for app implementation.</p>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.BaseModel","title":"<code>nautobot.apps.models.BaseModel</code>","text":"<p>             Bases: <code>models.Model</code></p> <p>Base model class that all models should inherit from.</p> <p>This abstract base provides globally common fields and functionality.</p> <p>Here we define the primary key to be a UUID field and set its default to automatically generate a random UUID value. Note however, this does not operate in the same way as a traditional auto incrementing field for which the value is issued by the database upon initial insert. In the case of the UUID field, Django creates the value upon object instantiation. This means the canonical pattern in Django of checking <code>self.pk is None</code> to tell if an object has been created in the actual database does not work because the object will always have the value populated prior to being saved to the database for the first time. An alternate pattern of checking <code>not self.present_in_database</code> can be used for the same purpose in most cases.</p> Source code in <code>nautobot/core/models/__init__.py</code> <pre><code>class BaseModel(models.Model):\n\"\"\"\n    Base model class that all models should inherit from.\n    This abstract base provides globally common fields and functionality.\n    Here we define the primary key to be a UUID field and set its default to\n    automatically generate a random UUID value. Note however, this does not\n    operate in the same way as a traditional auto incrementing field for which\n    the value is issued by the database upon initial insert. In the case of\n    the UUID field, Django creates the value upon object instantiation. This\n    means the canonical pattern in Django of checking `self.pk is None` to tell\n    if an object has been created in the actual database does not work because\n    the object will always have the value populated prior to being saved to the\n    database for the first time. An alternate pattern of checking `not self.present_in_database`\n    can be used for the same purpose in most cases.\n    \"\"\"\nid = models.UUIDField(primary_key=True, default=uuid.uuid4, unique=True, editable=False)\nobjects = RestrictedQuerySet.as_manager()\n@property\ndef present_in_database(self):\n\"\"\"\n        True if the record exists in the database, False if it does not.\n        \"\"\"\nreturn not self._state.adding\n@classproperty  # https://github.com/PyCQA/pylint-django/issues/240\ndef _content_type(cls):  # pylint: disable=no-self-argument\n\"\"\"\n        Return the ContentType of the object, never cached.\n        \"\"\"\nreturn ContentType.objects.get_for_model(cls)\n@classproperty  # https://github.com/PyCQA/pylint-django/issues/240\ndef _content_type_cache_key(cls):  # pylint: disable=no-self-argument\n\"\"\"\n        Return the cache key for the ContentType of the object.\n        Necessary for use with _content_type_cached and management commands.\n        \"\"\"\nreturn f\"{cls._meta.label_lower}._content_type\"\n@classproperty  # https://github.com/PyCQA/pylint-django/issues/240\ndef _content_type_cached(cls):  # pylint: disable=no-self-argument\n\"\"\"\n        Return the ContentType of the object, cached.\n        \"\"\"\nreturn cache.get_or_set(cls._content_type_cache_key, cls._content_type, settings.CONTENT_TYPE_CACHE_TIMEOUT)\nclass Meta:\nabstract = True\ndef validated_save(self, *args, **kwargs):\n\"\"\"\n        Perform model validation during instance save.\n        This is a convenience method that first calls `self.full_clean()` and then `self.save()`\n        which in effect enforces model validation prior to saving the instance, without having\n        to manually make these calls seperately. This is a slight departure from Django norms,\n        but is intended to offer an optional, simplified interface for performing this common\n        workflow. The intended use is for user defined Jobs and scripts run via the `nbshell`\n        command.\n        \"\"\"\nself.full_clean()\nself.save(*args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.BaseModel.present_in_database","title":"<code>present_in_database</code>  <code>property</code>","text":"<p>True if the record exists in the database, False if it does not.</p>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.BaseModel.validated_save","title":"<code>validated_save(*args, **kwargs)</code>","text":"<p>Perform model validation during instance save.</p> <p>This is a convenience method that first calls <code>self.full_clean()</code> and then <code>self.save()</code> which in effect enforces model validation prior to saving the instance, without having to manually make these calls seperately. This is a slight departure from Django norms, but is intended to offer an optional, simplified interface for performing this common workflow. The intended use is for user defined Jobs and scripts run via the <code>nbshell</code> command.</p> Source code in <code>nautobot/core/models/__init__.py</code> <pre><code>def validated_save(self, *args, **kwargs):\n\"\"\"\n    Perform model validation during instance save.\n    This is a convenience method that first calls `self.full_clean()` and then `self.save()`\n    which in effect enforces model validation prior to saving the instance, without having\n    to manually make these calls seperately. This is a slight departure from Django norms,\n    but is intended to offer an optional, simplified interface for performing this common\n    workflow. The intended use is for user defined Jobs and scripts run via the `nbshell`\n    command.\n    \"\"\"\nself.full_clean()\nself.save(*args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.CustomValidator","title":"<code>nautobot.apps.models.CustomValidator</code>","text":"<p>This class is used to register plugin custom model validators which act on specified models. It contains the clean method which is overridden by plugin authors to execute custom validation logic. Plugin authors must raise ValidationError within this method to trigger validation error messages which are propagated to the user. A convenience method <code>validation_error(&lt;message&gt;)</code> may be used for this purpose.</p> <p>The <code>model</code> attribute on the class defines the model to which this validator is registered. It should be set as a string in the form <code>&lt;app_label&gt;.&lt;model_name&gt;</code>.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>class CustomValidator:\n\"\"\"\n    This class is used to register plugin custom model validators which act on specified models. It contains the clean\n    method which is overridden by plugin authors to execute custom validation logic. Plugin authors must raise\n    ValidationError within this method to trigger validation error messages which are propagated to the user.\n    A convenience method `validation_error(&lt;message&gt;)` may be used for this purpose.\n    The `model` attribute on the class defines the model to which this validator is registered. It\n    should be set as a string in the form `&lt;app_label&gt;.&lt;model_name&gt;`.\n    \"\"\"\nmodel = None\ndef __init__(self, obj):\nself.context = {\"object\": obj}\ndef validation_error(self, message):\n\"\"\"\n        Convenience method for raising `django.core.exceptions.ValidationError` which is required in order to\n        trigger validation error messages which are propagated to the user.\n        \"\"\"\nraise ValidationError(message)\ndef clean(self):\n\"\"\"\n        Implement custom model validation in the standard Django clean method pattern. The model instance is accessed\n        with the `object` key within `self.context`, e.g. `self.context['object']`. ValidationError must be raised to\n        prevent saving model instance changes, and propagate messages to the user. For convenience,\n        `self.validation_error(&lt;message&gt;)` may be called to raise a ValidationError.\n        \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.plugins.CustomValidator.clean","title":"<code>clean()</code>","text":"<p>Implement custom model validation in the standard Django clean method pattern. The model instance is accessed with the <code>object</code> key within <code>self.context</code>, e.g. <code>self.context['object']</code>. ValidationError must be raised to prevent saving model instance changes, and propagate messages to the user. For convenience, <code>self.validation_error(&lt;message&gt;)</code> may be called to raise a ValidationError.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>def clean(self):\n\"\"\"\n    Implement custom model validation in the standard Django clean method pattern. The model instance is accessed\n    with the `object` key within `self.context`, e.g. `self.context['object']`. ValidationError must be raised to\n    prevent saving model instance changes, and propagate messages to the user. For convenience,\n    `self.validation_error(&lt;message&gt;)` may be called to raise a ValidationError.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.plugins.CustomValidator.validation_error","title":"<code>validation_error(message)</code>","text":"<p>Convenience method for raising <code>django.core.exceptions.ValidationError</code> which is required in order to trigger validation error messages which are propagated to the user.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>def validation_error(self, message):\n\"\"\"\n    Convenience method for raising `django.core.exceptions.ValidationError` which is required in order to\n    trigger validation error messages which are propagated to the user.\n    \"\"\"\nraise ValidationError(message)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.OrganizationalModel","title":"<code>nautobot.apps.models.OrganizationalModel</code>","text":"<p>             Bases: <code>BaseModel</code>, <code>ChangeLoggedModel</code>, <code>CustomFieldModel</code>, <code>RelationshipModel</code>, <code>DynamicGroupMixin</code>, <code>NotesMixin</code></p> <p>Base abstract model for all organizational models.</p> <p>Organizational models aid the primary models by building structured relationships and logical groups, or categorizations. Organizational models do not typically represent concrete networking resources or assets, but rather they enable user specific use cases and metadata about network resources. Examples include Device Role, Rack Group, Status, Manufacturer, and Platform.</p> Source code in <code>nautobot/core/models/generics.py</code> <pre><code>class OrganizationalModel(\nBaseModel, ChangeLoggedModel, CustomFieldModel, RelationshipModel, DynamicGroupMixin, NotesMixin\n):\n\"\"\"\n    Base abstract model for all organizational models.\n    Organizational models aid the primary models by building structured relationships\n    and logical groups, or categorizations. Organizational models do not typically\n    represent concrete networking resources or assets, but rather they enable user\n    specific use cases and metadata about network resources. Examples include\n    Device Role, Rack Group, Status, Manufacturer, and Platform.\n    \"\"\"\nclass Meta:\nabstract = True\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.PrimaryModel","title":"<code>nautobot.apps.models.PrimaryModel</code>","text":"<p>             Bases: <code>BaseModel</code>, <code>ChangeLoggedModel</code>, <code>CustomFieldModel</code>, <code>RelationshipModel</code>, <code>DynamicGroupMixin</code>, <code>NotesMixin</code></p> <p>Base abstract model for all primary models.</p> <p>A primary model is one which is materialistically relevant to the network datamodel. Such models form the basis of major elements of the data model, like Device, IP Address, Site, VLAN, Virtual Machine, etc. Primary models usually represent tangible or logical resources on the network, or within the organization.</p> Source code in <code>nautobot/core/models/generics.py</code> <pre><code>class PrimaryModel(BaseModel, ChangeLoggedModel, CustomFieldModel, RelationshipModel, DynamicGroupMixin, NotesMixin):\n\"\"\"\n    Base abstract model for all primary models.\n    A primary model is one which is materialistically relevant to the network datamodel.\n    Such models form the basis of major elements of the data model, like Device,\n    IP Address, Site, VLAN, Virtual Machine, etc. Primary models usually represent\n    tangible or logical resources on the network, or within the organization.\n    \"\"\"\ntags = TaggableManager(through=TaggedItem, manager=_NautobotTaggableManager, ordering=[\"name\"])\nclass Meta:\nabstract = True\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.StatusField","title":"<code>nautobot.apps.models.StatusField</code>","text":"<p>             Bases: <code>models.ForeignKey</code></p> <p>Model database field that automatically limits custom choices.</p> The limit_choices_to for the field are automatically derived from <ul> <li>the content-type to which the field is attached (e.g. <code>dcim.device</code>)</li> </ul> Source code in <code>nautobot/extras/models/statuses.py</code> <pre><code>class StatusField(models.ForeignKey):\n\"\"\"\n    Model database field that automatically limits custom choices.\n    The limit_choices_to for the field are automatically derived from:\n        - the content-type to which the field is attached (e.g. `dcim.device`)\n    \"\"\"\ndef __init__(self, **kwargs):\nkwargs.setdefault(\"to\", Status)\nkwargs.setdefault(\"null\", True)\nsuper().__init__(**kwargs)\ndef get_limit_choices_to(self):\nreturn {\"content_types\": ContentType.objects.get_for_model(self.model)}\ndef contribute_to_class(self, cls, name, *args, private_only=False, **kwargs):\n\"\"\"\n        Overload default so that we can assert that `.get_FOO_display` is\n        attached to any model that is using a `StatusField`.\n        Using `.contribute_to_class()` is how field objects get added to the model\n        at during the instance preparation. This is also where any custom model\n        methods are hooked in. So in short this method asserts that any time a\n        `StatusField` is added to a model, that model also gets a\n        `.get_status_display()` and a `.get_status_color()` method without\n        having to define it on the model yourself.\n        \"\"\"\nsuper().contribute_to_class(cls, name, *args, private_only=private_only, **kwargs)\ndef _get_FIELD_display(self, field):\n\"\"\"\n            Closure to replace default model method of the same name.\n            Cargo-culted from `django.db.models.base.Model._get_FIELD_display`\n            \"\"\"\nchoices = field.get_choices()\nvalue = getattr(self, field.attname)\nchoices_dict = dict(make_hashable(choices))\n# force_str() to coerce lazy strings.\nreturn force_str(choices_dict.get(make_hashable(value), value), strings_only=True)\n# Install `.get_FOO_display()` onto the model using our own version.\nif f\"get_{self.name}_display\" not in cls.__dict__:\nsetattr(\ncls,\nf\"get_{self.name}_display\",\npartialmethod(_get_FIELD_display, field=self),\n)\ndef _get_FIELD_color(self, field):\n\"\"\"\n            Return `self.FOO.color` (where FOO is field name).\n            I am added to the model via `StatusField.contribute_to_class()`.\n            \"\"\"\nfield_method = getattr(self, field.name)\nreturn getattr(field_method, \"color\")\n# Install `.get_FOO_color()` onto the model using our own version.\nif f\"get_{self.name}_color\" not in cls.__dict__:\nsetattr(\ncls,\nf\"get_{self.name}_color\",\npartialmethod(_get_FIELD_color, field=self),\n)\ndef formfield(self, **kwargs):\n\"\"\"Return a prepped formfield for use in model forms.\"\"\"\ndefaults = {\n\"form_class\": DynamicModelChoiceField,\n\"queryset\": Status.objects.all(),\n# label_lower e.g. \"dcim.device\"\n\"query_params\": {\"content_types\": self.model._meta.label_lower},\n}\ndefaults.update(**kwargs)\nreturn super().formfield(**defaults)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.statuses.StatusField.contribute_to_class","title":"<code>contribute_to_class(cls, name, *args, private_only=False, **kwargs)</code>","text":"<p>Overload default so that we can assert that <code>.get_FOO_display</code> is attached to any model that is using a <code>StatusField</code>.</p> <p>Using <code>.contribute_to_class()</code> is how field objects get added to the model at during the instance preparation. This is also where any custom model methods are hooked in. So in short this method asserts that any time a <code>StatusField</code> is added to a model, that model also gets a <code>.get_status_display()</code> and a <code>.get_status_color()</code> method without having to define it on the model yourself.</p> Source code in <code>nautobot/extras/models/statuses.py</code> <pre><code>def contribute_to_class(self, cls, name, *args, private_only=False, **kwargs):\n\"\"\"\n    Overload default so that we can assert that `.get_FOO_display` is\n    attached to any model that is using a `StatusField`.\n    Using `.contribute_to_class()` is how field objects get added to the model\n    at during the instance preparation. This is also where any custom model\n    methods are hooked in. So in short this method asserts that any time a\n    `StatusField` is added to a model, that model also gets a\n    `.get_status_display()` and a `.get_status_color()` method without\n    having to define it on the model yourself.\n    \"\"\"\nsuper().contribute_to_class(cls, name, *args, private_only=private_only, **kwargs)\ndef _get_FIELD_display(self, field):\n\"\"\"\n        Closure to replace default model method of the same name.\n        Cargo-culted from `django.db.models.base.Model._get_FIELD_display`\n        \"\"\"\nchoices = field.get_choices()\nvalue = getattr(self, field.attname)\nchoices_dict = dict(make_hashable(choices))\n# force_str() to coerce lazy strings.\nreturn force_str(choices_dict.get(make_hashable(value), value), strings_only=True)\n# Install `.get_FOO_display()` onto the model using our own version.\nif f\"get_{self.name}_display\" not in cls.__dict__:\nsetattr(\ncls,\nf\"get_{self.name}_display\",\npartialmethod(_get_FIELD_display, field=self),\n)\ndef _get_FIELD_color(self, field):\n\"\"\"\n        Return `self.FOO.color` (where FOO is field name).\n        I am added to the model via `StatusField.contribute_to_class()`.\n        \"\"\"\nfield_method = getattr(self, field.name)\nreturn getattr(field_method, \"color\")\n# Install `.get_FOO_color()` onto the model using our own version.\nif f\"get_{self.name}_color\" not in cls.__dict__:\nsetattr(\ncls,\nf\"get_{self.name}_color\",\npartialmethod(_get_FIELD_color, field=self),\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.statuses.StatusField.formfield","title":"<code>formfield(**kwargs)</code>","text":"<p>Return a prepped formfield for use in model forms.</p> Source code in <code>nautobot/extras/models/statuses.py</code> <pre><code>def formfield(self, **kwargs):\n\"\"\"Return a prepped formfield for use in model forms.\"\"\"\ndefaults = {\n\"form_class\": DynamicModelChoiceField,\n\"queryset\": Status.objects.all(),\n# label_lower e.g. \"dcim.device\"\n\"query_params\": {\"content_types\": self.model._meta.label_lower},\n}\ndefaults.update(**kwargs)\nreturn super().formfield(**defaults)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.VarbinaryIPField","title":"<code>nautobot.apps.models.VarbinaryIPField</code>","text":"<p>             Bases: <code>models.BinaryField</code></p> <p>IP network address</p> Source code in <code>nautobot/ipam/fields.py</code> <pre><code>class VarbinaryIPField(models.BinaryField):\n\"\"\"\n    IP network address\n    \"\"\"\ndescription = \"IP network address\"\ndef db_type(self, connection):\n\"\"\"Returns the correct field type for a given database vendor.\"\"\"\n# Use 'bytea' type for PostgreSQL.\nif connection.vendor == \"postgresql\":\nreturn \"bytea\"\n# Or 'varbinary' for everyone else.\nreturn \"varbinary(16)\"\ndef value_to_string(self, obj):\n\"\"\"IPField is serialized as str(IPAddress())\"\"\"\nvalue = self.value_from_object(obj)\nif not value:\nreturn value\nreturn str(self._parse_address(value))\ndef _parse_address(self, value):\n\"\"\"\n        Parse `str`, `bytes` (varbinary), or `netaddr.IPAddress to `netaddr.IPAddress`.\n        \"\"\"\ntry:\nint_value = int.from_bytes(value, \"big\")\n# Distinguish between\n# \\x00\\x00\\x00\\x01 (IPv4 0.0.0.1) and\n# \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01 (IPv6 ::1), among other cases\nversion = 4 if len(value) == 4 else 6\nvalue = int_value\nexcept TypeError:\nversion = None  # It's a string, IP version should be self-evident\ntry:\nreturn netaddr.IPAddress(value, version=version)\nexcept netaddr.AddrFormatError:\nraise ValidationError(f\"Invalid IP address format: {value}\")\nexcept (TypeError, ValueError) as e:\nraise ValidationError(e)\ndef from_db_value(self, value, expression, connection):\n\"\"\"Converts DB (varbinary) to Python (str).\"\"\"\nreturn self.to_python(value)\ndef to_python(self, value):\n\"\"\"Converts `value` to Python (str).\"\"\"\nif isinstance(value, netaddr.IPAddress):\nreturn str(value)\nif value is None:\nreturn value\nreturn str(self._parse_address(value))\ndef get_db_prep_value(self, value, connection, prepared=False):\n\"\"\"Converts Python (str) to DB (varbinary).\"\"\"\nif value is None:\nreturn value\n# Parse the address and then pack it to binary.\nvalue = self._parse_address(value).packed\n# Use defaults for PostgreSQL\nif connection.vendor == \"postgresql\":\nreturn super().get_db_prep_value(value, connection, prepared)\nreturn value\ndef form_class(self):\nreturn IPNetworkFormField\ndef formfield(self, *args, **kwargs):\ndefaults = {\"form_class\": self.form_class()}\ndefaults.update(kwargs)\nreturn super().formfield(*args, **defaults)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.ipam.fields.VarbinaryIPField.db_type","title":"<code>db_type(connection)</code>","text":"<p>Returns the correct field type for a given database vendor.</p> Source code in <code>nautobot/ipam/fields.py</code> <pre><code>def db_type(self, connection):\n\"\"\"Returns the correct field type for a given database vendor.\"\"\"\n# Use 'bytea' type for PostgreSQL.\nif connection.vendor == \"postgresql\":\nreturn \"bytea\"\n# Or 'varbinary' for everyone else.\nreturn \"varbinary(16)\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.ipam.fields.VarbinaryIPField.from_db_value","title":"<code>from_db_value(value, expression, connection)</code>","text":"<p>Converts DB (varbinary) to Python (str).</p> Source code in <code>nautobot/ipam/fields.py</code> <pre><code>def from_db_value(self, value, expression, connection):\n\"\"\"Converts DB (varbinary) to Python (str).\"\"\"\nreturn self.to_python(value)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.ipam.fields.VarbinaryIPField.get_db_prep_value","title":"<code>get_db_prep_value(value, connection, prepared=False)</code>","text":"<p>Converts Python (str) to DB (varbinary).</p> Source code in <code>nautobot/ipam/fields.py</code> <pre><code>def get_db_prep_value(self, value, connection, prepared=False):\n\"\"\"Converts Python (str) to DB (varbinary).\"\"\"\nif value is None:\nreturn value\n# Parse the address and then pack it to binary.\nvalue = self._parse_address(value).packed\n# Use defaults for PostgreSQL\nif connection.vendor == \"postgresql\":\nreturn super().get_db_prep_value(value, connection, prepared)\nreturn value\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.ipam.fields.VarbinaryIPField.to_python","title":"<code>to_python(value)</code>","text":"<p>Converts <code>value</code> to Python (str).</p> Source code in <code>nautobot/ipam/fields.py</code> <pre><code>def to_python(self, value):\n\"\"\"Converts `value` to Python (str).\"\"\"\nif isinstance(value, netaddr.IPAddress):\nreturn str(value)\nif value is None:\nreturn value\nreturn str(self._parse_address(value))\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.ipam.fields.VarbinaryIPField.value_to_string","title":"<code>value_to_string(obj)</code>","text":"<p>IPField is serialized as str(IPAddress())</p> Source code in <code>nautobot/ipam/fields.py</code> <pre><code>def value_to_string(self, obj):\n\"\"\"IPField is serialized as str(IPAddress())\"\"\"\nvalue = self.value_from_object(obj)\nif not value:\nreturn value\nreturn str(self._parse_address(value))\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.extras_features","title":"<code>nautobot.apps.models.extras_features(*features)</code>","text":"<p>Decorator used to register extras provided features to a model</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def extras_features(*features):\n\"\"\"\n    Decorator used to register extras provided features to a model\n    \"\"\"\ndef wrapper(model_class):\n# Initialize the model_features store if not already defined\nif \"model_features\" not in registry:\nregistry[\"model_features\"] = {f: collections.defaultdict(list) for f in EXTRAS_FEATURES}\nfor feature in features:\nif feature in EXTRAS_FEATURES:\napp_label, model_name = model_class._meta.label_lower.split(\".\")\nregistry[\"model_features\"][feature][app_label].append(model_name)\nelse:\nraise ValueError(f\"{feature} is not a valid extras feature!\")\nreturn model_class\nreturn wrapper\n</code></pre>"},{"location":"code-reference/nautobot/apps/secrets.html","title":"nautobot.apps.secrets","text":""},{"location":"code-reference/nautobot/apps/secrets.html#nautobot.apps.secrets","title":"<code>nautobot.apps.secrets</code>","text":"<p>Integrations with Nautobot's secrets feature.</p>"},{"location":"code-reference/nautobot/apps/secrets.html#nautobot.apps.secrets.SecretsProvider","title":"<code>nautobot.apps.secrets.SecretsProvider</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Abstract base class for concrete providers of secret retrieval features.</p> Source code in <code>nautobot/extras/secrets/__init__.py</code> <pre><code>class SecretsProvider(ABC):\n\"\"\"Abstract base class for concrete providers of secret retrieval features.\"\"\"\ndef __repr__(self):\nreturn f\"&lt;{self.name}&gt;\"\n@property\n@abstractmethod\ndef slug(self):\n\"\"\"String uniquely identifying this class; will be used as a key to look up the class owning a given Secret.\"\"\"\n@property\ndef name(self):\n\"\"\"Human-friendly name for this class, falling back to the slug if not overridden.\"\"\"\nreturn self.slug\n@property\n@abstractmethod\ndef ParametersForm(self):\n\"\"\"Django Form class with inputs for describing the parameter(s) required for a Secret to use this Provider.\n        The clean() method may be implemented to provide additional input validation.\n        \"\"\"\n@classmethod\n@abstractmethod\ndef get_value_for_secret(cls, secret, obj=None, **kwargs):\n\"\"\"Retrieve the stored value described by the given Secret record.\n        May raise a SecretError or one of its subclasses if an error occurs.\n        Args:\n            secret (nautobot.extras.models.Secret): DB entry describing the secret or family of secrets in question.\n            obj (object): Django model instance or similar providing additional context for retrieving the secret.\n        \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/secrets.html#nautobot.extras.secrets.SecretsProvider.ParametersForm","title":"<code>ParametersForm</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Django Form class with inputs for describing the parameter(s) required for a Secret to use this Provider.</p> <p>The clean() method may be implemented to provide additional input validation.</p>"},{"location":"code-reference/nautobot/apps/secrets.html#nautobot.extras.secrets.SecretsProvider.name","title":"<code>name</code>  <code>property</code>","text":"<p>Human-friendly name for this class, falling back to the slug if not overridden.</p>"},{"location":"code-reference/nautobot/apps/secrets.html#nautobot.extras.secrets.SecretsProvider.slug","title":"<code>slug</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>String uniquely identifying this class; will be used as a key to look up the class owning a given Secret.</p>"},{"location":"code-reference/nautobot/apps/secrets.html#nautobot.extras.secrets.SecretsProvider.get_value_for_secret","title":"<code>get_value_for_secret(secret, obj=None, **kwargs)</code>  <code>abstractmethod</code> <code>classmethod</code>","text":"<p>Retrieve the stored value described by the given Secret record.</p> <p>May raise a SecretError or one of its subclasses if an error occurs.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>nautobot.extras.models.Secret</code> <p>DB entry describing the secret or family of secrets in question.</p> required <code>obj</code> <code>object</code> <p>Django model instance or similar providing additional context for retrieving the secret.</p> <code>None</code> Source code in <code>nautobot/extras/secrets/__init__.py</code> <pre><code>@classmethod\n@abstractmethod\ndef get_value_for_secret(cls, secret, obj=None, **kwargs):\n\"\"\"Retrieve the stored value described by the given Secret record.\n    May raise a SecretError or one of its subclasses if an error occurs.\n    Args:\n        secret (nautobot.extras.models.Secret): DB entry describing the secret or family of secrets in question.\n        obj (object): Django model instance or similar providing additional context for retrieving the secret.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html","title":"nautobot.apps.tables","text":""},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables","title":"<code>nautobot.apps.tables</code>","text":"<p>Utilities for apps to implement data tables.</p>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.BaseTable","title":"<code>nautobot.apps.tables.BaseTable</code>","text":"<p>             Bases: <code>tables.Table</code></p> <p>Default table for object lists</p> <p>:param user: Personalize table display for the given user (optional). Has no effect if AnonymousUser is passed.</p> Source code in <code>nautobot/utilities/tables.py</code> <pre><code>class BaseTable(tables.Table):\n\"\"\"\n    Default table for object lists\n    :param user: Personalize table display for the given user (optional). Has no effect if AnonymousUser is passed.\n    \"\"\"\nclass Meta:\nattrs = {\n\"class\": \"table table-hover table-headings\",\n}\ndef __init__(self, *args, user=None, **kwargs):\nfrom nautobot.dcim.tables.template_code import MPTT_LINK_WITHOUT_NESTING  # Avoid Circular Import\n# Add custom field columns\nobj_type = ContentType.objects.get_for_model(self._meta.model)\nfor cf in CustomField.objects.filter(content_types=obj_type):\nname = f\"cf_{cf.slug}\"\nself.base_columns[name] = CustomFieldColumn(cf)\nfor cpf in ComputedField.objects.filter(content_type=obj_type):\nself.base_columns[f\"cpf_{cpf.slug}\"] = ComputedFieldColumn(cpf)\nfor relationship in Relationship.objects.filter(source_type=obj_type):\nif not relationship.symmetric:\nself.base_columns[f\"cr_{relationship.slug}_src\"] = RelationshipColumn(\nrelationship, side=RelationshipSideChoices.SIDE_SOURCE\n)\nelse:\nself.base_columns[f\"cr_{relationship.slug}_peer\"] = RelationshipColumn(\nrelationship, side=RelationshipSideChoices.SIDE_PEER\n)\nfor relationship in Relationship.objects.filter(destination_type=obj_type):\nif not relationship.symmetric:\nself.base_columns[f\"cr_{relationship.slug}_dst\"] = RelationshipColumn(\nrelationship, side=RelationshipSideChoices.SIDE_DESTINATION\n)\n# symmetric relationships are already handled above in the source_type case\nmodel = getattr(self.Meta, \"model\", None)\n# Disable ordering on these TreeNode Models Table because TreeNode do not support sorting\nif model and issubclass(model, TreeNode):\nkwargs[\"orderable\"] = False\n# Init table\nsuper().__init__(*args, **kwargs)\n# The name nesting is removed when sorting on the UI because it results in rows appearing as children of the wrong parent rows.\nif model and issubclass(model, MPTTModel) and self.order_by:\nself.columns[\"name\"].column.template_code = MPTT_LINK_WITHOUT_NESTING\n# Set default empty_text if none was provided\nif self.empty_text is None:\nself.empty_text = f\"No {self._meta.model._meta.verbose_name_plural} found\"\n# Hide non-default columns\ndefault_columns = list(getattr(self.Meta, \"default_columns\", []))\nextra_columns = [c[0] for c in kwargs.get(\"extra_columns\", [])]  # extra_columns is a list of tuples\nif default_columns:\nfor column in self.columns:\nif column.name not in default_columns and column.name not in extra_columns:\n# Hide the column if it is non-default *and* not manually specified as an extra column\nself.columns.hide(column.name)\n# Apply custom column ordering for user\nif user is not None and not isinstance(user, AnonymousUser):\ncolumns = user.get_config(f\"tables.{self.__class__.__name__}.columns\")\nif columns:\npk = self.base_columns.pop(\"pk\", None)\nactions = self.base_columns.pop(\"actions\", None)\nfor name, column in self.base_columns.items():\nif name in columns:\nself.columns.show(name)\nelse:\nself.columns.hide(name)\nself.sequence = [c for c in columns if c in self.base_columns]\n# Always include PK and actions column, if defined on the table\nif pk:\nself.base_columns[\"pk\"] = pk\nself.sequence.insert(0, \"pk\")\nif actions:\nself.base_columns[\"actions\"] = actions\nself.sequence.append(\"actions\")\n# Dynamically update the table's QuerySet to ensure related fields are pre-fetched\nif isinstance(self.data, TableQuerysetData):\n# v2 TODO(jathan): Replace prefetch_related with select_related\nprefetch_fields = []\nfor column in self.columns:\nif column.visible:\nmodel = getattr(self.Meta, \"model\")\naccessor = column.accessor\nprefetch_path = []\nfor field_name in accessor.split(accessor.SEPARATOR):\ntry:\nfield = model._meta.get_field(field_name)\nexcept FieldDoesNotExist:\nbreak\nif isinstance(field, RelatedField):\n# Follow ForeignKeys to the related model\nprefetch_path.append(field_name)\nmodel = field.remote_field.model\nelif isinstance(field, GenericForeignKey):\n# Can't prefetch beyond a GenericForeignKey\nprefetch_path.append(field_name)\nbreak\nif prefetch_path:\nprefetch_fields.append(\"__\".join(prefetch_path))\nself.data.data = self.data.data.prefetch_related(None).prefetch_related(*prefetch_fields)\n@property\ndef configurable_columns(self):\nselected_columns = [\n(name, self.columns[name].verbose_name) for name in self.sequence if name not in [\"pk\", \"actions\"]\n]\navailable_columns = [\n(name, column.verbose_name)\nfor name, column in self.columns.items()\nif name not in self.sequence and name not in [\"pk\", \"actions\"]\n]\nreturn selected_columns + available_columns\n@property\ndef visible_columns(self):\nreturn [name for name in self.sequence if self.columns[name].visible]\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.BooleanColumn","title":"<code>nautobot.apps.tables.BooleanColumn</code>","text":"<p>             Bases: <code>tables.Column</code></p> <p>Custom implementation of BooleanColumn to render a nicely-formatted checkmark or X icon instead of a Unicode character.</p> Source code in <code>nautobot/utilities/tables.py</code> <pre><code>class BooleanColumn(tables.Column):\n\"\"\"\n    Custom implementation of BooleanColumn to render a nicely-formatted checkmark or X icon instead of a Unicode\n    character.\n    \"\"\"\ndef render(self, value):\nreturn render_boolean(value)\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.ButtonsColumn","title":"<code>nautobot.apps.tables.ButtonsColumn</code>","text":"<p>             Bases: <code>tables.TemplateColumn</code></p> <p>Render edit, delete, and changelog buttons for an object.</p> <p>:param model: Model class to use for calculating URL view names :param prepend_template: Additional template content to render in the column (optional) :param return_url_extra: String to append to the return URL (e.g. for specifying a tab) (optional)</p> Source code in <code>nautobot/utilities/tables.py</code> <pre><code>class ButtonsColumn(tables.TemplateColumn):\n\"\"\"\n    Render edit, delete, and changelog buttons for an object.\n    :param model: Model class to use for calculating URL view names\n    :param prepend_template: Additional template content to render in the column (optional)\n    :param return_url_extra: String to append to the return URL (e.g. for specifying a tab) (optional)\n    \"\"\"\nbuttons = (\"changelog\", \"edit\", \"delete\")\nattrs = {\"td\": {\"class\": \"text-right text-nowrap noprint\"}}\n# Note that braces are escaped to allow for string formatting prior to template rendering\ntemplate_code = \"\"\"\n    {{% if \"changelog\" in buttons %}}\n        &lt;a href=\"{{% url '{changelog_route}' {pk_field}=record.{pk_field} %}}\" class=\"btn btn-default btn-xs\" title=\"Change log\"&gt;\n            &lt;i class=\"mdi mdi-history\"&gt;&lt;/i&gt;\n        &lt;/a&gt;\n    {{% endif %}}\n    {{% if \"edit\" in buttons and perms.{app_label}.change_{model_name} %}}\n        &lt;a href=\"{{% url '{edit_route}' {pk_field}=record.{pk_field} %}}?return_url={{{{ request.path }}}}{{{{ return_url_extra }}}}\" class=\"btn btn-xs btn-warning\" title=\"Edit\"&gt;\n            &lt;i class=\"mdi mdi-pencil\"&gt;&lt;/i&gt;\n        &lt;/a&gt;\n    {{% endif %}}\n    {{% if \"delete\" in buttons and perms.{app_label}.delete_{model_name} %}}\n        &lt;a href=\"{{% url '{delete_route}' {pk_field}=record.{pk_field} %}}?return_url={{{{ request.path }}}}{{{{ return_url_extra }}}}\" class=\"btn btn-xs btn-danger\" title=\"Delete\"&gt;\n            &lt;i class=\"mdi mdi-trash-can-outline\"&gt;&lt;/i&gt;\n        &lt;/a&gt;\n    {{% endif %}}\n    \"\"\"\ndef __init__(\nself,\nmodel,\n*args,\npk_field=\"pk\",\nbuttons=None,\nprepend_template=None,\nreturn_url_extra=\"\",\n**kwargs,\n):\nif prepend_template:\nprepend_template = prepend_template.replace(\"{\", \"{{\")\nprepend_template = prepend_template.replace(\"}\", \"}}\")\nself.template_code = prepend_template + self.template_code\napp_label = model._meta.app_label\nchangelog_route = get_route_for_model(model, \"changelog\")\nedit_route = get_route_for_model(model, \"edit\")\ndelete_route = get_route_for_model(model, \"delete\")\ntemplate_code = self.template_code.format(\napp_label=app_label,\nmodel_name=model._meta.model_name,\nchangelog_route=changelog_route,\nedit_route=edit_route,\ndelete_route=delete_route,\npk_field=pk_field,\nbuttons=buttons,\n)\nsuper().__init__(template_code=template_code, *args, **kwargs)\nself.extra_context.update(\n{\n\"buttons\": buttons or self.buttons,\n\"return_url_extra\": return_url_extra,\n}\n)\ndef header(self):  # pylint: disable=invalid-overridden-method\nreturn \"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.ColoredLabelColumn","title":"<code>nautobot.apps.tables.ColoredLabelColumn</code>","text":"<p>             Bases: <code>tables.TemplateColumn</code></p> <p>Render a colored label (e.g. for DeviceRoles).</p> Source code in <code>nautobot/utilities/tables.py</code> <pre><code>class ColoredLabelColumn(tables.TemplateColumn):\n\"\"\"\n    Render a colored label (e.g. for DeviceRoles).\n    \"\"\"\ntemplate_code = \"\"\"\n    {% load helpers %}\n    {% if value %}&lt;label class=\"label\" style=\"color: {{ value.color|fgcolor }}; background-color: #{{ value.color }}\"&gt;{{ value }}&lt;/label&gt;{% else %}&amp;mdash;{% endif %}\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(template_code=self.template_code, *args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.ContentTypesColumn","title":"<code>nautobot.apps.tables.ContentTypesColumn</code>","text":"<p>             Bases: <code>tables.ManyToManyColumn</code></p> <p>Display a list of <code>content_types</code> m2m assigned to an object.</p> <p>Default sorting of content-types is by pk. This sorting comes at a per-row performance hit to querysets for table views. If this becomes an issue, set <code>sort_items=False</code>.</p> <p>:param sort_items: Whether to sort by <code>(app_label, name)</code>. (default: True) :param truncate_words:     Number of words at which to truncate, or <code>None</code> to disable. (default: None)</p> Source code in <code>nautobot/utilities/tables.py</code> <pre><code>class ContentTypesColumn(tables.ManyToManyColumn):\n\"\"\"\n    Display a list of `content_types` m2m assigned to an object.\n    Default sorting of content-types is by pk. This sorting comes at a per-row\n    performance hit to querysets for table views. If this becomes an issue,\n    set `sort_items=False`.\n    :param sort_items: Whether to sort by `(app_label, name)`. (default: True)\n    :param truncate_words:\n        Number of words at which to truncate, or `None` to disable. (default: None)\n    \"\"\"\ndef __init__(self, sort_items=True, truncate_words=None, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.sort_items = sort_items\nself.truncate_words = truncate_words\ndef filter(self, qs):\n\"\"\"Overload filter to optionally sort items.\"\"\"\nif self.sort_items:\nqs = qs.order_by(\"app_label\", \"model\")\nreturn qs.all()\ndef render(self, value):\n\"\"\"Overload render to optionally truncate words.\"\"\"\nvalue = super().render(value)\nif self.truncate_words is not None:\ntrunc = Truncator(value)\nvalue = trunc.words(self.truncate_words)\nreturn value\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.utilities.tables.ContentTypesColumn.filter","title":"<code>filter(qs)</code>","text":"<p>Overload filter to optionally sort items.</p> Source code in <code>nautobot/utilities/tables.py</code> <pre><code>def filter(self, qs):\n\"\"\"Overload filter to optionally sort items.\"\"\"\nif self.sort_items:\nqs = qs.order_by(\"app_label\", \"model\")\nreturn qs.all()\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.utilities.tables.ContentTypesColumn.render","title":"<code>render(value)</code>","text":"<p>Overload render to optionally truncate words.</p> Source code in <code>nautobot/utilities/tables.py</code> <pre><code>def render(self, value):\n\"\"\"Overload render to optionally truncate words.\"\"\"\nvalue = super().render(value)\nif self.truncate_words is not None:\ntrunc = Truncator(value)\nvalue = trunc.words(self.truncate_words)\nreturn value\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.StatusTableMixin","title":"<code>nautobot.apps.tables.StatusTableMixin</code>","text":"<p>             Bases: <code>BaseTable</code></p> <p>Mixin to add a <code>status</code> field to a table.</p> Source code in <code>nautobot/extras/tables.py</code> <pre><code>class StatusTableMixin(BaseTable):\n\"\"\"Mixin to add a `status` field to a table.\"\"\"\nstatus = ColoredLabelColumn()\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.TagColumn","title":"<code>nautobot.apps.tables.TagColumn</code>","text":"<p>             Bases: <code>tables.TemplateColumn</code></p> <p>Display a list of tags assigned to the object.</p> Source code in <code>nautobot/utilities/tables.py</code> <pre><code>class TagColumn(tables.TemplateColumn):\n\"\"\"\n    Display a list of tags assigned to the object.\n    \"\"\"\ntemplate_code = \"\"\"\n    {% for tag in value.all %}\n        {% include 'utilities/templatetags/tag.html' %}\n    {% empty %}\n        &lt;span class=\"text-muted\"&gt;&amp;mdash;&lt;/span&gt;\n    {% endfor %}\n    \"\"\"\ndef __init__(self, url_name=None):\nsuper().__init__(template_code=self.template_code, extra_context={\"url_name\": url_name})\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.ToggleColumn","title":"<code>nautobot.apps.tables.ToggleColumn</code>","text":"<p>             Bases: <code>tables.CheckBoxColumn</code></p> <p>Extend CheckBoxColumn to add a \"toggle all\" checkbox in the column header.</p> Source code in <code>nautobot/utilities/tables.py</code> <pre><code>class ToggleColumn(tables.CheckBoxColumn):\n\"\"\"\n    Extend CheckBoxColumn to add a \"toggle all\" checkbox in the column header.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\ndefault = kwargs.pop(\"default\", \"\")\nvisible = kwargs.pop(\"visible\", False)\nif \"attrs\" not in kwargs:\nkwargs[\"attrs\"] = {\"td\": {\"class\": \"min-width\"}}\nsuper().__init__(*args, default=default, visible=visible, **kwargs)\n@property\ndef header(self):\nreturn mark_safe('&lt;input type=\"checkbox\" class=\"toggle\" title=\"Toggle all\" /&gt;')\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html","title":"nautobot.apps.testing","text":""},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing","title":"<code>nautobot.apps.testing</code>","text":"<p>Utilities for apps to implement test automation.</p>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.APITestCase","title":"<code>nautobot.apps.testing.APITestCase</code>","text":"<p>             Bases: <code>ModelTestCase</code></p> <p>Base test case for API requests.</p> <p>api_version: Specific API version to test. Leave unset to test the default behavior. Override with set_api_version()</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>@tag(\"api\")\nclass APITestCase(ModelTestCase):\n\"\"\"\n    Base test case for API requests.\n    api_version: Specific API version to test. Leave unset to test the default behavior. Override with set_api_version()\n    \"\"\"\napi_version = None\ndef setUp(self):\n\"\"\"\n        Create a token for API calls.\n        \"\"\"\nsuper().setUp()\nself.client.logout()\nself.token = Token.objects.create(user=self.user)\nself.header = {\"HTTP_AUTHORIZATION\": f\"Token {self.token.key}\"}\nif self.api_version:\nself.set_api_version(self.api_version)\ndef set_api_version(self, api_version):\n\"\"\"Set or unset a specific API version for requests in this test case.\"\"\"\nif api_version is None:\nself.header[\"HTTP_ACCEPT\"] = \"application/json\"\nelse:\nself.header[\"HTTP_ACCEPT\"] = f\"application/json; version={api_version}\"\ndef _get_detail_url(self, instance):\nviewname = get_route_for_model(instance, \"detail\", api=True)\nreturn reverse(viewname, kwargs={\"pk\": instance.pk})\ndef _get_list_url(self):\nviewname = get_route_for_model(self.model, \"list\", api=True)\nreturn reverse(viewname)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APITestCase.setUp","title":"<code>setUp()</code>","text":"<p>Create a token for API calls.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>def setUp(self):\n\"\"\"\n    Create a token for API calls.\n    \"\"\"\nsuper().setUp()\nself.client.logout()\nself.token = Token.objects.create(user=self.user)\nself.header = {\"HTTP_AUTHORIZATION\": f\"Token {self.token.key}\"}\nif self.api_version:\nself.set_api_version(self.api_version)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APITestCase.set_api_version","title":"<code>set_api_version(api_version)</code>","text":"<p>Set or unset a specific API version for requests in this test case.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>def set_api_version(self, api_version):\n\"\"\"Set or unset a specific API version for requests in this test case.\"\"\"\nif api_version is None:\nself.header[\"HTTP_ACCEPT\"] = \"application/json\"\nelse:\nself.header[\"HTTP_ACCEPT\"] = f\"application/json; version={api_version}\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.APIViewTestCases","title":"<code>nautobot.apps.testing.APIViewTestCases</code>","text":"Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>@tag(\"unit\")\nclass APIViewTestCases:\nclass GetObjectViewTestCase(APITestCase):\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_get_object_anonymous(self):\n\"\"\"\n            GET a single object as an unauthenticated user.\n            \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\nif (\nself.model._meta.app_label,\nself.model._meta.model_name,\n) in settings.EXEMPT_EXCLUDE_MODELS:\n# Models listed in EXEMPT_EXCLUDE_MODELS should not be accessible to anonymous users\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\nelse:\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object_without_permission(self):\n\"\"\"\n            GET a single object as an authenticated user without the required permission.\n            \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\n# Try GET without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object(self):\n\"\"\"\n            GET a single object as an authenticated user with permission to view the object.\n            \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n2,\nf\"Test requires the creation of at least two {self.model} instances\",\n)\ninstance1, instance2 = self._get_queryset()[:2]\n# Add object-level permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET to non-permitted object\nurl = self._get_detail_url(instance2)\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_404_NOT_FOUND)\n# Try GET to permitted object\nurl = self._get_detail_url(instance1)\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\n# Fields that should be present in *ALL* model serializers:\nself.assertIn(\"id\", response.data)\nself.assertEqual(str(response.data[\"id\"]), str(instance1.pk))  # coerce to str to handle both int and uuid\nself.assertIn(\"url\", response.data)\nself.assertIn(\"display\", response.data)\nself.assertIsInstance(response.data[\"display\"], str)\n# Fields that should be present in appropriate model serializers:\nif issubclass(self.model, ChangeLoggedModel):\nself.assertIn(\"created\", response.data)\nself.assertIn(\"last_updated\", response.data)\n# Fields that should be absent by default (opt-in fields):\nself.assertNotIn(\"computed_fields\", response.data)\nself.assertNotIn(\"relationships\", response.data)\n# If opt-in fields are supported on this model, make sure they can be opted into\ncustom_fields_registry = registry[\"model_features\"][\"custom_fields\"]\n# computed fields and custom fields use the same registry\ncf_supported = self.model._meta.model_name in custom_fields_registry.get(self.model._meta.app_label, {})\nif cf_supported:  # custom_fields is not an opt-in field, it should always be present if supported\nself.assertIn(\"custom_fields\", response.data)\nself.assertIsInstance(response.data[\"custom_fields\"], dict)\nrelationships_registry = registry[\"model_features\"][\"relationships\"]\nrel_supported = self.model._meta.model_name in relationships_registry.get(self.model._meta.app_label, {})\nif cf_supported or rel_supported:\nquery_params = []\nif cf_supported:\nquery_params.append(\"include=computed_fields\")\nif rel_supported:\nquery_params.append(\"include=relationships\")\nquery_string = \"&amp;\".join(query_params)\nurl = f\"{url}?{query_string}\"\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nif cf_supported:\nself.assertIn(\"computed_fields\", response.data)\nself.assertIsInstance(response.data[\"computed_fields\"], dict)\nelse:\nself.assertNotIn(\"computed_fields\", response.data)\nif rel_supported:\nself.assertIn(\"relationships\", response.data)\nself.assertIsInstance(response.data[\"relationships\"], dict)\nelse:\nself.assertNotIn(\"relationships\", response.data)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_options_object(self):\n\"\"\"\n            Make an OPTIONS request for a single object.\n            \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\nresponse = self.client.options(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nclass ListObjectsViewTestCase(APITestCase):\nbrief_fields = []\nchoices_fields = None\nfilterset = None\ndef get_filterset(self):\nreturn self.filterset or get_filterset_for_model(self.model)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_list_objects_anonymous(self):\n\"\"\"\n            GET a list of objects as an unauthenticated user.\n            \"\"\"\nurl = self._get_list_url()\nif (\nself.model._meta.app_label,\nself.model._meta.model_name,\n) in settings.EXEMPT_EXCLUDE_MODELS:\n# Models listed in EXEMPT_EXCLUDE_MODELS should not be accessible to anonymous users\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\nelse:\n# TODO(Glenn): if we're passing **self.header, we are *by definition* **NOT** anonymous!!\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_brief(self):\n\"\"\"\n            GET a list of objects using the \"brief\" parameter.\n            \"\"\"\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nurl = f\"{self._get_list_url()}?brief=1\"\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\nself.assertEqual(\nsorted(response.data[\"results\"][0]),\nself.brief_fields,\n\"In order to test the brief API parameter the brief fields need to be manually added to \"\n\"self.brief_fields. If this is already the case, perhaps the serializer is implemented incorrectly?\",\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_without_permission(self):\n\"\"\"\n            GET a list of objects as an authenticated user without the required permission.\n            \"\"\"\nurl = self._get_list_url()\n# Try GET without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects(self):\n\"\"\"\n            GET a list of objects as an authenticated user with permission to view the objects.\n            \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n3,\nf\"Test requires the creation of at least three {self.model} instances\",\n)\ninstance1, instance2 = self._get_queryset()[:2]\n# Add object-level permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk__in\": [instance1.pk, instance2.pk]},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET to permitted objects\nresponse = self.client.get(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), 2)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_filtered(self):\n\"\"\"\n            GET a list of objects filtered by ID.\n            \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n3,\nf\"Test requires the creation of at least three {self.model} instances\",\n)\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\ninstance1, instance2 = self._get_queryset()[:2]\nresponse = self.client.get(f\"{self._get_list_url()}?id={instance1.pk}&amp;id={instance2.pk}\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), 2)\nfor entry in response.data[\"results\"]:\nself.assertIn(str(entry[\"id\"]), [str(instance1.pk), str(instance2.pk)])\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[], STRICT_FILTERING=True)\ndef test_list_objects_unknown_filter_strict_filtering(self):\n\"\"\"\n            GET a list of objects with an unknown filter parameter and strict filtering, expect a 400 response.\n            \"\"\"\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nwith disable_warnings(\"django.request\"):\nresponse = self.client.get(f\"{self._get_list_url()}?ice_cream_flavor=rocky-road\", **self.header)\nself.assertHttpStatus(response, status.HTTP_400_BAD_REQUEST)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"ice_cream_flavor\", response.data)\nself.assertIsInstance(response.data[\"ice_cream_flavor\"], list)\nself.assertEqual(\"Unknown filter field\", str(response.data[\"ice_cream_flavor\"][0]))\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[], STRICT_FILTERING=False)\ndef test_list_objects_unknown_filter_no_strict_filtering(self):\n\"\"\"\n            GET a list of objects with an unknown filter parameter and no strict filtering, expect it to be ignored.\n            \"\"\"\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nwith self.assertLogs(\"nautobot.utilities.filters\") as cm:\nresponse = self.client.get(f\"{self._get_list_url()}?ice_cream_flavor=rocky-road\", **self.header)\nself.assertEqual(\ncm.output,\n[\nf\"WARNING:nautobot.utilities.filters:{self.get_filterset().__name__}: \"\n'Unknown filter field \"ice_cream_flavor\"',\n],\n)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_options_objects(self):\n\"\"\"\n            Make an OPTIONS request for a list endpoint.\n            \"\"\"\nresponse = self.client.options(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_status_options_returns_expected_choices(self):\n# Set to self.choices_fields as empty set to compare classes that shouldn't have any choice fields on serializer.\nif not self.choices_fields:\nself.choices_fields = set()\n# Don't bother testing if there's no `status` field.\nif \"status\" not in self.choices_fields:\nself.skipTest(\"Object does not contain a `status` field.\")\n# Save self.user as superuser to be able to view available choices on list views.\nself.user.is_superuser = True\nself.user.save()\nresponse = self.client.options(self._get_list_url(), **self.header)\ndata = response.json()\nself.assertIn(\"actions\", data)\nself.assertIn(\"POST\", data[\"actions\"])\nactions = data[\"actions\"][\"POST\"]\nchoices = actions[\"status\"][\"choices\"]\n# Import Status here to avoid circular import issues w/ test utilities.\nfrom nautobot.extras.models import Status  # noqa\n# Assert that the expected Status objects matches what is emitted.\nstatuses = Status.objects.get_for_model(self.model)\nexpected = [{\"value\": v, \"display\": d} for (v, d) in statuses.values_list(\"slug\", \"name\")]\nself.assertListEqual(choices, expected)\nclass CreateObjectViewTestCase(APITestCase):\ncreate_data = []\nvalidation_excluded_fields = []\nslug_source: Optional[Union[str, Sequence[str]]] = None\nslugify_function = staticmethod(slugify)\ndef test_create_object_without_permission(self):\n\"\"\"\n            POST a single object without permission.\n            \"\"\"\nurl = self._get_list_url()\n# Try POST without permission\nwith disable_warnings(\"django.request\"):\nresponse = self.client.post(url, self.create_data[0], format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_403_FORBIDDEN)\ndef check_expected_slug(self, obj):\nslug_source = self.slug_source if isinstance(self.slug_source, (list, tuple)) else [self.slug_source]\nexpected_slug = \"\"\nfor source_item in slug_source:\n# e.g. self.slug_source = [\"parent__name\", \"name\"]\nsource_keys = source_item.split(\"__\")\ntry:\nval = getattr(obj, source_keys[0])\nfor key in source_keys[1:]:\nval = getattr(val, key)\nexcept AttributeError:\nval = \"\"\nif val:\nif expected_slug != \"\":\nexpected_slug += \"-\"\nexpected_slug += self.slugify_function(val)\nself.assertNotEqual(expected_slug, \"\")\nself.assertEqual(obj.slug, expected_slug)\ndef test_create_object(self):\n\"\"\"\n            POST a single object with permission.\n            \"\"\"\n# Add object-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninitial_count = self._get_queryset().count()\nfor i, create_data in enumerate(self.create_data):\nresponse = self.client.post(self._get_list_url(), create_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_201_CREATED)\nself.assertEqual(self._get_queryset().count(), initial_count + i + 1)\ninstance = self._get_queryset().get(pk=response.data[\"id\"])\nself.assertInstanceEqual(\ninstance,\ncreate_data,\nexclude=self.validation_excluded_fields,\napi=True,\n)\n# Check if Slug field is automatically created\nif self.slug_source is not None and \"slug\" not in create_data:\nself.check_expected_slug(self._get_queryset().get(pk=response.data[\"id\"]))\n# Verify ObjectChange creation\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, ObjectChangeActionChoices.ACTION_CREATE)\ndef test_bulk_create_objects(self):\n\"\"\"\n            POST a set of objects in a single request.\n            \"\"\"\n# Add object-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninitial_count = self._get_queryset().count()\nresponse = self.client.post(self._get_list_url(), self.create_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_201_CREATED)\nself.assertEqual(len(response.data), len(self.create_data))\nself.assertEqual(self._get_queryset().count(), initial_count + len(self.create_data))\nfor i, obj in enumerate(response.data):\nfor field in self.create_data[i]:\nif field not in self.validation_excluded_fields:\nself.assertIn(\nfield,\nobj,\nf\"Bulk create field '{field}' missing from object {i} in response\",\n)\nfor i, obj in enumerate(response.data):\nself.assertInstanceEqual(\nself._get_queryset().get(pk=obj[\"id\"]),\nself.create_data[i],\nexclude=self.validation_excluded_fields,\napi=True,\n)\nif self.slug_source is not None and \"slug\" not in self.create_data[i]:\nself.check_expected_slug(self._get_queryset().get(pk=obj[\"id\"]))\nclass UpdateObjectViewTestCase(APITestCase):\nupdate_data = {}\nbulk_update_data: Optional[dict] = None\nvalidation_excluded_fields = []\nchoices_fields = None\ndef test_update_object_without_permission(self):\n\"\"\"\n            PATCH a single object without permission.\n            \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\nupdate_data = self.update_data or getattr(self, \"create_data\")[0]\n# Try PATCH without permission\nwith disable_warnings(\"django.request\"):\nresponse = self.client.patch(url, update_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_403_FORBIDDEN)\ndef test_update_object(self):\n\"\"\"\n            PATCH a single object identified by its ID.\n            \"\"\"\nself.maxDiff = None\ninstance = self._get_queryset().first()\nurl = self._get_detail_url(instance)\nupdate_data = self.update_data or getattr(self, \"create_data\")[0]\n# Add object-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Verify that an empty PATCH results in no change to the object.\n# This is to catch issues like https://github.com/nautobot/nautobot/issues/3533\n# Add object-level permission for GET\nobj_perm.actions = [\"view\"]\nobj_perm.save()\n# Get initial serialized object representation\nget_response = self.client.get(url, **self.header)\nself.assertHttpStatus(get_response, status.HTTP_200_OK)\ninitial_serialized_object = get_response.json()\n# Work around for https://github.com/nautobot/nautobot/issues/3321\ninitial_serialized_object.pop(\"last_updated\", None)\n# Redefine object-level permission for PATCH\nobj_perm.actions = [\"change\"]\nobj_perm.save()\n# Send empty PATCH request\nresponse = self.client.patch(url, {}, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nserialized_object = response.json()\n# Work around for https://github.com/nautobot/nautobot/issues/3321\nserialized_object.pop(\"last_updated\", None)\n# PATCH response always includes \"opt-in\" fields, but GET response does not.\nserialized_object.pop(\"computed_fields\", None)\nserialized_object.pop(\"relationships\", None)\nself.assertEqual(initial_serialized_object, serialized_object)\n# Verify ObjectChange creation -- yes, even though nothing actually changed\n# This may change (hah) at some point -- see https://github.com/nautobot/nautobot/issues/3321\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, ObjectChangeActionChoices.ACTION_UPDATE)\nobjectchanges.delete()\n# Verify that a PATCH with some data updates that data correctly.\nresponse = self.client.patch(url, update_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\n# Check for unexpected side effects on fields we DIDN'T intend to update\nfor field in initial_serialized_object:\nif field not in update_data:\nself.assertEqual(initial_serialized_object[field], serialized_object[field])\ninstance.refresh_from_db()\nself.assertInstanceEqual(instance, update_data, exclude=self.validation_excluded_fields, api=True)\n# Verify ObjectChange creation\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, ObjectChangeActionChoices.ACTION_UPDATE)\ndef test_bulk_update_objects(self):\n\"\"\"\n            PATCH a set of objects in a single request.\n            \"\"\"\nif self.bulk_update_data is None:\nself.skipTest(\"Bulk update data not set\")\n# Add object-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nid_list = list(self._get_queryset().values_list(\"id\", flat=True)[:3])\nself.assertEqual(len(id_list), 3, \"Insufficient number of objects to test bulk update\")\ndata = [{\"id\": id, **self.bulk_update_data} for id in id_list]\nresponse = self.client.patch(self._get_list_url(), data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nfor i, obj in enumerate(response.data):\nfor field, _value in self.bulk_update_data.items():\nself.assertIn(\nfield,\nobj,\nf\"Bulk update field '{field}' missing from object {i} in response\",\n)\n# TODO(Glenn): shouldn't we also check that obj[field] == value?\nfor instance in self._get_queryset().filter(pk__in=id_list):\nself.assertInstanceEqual(\ninstance,\nself.bulk_update_data,\nexclude=self.validation_excluded_fields,\napi=True,\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_options_objects_returns_display_and_value(self):\n\"\"\"\n            Make an OPTIONS request for a list endpoint and validate choices use the display and value keys.\n            \"\"\"\n# Save self.user as superuser to be able to view available choices on list views.\nself.user.is_superuser = True\nself.user.save()\nresponse = self.client.options(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\ndata = response.json()\nself.assertIn(\"actions\", data)\n# Grab any field that has choices defined (fields with enums)\nif \"POST\" in data[\"actions\"]:\nfield_choices = {k: v[\"choices\"] for k, v in data[\"actions\"][\"POST\"].items() if \"choices\" in v}\nelif \"PUT\" in data[\"actions\"]:  # JobModelViewSet supports editing but not creation\nfield_choices = {k: v[\"choices\"] for k, v in data[\"actions\"][\"PUT\"].items() if \"choices\" in v}\nelse:\nself.fail(f\"Neither PUT nor POST are available actions in: {data['actions']}\")\n# Will successfully assert if field_choices has entries and will not fail if model as no enum choices\n# Broken down to provide better failure messages\nfor field, choices in field_choices.items():\nfor choice in choices:\nself.assertIn(\"display\", choice, f\"A choice in {field} is missing the display key\")\nself.assertIn(\"value\", choice, f\"A choice in {field} is missing the value key\")\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_options_returns_expected_choices(self):\n\"\"\"\n            Make an OPTIONS request for a list endpoint and validate choices match expected choices for serializer.\n            \"\"\"\n# Set self.choices_fields as empty set to compare classes that shouldn't have any choices on serializer.\nif not self.choices_fields:\nself.choices_fields = set()\n# Save self.user as superuser to be able to view available choices on list views.\nself.user.is_superuser = True\nself.user.save()\nresponse = self.client.options(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\ndata = response.json()\nself.assertIn(\"actions\", data)\n# Grab any field name that has choices defined (fields with enums)\nif \"POST\" in data[\"actions\"]:\nfield_choices = {k for k, v in data[\"actions\"][\"POST\"].items() if \"choices\" in v}\nelif \"PUT\" in data[\"actions\"]:  # JobModelViewSet supports editing but not creation\nfield_choices = {k for k, v in data[\"actions\"][\"PUT\"].items() if \"choices\" in v}\nelse:\nself.fail(f\"Neither PUT nor POST are available actions in: {data['actions']}\")\nself.assertEqual(\nset(self.choices_fields),\nfield_choices,\n\"All field names of choice fields for a given model serializer need to be manually added to \"\n\"self.choices_fields. If this is already the case, perhaps the serializer is implemented incorrectly?\",\n)\nclass DeleteObjectViewTestCase(APITestCase):\ndef get_deletable_object(self):\n\"\"\"\n            Get an instance that can be deleted.\n            For some models this may just be any random object, but when we have FKs with `on_delete=models.PROTECT`\n            (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n            \"\"\"\ninstance = get_deletable_objects(self.model, self._get_queryset()).first()\nif instance is None:\nself.fail(\"Couldn't find a single deletable object!\")\nreturn instance\ndef get_deletable_object_pks(self):\n\"\"\"\n            Get a list of PKs corresponding to objects that can be safely bulk-deleted.\n            For some models this may just be any random objects, but when we have FKs with `on_delete=models.PROTECT`\n            (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n            \"\"\"\ninstances = get_deletable_objects(self.model, self._get_queryset()).values_list(\"pk\", flat=True)[:3]\nif len(instances) &lt; 3:\nself.fail(f\"Couldn't find 3 deletable objects, only found {len(instances)}!\")\nreturn instances\ndef test_delete_object_without_permission(self):\n\"\"\"\n            DELETE a single object without permission.\n            \"\"\"\nurl = self._get_detail_url(self.get_deletable_object())\n# Try DELETE without permission\nwith disable_warnings(\"django.request\"):\nresponse = self.client.delete(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_403_FORBIDDEN)\ndef test_delete_object(self):\n\"\"\"\n            DELETE a single object identified by its primary key.\n            \"\"\"\ninstance = self.get_deletable_object()\nurl = self._get_detail_url(instance)\n# Add object-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nresponse = self.client.delete(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_204_NO_CONTENT)\nself.assertFalse(self._get_queryset().filter(pk=instance.pk).exists())\n# Verify ObjectChange creation\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, ObjectChangeActionChoices.ACTION_DELETE)\ndef test_bulk_delete_objects(self):\n\"\"\"\n            DELETE a set of objects in a single request.\n            \"\"\"\nid_list = self.get_deletable_object_pks()\n# Add object-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ndata = [{\"id\": id} for id in id_list]\ninitial_count = self._get_queryset().count()\nresponse = self.client.delete(self._get_list_url(), data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_204_NO_CONTENT)\nself.assertEqual(self._get_queryset().count(), initial_count - len(id_list))\nclass NotesURLViewTestCase(APITestCase):\n\"\"\"Validate Notes URL on objects that have the Note model Mixin.\"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_notes_url_on_object(self):\nif hasattr(self.model, \"notes\"):\ninstance1 = self._get_queryset().first()\n# Add object-level permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nurl = self._get_detail_url(instance1)\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIn(\"notes_url\", response.data)\nself.assertIn(f\"{url}notes/\", str(response.data[\"notes_url\"]))\nclass APIViewTestCase(\nGetObjectViewTestCase,\nListObjectsViewTestCase,\nCreateObjectViewTestCase,\nUpdateObjectViewTestCase,\nDeleteObjectViewTestCase,\nNotesURLViewTestCase,\n):\npass\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.CreateObjectViewTestCase","title":"<code>CreateObjectViewTestCase</code>","text":"<p>             Bases: <code>APITestCase</code></p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>class CreateObjectViewTestCase(APITestCase):\ncreate_data = []\nvalidation_excluded_fields = []\nslug_source: Optional[Union[str, Sequence[str]]] = None\nslugify_function = staticmethod(slugify)\ndef test_create_object_without_permission(self):\n\"\"\"\n        POST a single object without permission.\n        \"\"\"\nurl = self._get_list_url()\n# Try POST without permission\nwith disable_warnings(\"django.request\"):\nresponse = self.client.post(url, self.create_data[0], format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_403_FORBIDDEN)\ndef check_expected_slug(self, obj):\nslug_source = self.slug_source if isinstance(self.slug_source, (list, tuple)) else [self.slug_source]\nexpected_slug = \"\"\nfor source_item in slug_source:\n# e.g. self.slug_source = [\"parent__name\", \"name\"]\nsource_keys = source_item.split(\"__\")\ntry:\nval = getattr(obj, source_keys[0])\nfor key in source_keys[1:]:\nval = getattr(val, key)\nexcept AttributeError:\nval = \"\"\nif val:\nif expected_slug != \"\":\nexpected_slug += \"-\"\nexpected_slug += self.slugify_function(val)\nself.assertNotEqual(expected_slug, \"\")\nself.assertEqual(obj.slug, expected_slug)\ndef test_create_object(self):\n\"\"\"\n        POST a single object with permission.\n        \"\"\"\n# Add object-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninitial_count = self._get_queryset().count()\nfor i, create_data in enumerate(self.create_data):\nresponse = self.client.post(self._get_list_url(), create_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_201_CREATED)\nself.assertEqual(self._get_queryset().count(), initial_count + i + 1)\ninstance = self._get_queryset().get(pk=response.data[\"id\"])\nself.assertInstanceEqual(\ninstance,\ncreate_data,\nexclude=self.validation_excluded_fields,\napi=True,\n)\n# Check if Slug field is automatically created\nif self.slug_source is not None and \"slug\" not in create_data:\nself.check_expected_slug(self._get_queryset().get(pk=response.data[\"id\"]))\n# Verify ObjectChange creation\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, ObjectChangeActionChoices.ACTION_CREATE)\ndef test_bulk_create_objects(self):\n\"\"\"\n        POST a set of objects in a single request.\n        \"\"\"\n# Add object-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninitial_count = self._get_queryset().count()\nresponse = self.client.post(self._get_list_url(), self.create_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_201_CREATED)\nself.assertEqual(len(response.data), len(self.create_data))\nself.assertEqual(self._get_queryset().count(), initial_count + len(self.create_data))\nfor i, obj in enumerate(response.data):\nfor field in self.create_data[i]:\nif field not in self.validation_excluded_fields:\nself.assertIn(\nfield,\nobj,\nf\"Bulk create field '{field}' missing from object {i} in response\",\n)\nfor i, obj in enumerate(response.data):\nself.assertInstanceEqual(\nself._get_queryset().get(pk=obj[\"id\"]),\nself.create_data[i],\nexclude=self.validation_excluded_fields,\napi=True,\n)\nif self.slug_source is not None and \"slug\" not in self.create_data[i]:\nself.check_expected_slug(self._get_queryset().get(pk=obj[\"id\"]))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.CreateObjectViewTestCase.test_bulk_create_objects","title":"<code>test_bulk_create_objects()</code>","text":"<p>POST a set of objects in a single request.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>def test_bulk_create_objects(self):\n\"\"\"\n    POST a set of objects in a single request.\n    \"\"\"\n# Add object-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninitial_count = self._get_queryset().count()\nresponse = self.client.post(self._get_list_url(), self.create_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_201_CREATED)\nself.assertEqual(len(response.data), len(self.create_data))\nself.assertEqual(self._get_queryset().count(), initial_count + len(self.create_data))\nfor i, obj in enumerate(response.data):\nfor field in self.create_data[i]:\nif field not in self.validation_excluded_fields:\nself.assertIn(\nfield,\nobj,\nf\"Bulk create field '{field}' missing from object {i} in response\",\n)\nfor i, obj in enumerate(response.data):\nself.assertInstanceEqual(\nself._get_queryset().get(pk=obj[\"id\"]),\nself.create_data[i],\nexclude=self.validation_excluded_fields,\napi=True,\n)\nif self.slug_source is not None and \"slug\" not in self.create_data[i]:\nself.check_expected_slug(self._get_queryset().get(pk=obj[\"id\"]))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.CreateObjectViewTestCase.test_create_object","title":"<code>test_create_object()</code>","text":"<p>POST a single object with permission.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>def test_create_object(self):\n\"\"\"\n    POST a single object with permission.\n    \"\"\"\n# Add object-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninitial_count = self._get_queryset().count()\nfor i, create_data in enumerate(self.create_data):\nresponse = self.client.post(self._get_list_url(), create_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_201_CREATED)\nself.assertEqual(self._get_queryset().count(), initial_count + i + 1)\ninstance = self._get_queryset().get(pk=response.data[\"id\"])\nself.assertInstanceEqual(\ninstance,\ncreate_data,\nexclude=self.validation_excluded_fields,\napi=True,\n)\n# Check if Slug field is automatically created\nif self.slug_source is not None and \"slug\" not in create_data:\nself.check_expected_slug(self._get_queryset().get(pk=response.data[\"id\"]))\n# Verify ObjectChange creation\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, ObjectChangeActionChoices.ACTION_CREATE)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.CreateObjectViewTestCase.test_create_object_without_permission","title":"<code>test_create_object_without_permission()</code>","text":"<p>POST a single object without permission.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>def test_create_object_without_permission(self):\n\"\"\"\n    POST a single object without permission.\n    \"\"\"\nurl = self._get_list_url()\n# Try POST without permission\nwith disable_warnings(\"django.request\"):\nresponse = self.client.post(url, self.create_data[0], format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_403_FORBIDDEN)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.DeleteObjectViewTestCase","title":"<code>DeleteObjectViewTestCase</code>","text":"<p>             Bases: <code>APITestCase</code></p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>class DeleteObjectViewTestCase(APITestCase):\ndef get_deletable_object(self):\n\"\"\"\n        Get an instance that can be deleted.\n        For some models this may just be any random object, but when we have FKs with `on_delete=models.PROTECT`\n        (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n        \"\"\"\ninstance = get_deletable_objects(self.model, self._get_queryset()).first()\nif instance is None:\nself.fail(\"Couldn't find a single deletable object!\")\nreturn instance\ndef get_deletable_object_pks(self):\n\"\"\"\n        Get a list of PKs corresponding to objects that can be safely bulk-deleted.\n        For some models this may just be any random objects, but when we have FKs with `on_delete=models.PROTECT`\n        (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n        \"\"\"\ninstances = get_deletable_objects(self.model, self._get_queryset()).values_list(\"pk\", flat=True)[:3]\nif len(instances) &lt; 3:\nself.fail(f\"Couldn't find 3 deletable objects, only found {len(instances)}!\")\nreturn instances\ndef test_delete_object_without_permission(self):\n\"\"\"\n        DELETE a single object without permission.\n        \"\"\"\nurl = self._get_detail_url(self.get_deletable_object())\n# Try DELETE without permission\nwith disable_warnings(\"django.request\"):\nresponse = self.client.delete(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_403_FORBIDDEN)\ndef test_delete_object(self):\n\"\"\"\n        DELETE a single object identified by its primary key.\n        \"\"\"\ninstance = self.get_deletable_object()\nurl = self._get_detail_url(instance)\n# Add object-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nresponse = self.client.delete(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_204_NO_CONTENT)\nself.assertFalse(self._get_queryset().filter(pk=instance.pk).exists())\n# Verify ObjectChange creation\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, ObjectChangeActionChoices.ACTION_DELETE)\ndef test_bulk_delete_objects(self):\n\"\"\"\n        DELETE a set of objects in a single request.\n        \"\"\"\nid_list = self.get_deletable_object_pks()\n# Add object-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ndata = [{\"id\": id} for id in id_list]\ninitial_count = self._get_queryset().count()\nresponse = self.client.delete(self._get_list_url(), data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_204_NO_CONTENT)\nself.assertEqual(self._get_queryset().count(), initial_count - len(id_list))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.DeleteObjectViewTestCase.get_deletable_object","title":"<code>get_deletable_object()</code>","text":"<p>Get an instance that can be deleted.</p> <p>For some models this may just be any random object, but when we have FKs with <code>on_delete=models.PROTECT</code> (as is often the case) we need to find or create an instance that doesn't have such entanglements.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>def get_deletable_object(self):\n\"\"\"\n    Get an instance that can be deleted.\n    For some models this may just be any random object, but when we have FKs with `on_delete=models.PROTECT`\n    (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n    \"\"\"\ninstance = get_deletable_objects(self.model, self._get_queryset()).first()\nif instance is None:\nself.fail(\"Couldn't find a single deletable object!\")\nreturn instance\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.DeleteObjectViewTestCase.get_deletable_object_pks","title":"<code>get_deletable_object_pks()</code>","text":"<p>Get a list of PKs corresponding to objects that can be safely bulk-deleted.</p> <p>For some models this may just be any random objects, but when we have FKs with <code>on_delete=models.PROTECT</code> (as is often the case) we need to find or create an instance that doesn't have such entanglements.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>def get_deletable_object_pks(self):\n\"\"\"\n    Get a list of PKs corresponding to objects that can be safely bulk-deleted.\n    For some models this may just be any random objects, but when we have FKs with `on_delete=models.PROTECT`\n    (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n    \"\"\"\ninstances = get_deletable_objects(self.model, self._get_queryset()).values_list(\"pk\", flat=True)[:3]\nif len(instances) &lt; 3:\nself.fail(f\"Couldn't find 3 deletable objects, only found {len(instances)}!\")\nreturn instances\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.DeleteObjectViewTestCase.test_bulk_delete_objects","title":"<code>test_bulk_delete_objects()</code>","text":"<p>DELETE a set of objects in a single request.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>def test_bulk_delete_objects(self):\n\"\"\"\n    DELETE a set of objects in a single request.\n    \"\"\"\nid_list = self.get_deletable_object_pks()\n# Add object-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ndata = [{\"id\": id} for id in id_list]\ninitial_count = self._get_queryset().count()\nresponse = self.client.delete(self._get_list_url(), data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_204_NO_CONTENT)\nself.assertEqual(self._get_queryset().count(), initial_count - len(id_list))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.DeleteObjectViewTestCase.test_delete_object","title":"<code>test_delete_object()</code>","text":"<p>DELETE a single object identified by its primary key.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>def test_delete_object(self):\n\"\"\"\n    DELETE a single object identified by its primary key.\n    \"\"\"\ninstance = self.get_deletable_object()\nurl = self._get_detail_url(instance)\n# Add object-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nresponse = self.client.delete(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_204_NO_CONTENT)\nself.assertFalse(self._get_queryset().filter(pk=instance.pk).exists())\n# Verify ObjectChange creation\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, ObjectChangeActionChoices.ACTION_DELETE)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.DeleteObjectViewTestCase.test_delete_object_without_permission","title":"<code>test_delete_object_without_permission()</code>","text":"<p>DELETE a single object without permission.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>def test_delete_object_without_permission(self):\n\"\"\"\n    DELETE a single object without permission.\n    \"\"\"\nurl = self._get_detail_url(self.get_deletable_object())\n# Try DELETE without permission\nwith disable_warnings(\"django.request\"):\nresponse = self.client.delete(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_403_FORBIDDEN)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.GetObjectViewTestCase","title":"<code>GetObjectViewTestCase</code>","text":"<p>             Bases: <code>APITestCase</code></p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>class GetObjectViewTestCase(APITestCase):\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_get_object_anonymous(self):\n\"\"\"\n        GET a single object as an unauthenticated user.\n        \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\nif (\nself.model._meta.app_label,\nself.model._meta.model_name,\n) in settings.EXEMPT_EXCLUDE_MODELS:\n# Models listed in EXEMPT_EXCLUDE_MODELS should not be accessible to anonymous users\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\nelse:\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object_without_permission(self):\n\"\"\"\n        GET a single object as an authenticated user without the required permission.\n        \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\n# Try GET without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object(self):\n\"\"\"\n        GET a single object as an authenticated user with permission to view the object.\n        \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n2,\nf\"Test requires the creation of at least two {self.model} instances\",\n)\ninstance1, instance2 = self._get_queryset()[:2]\n# Add object-level permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET to non-permitted object\nurl = self._get_detail_url(instance2)\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_404_NOT_FOUND)\n# Try GET to permitted object\nurl = self._get_detail_url(instance1)\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\n# Fields that should be present in *ALL* model serializers:\nself.assertIn(\"id\", response.data)\nself.assertEqual(str(response.data[\"id\"]), str(instance1.pk))  # coerce to str to handle both int and uuid\nself.assertIn(\"url\", response.data)\nself.assertIn(\"display\", response.data)\nself.assertIsInstance(response.data[\"display\"], str)\n# Fields that should be present in appropriate model serializers:\nif issubclass(self.model, ChangeLoggedModel):\nself.assertIn(\"created\", response.data)\nself.assertIn(\"last_updated\", response.data)\n# Fields that should be absent by default (opt-in fields):\nself.assertNotIn(\"computed_fields\", response.data)\nself.assertNotIn(\"relationships\", response.data)\n# If opt-in fields are supported on this model, make sure they can be opted into\ncustom_fields_registry = registry[\"model_features\"][\"custom_fields\"]\n# computed fields and custom fields use the same registry\ncf_supported = self.model._meta.model_name in custom_fields_registry.get(self.model._meta.app_label, {})\nif cf_supported:  # custom_fields is not an opt-in field, it should always be present if supported\nself.assertIn(\"custom_fields\", response.data)\nself.assertIsInstance(response.data[\"custom_fields\"], dict)\nrelationships_registry = registry[\"model_features\"][\"relationships\"]\nrel_supported = self.model._meta.model_name in relationships_registry.get(self.model._meta.app_label, {})\nif cf_supported or rel_supported:\nquery_params = []\nif cf_supported:\nquery_params.append(\"include=computed_fields\")\nif rel_supported:\nquery_params.append(\"include=relationships\")\nquery_string = \"&amp;\".join(query_params)\nurl = f\"{url}?{query_string}\"\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nif cf_supported:\nself.assertIn(\"computed_fields\", response.data)\nself.assertIsInstance(response.data[\"computed_fields\"], dict)\nelse:\nself.assertNotIn(\"computed_fields\", response.data)\nif rel_supported:\nself.assertIn(\"relationships\", response.data)\nself.assertIsInstance(response.data[\"relationships\"], dict)\nelse:\nself.assertNotIn(\"relationships\", response.data)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_options_object(self):\n\"\"\"\n        Make an OPTIONS request for a single object.\n        \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\nresponse = self.client.options(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.GetObjectViewTestCase.test_get_object","title":"<code>test_get_object()</code>","text":"<p>GET a single object as an authenticated user with permission to view the object.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object(self):\n\"\"\"\n    GET a single object as an authenticated user with permission to view the object.\n    \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n2,\nf\"Test requires the creation of at least two {self.model} instances\",\n)\ninstance1, instance2 = self._get_queryset()[:2]\n# Add object-level permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET to non-permitted object\nurl = self._get_detail_url(instance2)\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_404_NOT_FOUND)\n# Try GET to permitted object\nurl = self._get_detail_url(instance1)\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\n# Fields that should be present in *ALL* model serializers:\nself.assertIn(\"id\", response.data)\nself.assertEqual(str(response.data[\"id\"]), str(instance1.pk))  # coerce to str to handle both int and uuid\nself.assertIn(\"url\", response.data)\nself.assertIn(\"display\", response.data)\nself.assertIsInstance(response.data[\"display\"], str)\n# Fields that should be present in appropriate model serializers:\nif issubclass(self.model, ChangeLoggedModel):\nself.assertIn(\"created\", response.data)\nself.assertIn(\"last_updated\", response.data)\n# Fields that should be absent by default (opt-in fields):\nself.assertNotIn(\"computed_fields\", response.data)\nself.assertNotIn(\"relationships\", response.data)\n# If opt-in fields are supported on this model, make sure they can be opted into\ncustom_fields_registry = registry[\"model_features\"][\"custom_fields\"]\n# computed fields and custom fields use the same registry\ncf_supported = self.model._meta.model_name in custom_fields_registry.get(self.model._meta.app_label, {})\nif cf_supported:  # custom_fields is not an opt-in field, it should always be present if supported\nself.assertIn(\"custom_fields\", response.data)\nself.assertIsInstance(response.data[\"custom_fields\"], dict)\nrelationships_registry = registry[\"model_features\"][\"relationships\"]\nrel_supported = self.model._meta.model_name in relationships_registry.get(self.model._meta.app_label, {})\nif cf_supported or rel_supported:\nquery_params = []\nif cf_supported:\nquery_params.append(\"include=computed_fields\")\nif rel_supported:\nquery_params.append(\"include=relationships\")\nquery_string = \"&amp;\".join(query_params)\nurl = f\"{url}?{query_string}\"\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nif cf_supported:\nself.assertIn(\"computed_fields\", response.data)\nself.assertIsInstance(response.data[\"computed_fields\"], dict)\nelse:\nself.assertNotIn(\"computed_fields\", response.data)\nif rel_supported:\nself.assertIn(\"relationships\", response.data)\nself.assertIsInstance(response.data[\"relationships\"], dict)\nelse:\nself.assertNotIn(\"relationships\", response.data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.GetObjectViewTestCase.test_get_object_anonymous","title":"<code>test_get_object_anonymous()</code>","text":"<p>GET a single object as an unauthenticated user.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_get_object_anonymous(self):\n\"\"\"\n    GET a single object as an unauthenticated user.\n    \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\nif (\nself.model._meta.app_label,\nself.model._meta.model_name,\n) in settings.EXEMPT_EXCLUDE_MODELS:\n# Models listed in EXEMPT_EXCLUDE_MODELS should not be accessible to anonymous users\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\nelse:\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.GetObjectViewTestCase.test_get_object_without_permission","title":"<code>test_get_object_without_permission()</code>","text":"<p>GET a single object as an authenticated user without the required permission.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object_without_permission(self):\n\"\"\"\n    GET a single object as an authenticated user without the required permission.\n    \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\n# Try GET without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.GetObjectViewTestCase.test_options_object","title":"<code>test_options_object()</code>","text":"<p>Make an OPTIONS request for a single object.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_options_object(self):\n\"\"\"\n    Make an OPTIONS request for a single object.\n    \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\nresponse = self.client.options(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.ListObjectsViewTestCase","title":"<code>ListObjectsViewTestCase</code>","text":"<p>             Bases: <code>APITestCase</code></p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>class ListObjectsViewTestCase(APITestCase):\nbrief_fields = []\nchoices_fields = None\nfilterset = None\ndef get_filterset(self):\nreturn self.filterset or get_filterset_for_model(self.model)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_list_objects_anonymous(self):\n\"\"\"\n        GET a list of objects as an unauthenticated user.\n        \"\"\"\nurl = self._get_list_url()\nif (\nself.model._meta.app_label,\nself.model._meta.model_name,\n) in settings.EXEMPT_EXCLUDE_MODELS:\n# Models listed in EXEMPT_EXCLUDE_MODELS should not be accessible to anonymous users\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\nelse:\n# TODO(Glenn): if we're passing **self.header, we are *by definition* **NOT** anonymous!!\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_brief(self):\n\"\"\"\n        GET a list of objects using the \"brief\" parameter.\n        \"\"\"\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nurl = f\"{self._get_list_url()}?brief=1\"\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\nself.assertEqual(\nsorted(response.data[\"results\"][0]),\nself.brief_fields,\n\"In order to test the brief API parameter the brief fields need to be manually added to \"\n\"self.brief_fields. If this is already the case, perhaps the serializer is implemented incorrectly?\",\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_without_permission(self):\n\"\"\"\n        GET a list of objects as an authenticated user without the required permission.\n        \"\"\"\nurl = self._get_list_url()\n# Try GET without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects(self):\n\"\"\"\n        GET a list of objects as an authenticated user with permission to view the objects.\n        \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n3,\nf\"Test requires the creation of at least three {self.model} instances\",\n)\ninstance1, instance2 = self._get_queryset()[:2]\n# Add object-level permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk__in\": [instance1.pk, instance2.pk]},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET to permitted objects\nresponse = self.client.get(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), 2)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_filtered(self):\n\"\"\"\n        GET a list of objects filtered by ID.\n        \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n3,\nf\"Test requires the creation of at least three {self.model} instances\",\n)\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\ninstance1, instance2 = self._get_queryset()[:2]\nresponse = self.client.get(f\"{self._get_list_url()}?id={instance1.pk}&amp;id={instance2.pk}\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), 2)\nfor entry in response.data[\"results\"]:\nself.assertIn(str(entry[\"id\"]), [str(instance1.pk), str(instance2.pk)])\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[], STRICT_FILTERING=True)\ndef test_list_objects_unknown_filter_strict_filtering(self):\n\"\"\"\n        GET a list of objects with an unknown filter parameter and strict filtering, expect a 400 response.\n        \"\"\"\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nwith disable_warnings(\"django.request\"):\nresponse = self.client.get(f\"{self._get_list_url()}?ice_cream_flavor=rocky-road\", **self.header)\nself.assertHttpStatus(response, status.HTTP_400_BAD_REQUEST)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"ice_cream_flavor\", response.data)\nself.assertIsInstance(response.data[\"ice_cream_flavor\"], list)\nself.assertEqual(\"Unknown filter field\", str(response.data[\"ice_cream_flavor\"][0]))\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[], STRICT_FILTERING=False)\ndef test_list_objects_unknown_filter_no_strict_filtering(self):\n\"\"\"\n        GET a list of objects with an unknown filter parameter and no strict filtering, expect it to be ignored.\n        \"\"\"\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nwith self.assertLogs(\"nautobot.utilities.filters\") as cm:\nresponse = self.client.get(f\"{self._get_list_url()}?ice_cream_flavor=rocky-road\", **self.header)\nself.assertEqual(\ncm.output,\n[\nf\"WARNING:nautobot.utilities.filters:{self.get_filterset().__name__}: \"\n'Unknown filter field \"ice_cream_flavor\"',\n],\n)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_options_objects(self):\n\"\"\"\n        Make an OPTIONS request for a list endpoint.\n        \"\"\"\nresponse = self.client.options(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_status_options_returns_expected_choices(self):\n# Set to self.choices_fields as empty set to compare classes that shouldn't have any choice fields on serializer.\nif not self.choices_fields:\nself.choices_fields = set()\n# Don't bother testing if there's no `status` field.\nif \"status\" not in self.choices_fields:\nself.skipTest(\"Object does not contain a `status` field.\")\n# Save self.user as superuser to be able to view available choices on list views.\nself.user.is_superuser = True\nself.user.save()\nresponse = self.client.options(self._get_list_url(), **self.header)\ndata = response.json()\nself.assertIn(\"actions\", data)\nself.assertIn(\"POST\", data[\"actions\"])\nactions = data[\"actions\"][\"POST\"]\nchoices = actions[\"status\"][\"choices\"]\n# Import Status here to avoid circular import issues w/ test utilities.\nfrom nautobot.extras.models import Status  # noqa\n# Assert that the expected Status objects matches what is emitted.\nstatuses = Status.objects.get_for_model(self.model)\nexpected = [{\"value\": v, \"display\": d} for (v, d) in statuses.values_list(\"slug\", \"name\")]\nself.assertListEqual(choices, expected)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.ListObjectsViewTestCase.test_list_objects","title":"<code>test_list_objects()</code>","text":"<p>GET a list of objects as an authenticated user with permission to view the objects.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects(self):\n\"\"\"\n    GET a list of objects as an authenticated user with permission to view the objects.\n    \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n3,\nf\"Test requires the creation of at least three {self.model} instances\",\n)\ninstance1, instance2 = self._get_queryset()[:2]\n# Add object-level permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk__in\": [instance1.pk, instance2.pk]},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET to permitted objects\nresponse = self.client.get(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), 2)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.ListObjectsViewTestCase.test_list_objects_anonymous","title":"<code>test_list_objects_anonymous()</code>","text":"<p>GET a list of objects as an unauthenticated user.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_list_objects_anonymous(self):\n\"\"\"\n    GET a list of objects as an unauthenticated user.\n    \"\"\"\nurl = self._get_list_url()\nif (\nself.model._meta.app_label,\nself.model._meta.model_name,\n) in settings.EXEMPT_EXCLUDE_MODELS:\n# Models listed in EXEMPT_EXCLUDE_MODELS should not be accessible to anonymous users\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\nelse:\n# TODO(Glenn): if we're passing **self.header, we are *by definition* **NOT** anonymous!!\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.ListObjectsViewTestCase.test_list_objects_brief","title":"<code>test_list_objects_brief()</code>","text":"<p>GET a list of objects using the \"brief\" parameter.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_brief(self):\n\"\"\"\n    GET a list of objects using the \"brief\" parameter.\n    \"\"\"\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nurl = f\"{self._get_list_url()}?brief=1\"\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\nself.assertEqual(\nsorted(response.data[\"results\"][0]),\nself.brief_fields,\n\"In order to test the brief API parameter the brief fields need to be manually added to \"\n\"self.brief_fields. If this is already the case, perhaps the serializer is implemented incorrectly?\",\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.ListObjectsViewTestCase.test_list_objects_filtered","title":"<code>test_list_objects_filtered()</code>","text":"<p>GET a list of objects filtered by ID.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_filtered(self):\n\"\"\"\n    GET a list of objects filtered by ID.\n    \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n3,\nf\"Test requires the creation of at least three {self.model} instances\",\n)\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\ninstance1, instance2 = self._get_queryset()[:2]\nresponse = self.client.get(f\"{self._get_list_url()}?id={instance1.pk}&amp;id={instance2.pk}\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), 2)\nfor entry in response.data[\"results\"]:\nself.assertIn(str(entry[\"id\"]), [str(instance1.pk), str(instance2.pk)])\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.ListObjectsViewTestCase.test_list_objects_unknown_filter_no_strict_filtering","title":"<code>test_list_objects_unknown_filter_no_strict_filtering()</code>","text":"<p>GET a list of objects with an unknown filter parameter and no strict filtering, expect it to be ignored.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[], STRICT_FILTERING=False)\ndef test_list_objects_unknown_filter_no_strict_filtering(self):\n\"\"\"\n    GET a list of objects with an unknown filter parameter and no strict filtering, expect it to be ignored.\n    \"\"\"\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nwith self.assertLogs(\"nautobot.utilities.filters\") as cm:\nresponse = self.client.get(f\"{self._get_list_url()}?ice_cream_flavor=rocky-road\", **self.header)\nself.assertEqual(\ncm.output,\n[\nf\"WARNING:nautobot.utilities.filters:{self.get_filterset().__name__}: \"\n'Unknown filter field \"ice_cream_flavor\"',\n],\n)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.ListObjectsViewTestCase.test_list_objects_unknown_filter_strict_filtering","title":"<code>test_list_objects_unknown_filter_strict_filtering()</code>","text":"<p>GET a list of objects with an unknown filter parameter and strict filtering, expect a 400 response.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[], STRICT_FILTERING=True)\ndef test_list_objects_unknown_filter_strict_filtering(self):\n\"\"\"\n    GET a list of objects with an unknown filter parameter and strict filtering, expect a 400 response.\n    \"\"\"\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nwith disable_warnings(\"django.request\"):\nresponse = self.client.get(f\"{self._get_list_url()}?ice_cream_flavor=rocky-road\", **self.header)\nself.assertHttpStatus(response, status.HTTP_400_BAD_REQUEST)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"ice_cream_flavor\", response.data)\nself.assertIsInstance(response.data[\"ice_cream_flavor\"], list)\nself.assertEqual(\"Unknown filter field\", str(response.data[\"ice_cream_flavor\"][0]))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.ListObjectsViewTestCase.test_list_objects_without_permission","title":"<code>test_list_objects_without_permission()</code>","text":"<p>GET a list of objects as an authenticated user without the required permission.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_without_permission(self):\n\"\"\"\n    GET a list of objects as an authenticated user without the required permission.\n    \"\"\"\nurl = self._get_list_url()\n# Try GET without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.ListObjectsViewTestCase.test_options_objects","title":"<code>test_options_objects()</code>","text":"<p>Make an OPTIONS request for a list endpoint.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_options_objects(self):\n\"\"\"\n    Make an OPTIONS request for a list endpoint.\n    \"\"\"\nresponse = self.client.options(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.NotesURLViewTestCase","title":"<code>NotesURLViewTestCase</code>","text":"<p>             Bases: <code>APITestCase</code></p> <p>Validate Notes URL on objects that have the Note model Mixin.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>class NotesURLViewTestCase(APITestCase):\n\"\"\"Validate Notes URL on objects that have the Note model Mixin.\"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_notes_url_on_object(self):\nif hasattr(self.model, \"notes\"):\ninstance1 = self._get_queryset().first()\n# Add object-level permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nurl = self._get_detail_url(instance1)\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIn(\"notes_url\", response.data)\nself.assertIn(f\"{url}notes/\", str(response.data[\"notes_url\"]))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.UpdateObjectViewTestCase","title":"<code>UpdateObjectViewTestCase</code>","text":"<p>             Bases: <code>APITestCase</code></p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>class UpdateObjectViewTestCase(APITestCase):\nupdate_data = {}\nbulk_update_data: Optional[dict] = None\nvalidation_excluded_fields = []\nchoices_fields = None\ndef test_update_object_without_permission(self):\n\"\"\"\n        PATCH a single object without permission.\n        \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\nupdate_data = self.update_data or getattr(self, \"create_data\")[0]\n# Try PATCH without permission\nwith disable_warnings(\"django.request\"):\nresponse = self.client.patch(url, update_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_403_FORBIDDEN)\ndef test_update_object(self):\n\"\"\"\n        PATCH a single object identified by its ID.\n        \"\"\"\nself.maxDiff = None\ninstance = self._get_queryset().first()\nurl = self._get_detail_url(instance)\nupdate_data = self.update_data or getattr(self, \"create_data\")[0]\n# Add object-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Verify that an empty PATCH results in no change to the object.\n# This is to catch issues like https://github.com/nautobot/nautobot/issues/3533\n# Add object-level permission for GET\nobj_perm.actions = [\"view\"]\nobj_perm.save()\n# Get initial serialized object representation\nget_response = self.client.get(url, **self.header)\nself.assertHttpStatus(get_response, status.HTTP_200_OK)\ninitial_serialized_object = get_response.json()\n# Work around for https://github.com/nautobot/nautobot/issues/3321\ninitial_serialized_object.pop(\"last_updated\", None)\n# Redefine object-level permission for PATCH\nobj_perm.actions = [\"change\"]\nobj_perm.save()\n# Send empty PATCH request\nresponse = self.client.patch(url, {}, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nserialized_object = response.json()\n# Work around for https://github.com/nautobot/nautobot/issues/3321\nserialized_object.pop(\"last_updated\", None)\n# PATCH response always includes \"opt-in\" fields, but GET response does not.\nserialized_object.pop(\"computed_fields\", None)\nserialized_object.pop(\"relationships\", None)\nself.assertEqual(initial_serialized_object, serialized_object)\n# Verify ObjectChange creation -- yes, even though nothing actually changed\n# This may change (hah) at some point -- see https://github.com/nautobot/nautobot/issues/3321\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, ObjectChangeActionChoices.ACTION_UPDATE)\nobjectchanges.delete()\n# Verify that a PATCH with some data updates that data correctly.\nresponse = self.client.patch(url, update_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\n# Check for unexpected side effects on fields we DIDN'T intend to update\nfor field in initial_serialized_object:\nif field not in update_data:\nself.assertEqual(initial_serialized_object[field], serialized_object[field])\ninstance.refresh_from_db()\nself.assertInstanceEqual(instance, update_data, exclude=self.validation_excluded_fields, api=True)\n# Verify ObjectChange creation\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, ObjectChangeActionChoices.ACTION_UPDATE)\ndef test_bulk_update_objects(self):\n\"\"\"\n        PATCH a set of objects in a single request.\n        \"\"\"\nif self.bulk_update_data is None:\nself.skipTest(\"Bulk update data not set\")\n# Add object-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nid_list = list(self._get_queryset().values_list(\"id\", flat=True)[:3])\nself.assertEqual(len(id_list), 3, \"Insufficient number of objects to test bulk update\")\ndata = [{\"id\": id, **self.bulk_update_data} for id in id_list]\nresponse = self.client.patch(self._get_list_url(), data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nfor i, obj in enumerate(response.data):\nfor field, _value in self.bulk_update_data.items():\nself.assertIn(\nfield,\nobj,\nf\"Bulk update field '{field}' missing from object {i} in response\",\n)\n# TODO(Glenn): shouldn't we also check that obj[field] == value?\nfor instance in self._get_queryset().filter(pk__in=id_list):\nself.assertInstanceEqual(\ninstance,\nself.bulk_update_data,\nexclude=self.validation_excluded_fields,\napi=True,\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_options_objects_returns_display_and_value(self):\n\"\"\"\n        Make an OPTIONS request for a list endpoint and validate choices use the display and value keys.\n        \"\"\"\n# Save self.user as superuser to be able to view available choices on list views.\nself.user.is_superuser = True\nself.user.save()\nresponse = self.client.options(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\ndata = response.json()\nself.assertIn(\"actions\", data)\n# Grab any field that has choices defined (fields with enums)\nif \"POST\" in data[\"actions\"]:\nfield_choices = {k: v[\"choices\"] for k, v in data[\"actions\"][\"POST\"].items() if \"choices\" in v}\nelif \"PUT\" in data[\"actions\"]:  # JobModelViewSet supports editing but not creation\nfield_choices = {k: v[\"choices\"] for k, v in data[\"actions\"][\"PUT\"].items() if \"choices\" in v}\nelse:\nself.fail(f\"Neither PUT nor POST are available actions in: {data['actions']}\")\n# Will successfully assert if field_choices has entries and will not fail if model as no enum choices\n# Broken down to provide better failure messages\nfor field, choices in field_choices.items():\nfor choice in choices:\nself.assertIn(\"display\", choice, f\"A choice in {field} is missing the display key\")\nself.assertIn(\"value\", choice, f\"A choice in {field} is missing the value key\")\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_options_returns_expected_choices(self):\n\"\"\"\n        Make an OPTIONS request for a list endpoint and validate choices match expected choices for serializer.\n        \"\"\"\n# Set self.choices_fields as empty set to compare classes that shouldn't have any choices on serializer.\nif not self.choices_fields:\nself.choices_fields = set()\n# Save self.user as superuser to be able to view available choices on list views.\nself.user.is_superuser = True\nself.user.save()\nresponse = self.client.options(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\ndata = response.json()\nself.assertIn(\"actions\", data)\n# Grab any field name that has choices defined (fields with enums)\nif \"POST\" in data[\"actions\"]:\nfield_choices = {k for k, v in data[\"actions\"][\"POST\"].items() if \"choices\" in v}\nelif \"PUT\" in data[\"actions\"]:  # JobModelViewSet supports editing but not creation\nfield_choices = {k for k, v in data[\"actions\"][\"PUT\"].items() if \"choices\" in v}\nelse:\nself.fail(f\"Neither PUT nor POST are available actions in: {data['actions']}\")\nself.assertEqual(\nset(self.choices_fields),\nfield_choices,\n\"All field names of choice fields for a given model serializer need to be manually added to \"\n\"self.choices_fields. If this is already the case, perhaps the serializer is implemented incorrectly?\",\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.UpdateObjectViewTestCase.test_bulk_update_objects","title":"<code>test_bulk_update_objects()</code>","text":"<p>PATCH a set of objects in a single request.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>def test_bulk_update_objects(self):\n\"\"\"\n    PATCH a set of objects in a single request.\n    \"\"\"\nif self.bulk_update_data is None:\nself.skipTest(\"Bulk update data not set\")\n# Add object-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nid_list = list(self._get_queryset().values_list(\"id\", flat=True)[:3])\nself.assertEqual(len(id_list), 3, \"Insufficient number of objects to test bulk update\")\ndata = [{\"id\": id, **self.bulk_update_data} for id in id_list]\nresponse = self.client.patch(self._get_list_url(), data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nfor i, obj in enumerate(response.data):\nfor field, _value in self.bulk_update_data.items():\nself.assertIn(\nfield,\nobj,\nf\"Bulk update field '{field}' missing from object {i} in response\",\n)\n# TODO(Glenn): shouldn't we also check that obj[field] == value?\nfor instance in self._get_queryset().filter(pk__in=id_list):\nself.assertInstanceEqual(\ninstance,\nself.bulk_update_data,\nexclude=self.validation_excluded_fields,\napi=True,\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.UpdateObjectViewTestCase.test_options_objects_returns_display_and_value","title":"<code>test_options_objects_returns_display_and_value()</code>","text":"<p>Make an OPTIONS request for a list endpoint and validate choices use the display and value keys.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_options_objects_returns_display_and_value(self):\n\"\"\"\n    Make an OPTIONS request for a list endpoint and validate choices use the display and value keys.\n    \"\"\"\n# Save self.user as superuser to be able to view available choices on list views.\nself.user.is_superuser = True\nself.user.save()\nresponse = self.client.options(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\ndata = response.json()\nself.assertIn(\"actions\", data)\n# Grab any field that has choices defined (fields with enums)\nif \"POST\" in data[\"actions\"]:\nfield_choices = {k: v[\"choices\"] for k, v in data[\"actions\"][\"POST\"].items() if \"choices\" in v}\nelif \"PUT\" in data[\"actions\"]:  # JobModelViewSet supports editing but not creation\nfield_choices = {k: v[\"choices\"] for k, v in data[\"actions\"][\"PUT\"].items() if \"choices\" in v}\nelse:\nself.fail(f\"Neither PUT nor POST are available actions in: {data['actions']}\")\n# Will successfully assert if field_choices has entries and will not fail if model as no enum choices\n# Broken down to provide better failure messages\nfor field, choices in field_choices.items():\nfor choice in choices:\nself.assertIn(\"display\", choice, f\"A choice in {field} is missing the display key\")\nself.assertIn(\"value\", choice, f\"A choice in {field} is missing the value key\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.UpdateObjectViewTestCase.test_options_returns_expected_choices","title":"<code>test_options_returns_expected_choices()</code>","text":"<p>Make an OPTIONS request for a list endpoint and validate choices match expected choices for serializer.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_options_returns_expected_choices(self):\n\"\"\"\n    Make an OPTIONS request for a list endpoint and validate choices match expected choices for serializer.\n    \"\"\"\n# Set self.choices_fields as empty set to compare classes that shouldn't have any choices on serializer.\nif not self.choices_fields:\nself.choices_fields = set()\n# Save self.user as superuser to be able to view available choices on list views.\nself.user.is_superuser = True\nself.user.save()\nresponse = self.client.options(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\ndata = response.json()\nself.assertIn(\"actions\", data)\n# Grab any field name that has choices defined (fields with enums)\nif \"POST\" in data[\"actions\"]:\nfield_choices = {k for k, v in data[\"actions\"][\"POST\"].items() if \"choices\" in v}\nelif \"PUT\" in data[\"actions\"]:  # JobModelViewSet supports editing but not creation\nfield_choices = {k for k, v in data[\"actions\"][\"PUT\"].items() if \"choices\" in v}\nelse:\nself.fail(f\"Neither PUT nor POST are available actions in: {data['actions']}\")\nself.assertEqual(\nset(self.choices_fields),\nfield_choices,\n\"All field names of choice fields for a given model serializer need to be manually added to \"\n\"self.choices_fields. If this is already the case, perhaps the serializer is implemented incorrectly?\",\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.UpdateObjectViewTestCase.test_update_object","title":"<code>test_update_object()</code>","text":"<p>PATCH a single object identified by its ID.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>def test_update_object(self):\n\"\"\"\n    PATCH a single object identified by its ID.\n    \"\"\"\nself.maxDiff = None\ninstance = self._get_queryset().first()\nurl = self._get_detail_url(instance)\nupdate_data = self.update_data or getattr(self, \"create_data\")[0]\n# Add object-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Verify that an empty PATCH results in no change to the object.\n# This is to catch issues like https://github.com/nautobot/nautobot/issues/3533\n# Add object-level permission for GET\nobj_perm.actions = [\"view\"]\nobj_perm.save()\n# Get initial serialized object representation\nget_response = self.client.get(url, **self.header)\nself.assertHttpStatus(get_response, status.HTTP_200_OK)\ninitial_serialized_object = get_response.json()\n# Work around for https://github.com/nautobot/nautobot/issues/3321\ninitial_serialized_object.pop(\"last_updated\", None)\n# Redefine object-level permission for PATCH\nobj_perm.actions = [\"change\"]\nobj_perm.save()\n# Send empty PATCH request\nresponse = self.client.patch(url, {}, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nserialized_object = response.json()\n# Work around for https://github.com/nautobot/nautobot/issues/3321\nserialized_object.pop(\"last_updated\", None)\n# PATCH response always includes \"opt-in\" fields, but GET response does not.\nserialized_object.pop(\"computed_fields\", None)\nserialized_object.pop(\"relationships\", None)\nself.assertEqual(initial_serialized_object, serialized_object)\n# Verify ObjectChange creation -- yes, even though nothing actually changed\n# This may change (hah) at some point -- see https://github.com/nautobot/nautobot/issues/3321\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, ObjectChangeActionChoices.ACTION_UPDATE)\nobjectchanges.delete()\n# Verify that a PATCH with some data updates that data correctly.\nresponse = self.client.patch(url, update_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\n# Check for unexpected side effects on fields we DIDN'T intend to update\nfor field in initial_serialized_object:\nif field not in update_data:\nself.assertEqual(initial_serialized_object[field], serialized_object[field])\ninstance.refresh_from_db()\nself.assertInstanceEqual(instance, update_data, exclude=self.validation_excluded_fields, api=True)\n# Verify ObjectChange creation\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, ObjectChangeActionChoices.ACTION_UPDATE)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.api.APIViewTestCases.UpdateObjectViewTestCase.test_update_object_without_permission","title":"<code>test_update_object_without_permission()</code>","text":"<p>PATCH a single object without permission.</p> Source code in <code>nautobot/utilities/testing/api.py</code> <pre><code>def test_update_object_without_permission(self):\n\"\"\"\n    PATCH a single object without permission.\n    \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\nupdate_data = self.update_data or getattr(self, \"create_data\")[0]\n# Try PATCH without permission\nwith disable_warnings(\"django.request\"):\nresponse = self.client.patch(url, update_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_403_FORBIDDEN)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.FilterTestCases","title":"<code>nautobot.apps.testing.FilterTestCases</code>","text":"Source code in <code>nautobot/utilities/testing/filters.py</code> <pre><code>@tag(\"unit\")\nclass FilterTestCases:\nclass BaseFilterTestCase(TestCase):\n\"\"\"Base class for testing of FilterSets.\"\"\"\ndef get_filterset_test_values(self, field_name, queryset=None):\n\"\"\"Returns a list of distinct values from the requested queryset field to use in filterset tests.\n            Returns a list for use in testing multiple choice filters. The size of the returned list is random\n            but will contain at minimum 2 unique values. The list of values will match at least 2 instances when\n            passed to the queryset's filter(field_name__in=[]) method but will fail to match at least one instance.\n            Args:\n                field_name (str): The name of the field to retrieve test values from.\n                queryset (QuerySet): The queryset to retrieve test values. Defaults to `self.queryset`.\n            Returns:\n                (list): A list of unique values derived from the queryset.\n            Raises:\n                ValueError: Raised if unable to find a combination of 2 or more unique values\n                    to filter the queryset to a subset of the total instances.\n            \"\"\"\ntest_values = []\nif queryset is None:\nqueryset = self.queryset\nqs_count = queryset.count()\nvalues_with_count = queryset.values(field_name).annotate(count=Count(field_name)).order_by(\"count\")\nfor value in values_with_count:\n# randomly break out of loop after 2 values have been selected\nif len(test_values) &gt; 1 and random.choice([True, False]):\nbreak\nif value[\"count\"] &lt; qs_count:\nqs_count -= value[\"count\"]\ntest_values.append(value[field_name])\nif len(test_values) &lt; 2:\nraise ValueError(\nf\"Cannot find valid test data for {queryset.model._meta.object_name} field {field_name}\"\n)\nreturn test_values\nclass FilterTestCase(BaseFilterTestCase):\n\"\"\"Add common tests for all FilterSets.\"\"\"\nqueryset = None\nfilterset = None\ndef test_id(self):\n\"\"\"Verify that the filterset supports filtering by id.\"\"\"\nparams = {\"id\": self.queryset.values_list(\"pk\", flat=True)[:2]}\nfilterset = self.filterset(params, self.queryset)\nself.assertTrue(filterset.is_valid())\nself.assertEqual(filterset.qs.count(), 2)\ndef test_invalid_filter(self):\n\"\"\"Verify that the filterset reports as invalid when initialized with an unsupported filter parameter.\"\"\"\nparams = {\"ice_cream_flavor\": [\"chocolate\"]}\nself.assertFalse(self.filterset(params, self.queryset).is_valid())\nclass NameSlugFilterTestCase(FilterTestCase):\n\"\"\"Add simple tests for filtering by name and by slug.\"\"\"\ndef test_name(self):\n\"\"\"Verify that the filterset supports filtering by name.\"\"\"\nparams = {\"name\": self.queryset.values_list(\"name\", flat=True)[:2]}\nfilterset = self.filterset(params, self.queryset)\nself.assertTrue(filterset.is_valid())\nself.assertEqual(filterset.qs.count(), 2)\ndef test_slug(self):\n\"\"\"Verify that the filterset supports filtering by slug.\"\"\"\nparams = {\"slug\": self.queryset.values_list(\"slug\", flat=True)[:2]}\nfilterset = self.filterset(params, self.queryset)\nself.assertTrue(filterset.is_valid())\nself.assertEqual(filterset.qs.count(), 2)\nclass TenancyFilterTestCaseMixin(TestCase):\n\"\"\"Add test cases for tenant and tenant-group filters.\"\"\"\ntenancy_related_name = \"\"\ndef test_tenant(self):\ntenants = list(Tenant.objects.filter(**{f\"{self.tenancy_related_name}__isnull\": False}))[:2]\nparams = {\"tenant_id\": [tenants[0].pk, tenants[1].pk]}\nself.assertQuerysetEqual(\nself.filterset(params, self.queryset).qs, self.queryset.filter(tenant__in=tenants), ordered=False\n)\nparams = {\"tenant\": [tenants[0].slug, tenants[1].slug]}\nself.assertQuerysetEqual(\nself.filterset(params, self.queryset).qs, self.queryset.filter(tenant__in=tenants), ordered=False\n)\ndef test_tenant_group(self):\ntenant_groups = list(\nTenantGroup.objects.filter(\ntenants__isnull=False, **{f\"tenants__{self.tenancy_related_name}__isnull\": False}\n)\n)[:2]\ntenant_groups_including_children = []\nfor tenant_group in tenant_groups:\ntenant_groups_including_children += tenant_group.get_descendants(include_self=True)\nparams = {\"tenant_group_id\": [tenant_groups[0].pk, tenant_groups[1].pk]}\nself.assertQuerysetEqual(\nself.filterset(params, self.queryset).qs,\nself.queryset.filter(tenant__group__in=tenant_groups_including_children),\nordered=False,\n)\nparams = {\"tenant_group\": [tenant_groups[0].slug, tenant_groups[1].slug]}\nself.assertQuerysetEqual(\nself.filterset(params, self.queryset).qs,\nself.queryset.filter(tenant__group__in=tenant_groups_including_children),\nordered=False,\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.filters.FilterTestCases.BaseFilterTestCase","title":"<code>BaseFilterTestCase</code>","text":"<p>             Bases: <code>TestCase</code></p> <p>Base class for testing of FilterSets.</p> Source code in <code>nautobot/utilities/testing/filters.py</code> <pre><code>class BaseFilterTestCase(TestCase):\n\"\"\"Base class for testing of FilterSets.\"\"\"\ndef get_filterset_test_values(self, field_name, queryset=None):\n\"\"\"Returns a list of distinct values from the requested queryset field to use in filterset tests.\n        Returns a list for use in testing multiple choice filters. The size of the returned list is random\n        but will contain at minimum 2 unique values. The list of values will match at least 2 instances when\n        passed to the queryset's filter(field_name__in=[]) method but will fail to match at least one instance.\n        Args:\n            field_name (str): The name of the field to retrieve test values from.\n            queryset (QuerySet): The queryset to retrieve test values. Defaults to `self.queryset`.\n        Returns:\n            (list): A list of unique values derived from the queryset.\n        Raises:\n            ValueError: Raised if unable to find a combination of 2 or more unique values\n                to filter the queryset to a subset of the total instances.\n        \"\"\"\ntest_values = []\nif queryset is None:\nqueryset = self.queryset\nqs_count = queryset.count()\nvalues_with_count = queryset.values(field_name).annotate(count=Count(field_name)).order_by(\"count\")\nfor value in values_with_count:\n# randomly break out of loop after 2 values have been selected\nif len(test_values) &gt; 1 and random.choice([True, False]):\nbreak\nif value[\"count\"] &lt; qs_count:\nqs_count -= value[\"count\"]\ntest_values.append(value[field_name])\nif len(test_values) &lt; 2:\nraise ValueError(\nf\"Cannot find valid test data for {queryset.model._meta.object_name} field {field_name}\"\n)\nreturn test_values\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.filters.FilterTestCases.BaseFilterTestCase.get_filterset_test_values","title":"<code>get_filterset_test_values(field_name, queryset=None)</code>","text":"<p>Returns a list of distinct values from the requested queryset field to use in filterset tests.</p> <p>Returns a list for use in testing multiple choice filters. The size of the returned list is random but will contain at minimum 2 unique values. The list of values will match at least 2 instances when passed to the queryset's filter(field_name__in=[]) method but will fail to match at least one instance.</p> <p>Parameters:</p> Name Type Description Default <code>field_name</code> <code>str</code> <p>The name of the field to retrieve test values from.</p> required <code>queryset</code> <code>QuerySet</code> <p>The queryset to retrieve test values. Defaults to <code>self.queryset</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>A list of unique values derived from the queryset.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Raised if unable to find a combination of 2 or more unique values to filter the queryset to a subset of the total instances.</p> Source code in <code>nautobot/utilities/testing/filters.py</code> <pre><code>def get_filterset_test_values(self, field_name, queryset=None):\n\"\"\"Returns a list of distinct values from the requested queryset field to use in filterset tests.\n    Returns a list for use in testing multiple choice filters. The size of the returned list is random\n    but will contain at minimum 2 unique values. The list of values will match at least 2 instances when\n    passed to the queryset's filter(field_name__in=[]) method but will fail to match at least one instance.\n    Args:\n        field_name (str): The name of the field to retrieve test values from.\n        queryset (QuerySet): The queryset to retrieve test values. Defaults to `self.queryset`.\n    Returns:\n        (list): A list of unique values derived from the queryset.\n    Raises:\n        ValueError: Raised if unable to find a combination of 2 or more unique values\n            to filter the queryset to a subset of the total instances.\n    \"\"\"\ntest_values = []\nif queryset is None:\nqueryset = self.queryset\nqs_count = queryset.count()\nvalues_with_count = queryset.values(field_name).annotate(count=Count(field_name)).order_by(\"count\")\nfor value in values_with_count:\n# randomly break out of loop after 2 values have been selected\nif len(test_values) &gt; 1 and random.choice([True, False]):\nbreak\nif value[\"count\"] &lt; qs_count:\nqs_count -= value[\"count\"]\ntest_values.append(value[field_name])\nif len(test_values) &lt; 2:\nraise ValueError(\nf\"Cannot find valid test data for {queryset.model._meta.object_name} field {field_name}\"\n)\nreturn test_values\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.filters.FilterTestCases.FilterTestCase","title":"<code>FilterTestCase</code>","text":"<p>             Bases: <code>BaseFilterTestCase</code></p> <p>Add common tests for all FilterSets.</p> Source code in <code>nautobot/utilities/testing/filters.py</code> <pre><code>class FilterTestCase(BaseFilterTestCase):\n\"\"\"Add common tests for all FilterSets.\"\"\"\nqueryset = None\nfilterset = None\ndef test_id(self):\n\"\"\"Verify that the filterset supports filtering by id.\"\"\"\nparams = {\"id\": self.queryset.values_list(\"pk\", flat=True)[:2]}\nfilterset = self.filterset(params, self.queryset)\nself.assertTrue(filterset.is_valid())\nself.assertEqual(filterset.qs.count(), 2)\ndef test_invalid_filter(self):\n\"\"\"Verify that the filterset reports as invalid when initialized with an unsupported filter parameter.\"\"\"\nparams = {\"ice_cream_flavor\": [\"chocolate\"]}\nself.assertFalse(self.filterset(params, self.queryset).is_valid())\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.filters.FilterTestCases.FilterTestCase.test_id","title":"<code>test_id()</code>","text":"<p>Verify that the filterset supports filtering by id.</p> Source code in <code>nautobot/utilities/testing/filters.py</code> <pre><code>def test_id(self):\n\"\"\"Verify that the filterset supports filtering by id.\"\"\"\nparams = {\"id\": self.queryset.values_list(\"pk\", flat=True)[:2]}\nfilterset = self.filterset(params, self.queryset)\nself.assertTrue(filterset.is_valid())\nself.assertEqual(filterset.qs.count(), 2)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.filters.FilterTestCases.FilterTestCase.test_invalid_filter","title":"<code>test_invalid_filter()</code>","text":"<p>Verify that the filterset reports as invalid when initialized with an unsupported filter parameter.</p> Source code in <code>nautobot/utilities/testing/filters.py</code> <pre><code>def test_invalid_filter(self):\n\"\"\"Verify that the filterset reports as invalid when initialized with an unsupported filter parameter.\"\"\"\nparams = {\"ice_cream_flavor\": [\"chocolate\"]}\nself.assertFalse(self.filterset(params, self.queryset).is_valid())\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.filters.FilterTestCases.NameSlugFilterTestCase","title":"<code>NameSlugFilterTestCase</code>","text":"<p>             Bases: <code>FilterTestCase</code></p> <p>Add simple tests for filtering by name and by slug.</p> Source code in <code>nautobot/utilities/testing/filters.py</code> <pre><code>class NameSlugFilterTestCase(FilterTestCase):\n\"\"\"Add simple tests for filtering by name and by slug.\"\"\"\ndef test_name(self):\n\"\"\"Verify that the filterset supports filtering by name.\"\"\"\nparams = {\"name\": self.queryset.values_list(\"name\", flat=True)[:2]}\nfilterset = self.filterset(params, self.queryset)\nself.assertTrue(filterset.is_valid())\nself.assertEqual(filterset.qs.count(), 2)\ndef test_slug(self):\n\"\"\"Verify that the filterset supports filtering by slug.\"\"\"\nparams = {\"slug\": self.queryset.values_list(\"slug\", flat=True)[:2]}\nfilterset = self.filterset(params, self.queryset)\nself.assertTrue(filterset.is_valid())\nself.assertEqual(filterset.qs.count(), 2)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.filters.FilterTestCases.NameSlugFilterTestCase.test_name","title":"<code>test_name()</code>","text":"<p>Verify that the filterset supports filtering by name.</p> Source code in <code>nautobot/utilities/testing/filters.py</code> <pre><code>def test_name(self):\n\"\"\"Verify that the filterset supports filtering by name.\"\"\"\nparams = {\"name\": self.queryset.values_list(\"name\", flat=True)[:2]}\nfilterset = self.filterset(params, self.queryset)\nself.assertTrue(filterset.is_valid())\nself.assertEqual(filterset.qs.count(), 2)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.filters.FilterTestCases.NameSlugFilterTestCase.test_slug","title":"<code>test_slug()</code>","text":"<p>Verify that the filterset supports filtering by slug.</p> Source code in <code>nautobot/utilities/testing/filters.py</code> <pre><code>def test_slug(self):\n\"\"\"Verify that the filterset supports filtering by slug.\"\"\"\nparams = {\"slug\": self.queryset.values_list(\"slug\", flat=True)[:2]}\nfilterset = self.filterset(params, self.queryset)\nself.assertTrue(filterset.is_valid())\nself.assertEqual(filterset.qs.count(), 2)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.filters.FilterTestCases.TenancyFilterTestCaseMixin","title":"<code>TenancyFilterTestCaseMixin</code>","text":"<p>             Bases: <code>TestCase</code></p> <p>Add test cases for tenant and tenant-group filters.</p> Source code in <code>nautobot/utilities/testing/filters.py</code> <pre><code>class TenancyFilterTestCaseMixin(TestCase):\n\"\"\"Add test cases for tenant and tenant-group filters.\"\"\"\ntenancy_related_name = \"\"\ndef test_tenant(self):\ntenants = list(Tenant.objects.filter(**{f\"{self.tenancy_related_name}__isnull\": False}))[:2]\nparams = {\"tenant_id\": [tenants[0].pk, tenants[1].pk]}\nself.assertQuerysetEqual(\nself.filterset(params, self.queryset).qs, self.queryset.filter(tenant__in=tenants), ordered=False\n)\nparams = {\"tenant\": [tenants[0].slug, tenants[1].slug]}\nself.assertQuerysetEqual(\nself.filterset(params, self.queryset).qs, self.queryset.filter(tenant__in=tenants), ordered=False\n)\ndef test_tenant_group(self):\ntenant_groups = list(\nTenantGroup.objects.filter(\ntenants__isnull=False, **{f\"tenants__{self.tenancy_related_name}__isnull\": False}\n)\n)[:2]\ntenant_groups_including_children = []\nfor tenant_group in tenant_groups:\ntenant_groups_including_children += tenant_group.get_descendants(include_self=True)\nparams = {\"tenant_group_id\": [tenant_groups[0].pk, tenant_groups[1].pk]}\nself.assertQuerysetEqual(\nself.filterset(params, self.queryset).qs,\nself.queryset.filter(tenant__group__in=tenant_groups_including_children),\nordered=False,\n)\nparams = {\"tenant_group\": [tenant_groups[0].slug, tenant_groups[1].slug]}\nself.assertQuerysetEqual(\nself.filterset(params, self.queryset).qs,\nself.queryset.filter(tenant__group__in=tenant_groups_including_children),\nordered=False,\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.ViewTestCases","title":"<code>nautobot.apps.testing.ViewTestCases</code>","text":"<p>We keep any TestCases with test_* methods inside a class to prevent unittest from trying to run them.</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>@tag(\"unit\")\nclass ViewTestCases:\n\"\"\"\n    We keep any TestCases with test_* methods inside a class to prevent unittest from trying to run them.\n    \"\"\"\nclass GetObjectViewTestCase(ModelViewTestCase):\n\"\"\"\n        Retrieve a single instance.\n        \"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_get_object_anonymous(self):\n# Make the request as an unauthenticated user\nself.client.logout()\nresponse = self.client.get(self._get_queryset().first().get_absolute_url())\nself.assertHttpStatus(response, 200)\nresponse_body = response.content.decode(response.charset)\nself.assertIn(\n\"/login/?next=\" + self._get_queryset().first().get_absolute_url(), response_body, msg=response_body\n)\n# The \"Change Log\" tab should appear in the response since we have all exempt permissions\nif issubclass(self.model, ChangeLoggedModel):\nresponse_body = extract_page_body(response.content.decode(response.charset))\nself.assertIn(\"Change Log\", response_body, msg=response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object_without_permission(self):\ninstance = self._get_queryset().first()\n# Try GET without permission\nwith disable_warnings(\"django.request\"):\nresponse = self.client.get(instance.get_absolute_url())\nself.assertHttpStatus(response, [403, 404])\nresponse_body = response.content.decode(response.charset)\nself.assertNotIn(\"/login/\", response_body, msg=response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object_with_permission(self):\ninstance = self._get_queryset().first()\n# Add model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nresponse = self.client.get(instance.get_absolute_url())\nself.assertHttpStatus(response, 200)\nresponse_body = extract_page_body(response.content.decode(response.charset))\n# The object's display name or string representation should appear in the response\nself.assertIn(escape(getattr(instance, \"display\", str(instance))), response_body, msg=response_body)\n# If any Relationships are defined, they should appear in the response\nif self.relationships is not None:\nfor relationship in self.relationships:  # false positive pylint: disable=not-an-iterable\ncontent_type = ContentType.objects.get_for_model(instance)\nif content_type == relationship.source_type:\nself.assertIn(\nescape(relationship.get_label(RelationshipSideChoices.SIDE_SOURCE)),\nresponse_body,\nmsg=response_body,\n)\nif content_type == relationship.destination_type:\nself.assertIn(\nescape(relationship.get_label(RelationshipSideChoices.SIDE_DESTINATION)),\nresponse_body,\nmsg=response_body,\n)\n# If any Custom Fields are defined, they should appear in the response\nif self.custom_fields is not None:\nfor custom_field in self.custom_fields:  # false positive pylint: disable=not-an-iterable\nself.assertIn(escape(str(custom_field)), response_body, msg=response_body)\n# 2.0 TODO: #824 custom_field.slug rather than custom_field.name\nif custom_field.type == CustomFieldTypeChoices.TYPE_MULTISELECT:\nfor value in instance.cf.get(custom_field.name):\nself.assertIn(escape(str(value)), response_body, msg=response_body)\nelse:\nself.assertIn(\nescape(str(instance.cf.get(custom_field.name) or \"\")), response_body, msg=response_body\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object_with_constrained_permission(self):\ninstance1, instance2 = self._get_queryset().all()[:2]\n# Add object-level permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\n# To get a different rendering flow than the `test_get_object_with_permission` test above,\n# enable additional permissions for this object so that add/edit/delete buttons are rendered.\nactions=[\"view\", \"add\", \"change\", \"delete\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET to permitted object\nself.assertHttpStatus(self.client.get(instance1.get_absolute_url()), 200)\n# Try GET to non-permitted object\nself.assertHttpStatus(self.client.get(instance2.get_absolute_url()), 404)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_has_advanced_tab(self):\ninstance = self._get_queryset().first()\n# Add model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nresponse = self.client.get(instance.get_absolute_url())\nresponse_body = extract_page_body(response.content.decode(response.charset))\nadvanced_tab_href = f\"{instance.get_absolute_url()}#advanced\"\nself.assertIn(advanced_tab_href, response_body)\nself.assertIn(\"Advanced\", response_body)\nclass GetObjectChangelogViewTestCase(ModelViewTestCase):\n\"\"\"\n        View the changelog for an instance.\n        \"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_get_object_changelog(self):\nurl = self._get_url(\"changelog\", self._get_queryset().first())\nresponse = self.client.get(url)\nself.assertHttpStatus(response, 200)\nclass GetObjectNotesViewTestCase(ModelViewTestCase):\n\"\"\"\n        View the notes for an instance.\n        \"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_get_object_notes(self):\nif hasattr(self.model, \"notes\"):\nurl = self._get_url(\"notes\", self._get_queryset().first())\nresponse = self.client.get(url)\nself.assertHttpStatus(response, 200)\nclass CreateObjectViewTestCase(ModelViewTestCase):\n\"\"\"\n        Create a single new instance.\n        :form_data: Data to be used when creating a new object.\n        \"\"\"\nform_data = {}\nslug_source = None\nslugify_function = staticmethod(slugify)\nslug_test_object = \"\"\ndef test_create_object_without_permission(self):\n# Try GET without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(self._get_url(\"add\")), 403)\n# Try POST without permission\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": post_data(self.form_data),\n}\nresponse = self.client.post(**request)\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(response, 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_create_object_with_permission(self):\ninitial_count = self._get_queryset().count()\n# Assign unconstrained permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"add\")), 200)\n# Try POST with model-level permission\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nself.assertEqual(initial_count + 1, self._get_queryset().count())\n# order_by() is no supported by django TreeNode,\n# So we directly retrieve the instance by \"slug\".\nif isinstance(self._get_queryset().first(), TreeNode):\ninstance = self._get_queryset().get(slug=self.form_data.get(\"slug\"))\nself.assertInstanceEqual(instance, self.form_data)\nelse:\nif hasattr(self.model, \"last_updated\"):\ninstance = self._get_queryset().order_by(\"last_updated\").last()\nself.assertInstanceEqual(instance, self.form_data)\nelse:\ninstance = self._get_queryset().last()\nself.assertInstanceEqual(instance, self.form_data)\nif hasattr(self.model, \"to_objectchange\"):\n# Verify ObjectChange creation\nobjectchanges = get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, ObjectChangeActionChoices.ACTION_CREATE)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_create_object_with_constrained_permission(self):\ninitial_count = self._get_queryset().count()\n# Assign constrained permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": str(uuid.uuid4())},  # Match a non-existent pk (i.e., deny all)\nactions=[\"add\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with object-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"add\")), 200)\n# Try to create an object (not permitted)\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 200)\nself.assertEqual(initial_count, self._get_queryset().count())  # Check that no object was created\n# Update the ObjectPermission to allow creation\nobj_perm.constraints = {\"pk__isnull\": False}\nobj_perm.save()\n# Try to create an object (permitted)\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nself.assertEqual(initial_count + 1, self._get_queryset().count())\n# order_by() is no supported by django TreeNode,\n# So we directly retrieve the instance by \"slug\".\nif isinstance(self._get_queryset().first(), TreeNode):\ninstance = self._get_queryset().get(slug=self.form_data.get(\"slug\"))\nself.assertInstanceEqual(instance, self.form_data)\nelse:\nif hasattr(self.model, \"last_updated\"):\nself.assertInstanceEqual(self._get_queryset().order_by(\"last_updated\").last(), self.form_data)\nelse:\nself.assertInstanceEqual(self._get_queryset().last(), self.form_data)\ndef test_slug_autocreation(self):\n\"\"\"Test that slug is autocreated through ORM.\"\"\"\n# This really should go on a models test page, but we don't have test structures for models.\nif self.slug_source is not None:\nobj = self.model.objects.get(**{self.slug_source: self.slug_test_object})\nexpected_slug = self.slugify_function(getattr(obj, self.slug_source))\nself.assertEqual(obj.slug, expected_slug)\ndef test_slug_not_modified(self):\n\"\"\"Ensure save method does not modify slug that is passed in.\"\"\"\n# This really should go on a models test page, but we don't have test structures for models.\nif self.slug_source is not None:\nnew_slug_source_value = \"kwyjibo\"\nobj = self.model.objects.get(**{self.slug_source: self.slug_test_object})\nexpected_slug = self.slugify_function(getattr(obj, self.slug_source))\n# Update slug source field str\nfilter_ = self.slug_source + \"__exact\"\nself.model.objects.filter(**{filter_: self.slug_test_object}).update(\n**{self.slug_source: new_slug_source_value}\n)\nobj.refresh_from_db()\nself.assertEqual(getattr(obj, self.slug_source), new_slug_source_value)\nself.assertEqual(obj.slug, expected_slug)\nclass EditObjectViewTestCase(ModelViewTestCase):\n\"\"\"\n        Edit a single existing instance.\n        :form_data: Data to be used when updating the first existing object.\n        \"\"\"\nform_data = {}\ndef test_edit_object_without_permission(self):\ninstance = self._get_queryset().first()\n# Try GET without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(self._get_url(\"edit\", instance)), [403, 404])\n# Try POST without permission\nrequest = {\n\"path\": self._get_url(\"edit\", instance),\n\"data\": post_data(self.form_data),\n}\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(**request), [403, 404])\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_edit_object_with_permission(self):\ninstance = self._get_queryset().first()\n# Assign model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"edit\", instance)), 200)\n# Try POST with model-level permission\nrequest = {\n\"path\": self._get_url(\"edit\", instance),\n\"data\": post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nself.assertInstanceEqual(self._get_queryset().get(pk=instance.pk), self.form_data)\nif hasattr(self.model, \"to_objectchange\"):\n# Verify ObjectChange creation\nobjectchanges = get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, ObjectChangeActionChoices.ACTION_UPDATE)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_edit_object_with_constrained_permission(self):\ninstance1, instance2 = self._get_queryset().all()[:2]\n# Assign constrained permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\nactions=[\"change\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with a permitted object\nself.assertHttpStatus(self.client.get(self._get_url(\"edit\", instance1)), 200)\n# Try GET with a non-permitted object\nself.assertHttpStatus(self.client.get(self._get_url(\"edit\", instance2)), 404)\n# Try to edit a permitted object\nrequest = {\n\"path\": self._get_url(\"edit\", instance1),\n\"data\": post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nself.assertInstanceEqual(self._get_queryset().get(pk=instance1.pk), self.form_data)\n# Try to edit a non-permitted object\nrequest = {\n\"path\": self._get_url(\"edit\", instance2),\n\"data\": post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 404)\nclass DeleteObjectViewTestCase(ModelViewTestCase):\n\"\"\"\n        Delete a single instance.\n        \"\"\"\ndef get_deletable_object(self):\n\"\"\"\n            Get an instance that can be deleted.\n            For some models this may just be any random object, but when we have FKs with `on_delete=models.PROTECT`\n            (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n            \"\"\"\ninstance = get_deletable_objects(self.model, self._get_queryset()).first()\nif instance is None:\nself.fail(\"Couldn't find a single deletable object!\")\nreturn instance\ndef test_delete_object_without_permission(self):\ninstance = self.get_deletable_object()\n# Try GET without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(self._get_url(\"delete\", instance)), [403, 404])\n# Try POST without permission\nrequest = {\n\"path\": self._get_url(\"delete\", instance),\n\"data\": post_data({\"confirm\": True}),\n}\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(**request), [403, 404])\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_delete_object_with_permission(self):\ninstance = self.get_deletable_object()\n# Assign model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"delete\", instance)), 200)\n# Try POST with model-level permission\nrequest = {\n\"path\": self._get_url(\"delete\", instance),\n\"data\": post_data({\"confirm\": True}),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nwith self.assertRaises(ObjectDoesNotExist):\nself._get_queryset().get(pk=instance.pk)\nif hasattr(self.model, \"to_objectchange\"):\n# Verify ObjectChange creation\nobjectchanges = get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, ObjectChangeActionChoices.ACTION_DELETE)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_delete_object_with_permission_and_xwwwformurlencoded(self):\ninstance = self.get_deletable_object()\n# Assign model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"delete\", instance)), 200)\n# Try POST with model-level permission\nrequest = {\n\"path\": self._get_url(\"delete\", instance),\n\"data\": urlencode({\"confirm\": True}),\n\"content_type\": \"application/x-www-form-urlencoded\",\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nwith self.assertRaises(ObjectDoesNotExist):\nself._get_queryset().get(pk=instance.pk)\nif hasattr(self.model, \"to_objectchange\"):\n# Verify ObjectChange creation\nobjectchanges = get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, ObjectChangeActionChoices.ACTION_DELETE)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_delete_object_with_constrained_permission(self):\ninstance1 = self.get_deletable_object()\ninstance2 = self._get_queryset().exclude(pk=instance1.pk)[0]\n# Assign object-level permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\nactions=[\"delete\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with a permitted object\nself.assertHttpStatus(self.client.get(self._get_url(\"delete\", instance1)), 200)\n# Try GET with a non-permitted object\nself.assertHttpStatus(self.client.get(self._get_url(\"delete\", instance2)), 404)\n# Try to delete a permitted object\nrequest = {\n\"path\": self._get_url(\"delete\", instance1),\n\"data\": post_data({\"confirm\": True}),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nwith self.assertRaises(ObjectDoesNotExist):\nself._get_queryset().get(pk=instance1.pk)\n# Try to delete a non-permitted object\n# Note that in the case of tree models, deleting instance1 above may have cascade-deleted to instance2,\n# so to be safe, we need to get another object instance that definitely exists:\ninstance3 = self._get_queryset().first()\nrequest = {\n\"path\": self._get_url(\"delete\", instance3),\n\"data\": post_data({\"confirm\": True}),\n}\nself.assertHttpStatus(self.client.post(**request), 404)\nself.assertTrue(self._get_queryset().filter(pk=instance3.pk).exists())\nclass ListObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n        Retrieve multiple instances.\n        \"\"\"\nfilterset = None\ndef get_filterset(self):\nreturn self.filterset or get_filterset_for_model(self.model)\n# Helper methods to be overriden by special cases.\n# See ConsoleConnectionsTestCase, InterfaceConnectionsTestCase and PowerConnectionsTestCase\ndef get_list_url(self):\nreturn reverse(validated_viewname(self.model, \"list\"))\ndef get_title(self):\nreturn bettertitle(self.model._meta.verbose_name_plural)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_list_objects_anonymous(self):\n# Make the request as an unauthenticated user\nself.client.logout()\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 200)\nresponse_body = response.content.decode(response.charset)\nself.assertIn(\"/login/?next=\" + self._get_url(\"list\"), response_body, msg=response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_list_objects_filtered(self):\ninstance1, instance2 = self._get_queryset().all()[:2]\nresponse = self.client.get(f\"{self._get_url('list')}?id={instance1.pk}\")\nself.assertHttpStatus(response, 200)\ncontent = extract_page_body(response.content.decode(response.charset))\n# TODO: it'd make test failures more readable if we strip the page headers/footers from the content\nif hasattr(self.model, \"name\"):\nself.assertRegex(content, r\"&gt;\\s*\" + re.escape(escape(instance1.name)) + r\"\\s*&lt;\", msg=content)\nself.assertNotRegex(content, r\"&gt;\\s*\" + re.escape(escape(instance2.name)) + r\"\\s*&lt;\", msg=content)\ntry:\nself.assertIn(self._get_url(\"view\", instance=instance1), content, msg=content)\nself.assertNotIn(self._get_url(\"view\", instance=instance2), content, msg=content)\nexcept NoReverseMatch:\npass\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"], STRICT_FILTERING=True)\ndef test_list_objects_unknown_filter_strict_filtering(self):\n\"\"\"Verify that with STRICT_FILTERING, an unknown filter results in an error message and no matches.\"\"\"\nresponse = self.client.get(f\"{self._get_url('list')}?ice_cream_flavor=chocolate\")\nself.assertHttpStatus(response, 200)\ncontent = extract_page_body(response.content.decode(response.charset))\n# TODO: it'd make test failures more readable if we strip the page headers/footers from the content\nself.assertIn(\"Unknown filter field\", content, msg=content)\n# There should be no table rows displayed except for the empty results row\nself.assertIn(f\"No {self.model._meta.verbose_name_plural} found\", content, msg=content)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"], STRICT_FILTERING=False)\ndef test_list_objects_unknown_filter_no_strict_filtering(self):\n\"\"\"Verify that without STRICT_FILTERING, an unknown filter is ignored.\"\"\"\ninstance1, instance2 = self._get_queryset().all()[:2]\nwith self.assertLogs(\"nautobot.utilities.filters\") as cm:\nresponse = self.client.get(f\"{self._get_url('list')}?ice_cream_flavor=chocolate\")\nfilterset = self.get_filterset()\nif not filterset:\nself.fail(\nf\"Couldn't find filterset for model {self.model}. The FilterSet class is expected to be in the \"\n\"filters module within the application associated with the model and its name is expected to be \"\nf\"{self.model.__name__}FilterSet.\"\n)\nself.assertEqual(\ncm.output,\n[\nf\"WARNING:nautobot.utilities.filters:{filterset.__name__}: \"\n'Unknown filter field \"ice_cream_flavor\"',\n],\n)\nself.assertHttpStatus(response, 200)\ncontent = extract_page_body(response.content.decode(response.charset))\n# TODO: it'd make test failures more readable if we strip the page headers/footers from the content\nself.assertNotIn(\"Unknown filter field\", content, msg=content)\nself.assertNotIn(f\"No {self.model._meta.verbose_name_plural} found\", content, msg=content)\nif hasattr(self.model, \"name\"):\n# TODO: https://github.com/nautobot/nautobot/issues/2580\n#       This is fragile as we move toward more autogenerated test fixtures,\n#       as \"instance.name\" may appear coincidentally in other page text if we're not careful.\nself.assertIn(escape(instance1.name), content, msg=content)\nself.assertIn(escape(instance2.name), content, msg=content)\ntry:\nself.assertIn(self._get_url(\"view\", instance=instance1), content, msg=content)\nself.assertIn(self._get_url(\"view\", instance=instance2), content, msg=content)\nexcept NoReverseMatch:\npass\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_without_permission(self):\n# Try GET without permission\nwith disable_warnings(\"django.request\"):\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 403)\nresponse_body = response.content.decode(response.charset)\nself.assertNotIn(\"/login/\", response_body, msg=response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_with_permission(self):\n# Add model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 200)\nresponse_body = response.content.decode(response.charset)\nlist_url = self.get_list_url()\ntitle = self.get_title()\n# Check if breadcrumb is rendered correctly\nself.assertIn(\nf'&lt;a href=\"{list_url}\"&gt;{title}&lt;/a&gt;',\nresponse_body,\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_with_constrained_permission(self):\ninstance1, instance2 = self._get_queryset().all()[:2]\n# Add object-level permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with object-level permission\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 200)\ncontent = extract_page_body(response.content.decode(response.charset))\n# TODO: it'd make test failures more readable if we strip the page headers/footers from the content\nif hasattr(self.model, \"name\"):\nself.assertIn(escape(instance1.name), content, msg=content)\nself.assertNotIn(escape(instance2.name), content, msg=content)\nelif hasattr(self.model, \"get_absolute_url\"):\nself.assertIn(instance1.get_absolute_url(), content, msg=content)\nself.assertNotIn(instance2.get_absolute_url(), content, msg=content)\n@skipIf(\n\"example_plugin\" not in settings.PLUGINS,\n\"example_plugin not in settings.PLUGINS\",\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_view_plugin_banner(self):\n\"\"\"\n            If example plugin is installed, check if the plugin banner is rendered correctly in ObjectListView.\n            \"\"\"\n# Add model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 200)\nresponse_body = response.content.decode(response.charset)\n# Check plugin banner is rendered correctly\nself.assertIn(\nf\"&lt;div&gt;You are viewing a table of {self.model._meta.verbose_name_plural}&lt;/div&gt;\", response_body\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_queryset_to_csv(self):\n# Built-in CSV export\nif not hasattr(self.model, \"csv_headers\"):\nself.skipTest(f\"{self.model} has no csv_headers attribute?\")\nresponse = self.client.get(f\"{self._get_url('list')}?export\")\nself.assertHttpStatus(response, 200)\nself.assertEqual(response.get(\"Content-Type\"), \"text/csv\")\ninstance1 = self._get_queryset().first()\n# With filtering\nresponse = self.client.get(f\"{self._get_url('list')}?export&amp;id={instance1.pk}\")\nself.assertHttpStatus(response, 200)\nself.assertEqual(response.get(\"Content-Type\"), \"text/csv\")\nresponse_body = response.content.decode(response.charset)\nreader = csv.DictReader(StringIO(response_body))\n# This line will make data a dictionary with csv headers as keys and corresponding csv values as values.\n# For example:\n# {'name': 'AFRINIC', 'slug': 'afrinic', 'is_private': '', 'description': ...'}\ndata = [dict(row) for row in reader][0]\n# Get expected data\ninstance1_unformatted_data = [\n*instance1.to_csv(),\n*instance1.get_custom_fields().values(),\n]\n# Format expected data using `csv_format`, parse back with `csv` and get first row\ninstance1_csv_data = next(iter(csv.reader([csv_format(instance1_unformatted_data)])))\ninstance1_cf_headers = [\"cf_\" + str(cf.slug) for cf in instance1.get_custom_fields().keys()]\ninstance1_csv_headers = list(self.model.csv_headers) + instance1_cf_headers\nself.assertEqual(instance1_csv_headers, list(data.keys()))\nself.assertEqual(instance1_csv_data, list(data.values()))\nclass CreateMultipleObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n        Create multiple instances using a single form. Expects the creation of three new instances by default.\n        :bulk_create_count: The number of objects expected to be created (default: 3).\n        :bulk_create_data: A dictionary of data to be used for bulk object creation.\n        \"\"\"\nbulk_create_count = 3\nbulk_create_data = {}\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_create_multiple_objects_without_permission(self):\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": post_data(self.bulk_create_data),\n}\n# Try POST without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(**request), 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_create_multiple_objects_with_permission(self):\ninitial_count = self._get_queryset().count()\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": post_data(self.bulk_create_data),\n}\n# Assign non-constrained permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nactions=[\"add\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Bulk create objects\nresponse = self.client.post(**request)\nself.assertHttpStatus(response, 302)\nself.assertEqual(initial_count + self.bulk_create_count, self._get_queryset().count())\nmatching_count = 0\nfor instance in self._get_queryset().all():\ntry:\nself.assertInstanceEqual(instance, self.bulk_create_data)\nmatching_count += 1\nexcept AssertionError:\npass\nself.assertEqual(matching_count, self.bulk_create_count)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_create_multiple_objects_with_constrained_permission(self):\ninitial_count = self._get_queryset().count()\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": post_data(self.bulk_create_data),\n}\n# Assign constrained permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nactions=[\"add\"],\nconstraints={\"pk\": uuid.uuid4()},  # Match a non-existent pk (i.e., deny all)\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Attempt to make the request with unmet constraints\nself.assertHttpStatus(self.client.post(**request), 200)\nself.assertEqual(self._get_queryset().count(), initial_count)\n# Update the ObjectPermission to allow creation\nobj_perm.constraints = {\"pk__isnull\": False}  # Set constraint to allow all\nobj_perm.save()\nresponse = self.client.post(**request)\nself.assertHttpStatus(response, 302)\nself.assertEqual(initial_count + self.bulk_create_count, self._get_queryset().count())\nmatching_count = 0\nfor instance in self._get_queryset().all():\ntry:\nself.assertInstanceEqual(instance, self.bulk_create_data)\nmatching_count += 1\nexcept AssertionError:\npass\nself.assertEqual(matching_count, self.bulk_create_count)\nclass BulkImportObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n        Create multiple instances from imported data.\n        :csv_data: A list of CSV-formatted lines (starting with the headers) to be used for bulk object import.\n        \"\"\"\ncsv_data = ()\ndef _get_csv_data(self):\nreturn \"\\n\".join(self.csv_data)\ndef test_bulk_import_objects_without_permission(self):\ndata = {\n\"csv_data\": self._get_csv_data(),\n}\n# Test GET without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(self._get_url(\"import\")), 403)\n# Try POST without permission\nresponse = self.client.post(self._get_url(\"import\"), data)\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(response, 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_import_objects_with_permission(self):\ninitial_count = self._get_queryset().count()\ndata = {\n\"csv_data\": self._get_csv_data(),\n}\n# Assign model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"import\")), 200)\n# Test POST with permission\nself.assertHttpStatus(self.client.post(self._get_url(\"import\"), data), 200)\nself.assertEqual(self._get_queryset().count(), initial_count + len(self.csv_data) - 1)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_import_objects_with_permission_csv_file(self):\ninitial_count = self._get_queryset().count()\nself.file_contents = bytes(self._get_csv_data(), \"utf-8\")\nself.bulk_import_file = SimpleUploadedFile(name=\"bulk_import_data.csv\", content=self.file_contents)\ndata = {\n\"csv_file\": self.bulk_import_file,\n}\n# Assign model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"import\")), 200)\n# Test POST with permission\nself.assertHttpStatus(self.client.post(self._get_url(\"import\"), data), 200)\nself.assertEqual(self._get_queryset().count(), initial_count + len(self.csv_data) - 1)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_import_objects_with_constrained_permission(self):\ninitial_count = self._get_queryset().count()\ndata = {\n\"csv_data\": self._get_csv_data(),\n}\n# Assign constrained permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": str(uuid.uuid4())},  # Match a non-existent pk (i.e., deny all)\nactions=[\"add\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Attempt to import non-permitted objects\nself.assertHttpStatus(self.client.post(self._get_url(\"import\"), data), 200)\nself.assertEqual(self._get_queryset().count(), initial_count)\n# Update permission constraints\nobj_perm.constraints = {\"pk__isnull\": False}  # Set permission to allow all\nobj_perm.save()\n# Import permitted objects\nself.assertHttpStatus(self.client.post(self._get_url(\"import\"), data), 200)\nself.assertEqual(self._get_queryset().count(), initial_count + len(self.csv_data) - 1)\nclass BulkEditObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n        Edit multiple instances.\n        :bulk_edit_data: A dictionary of data to be used when bulk editing a set of objects. This data should differ\n                         from that used for initial object creation within setUpTestData().\n        \"\"\"\nbulk_edit_data = {}\ndef test_bulk_edit_objects_without_permission(self):\npk_list = list(self._get_queryset().values_list(\"pk\", flat=True)[:3])\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\n# Try POST without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_edit\"), data), 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_edit_objects_with_permission(self):\npk_list = list(self._get_queryset().values_list(\"pk\", flat=True)[:3])\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\n# Append the form data to the request\ndata.update(post_data(self.bulk_edit_data))\n# Assign model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try POST with model-level permission\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_edit\"), data), 302)\nfor instance in self._get_queryset().filter(pk__in=pk_list):\nself.assertInstanceEqual(instance, self.bulk_edit_data)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_edit_form_contains_all_pks(self):\n# We are testing the intermediary step of bulk_edit with pagination applied.\n# i.e. \"_all\" passed in the form.\npk_list = self._get_queryset().values_list(\"pk\", flat=True)\n# We only pass in one pk to test the functionality of \"_all\"\n# which should grab all instance pks regardless of \"pk\"\nselected_data = {\n\"pk\": pk_list[:1],\n\"_all\": \"on\",\n}\n# Assign model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try POST with model-level permission\nresponse = self.client.post(self._get_url(\"bulk_edit\"), selected_data)\n# Expect a 200 status cause we are only rendering the bulk edit table.\n# after pressing Edit Selected button.\nself.assertHttpStatus(response, 200)\nresponse_body = extract_page_body(response.content.decode(response.charset))\n# Check if all the pks are passed into the BulkEditForm/BulkUpdateForm\nfor pk in pk_list:\nself.assertIn(f'&lt;input type=\"hidden\" name=\"pk\" value=\"{pk}\"', response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_edit_objects_with_constrained_permission(self):\n# Select some objects that are *not* already set to match the first value in self.bulk_edit_data or null.\n# We have to exclude null cases because Django filter()/exclude() doesn't like `__in=[None]` as a case.\nattr_name = list(self.bulk_edit_data.keys())[0]\nobjects = (\nself._get_queryset()\n.exclude(**{attr_name: self.bulk_edit_data[attr_name]})\n.exclude(**{f\"{attr_name}__isnull\": True})\n)[:3]\nself.assertEqual(objects.count(), 3)\npk_list = list(objects.values_list(\"pk\", flat=True))\n# Define a permission that permits the above objects, but will not permit them after updating them.\nfield = self.model._meta.get_field(attr_name)\nvalues = [field.value_from_object(obj) for obj in objects]\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={f\"{attr_name}__in\": values},\nactions=[\"change\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Build form data\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\ndata.update(post_data(self.bulk_edit_data))\n# Attempt to bulk edit permitted objects into a non-permitted state\nresponse = self.client.post(self._get_url(\"bulk_edit\"), data)\n# 200 because we're sent back to the edit form to try again; if the update were successful it'd be a 302\nself.assertHttpStatus(response, 200)\n# Assert that the objects are NOT updated\nfor instance in self._get_queryset().filter(pk__in=pk_list):\nself.assertIn(field.value_from_object(instance), values)\nself.assertNotEqual(field.value_from_object(instance), self.bulk_edit_data[attr_name])\n# Update permission constraints to permit all objects\nobj_perm.constraints = {\"pk__gt\": 0}\nobj_perm.save()\n# Bulk edit permitted objects and expect a redirect back to the list view\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_edit\"), data), 302)\n# Assert that the objects were all updated correctly\nfor instance in self._get_queryset().filter(pk__in=pk_list):\nself.assertInstanceEqual(instance, self.bulk_edit_data)\nclass BulkDeleteObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n        Delete multiple instances.\n        \"\"\"\ndef get_deletable_object_pks(self):\n\"\"\"\n            Get a list of PKs corresponding to objects that can be safely bulk-deleted.\n            For some models this may just be any random objects, but when we have FKs with `on_delete=models.PROTECT`\n            (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n            \"\"\"\nreturn get_deletable_objects(self.model, self._get_queryset()).values_list(\"pk\", flat=True)[:3]\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_bulk_delete_objects_without_permission(self):\npk_list = self.get_deletable_object_pks()\ndata = {\n\"pk\": pk_list,\n\"confirm\": True,\n\"_confirm\": True,  # Form button\n}\n# Try POST without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_delete\"), data), 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_bulk_delete_objects_with_permission(self):\npk_list = self.get_deletable_object_pks()\ninitial_count = self._get_queryset().count()\ndata = {\n\"pk\": pk_list,\n\"confirm\": True,\n\"_confirm\": True,  # Form button\n}\n# Assign unconstrained permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try POST with model-level permission\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_delete\"), data), 302)\nself.assertEqual(self._get_queryset().count(), initial_count - len(pk_list))\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_bulk_delete_form_contains_all_pks(self):\n# We are testing the intermediary step of bulk_delete with pagination applied.\n# i.e. \"_all\" passed in the form.\npk_list = self._get_queryset().values_list(\"pk\", flat=True)\n# We only pass in one pk to test the functionality of \"_all\"\n# which should grab all instance pks regardless of \"pks\".\nselected_data = {\n\"pk\": pk_list[:1],\n\"confirm\": True,\n\"_all\": \"on\",\n}\n# Assign unconstrained permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try POST with the selected data first. Emulating selecting all -&gt; pressing Delete Selected button.\nresponse = self.client.post(self._get_url(\"bulk_delete\"), selected_data)\nself.assertHttpStatus(response, 200)\nresponse_body = extract_page_body(response.content.decode(response.charset))\n# Check if all the pks are passed into the BulkDeleteForm/BulkDestroyForm\nfor pk in pk_list:\nself.assertIn(f'&lt;input type=\"hidden\" name=\"pk\" value=\"{pk}\"', response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_bulk_delete_objects_with_constrained_permission(self):\npk_list = self.get_deletable_object_pks()\ninitial_count = self._get_queryset().count()\ndata = {\n\"pk\": pk_list,\n\"confirm\": True,\n\"_confirm\": True,  # Form button\n}\n# Assign constrained permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": str(uuid.uuid4())},  # Match a non-existent pk (i.e., deny all)\nactions=[\"delete\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Attempt to bulk delete non-permitted objects\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_delete\"), data), 302)\nself.assertEqual(self._get_queryset().count(), initial_count)\n# Update permission constraints\nobj_perm.constraints = {\"pk__isnull\": False}  # Match a non-existent pk (i.e., allow all)\nobj_perm.save()\n# Bulk delete permitted objects\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_delete\"), data), 302)\nself.assertEqual(self._get_queryset().count(), initial_count - len(pk_list))\nclass BulkRenameObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n        Rename multiple instances.\n        \"\"\"\nrename_data = {\n\"find\": \"^(.*)$\",\n\"replace\": \"\\\\1X\",  # Append an X to the original value\n\"use_regex\": True,\n}\ndef test_bulk_rename_objects_without_permission(self):\npk_list = list(self._get_queryset().values_list(\"pk\", flat=True)[:3])\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\ndata.update(self.rename_data)\n# Test GET without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(self._get_url(\"bulk_rename\")), 403)\n# Try POST without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_rename\"), data), 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_rename_objects_with_permission(self):\nobjects = list(self._get_queryset().all()[:3])\npk_list = [obj.pk for obj in objects]\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\ndata.update(self.rename_data)\n# Assign model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try POST with model-level permission\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_rename\"), data), 302)\nfor i, instance in enumerate(self._get_queryset().filter(pk__in=pk_list)):\nself.assertEqual(instance.name, f\"{objects[i].name}X\")\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_rename_objects_with_constrained_permission(self):\nobjects = list(self._get_queryset().all()[:3])\npk_list = [obj.pk for obj in objects]\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\ndata.update(self.rename_data)\n# Assign constrained permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"name__regex\": \"[^X]$\"},\nactions=[\"change\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Attempt to bulk edit permitted objects into a non-permitted state\nresponse = self.client.post(self._get_url(\"bulk_rename\"), data)\nself.assertHttpStatus(response, 200)\n# Update permission constraints\nobj_perm.constraints = {\"pk__gt\": 0}\nobj_perm.save()\n# Bulk rename permitted objects\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_rename\"), data), 302)\nfor i, instance in enumerate(self._get_queryset().filter(pk__in=pk_list)):\nself.assertEqual(instance.name, f\"{objects[i].name}X\")\nclass PrimaryObjectViewTestCase(\nGetObjectViewTestCase,\nGetObjectChangelogViewTestCase,\nGetObjectNotesViewTestCase,\nCreateObjectViewTestCase,\nEditObjectViewTestCase,\nDeleteObjectViewTestCase,\nListObjectsViewTestCase,\nBulkImportObjectsViewTestCase,\nBulkEditObjectsViewTestCase,\nBulkDeleteObjectsViewTestCase,\n):\n\"\"\"\n        TestCase suitable for testing all standard View functions for primary objects\n        \"\"\"\nmaxDiff = None\nclass OrganizationalObjectViewTestCase(\nGetObjectViewTestCase,\nGetObjectChangelogViewTestCase,\nGetObjectNotesViewTestCase,\nCreateObjectViewTestCase,\nEditObjectViewTestCase,\nDeleteObjectViewTestCase,\nListObjectsViewTestCase,\nBulkImportObjectsViewTestCase,\nBulkDeleteObjectsViewTestCase,\n):\n\"\"\"\n        TestCase suitable for all organizational objects\n        \"\"\"\nmaxDiff = None\nclass DeviceComponentTemplateViewTestCase(\nEditObjectViewTestCase,\nDeleteObjectViewTestCase,\nCreateMultipleObjectsViewTestCase,\nBulkEditObjectsViewTestCase,\nBulkRenameObjectsViewTestCase,\nBulkDeleteObjectsViewTestCase,\n):\n\"\"\"\n        TestCase suitable for testing device component template models (ConsolePortTemplates, InterfaceTemplates, etc.)\n        \"\"\"\nmaxDiff = None\nclass DeviceComponentViewTestCase(\nGetObjectViewTestCase,\nGetObjectChangelogViewTestCase,\nGetObjectNotesViewTestCase,\nEditObjectViewTestCase,\nDeleteObjectViewTestCase,\nListObjectsViewTestCase,\nCreateMultipleObjectsViewTestCase,\nBulkImportObjectsViewTestCase,\nBulkEditObjectsViewTestCase,\nBulkRenameObjectsViewTestCase,\nBulkDeleteObjectsViewTestCase,\n):\n\"\"\"\n        TestCase suitable for testing device component models (ConsolePorts, Interfaces, etc.)\n        \"\"\"\nmaxDiff = None\nbulk_add_data = None\n\"\"\"Used for bulk-add (distinct from bulk-create) view testing; self.bulk_create_data will be used if unset.\"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_add_component(self):\n\"\"\"Test bulk-adding this component to devices/virtual-machines.\"\"\"\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninitial_count = self._get_queryset().count()\ndata = (self.bulk_add_data or self.bulk_create_data).copy()\n# Load the device-bulk-add or virtualmachine-bulk-add form\nif \"device\" in data:\nurl = reverse(f\"dcim:device_bulk_add_{self.model._meta.model_name}\")\nrequest = {\n\"path\": url,\n\"data\": post_data({\"pk\": data[\"device\"]}),\n}\nelse:\nurl = reverse(f\"virtualization:virtualmachine_bulk_add_{self.model._meta.model_name}\")\nrequest = {\n\"path\": url,\n\"data\": post_data({\"pk\": data[\"virtual_machine\"]}),\n}\nself.assertHttpStatus(self.client.post(**request), 200)\n# Post to the device-bulk-add or virtualmachine-bulk-add form to create records\nif \"device\" in data:\ndata[\"pk\"] = data.pop(\"device\")\nelse:\ndata[\"pk\"] = data.pop(\"virtual_machine\")\ndata[\"_create\"] = \"\"\nrequest[\"data\"] = post_data(data)\nself.assertHttpStatus(self.client.post(**request), 302)\nupdated_count = self._get_queryset().count()\nself.assertEqual(updated_count, initial_count + self.bulk_create_count)\nmatching_count = 0\nfor instance in self._get_queryset().all():\ntry:\nself.assertInstanceEqual(instance, (self.bulk_add_data or self.bulk_create_data))\nmatching_count += 1\nexcept AssertionError:\npass\nself.assertEqual(matching_count, self.bulk_create_count)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_rename(self):\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nobjects = self.selected_objects\npk_list = [obj.pk for obj in objects]\n# Apply button not yet clicked\ndata = {\"pk\": pk_list}\ndata.update(self.rename_data)\nverbose_name_plural = self.model._meta.verbose_name_plural\nwith self.subTest(\"Assert device name in HTML\"):\nresponse = self.client.post(self._get_url(\"bulk_rename\"), data)\nmessage = (\nf\"Renaming {len(objects)} {bettertitle(verbose_name_plural)} on {self.selected_objects_parent_name}\"\n)\nself.assertInHTML(message, response.content.decode(response.charset))\nwith self.subTest(\"Assert update successfully\"):\ndata[\"_apply\"] = True  # Form Apply button\nresponse = self.client.post(self._get_url(\"bulk_rename\"), data)\nself.assertHttpStatus(response, 302)\nqueryset = self._get_queryset().filter(pk__in=pk_list)\nfor instance in objects:\nself.assertEqual(queryset.get(pk=instance.pk).name, f\"{instance.name}X\")\nwith self.subTest(\"Assert if no valid objects selected return with error\"):\nfor values in ([], [str(uuid.uuid4())]):\ndata[\"pk\"] = values\nresponse = self.client.post(self._get_url(\"bulk_rename\"), data, follow=True)\nexpected_message = f\"No valid {verbose_name_plural} were selected.\"\nself.assertIn(expected_message, response.content.decode(response.charset))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.BulkDeleteObjectsViewTestCase","title":"<code>BulkDeleteObjectsViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>Delete multiple instances.</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>class BulkDeleteObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n    Delete multiple instances.\n    \"\"\"\ndef get_deletable_object_pks(self):\n\"\"\"\n        Get a list of PKs corresponding to objects that can be safely bulk-deleted.\n        For some models this may just be any random objects, but when we have FKs with `on_delete=models.PROTECT`\n        (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n        \"\"\"\nreturn get_deletable_objects(self.model, self._get_queryset()).values_list(\"pk\", flat=True)[:3]\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_bulk_delete_objects_without_permission(self):\npk_list = self.get_deletable_object_pks()\ndata = {\n\"pk\": pk_list,\n\"confirm\": True,\n\"_confirm\": True,  # Form button\n}\n# Try POST without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_delete\"), data), 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_bulk_delete_objects_with_permission(self):\npk_list = self.get_deletable_object_pks()\ninitial_count = self._get_queryset().count()\ndata = {\n\"pk\": pk_list,\n\"confirm\": True,\n\"_confirm\": True,  # Form button\n}\n# Assign unconstrained permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try POST with model-level permission\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_delete\"), data), 302)\nself.assertEqual(self._get_queryset().count(), initial_count - len(pk_list))\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_bulk_delete_form_contains_all_pks(self):\n# We are testing the intermediary step of bulk_delete with pagination applied.\n# i.e. \"_all\" passed in the form.\npk_list = self._get_queryset().values_list(\"pk\", flat=True)\n# We only pass in one pk to test the functionality of \"_all\"\n# which should grab all instance pks regardless of \"pks\".\nselected_data = {\n\"pk\": pk_list[:1],\n\"confirm\": True,\n\"_all\": \"on\",\n}\n# Assign unconstrained permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try POST with the selected data first. Emulating selecting all -&gt; pressing Delete Selected button.\nresponse = self.client.post(self._get_url(\"bulk_delete\"), selected_data)\nself.assertHttpStatus(response, 200)\nresponse_body = extract_page_body(response.content.decode(response.charset))\n# Check if all the pks are passed into the BulkDeleteForm/BulkDestroyForm\nfor pk in pk_list:\nself.assertIn(f'&lt;input type=\"hidden\" name=\"pk\" value=\"{pk}\"', response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_bulk_delete_objects_with_constrained_permission(self):\npk_list = self.get_deletable_object_pks()\ninitial_count = self._get_queryset().count()\ndata = {\n\"pk\": pk_list,\n\"confirm\": True,\n\"_confirm\": True,  # Form button\n}\n# Assign constrained permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": str(uuid.uuid4())},  # Match a non-existent pk (i.e., deny all)\nactions=[\"delete\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Attempt to bulk delete non-permitted objects\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_delete\"), data), 302)\nself.assertEqual(self._get_queryset().count(), initial_count)\n# Update permission constraints\nobj_perm.constraints = {\"pk__isnull\": False}  # Match a non-existent pk (i.e., allow all)\nobj_perm.save()\n# Bulk delete permitted objects\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_delete\"), data), 302)\nself.assertEqual(self._get_queryset().count(), initial_count - len(pk_list))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.BulkDeleteObjectsViewTestCase.get_deletable_object_pks","title":"<code>get_deletable_object_pks()</code>","text":"<p>Get a list of PKs corresponding to objects that can be safely bulk-deleted.</p> <p>For some models this may just be any random objects, but when we have FKs with <code>on_delete=models.PROTECT</code> (as is often the case) we need to find or create an instance that doesn't have such entanglements.</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>def get_deletable_object_pks(self):\n\"\"\"\n    Get a list of PKs corresponding to objects that can be safely bulk-deleted.\n    For some models this may just be any random objects, but when we have FKs with `on_delete=models.PROTECT`\n    (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n    \"\"\"\nreturn get_deletable_objects(self.model, self._get_queryset()).values_list(\"pk\", flat=True)[:3]\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.BulkEditObjectsViewTestCase","title":"<code>BulkEditObjectsViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>Edit multiple instances.</p> <p>:bulk_edit_data: A dictionary of data to be used when bulk editing a set of objects. This data should differ                  from that used for initial object creation within setUpTestData().</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>class BulkEditObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n    Edit multiple instances.\n    :bulk_edit_data: A dictionary of data to be used when bulk editing a set of objects. This data should differ\n                     from that used for initial object creation within setUpTestData().\n    \"\"\"\nbulk_edit_data = {}\ndef test_bulk_edit_objects_without_permission(self):\npk_list = list(self._get_queryset().values_list(\"pk\", flat=True)[:3])\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\n# Try POST without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_edit\"), data), 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_edit_objects_with_permission(self):\npk_list = list(self._get_queryset().values_list(\"pk\", flat=True)[:3])\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\n# Append the form data to the request\ndata.update(post_data(self.bulk_edit_data))\n# Assign model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try POST with model-level permission\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_edit\"), data), 302)\nfor instance in self._get_queryset().filter(pk__in=pk_list):\nself.assertInstanceEqual(instance, self.bulk_edit_data)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_edit_form_contains_all_pks(self):\n# We are testing the intermediary step of bulk_edit with pagination applied.\n# i.e. \"_all\" passed in the form.\npk_list = self._get_queryset().values_list(\"pk\", flat=True)\n# We only pass in one pk to test the functionality of \"_all\"\n# which should grab all instance pks regardless of \"pk\"\nselected_data = {\n\"pk\": pk_list[:1],\n\"_all\": \"on\",\n}\n# Assign model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try POST with model-level permission\nresponse = self.client.post(self._get_url(\"bulk_edit\"), selected_data)\n# Expect a 200 status cause we are only rendering the bulk edit table.\n# after pressing Edit Selected button.\nself.assertHttpStatus(response, 200)\nresponse_body = extract_page_body(response.content.decode(response.charset))\n# Check if all the pks are passed into the BulkEditForm/BulkUpdateForm\nfor pk in pk_list:\nself.assertIn(f'&lt;input type=\"hidden\" name=\"pk\" value=\"{pk}\"', response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_edit_objects_with_constrained_permission(self):\n# Select some objects that are *not* already set to match the first value in self.bulk_edit_data or null.\n# We have to exclude null cases because Django filter()/exclude() doesn't like `__in=[None]` as a case.\nattr_name = list(self.bulk_edit_data.keys())[0]\nobjects = (\nself._get_queryset()\n.exclude(**{attr_name: self.bulk_edit_data[attr_name]})\n.exclude(**{f\"{attr_name}__isnull\": True})\n)[:3]\nself.assertEqual(objects.count(), 3)\npk_list = list(objects.values_list(\"pk\", flat=True))\n# Define a permission that permits the above objects, but will not permit them after updating them.\nfield = self.model._meta.get_field(attr_name)\nvalues = [field.value_from_object(obj) for obj in objects]\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={f\"{attr_name}__in\": values},\nactions=[\"change\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Build form data\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\ndata.update(post_data(self.bulk_edit_data))\n# Attempt to bulk edit permitted objects into a non-permitted state\nresponse = self.client.post(self._get_url(\"bulk_edit\"), data)\n# 200 because we're sent back to the edit form to try again; if the update were successful it'd be a 302\nself.assertHttpStatus(response, 200)\n# Assert that the objects are NOT updated\nfor instance in self._get_queryset().filter(pk__in=pk_list):\nself.assertIn(field.value_from_object(instance), values)\nself.assertNotEqual(field.value_from_object(instance), self.bulk_edit_data[attr_name])\n# Update permission constraints to permit all objects\nobj_perm.constraints = {\"pk__gt\": 0}\nobj_perm.save()\n# Bulk edit permitted objects and expect a redirect back to the list view\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_edit\"), data), 302)\n# Assert that the objects were all updated correctly\nfor instance in self._get_queryset().filter(pk__in=pk_list):\nself.assertInstanceEqual(instance, self.bulk_edit_data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.BulkImportObjectsViewTestCase","title":"<code>BulkImportObjectsViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>Create multiple instances from imported data.</p> <p>:csv_data: A list of CSV-formatted lines (starting with the headers) to be used for bulk object import.</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>class BulkImportObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n    Create multiple instances from imported data.\n    :csv_data: A list of CSV-formatted lines (starting with the headers) to be used for bulk object import.\n    \"\"\"\ncsv_data = ()\ndef _get_csv_data(self):\nreturn \"\\n\".join(self.csv_data)\ndef test_bulk_import_objects_without_permission(self):\ndata = {\n\"csv_data\": self._get_csv_data(),\n}\n# Test GET without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(self._get_url(\"import\")), 403)\n# Try POST without permission\nresponse = self.client.post(self._get_url(\"import\"), data)\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(response, 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_import_objects_with_permission(self):\ninitial_count = self._get_queryset().count()\ndata = {\n\"csv_data\": self._get_csv_data(),\n}\n# Assign model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"import\")), 200)\n# Test POST with permission\nself.assertHttpStatus(self.client.post(self._get_url(\"import\"), data), 200)\nself.assertEqual(self._get_queryset().count(), initial_count + len(self.csv_data) - 1)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_import_objects_with_permission_csv_file(self):\ninitial_count = self._get_queryset().count()\nself.file_contents = bytes(self._get_csv_data(), \"utf-8\")\nself.bulk_import_file = SimpleUploadedFile(name=\"bulk_import_data.csv\", content=self.file_contents)\ndata = {\n\"csv_file\": self.bulk_import_file,\n}\n# Assign model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"import\")), 200)\n# Test POST with permission\nself.assertHttpStatus(self.client.post(self._get_url(\"import\"), data), 200)\nself.assertEqual(self._get_queryset().count(), initial_count + len(self.csv_data) - 1)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_import_objects_with_constrained_permission(self):\ninitial_count = self._get_queryset().count()\ndata = {\n\"csv_data\": self._get_csv_data(),\n}\n# Assign constrained permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": str(uuid.uuid4())},  # Match a non-existent pk (i.e., deny all)\nactions=[\"add\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Attempt to import non-permitted objects\nself.assertHttpStatus(self.client.post(self._get_url(\"import\"), data), 200)\nself.assertEqual(self._get_queryset().count(), initial_count)\n# Update permission constraints\nobj_perm.constraints = {\"pk__isnull\": False}  # Set permission to allow all\nobj_perm.save()\n# Import permitted objects\nself.assertHttpStatus(self.client.post(self._get_url(\"import\"), data), 200)\nself.assertEqual(self._get_queryset().count(), initial_count + len(self.csv_data) - 1)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.BulkRenameObjectsViewTestCase","title":"<code>BulkRenameObjectsViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>Rename multiple instances.</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>class BulkRenameObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n    Rename multiple instances.\n    \"\"\"\nrename_data = {\n\"find\": \"^(.*)$\",\n\"replace\": \"\\\\1X\",  # Append an X to the original value\n\"use_regex\": True,\n}\ndef test_bulk_rename_objects_without_permission(self):\npk_list = list(self._get_queryset().values_list(\"pk\", flat=True)[:3])\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\ndata.update(self.rename_data)\n# Test GET without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(self._get_url(\"bulk_rename\")), 403)\n# Try POST without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_rename\"), data), 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_rename_objects_with_permission(self):\nobjects = list(self._get_queryset().all()[:3])\npk_list = [obj.pk for obj in objects]\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\ndata.update(self.rename_data)\n# Assign model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try POST with model-level permission\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_rename\"), data), 302)\nfor i, instance in enumerate(self._get_queryset().filter(pk__in=pk_list)):\nself.assertEqual(instance.name, f\"{objects[i].name}X\")\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_rename_objects_with_constrained_permission(self):\nobjects = list(self._get_queryset().all()[:3])\npk_list = [obj.pk for obj in objects]\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\ndata.update(self.rename_data)\n# Assign constrained permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"name__regex\": \"[^X]$\"},\nactions=[\"change\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Attempt to bulk edit permitted objects into a non-permitted state\nresponse = self.client.post(self._get_url(\"bulk_rename\"), data)\nself.assertHttpStatus(response, 200)\n# Update permission constraints\nobj_perm.constraints = {\"pk__gt\": 0}\nobj_perm.save()\n# Bulk rename permitted objects\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_rename\"), data), 302)\nfor i, instance in enumerate(self._get_queryset().filter(pk__in=pk_list)):\nself.assertEqual(instance.name, f\"{objects[i].name}X\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.CreateMultipleObjectsViewTestCase","title":"<code>CreateMultipleObjectsViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>Create multiple instances using a single form. Expects the creation of three new instances by default.</p> <p>:bulk_create_count: The number of objects expected to be created (default: 3). :bulk_create_data: A dictionary of data to be used for bulk object creation.</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>class CreateMultipleObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n    Create multiple instances using a single form. Expects the creation of three new instances by default.\n    :bulk_create_count: The number of objects expected to be created (default: 3).\n    :bulk_create_data: A dictionary of data to be used for bulk object creation.\n    \"\"\"\nbulk_create_count = 3\nbulk_create_data = {}\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_create_multiple_objects_without_permission(self):\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": post_data(self.bulk_create_data),\n}\n# Try POST without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(**request), 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_create_multiple_objects_with_permission(self):\ninitial_count = self._get_queryset().count()\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": post_data(self.bulk_create_data),\n}\n# Assign non-constrained permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nactions=[\"add\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Bulk create objects\nresponse = self.client.post(**request)\nself.assertHttpStatus(response, 302)\nself.assertEqual(initial_count + self.bulk_create_count, self._get_queryset().count())\nmatching_count = 0\nfor instance in self._get_queryset().all():\ntry:\nself.assertInstanceEqual(instance, self.bulk_create_data)\nmatching_count += 1\nexcept AssertionError:\npass\nself.assertEqual(matching_count, self.bulk_create_count)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_create_multiple_objects_with_constrained_permission(self):\ninitial_count = self._get_queryset().count()\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": post_data(self.bulk_create_data),\n}\n# Assign constrained permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nactions=[\"add\"],\nconstraints={\"pk\": uuid.uuid4()},  # Match a non-existent pk (i.e., deny all)\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Attempt to make the request with unmet constraints\nself.assertHttpStatus(self.client.post(**request), 200)\nself.assertEqual(self._get_queryset().count(), initial_count)\n# Update the ObjectPermission to allow creation\nobj_perm.constraints = {\"pk__isnull\": False}  # Set constraint to allow all\nobj_perm.save()\nresponse = self.client.post(**request)\nself.assertHttpStatus(response, 302)\nself.assertEqual(initial_count + self.bulk_create_count, self._get_queryset().count())\nmatching_count = 0\nfor instance in self._get_queryset().all():\ntry:\nself.assertInstanceEqual(instance, self.bulk_create_data)\nmatching_count += 1\nexcept AssertionError:\npass\nself.assertEqual(matching_count, self.bulk_create_count)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.CreateObjectViewTestCase","title":"<code>CreateObjectViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>Create a single new instance.</p> <p>:form_data: Data to be used when creating a new object.</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>class CreateObjectViewTestCase(ModelViewTestCase):\n\"\"\"\n    Create a single new instance.\n    :form_data: Data to be used when creating a new object.\n    \"\"\"\nform_data = {}\nslug_source = None\nslugify_function = staticmethod(slugify)\nslug_test_object = \"\"\ndef test_create_object_without_permission(self):\n# Try GET without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(self._get_url(\"add\")), 403)\n# Try POST without permission\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": post_data(self.form_data),\n}\nresponse = self.client.post(**request)\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(response, 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_create_object_with_permission(self):\ninitial_count = self._get_queryset().count()\n# Assign unconstrained permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"add\")), 200)\n# Try POST with model-level permission\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nself.assertEqual(initial_count + 1, self._get_queryset().count())\n# order_by() is no supported by django TreeNode,\n# So we directly retrieve the instance by \"slug\".\nif isinstance(self._get_queryset().first(), TreeNode):\ninstance = self._get_queryset().get(slug=self.form_data.get(\"slug\"))\nself.assertInstanceEqual(instance, self.form_data)\nelse:\nif hasattr(self.model, \"last_updated\"):\ninstance = self._get_queryset().order_by(\"last_updated\").last()\nself.assertInstanceEqual(instance, self.form_data)\nelse:\ninstance = self._get_queryset().last()\nself.assertInstanceEqual(instance, self.form_data)\nif hasattr(self.model, \"to_objectchange\"):\n# Verify ObjectChange creation\nobjectchanges = get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, ObjectChangeActionChoices.ACTION_CREATE)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_create_object_with_constrained_permission(self):\ninitial_count = self._get_queryset().count()\n# Assign constrained permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": str(uuid.uuid4())},  # Match a non-existent pk (i.e., deny all)\nactions=[\"add\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with object-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"add\")), 200)\n# Try to create an object (not permitted)\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 200)\nself.assertEqual(initial_count, self._get_queryset().count())  # Check that no object was created\n# Update the ObjectPermission to allow creation\nobj_perm.constraints = {\"pk__isnull\": False}\nobj_perm.save()\n# Try to create an object (permitted)\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nself.assertEqual(initial_count + 1, self._get_queryset().count())\n# order_by() is no supported by django TreeNode,\n# So we directly retrieve the instance by \"slug\".\nif isinstance(self._get_queryset().first(), TreeNode):\ninstance = self._get_queryset().get(slug=self.form_data.get(\"slug\"))\nself.assertInstanceEqual(instance, self.form_data)\nelse:\nif hasattr(self.model, \"last_updated\"):\nself.assertInstanceEqual(self._get_queryset().order_by(\"last_updated\").last(), self.form_data)\nelse:\nself.assertInstanceEqual(self._get_queryset().last(), self.form_data)\ndef test_slug_autocreation(self):\n\"\"\"Test that slug is autocreated through ORM.\"\"\"\n# This really should go on a models test page, but we don't have test structures for models.\nif self.slug_source is not None:\nobj = self.model.objects.get(**{self.slug_source: self.slug_test_object})\nexpected_slug = self.slugify_function(getattr(obj, self.slug_source))\nself.assertEqual(obj.slug, expected_slug)\ndef test_slug_not_modified(self):\n\"\"\"Ensure save method does not modify slug that is passed in.\"\"\"\n# This really should go on a models test page, but we don't have test structures for models.\nif self.slug_source is not None:\nnew_slug_source_value = \"kwyjibo\"\nobj = self.model.objects.get(**{self.slug_source: self.slug_test_object})\nexpected_slug = self.slugify_function(getattr(obj, self.slug_source))\n# Update slug source field str\nfilter_ = self.slug_source + \"__exact\"\nself.model.objects.filter(**{filter_: self.slug_test_object}).update(\n**{self.slug_source: new_slug_source_value}\n)\nobj.refresh_from_db()\nself.assertEqual(getattr(obj, self.slug_source), new_slug_source_value)\nself.assertEqual(obj.slug, expected_slug)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.CreateObjectViewTestCase.test_slug_autocreation","title":"<code>test_slug_autocreation()</code>","text":"<p>Test that slug is autocreated through ORM.</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>def test_slug_autocreation(self):\n\"\"\"Test that slug is autocreated through ORM.\"\"\"\n# This really should go on a models test page, but we don't have test structures for models.\nif self.slug_source is not None:\nobj = self.model.objects.get(**{self.slug_source: self.slug_test_object})\nexpected_slug = self.slugify_function(getattr(obj, self.slug_source))\nself.assertEqual(obj.slug, expected_slug)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.CreateObjectViewTestCase.test_slug_not_modified","title":"<code>test_slug_not_modified()</code>","text":"<p>Ensure save method does not modify slug that is passed in.</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>def test_slug_not_modified(self):\n\"\"\"Ensure save method does not modify slug that is passed in.\"\"\"\n# This really should go on a models test page, but we don't have test structures for models.\nif self.slug_source is not None:\nnew_slug_source_value = \"kwyjibo\"\nobj = self.model.objects.get(**{self.slug_source: self.slug_test_object})\nexpected_slug = self.slugify_function(getattr(obj, self.slug_source))\n# Update slug source field str\nfilter_ = self.slug_source + \"__exact\"\nself.model.objects.filter(**{filter_: self.slug_test_object}).update(\n**{self.slug_source: new_slug_source_value}\n)\nobj.refresh_from_db()\nself.assertEqual(getattr(obj, self.slug_source), new_slug_source_value)\nself.assertEqual(obj.slug, expected_slug)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.DeleteObjectViewTestCase","title":"<code>DeleteObjectViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>Delete a single instance.</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>class DeleteObjectViewTestCase(ModelViewTestCase):\n\"\"\"\n    Delete a single instance.\n    \"\"\"\ndef get_deletable_object(self):\n\"\"\"\n        Get an instance that can be deleted.\n        For some models this may just be any random object, but when we have FKs with `on_delete=models.PROTECT`\n        (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n        \"\"\"\ninstance = get_deletable_objects(self.model, self._get_queryset()).first()\nif instance is None:\nself.fail(\"Couldn't find a single deletable object!\")\nreturn instance\ndef test_delete_object_without_permission(self):\ninstance = self.get_deletable_object()\n# Try GET without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(self._get_url(\"delete\", instance)), [403, 404])\n# Try POST without permission\nrequest = {\n\"path\": self._get_url(\"delete\", instance),\n\"data\": post_data({\"confirm\": True}),\n}\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(**request), [403, 404])\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_delete_object_with_permission(self):\ninstance = self.get_deletable_object()\n# Assign model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"delete\", instance)), 200)\n# Try POST with model-level permission\nrequest = {\n\"path\": self._get_url(\"delete\", instance),\n\"data\": post_data({\"confirm\": True}),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nwith self.assertRaises(ObjectDoesNotExist):\nself._get_queryset().get(pk=instance.pk)\nif hasattr(self.model, \"to_objectchange\"):\n# Verify ObjectChange creation\nobjectchanges = get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, ObjectChangeActionChoices.ACTION_DELETE)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_delete_object_with_permission_and_xwwwformurlencoded(self):\ninstance = self.get_deletable_object()\n# Assign model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"delete\", instance)), 200)\n# Try POST with model-level permission\nrequest = {\n\"path\": self._get_url(\"delete\", instance),\n\"data\": urlencode({\"confirm\": True}),\n\"content_type\": \"application/x-www-form-urlencoded\",\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nwith self.assertRaises(ObjectDoesNotExist):\nself._get_queryset().get(pk=instance.pk)\nif hasattr(self.model, \"to_objectchange\"):\n# Verify ObjectChange creation\nobjectchanges = get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, ObjectChangeActionChoices.ACTION_DELETE)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_delete_object_with_constrained_permission(self):\ninstance1 = self.get_deletable_object()\ninstance2 = self._get_queryset().exclude(pk=instance1.pk)[0]\n# Assign object-level permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\nactions=[\"delete\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with a permitted object\nself.assertHttpStatus(self.client.get(self._get_url(\"delete\", instance1)), 200)\n# Try GET with a non-permitted object\nself.assertHttpStatus(self.client.get(self._get_url(\"delete\", instance2)), 404)\n# Try to delete a permitted object\nrequest = {\n\"path\": self._get_url(\"delete\", instance1),\n\"data\": post_data({\"confirm\": True}),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nwith self.assertRaises(ObjectDoesNotExist):\nself._get_queryset().get(pk=instance1.pk)\n# Try to delete a non-permitted object\n# Note that in the case of tree models, deleting instance1 above may have cascade-deleted to instance2,\n# so to be safe, we need to get another object instance that definitely exists:\ninstance3 = self._get_queryset().first()\nrequest = {\n\"path\": self._get_url(\"delete\", instance3),\n\"data\": post_data({\"confirm\": True}),\n}\nself.assertHttpStatus(self.client.post(**request), 404)\nself.assertTrue(self._get_queryset().filter(pk=instance3.pk).exists())\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.DeleteObjectViewTestCase.get_deletable_object","title":"<code>get_deletable_object()</code>","text":"<p>Get an instance that can be deleted.</p> <p>For some models this may just be any random object, but when we have FKs with <code>on_delete=models.PROTECT</code> (as is often the case) we need to find or create an instance that doesn't have such entanglements.</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>def get_deletable_object(self):\n\"\"\"\n    Get an instance that can be deleted.\n    For some models this may just be any random object, but when we have FKs with `on_delete=models.PROTECT`\n    (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n    \"\"\"\ninstance = get_deletable_objects(self.model, self._get_queryset()).first()\nif instance is None:\nself.fail(\"Couldn't find a single deletable object!\")\nreturn instance\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.DeviceComponentTemplateViewTestCase","title":"<code>DeviceComponentTemplateViewTestCase</code>","text":"<p>             Bases: <code>EditObjectViewTestCase</code>, <code>DeleteObjectViewTestCase</code>, <code>CreateMultipleObjectsViewTestCase</code>, <code>BulkEditObjectsViewTestCase</code>, <code>BulkRenameObjectsViewTestCase</code>, <code>BulkDeleteObjectsViewTestCase</code></p> <p>TestCase suitable for testing device component template models (ConsolePortTemplates, InterfaceTemplates, etc.)</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>class DeviceComponentTemplateViewTestCase(\nEditObjectViewTestCase,\nDeleteObjectViewTestCase,\nCreateMultipleObjectsViewTestCase,\nBulkEditObjectsViewTestCase,\nBulkRenameObjectsViewTestCase,\nBulkDeleteObjectsViewTestCase,\n):\n\"\"\"\n    TestCase suitable for testing device component template models (ConsolePortTemplates, InterfaceTemplates, etc.)\n    \"\"\"\nmaxDiff = None\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.DeviceComponentViewTestCase","title":"<code>DeviceComponentViewTestCase</code>","text":"<p>             Bases: <code>GetObjectViewTestCase</code>, <code>GetObjectChangelogViewTestCase</code>, <code>GetObjectNotesViewTestCase</code>, <code>EditObjectViewTestCase</code>, <code>DeleteObjectViewTestCase</code>, <code>ListObjectsViewTestCase</code>, <code>CreateMultipleObjectsViewTestCase</code>, <code>BulkImportObjectsViewTestCase</code>, <code>BulkEditObjectsViewTestCase</code>, <code>BulkRenameObjectsViewTestCase</code>, <code>BulkDeleteObjectsViewTestCase</code></p> <p>TestCase suitable for testing device component models (ConsolePorts, Interfaces, etc.)</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>class DeviceComponentViewTestCase(\nGetObjectViewTestCase,\nGetObjectChangelogViewTestCase,\nGetObjectNotesViewTestCase,\nEditObjectViewTestCase,\nDeleteObjectViewTestCase,\nListObjectsViewTestCase,\nCreateMultipleObjectsViewTestCase,\nBulkImportObjectsViewTestCase,\nBulkEditObjectsViewTestCase,\nBulkRenameObjectsViewTestCase,\nBulkDeleteObjectsViewTestCase,\n):\n\"\"\"\n    TestCase suitable for testing device component models (ConsolePorts, Interfaces, etc.)\n    \"\"\"\nmaxDiff = None\nbulk_add_data = None\n\"\"\"Used for bulk-add (distinct from bulk-create) view testing; self.bulk_create_data will be used if unset.\"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_add_component(self):\n\"\"\"Test bulk-adding this component to devices/virtual-machines.\"\"\"\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninitial_count = self._get_queryset().count()\ndata = (self.bulk_add_data or self.bulk_create_data).copy()\n# Load the device-bulk-add or virtualmachine-bulk-add form\nif \"device\" in data:\nurl = reverse(f\"dcim:device_bulk_add_{self.model._meta.model_name}\")\nrequest = {\n\"path\": url,\n\"data\": post_data({\"pk\": data[\"device\"]}),\n}\nelse:\nurl = reverse(f\"virtualization:virtualmachine_bulk_add_{self.model._meta.model_name}\")\nrequest = {\n\"path\": url,\n\"data\": post_data({\"pk\": data[\"virtual_machine\"]}),\n}\nself.assertHttpStatus(self.client.post(**request), 200)\n# Post to the device-bulk-add or virtualmachine-bulk-add form to create records\nif \"device\" in data:\ndata[\"pk\"] = data.pop(\"device\")\nelse:\ndata[\"pk\"] = data.pop(\"virtual_machine\")\ndata[\"_create\"] = \"\"\nrequest[\"data\"] = post_data(data)\nself.assertHttpStatus(self.client.post(**request), 302)\nupdated_count = self._get_queryset().count()\nself.assertEqual(updated_count, initial_count + self.bulk_create_count)\nmatching_count = 0\nfor instance in self._get_queryset().all():\ntry:\nself.assertInstanceEqual(instance, (self.bulk_add_data or self.bulk_create_data))\nmatching_count += 1\nexcept AssertionError:\npass\nself.assertEqual(matching_count, self.bulk_create_count)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_rename(self):\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nobjects = self.selected_objects\npk_list = [obj.pk for obj in objects]\n# Apply button not yet clicked\ndata = {\"pk\": pk_list}\ndata.update(self.rename_data)\nverbose_name_plural = self.model._meta.verbose_name_plural\nwith self.subTest(\"Assert device name in HTML\"):\nresponse = self.client.post(self._get_url(\"bulk_rename\"), data)\nmessage = (\nf\"Renaming {len(objects)} {bettertitle(verbose_name_plural)} on {self.selected_objects_parent_name}\"\n)\nself.assertInHTML(message, response.content.decode(response.charset))\nwith self.subTest(\"Assert update successfully\"):\ndata[\"_apply\"] = True  # Form Apply button\nresponse = self.client.post(self._get_url(\"bulk_rename\"), data)\nself.assertHttpStatus(response, 302)\nqueryset = self._get_queryset().filter(pk__in=pk_list)\nfor instance in objects:\nself.assertEqual(queryset.get(pk=instance.pk).name, f\"{instance.name}X\")\nwith self.subTest(\"Assert if no valid objects selected return with error\"):\nfor values in ([], [str(uuid.uuid4())]):\ndata[\"pk\"] = values\nresponse = self.client.post(self._get_url(\"bulk_rename\"), data, follow=True)\nexpected_message = f\"No valid {verbose_name_plural} were selected.\"\nself.assertIn(expected_message, response.content.decode(response.charset))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.DeviceComponentViewTestCase.bulk_add_data","title":"<code>bulk_add_data = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Used for bulk-add (distinct from bulk-create) view testing; self.bulk_create_data will be used if unset.</p>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.DeviceComponentViewTestCase.test_bulk_add_component","title":"<code>test_bulk_add_component()</code>","text":"<p>Test bulk-adding this component to devices/virtual-machines.</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_add_component(self):\n\"\"\"Test bulk-adding this component to devices/virtual-machines.\"\"\"\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninitial_count = self._get_queryset().count()\ndata = (self.bulk_add_data or self.bulk_create_data).copy()\n# Load the device-bulk-add or virtualmachine-bulk-add form\nif \"device\" in data:\nurl = reverse(f\"dcim:device_bulk_add_{self.model._meta.model_name}\")\nrequest = {\n\"path\": url,\n\"data\": post_data({\"pk\": data[\"device\"]}),\n}\nelse:\nurl = reverse(f\"virtualization:virtualmachine_bulk_add_{self.model._meta.model_name}\")\nrequest = {\n\"path\": url,\n\"data\": post_data({\"pk\": data[\"virtual_machine\"]}),\n}\nself.assertHttpStatus(self.client.post(**request), 200)\n# Post to the device-bulk-add or virtualmachine-bulk-add form to create records\nif \"device\" in data:\ndata[\"pk\"] = data.pop(\"device\")\nelse:\ndata[\"pk\"] = data.pop(\"virtual_machine\")\ndata[\"_create\"] = \"\"\nrequest[\"data\"] = post_data(data)\nself.assertHttpStatus(self.client.post(**request), 302)\nupdated_count = self._get_queryset().count()\nself.assertEqual(updated_count, initial_count + self.bulk_create_count)\nmatching_count = 0\nfor instance in self._get_queryset().all():\ntry:\nself.assertInstanceEqual(instance, (self.bulk_add_data or self.bulk_create_data))\nmatching_count += 1\nexcept AssertionError:\npass\nself.assertEqual(matching_count, self.bulk_create_count)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.EditObjectViewTestCase","title":"<code>EditObjectViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>Edit a single existing instance.</p> <p>:form_data: Data to be used when updating the first existing object.</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>class EditObjectViewTestCase(ModelViewTestCase):\n\"\"\"\n    Edit a single existing instance.\n    :form_data: Data to be used when updating the first existing object.\n    \"\"\"\nform_data = {}\ndef test_edit_object_without_permission(self):\ninstance = self._get_queryset().first()\n# Try GET without permission\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(self._get_url(\"edit\", instance)), [403, 404])\n# Try POST without permission\nrequest = {\n\"path\": self._get_url(\"edit\", instance),\n\"data\": post_data(self.form_data),\n}\nwith disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(**request), [403, 404])\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_edit_object_with_permission(self):\ninstance = self._get_queryset().first()\n# Assign model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"edit\", instance)), 200)\n# Try POST with model-level permission\nrequest = {\n\"path\": self._get_url(\"edit\", instance),\n\"data\": post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nself.assertInstanceEqual(self._get_queryset().get(pk=instance.pk), self.form_data)\nif hasattr(self.model, \"to_objectchange\"):\n# Verify ObjectChange creation\nobjectchanges = get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, ObjectChangeActionChoices.ACTION_UPDATE)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_edit_object_with_constrained_permission(self):\ninstance1, instance2 = self._get_queryset().all()[:2]\n# Assign constrained permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\nactions=[\"change\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with a permitted object\nself.assertHttpStatus(self.client.get(self._get_url(\"edit\", instance1)), 200)\n# Try GET with a non-permitted object\nself.assertHttpStatus(self.client.get(self._get_url(\"edit\", instance2)), 404)\n# Try to edit a permitted object\nrequest = {\n\"path\": self._get_url(\"edit\", instance1),\n\"data\": post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nself.assertInstanceEqual(self._get_queryset().get(pk=instance1.pk), self.form_data)\n# Try to edit a non-permitted object\nrequest = {\n\"path\": self._get_url(\"edit\", instance2),\n\"data\": post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 404)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.GetObjectChangelogViewTestCase","title":"<code>GetObjectChangelogViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>View the changelog for an instance.</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>class GetObjectChangelogViewTestCase(ModelViewTestCase):\n\"\"\"\n    View the changelog for an instance.\n    \"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_get_object_changelog(self):\nurl = self._get_url(\"changelog\", self._get_queryset().first())\nresponse = self.client.get(url)\nself.assertHttpStatus(response, 200)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.GetObjectNotesViewTestCase","title":"<code>GetObjectNotesViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>View the notes for an instance.</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>class GetObjectNotesViewTestCase(ModelViewTestCase):\n\"\"\"\n    View the notes for an instance.\n    \"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_get_object_notes(self):\nif hasattr(self.model, \"notes\"):\nurl = self._get_url(\"notes\", self._get_queryset().first())\nresponse = self.client.get(url)\nself.assertHttpStatus(response, 200)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.GetObjectViewTestCase","title":"<code>GetObjectViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>Retrieve a single instance.</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>class GetObjectViewTestCase(ModelViewTestCase):\n\"\"\"\n    Retrieve a single instance.\n    \"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_get_object_anonymous(self):\n# Make the request as an unauthenticated user\nself.client.logout()\nresponse = self.client.get(self._get_queryset().first().get_absolute_url())\nself.assertHttpStatus(response, 200)\nresponse_body = response.content.decode(response.charset)\nself.assertIn(\n\"/login/?next=\" + self._get_queryset().first().get_absolute_url(), response_body, msg=response_body\n)\n# The \"Change Log\" tab should appear in the response since we have all exempt permissions\nif issubclass(self.model, ChangeLoggedModel):\nresponse_body = extract_page_body(response.content.decode(response.charset))\nself.assertIn(\"Change Log\", response_body, msg=response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object_without_permission(self):\ninstance = self._get_queryset().first()\n# Try GET without permission\nwith disable_warnings(\"django.request\"):\nresponse = self.client.get(instance.get_absolute_url())\nself.assertHttpStatus(response, [403, 404])\nresponse_body = response.content.decode(response.charset)\nself.assertNotIn(\"/login/\", response_body, msg=response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object_with_permission(self):\ninstance = self._get_queryset().first()\n# Add model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nresponse = self.client.get(instance.get_absolute_url())\nself.assertHttpStatus(response, 200)\nresponse_body = extract_page_body(response.content.decode(response.charset))\n# The object's display name or string representation should appear in the response\nself.assertIn(escape(getattr(instance, \"display\", str(instance))), response_body, msg=response_body)\n# If any Relationships are defined, they should appear in the response\nif self.relationships is not None:\nfor relationship in self.relationships:  # false positive pylint: disable=not-an-iterable\ncontent_type = ContentType.objects.get_for_model(instance)\nif content_type == relationship.source_type:\nself.assertIn(\nescape(relationship.get_label(RelationshipSideChoices.SIDE_SOURCE)),\nresponse_body,\nmsg=response_body,\n)\nif content_type == relationship.destination_type:\nself.assertIn(\nescape(relationship.get_label(RelationshipSideChoices.SIDE_DESTINATION)),\nresponse_body,\nmsg=response_body,\n)\n# If any Custom Fields are defined, they should appear in the response\nif self.custom_fields is not None:\nfor custom_field in self.custom_fields:  # false positive pylint: disable=not-an-iterable\nself.assertIn(escape(str(custom_field)), response_body, msg=response_body)\n# 2.0 TODO: #824 custom_field.slug rather than custom_field.name\nif custom_field.type == CustomFieldTypeChoices.TYPE_MULTISELECT:\nfor value in instance.cf.get(custom_field.name):\nself.assertIn(escape(str(value)), response_body, msg=response_body)\nelse:\nself.assertIn(\nescape(str(instance.cf.get(custom_field.name) or \"\")), response_body, msg=response_body\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object_with_constrained_permission(self):\ninstance1, instance2 = self._get_queryset().all()[:2]\n# Add object-level permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\n# To get a different rendering flow than the `test_get_object_with_permission` test above,\n# enable additional permissions for this object so that add/edit/delete buttons are rendered.\nactions=[\"view\", \"add\", \"change\", \"delete\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET to permitted object\nself.assertHttpStatus(self.client.get(instance1.get_absolute_url()), 200)\n# Try GET to non-permitted object\nself.assertHttpStatus(self.client.get(instance2.get_absolute_url()), 404)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_has_advanced_tab(self):\ninstance = self._get_queryset().first()\n# Add model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nresponse = self.client.get(instance.get_absolute_url())\nresponse_body = extract_page_body(response.content.decode(response.charset))\nadvanced_tab_href = f\"{instance.get_absolute_url()}#advanced\"\nself.assertIn(advanced_tab_href, response_body)\nself.assertIn(\"Advanced\", response_body)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.ListObjectsViewTestCase","title":"<code>ListObjectsViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>Retrieve multiple instances.</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>class ListObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n    Retrieve multiple instances.\n    \"\"\"\nfilterset = None\ndef get_filterset(self):\nreturn self.filterset or get_filterset_for_model(self.model)\n# Helper methods to be overriden by special cases.\n# See ConsoleConnectionsTestCase, InterfaceConnectionsTestCase and PowerConnectionsTestCase\ndef get_list_url(self):\nreturn reverse(validated_viewname(self.model, \"list\"))\ndef get_title(self):\nreturn bettertitle(self.model._meta.verbose_name_plural)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_list_objects_anonymous(self):\n# Make the request as an unauthenticated user\nself.client.logout()\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 200)\nresponse_body = response.content.decode(response.charset)\nself.assertIn(\"/login/?next=\" + self._get_url(\"list\"), response_body, msg=response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_list_objects_filtered(self):\ninstance1, instance2 = self._get_queryset().all()[:2]\nresponse = self.client.get(f\"{self._get_url('list')}?id={instance1.pk}\")\nself.assertHttpStatus(response, 200)\ncontent = extract_page_body(response.content.decode(response.charset))\n# TODO: it'd make test failures more readable if we strip the page headers/footers from the content\nif hasattr(self.model, \"name\"):\nself.assertRegex(content, r\"&gt;\\s*\" + re.escape(escape(instance1.name)) + r\"\\s*&lt;\", msg=content)\nself.assertNotRegex(content, r\"&gt;\\s*\" + re.escape(escape(instance2.name)) + r\"\\s*&lt;\", msg=content)\ntry:\nself.assertIn(self._get_url(\"view\", instance=instance1), content, msg=content)\nself.assertNotIn(self._get_url(\"view\", instance=instance2), content, msg=content)\nexcept NoReverseMatch:\npass\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"], STRICT_FILTERING=True)\ndef test_list_objects_unknown_filter_strict_filtering(self):\n\"\"\"Verify that with STRICT_FILTERING, an unknown filter results in an error message and no matches.\"\"\"\nresponse = self.client.get(f\"{self._get_url('list')}?ice_cream_flavor=chocolate\")\nself.assertHttpStatus(response, 200)\ncontent = extract_page_body(response.content.decode(response.charset))\n# TODO: it'd make test failures more readable if we strip the page headers/footers from the content\nself.assertIn(\"Unknown filter field\", content, msg=content)\n# There should be no table rows displayed except for the empty results row\nself.assertIn(f\"No {self.model._meta.verbose_name_plural} found\", content, msg=content)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"], STRICT_FILTERING=False)\ndef test_list_objects_unknown_filter_no_strict_filtering(self):\n\"\"\"Verify that without STRICT_FILTERING, an unknown filter is ignored.\"\"\"\ninstance1, instance2 = self._get_queryset().all()[:2]\nwith self.assertLogs(\"nautobot.utilities.filters\") as cm:\nresponse = self.client.get(f\"{self._get_url('list')}?ice_cream_flavor=chocolate\")\nfilterset = self.get_filterset()\nif not filterset:\nself.fail(\nf\"Couldn't find filterset for model {self.model}. The FilterSet class is expected to be in the \"\n\"filters module within the application associated with the model and its name is expected to be \"\nf\"{self.model.__name__}FilterSet.\"\n)\nself.assertEqual(\ncm.output,\n[\nf\"WARNING:nautobot.utilities.filters:{filterset.__name__}: \"\n'Unknown filter field \"ice_cream_flavor\"',\n],\n)\nself.assertHttpStatus(response, 200)\ncontent = extract_page_body(response.content.decode(response.charset))\n# TODO: it'd make test failures more readable if we strip the page headers/footers from the content\nself.assertNotIn(\"Unknown filter field\", content, msg=content)\nself.assertNotIn(f\"No {self.model._meta.verbose_name_plural} found\", content, msg=content)\nif hasattr(self.model, \"name\"):\n# TODO: https://github.com/nautobot/nautobot/issues/2580\n#       This is fragile as we move toward more autogenerated test fixtures,\n#       as \"instance.name\" may appear coincidentally in other page text if we're not careful.\nself.assertIn(escape(instance1.name), content, msg=content)\nself.assertIn(escape(instance2.name), content, msg=content)\ntry:\nself.assertIn(self._get_url(\"view\", instance=instance1), content, msg=content)\nself.assertIn(self._get_url(\"view\", instance=instance2), content, msg=content)\nexcept NoReverseMatch:\npass\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_without_permission(self):\n# Try GET without permission\nwith disable_warnings(\"django.request\"):\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 403)\nresponse_body = response.content.decode(response.charset)\nself.assertNotIn(\"/login/\", response_body, msg=response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_with_permission(self):\n# Add model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 200)\nresponse_body = response.content.decode(response.charset)\nlist_url = self.get_list_url()\ntitle = self.get_title()\n# Check if breadcrumb is rendered correctly\nself.assertIn(\nf'&lt;a href=\"{list_url}\"&gt;{title}&lt;/a&gt;',\nresponse_body,\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_with_constrained_permission(self):\ninstance1, instance2 = self._get_queryset().all()[:2]\n# Add object-level permission\nobj_perm = ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with object-level permission\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 200)\ncontent = extract_page_body(response.content.decode(response.charset))\n# TODO: it'd make test failures more readable if we strip the page headers/footers from the content\nif hasattr(self.model, \"name\"):\nself.assertIn(escape(instance1.name), content, msg=content)\nself.assertNotIn(escape(instance2.name), content, msg=content)\nelif hasattr(self.model, \"get_absolute_url\"):\nself.assertIn(instance1.get_absolute_url(), content, msg=content)\nself.assertNotIn(instance2.get_absolute_url(), content, msg=content)\n@skipIf(\n\"example_plugin\" not in settings.PLUGINS,\n\"example_plugin not in settings.PLUGINS\",\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_view_plugin_banner(self):\n\"\"\"\n        If example plugin is installed, check if the plugin banner is rendered correctly in ObjectListView.\n        \"\"\"\n# Add model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 200)\nresponse_body = response.content.decode(response.charset)\n# Check plugin banner is rendered correctly\nself.assertIn(\nf\"&lt;div&gt;You are viewing a table of {self.model._meta.verbose_name_plural}&lt;/div&gt;\", response_body\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_queryset_to_csv(self):\n# Built-in CSV export\nif not hasattr(self.model, \"csv_headers\"):\nself.skipTest(f\"{self.model} has no csv_headers attribute?\")\nresponse = self.client.get(f\"{self._get_url('list')}?export\")\nself.assertHttpStatus(response, 200)\nself.assertEqual(response.get(\"Content-Type\"), \"text/csv\")\ninstance1 = self._get_queryset().first()\n# With filtering\nresponse = self.client.get(f\"{self._get_url('list')}?export&amp;id={instance1.pk}\")\nself.assertHttpStatus(response, 200)\nself.assertEqual(response.get(\"Content-Type\"), \"text/csv\")\nresponse_body = response.content.decode(response.charset)\nreader = csv.DictReader(StringIO(response_body))\n# This line will make data a dictionary with csv headers as keys and corresponding csv values as values.\n# For example:\n# {'name': 'AFRINIC', 'slug': 'afrinic', 'is_private': '', 'description': ...'}\ndata = [dict(row) for row in reader][0]\n# Get expected data\ninstance1_unformatted_data = [\n*instance1.to_csv(),\n*instance1.get_custom_fields().values(),\n]\n# Format expected data using `csv_format`, parse back with `csv` and get first row\ninstance1_csv_data = next(iter(csv.reader([csv_format(instance1_unformatted_data)])))\ninstance1_cf_headers = [\"cf_\" + str(cf.slug) for cf in instance1.get_custom_fields().keys()]\ninstance1_csv_headers = list(self.model.csv_headers) + instance1_cf_headers\nself.assertEqual(instance1_csv_headers, list(data.keys()))\nself.assertEqual(instance1_csv_data, list(data.values()))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.ListObjectsViewTestCase.test_list_objects_unknown_filter_no_strict_filtering","title":"<code>test_list_objects_unknown_filter_no_strict_filtering()</code>","text":"<p>Verify that without STRICT_FILTERING, an unknown filter is ignored.</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"], STRICT_FILTERING=False)\ndef test_list_objects_unknown_filter_no_strict_filtering(self):\n\"\"\"Verify that without STRICT_FILTERING, an unknown filter is ignored.\"\"\"\ninstance1, instance2 = self._get_queryset().all()[:2]\nwith self.assertLogs(\"nautobot.utilities.filters\") as cm:\nresponse = self.client.get(f\"{self._get_url('list')}?ice_cream_flavor=chocolate\")\nfilterset = self.get_filterset()\nif not filterset:\nself.fail(\nf\"Couldn't find filterset for model {self.model}. The FilterSet class is expected to be in the \"\n\"filters module within the application associated with the model and its name is expected to be \"\nf\"{self.model.__name__}FilterSet.\"\n)\nself.assertEqual(\ncm.output,\n[\nf\"WARNING:nautobot.utilities.filters:{filterset.__name__}: \"\n'Unknown filter field \"ice_cream_flavor\"',\n],\n)\nself.assertHttpStatus(response, 200)\ncontent = extract_page_body(response.content.decode(response.charset))\n# TODO: it'd make test failures more readable if we strip the page headers/footers from the content\nself.assertNotIn(\"Unknown filter field\", content, msg=content)\nself.assertNotIn(f\"No {self.model._meta.verbose_name_plural} found\", content, msg=content)\nif hasattr(self.model, \"name\"):\n# TODO: https://github.com/nautobot/nautobot/issues/2580\n#       This is fragile as we move toward more autogenerated test fixtures,\n#       as \"instance.name\" may appear coincidentally in other page text if we're not careful.\nself.assertIn(escape(instance1.name), content, msg=content)\nself.assertIn(escape(instance2.name), content, msg=content)\ntry:\nself.assertIn(self._get_url(\"view\", instance=instance1), content, msg=content)\nself.assertIn(self._get_url(\"view\", instance=instance2), content, msg=content)\nexcept NoReverseMatch:\npass\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.ListObjectsViewTestCase.test_list_objects_unknown_filter_strict_filtering","title":"<code>test_list_objects_unknown_filter_strict_filtering()</code>","text":"<p>Verify that with STRICT_FILTERING, an unknown filter results in an error message and no matches.</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"], STRICT_FILTERING=True)\ndef test_list_objects_unknown_filter_strict_filtering(self):\n\"\"\"Verify that with STRICT_FILTERING, an unknown filter results in an error message and no matches.\"\"\"\nresponse = self.client.get(f\"{self._get_url('list')}?ice_cream_flavor=chocolate\")\nself.assertHttpStatus(response, 200)\ncontent = extract_page_body(response.content.decode(response.charset))\n# TODO: it'd make test failures more readable if we strip the page headers/footers from the content\nself.assertIn(\"Unknown filter field\", content, msg=content)\n# There should be no table rows displayed except for the empty results row\nself.assertIn(f\"No {self.model._meta.verbose_name_plural} found\", content, msg=content)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.ListObjectsViewTestCase.test_list_view_plugin_banner","title":"<code>test_list_view_plugin_banner()</code>","text":"<p>If example plugin is installed, check if the plugin banner is rendered correctly in ObjectListView.</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>@skipIf(\n\"example_plugin\" not in settings.PLUGINS,\n\"example_plugin not in settings.PLUGINS\",\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_view_plugin_banner(self):\n\"\"\"\n    If example plugin is installed, check if the plugin banner is rendered correctly in ObjectListView.\n    \"\"\"\n# Add model-level permission\nobj_perm = ObjectPermission(name=\"Test permission\", actions=[\"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 200)\nresponse_body = response.content.decode(response.charset)\n# Check plugin banner is rendered correctly\nself.assertIn(\nf\"&lt;div&gt;You are viewing a table of {self.model._meta.verbose_name_plural}&lt;/div&gt;\", response_body\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.OrganizationalObjectViewTestCase","title":"<code>OrganizationalObjectViewTestCase</code>","text":"<p>             Bases: <code>GetObjectViewTestCase</code>, <code>GetObjectChangelogViewTestCase</code>, <code>GetObjectNotesViewTestCase</code>, <code>CreateObjectViewTestCase</code>, <code>EditObjectViewTestCase</code>, <code>DeleteObjectViewTestCase</code>, <code>ListObjectsViewTestCase</code>, <code>BulkImportObjectsViewTestCase</code>, <code>BulkDeleteObjectsViewTestCase</code></p> <p>TestCase suitable for all organizational objects</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>class OrganizationalObjectViewTestCase(\nGetObjectViewTestCase,\nGetObjectChangelogViewTestCase,\nGetObjectNotesViewTestCase,\nCreateObjectViewTestCase,\nEditObjectViewTestCase,\nDeleteObjectViewTestCase,\nListObjectsViewTestCase,\nBulkImportObjectsViewTestCase,\nBulkDeleteObjectsViewTestCase,\n):\n\"\"\"\n    TestCase suitable for all organizational objects\n    \"\"\"\nmaxDiff = None\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.utilities.testing.views.ViewTestCases.PrimaryObjectViewTestCase","title":"<code>PrimaryObjectViewTestCase</code>","text":"<p>             Bases: <code>GetObjectViewTestCase</code>, <code>GetObjectChangelogViewTestCase</code>, <code>GetObjectNotesViewTestCase</code>, <code>CreateObjectViewTestCase</code>, <code>EditObjectViewTestCase</code>, <code>DeleteObjectViewTestCase</code>, <code>ListObjectsViewTestCase</code>, <code>BulkImportObjectsViewTestCase</code>, <code>BulkEditObjectsViewTestCase</code>, <code>BulkDeleteObjectsViewTestCase</code></p> <p>TestCase suitable for testing all standard View functions for primary objects</p> Source code in <code>nautobot/utilities/testing/views.py</code> <pre><code>class PrimaryObjectViewTestCase(\nGetObjectViewTestCase,\nGetObjectChangelogViewTestCase,\nGetObjectNotesViewTestCase,\nCreateObjectViewTestCase,\nEditObjectViewTestCase,\nDeleteObjectViewTestCase,\nListObjectsViewTestCase,\nBulkImportObjectsViewTestCase,\nBulkEditObjectsViewTestCase,\nBulkDeleteObjectsViewTestCase,\n):\n\"\"\"\n    TestCase suitable for testing all standard View functions for primary objects\n    \"\"\"\nmaxDiff = None\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html","title":"nautobot.apps.ui","text":""},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui","title":"<code>nautobot.apps.ui</code>","text":"<p>Utilities for apps to integrate with and extend the existing Nautobot UI.</p>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.Banner","title":"<code>nautobot.apps.ui.Banner</code>","text":"<p>Class that may be returned by a registered plugin_banners function.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>class Banner:\n\"\"\"Class that may be returned by a registered plugin_banners function.\"\"\"\ndef __init__(self, content, banner_class=BannerClassChoices.CLASS_INFO):\nself.content = content\nif banner_class not in BannerClassChoices.values():\nraise ValueError(\"Banner class must be a choice within BannerClassChoices.\")\nself.banner_class = banner_class\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.BannerClassChoices","title":"<code>nautobot.apps.ui.BannerClassChoices</code>","text":"<p>             Bases: <code>ChoiceSet</code></p> <p>Styling choices for custom banners.</p> Source code in <code>nautobot/extras/choices.py</code> <pre><code>class BannerClassChoices(ChoiceSet):\n\"\"\"Styling choices for custom banners.\"\"\"\nCLASS_SUCCESS = \"success\"\nCLASS_INFO = \"info\"\nCLASS_WARNING = \"warning\"\nCLASS_DANGER = \"danger\"\nCHOICES = (\n(CLASS_SUCCESS, \"Success\"),\n(CLASS_INFO, \"Info\"),\n(CLASS_WARNING, \"Warning\"),\n(CLASS_DANGER, \"Danger\"),\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.ButtonColorChoices","title":"<code>nautobot.apps.ui.ButtonColorChoices</code>","text":"<p>             Bases: <code>ChoiceSet</code></p> <p>Map standard button color choices to Bootstrap color classes</p> Source code in <code>nautobot/utilities/choices.py</code> <pre><code>class ButtonColorChoices(ChoiceSet):\n\"\"\"\n    Map standard button color choices to Bootstrap color classes\n    \"\"\"\nDEFAULT = \"default\"\nBLUE = \"primary\"\nGREY = \"secondary\"\nGREEN = \"success\"\nRED = \"danger\"\nYELLOW = \"warning\"\nBLACK = \"dark\"\nCHOICES = (\n(DEFAULT, \"Default\"),\n(BLUE, \"Blue\"),\n(GREY, \"Grey\"),\n(GREEN, \"Green\"),\n(RED, \"Red\"),\n(YELLOW, \"Yellow\"),\n(BLACK, \"Black\"),\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.HomePageItem","title":"<code>nautobot.apps.ui.HomePageItem</code>","text":"<p>             Bases: <code>HomePageBase</code>, <code>PermissionsMixin</code></p> <p>Defines properties that can be used for a panel item.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class HomePageItem(HomePageBase, PermissionsMixin):\n\"\"\"Defines properties that can be used for a panel item.\"\"\"\npermissions = []\nitems = []\ntemplate_path = None\n@property\ndef initial_dict(self):\nreturn {\n\"custom_template\": self.custom_template,\n\"custom_data\": self.custom_data,\n\"description\": self.description,\n\"link\": self.link,\n\"model\": self.model,\n\"permissions\": self.permissions,\n\"template_path\": self.template_path,\n\"weight\": self.weight,\n}\n@property\ndef fixed_fields(self):\nreturn ()\ndef __init__(\nself,\nname,\nlink=None,\nmodel=None,\ncustom_template=None,\ncustom_data=None,\ndescription=None,\npermissions=None,\nweight=1000,\n):\n\"\"\"\n        Ensure item properties.\n        Args:\n            name (str): The name of the item.\n            link (str): The link to be used for this item.\n            model (str): The model to being used for this item to calculate the total count of objects.\n            custom_template (str): Name of custom template.\n            custom_data (dict): Custom data to be passed to the custom template.\n        \"\"\"\nsuper().__init__(permissions)\nself.name = name\nself.custom_template = custom_template\nself.custom_data = custom_data\nself.description = description\nself.link = link\nself.model = model\nself.weight = weight\nif model is not None and custom_template is not None:\nraise ValueError(\"Cannot specify model and custom_template at the same time.\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.HomePageItem.__init__","title":"<code>__init__(name, link=None, model=None, custom_template=None, custom_data=None, description=None, permissions=None, weight=1000)</code>","text":"<p>Ensure item properties.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the item.</p> required <code>link</code> <code>str</code> <p>The link to be used for this item.</p> <code>None</code> <code>model</code> <code>str</code> <p>The model to being used for this item to calculate the total count of objects.</p> <code>None</code> <code>custom_template</code> <code>str</code> <p>Name of custom template.</p> <code>None</code> <code>custom_data</code> <code>dict</code> <p>Custom data to be passed to the custom template.</p> <code>None</code> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>def __init__(\nself,\nname,\nlink=None,\nmodel=None,\ncustom_template=None,\ncustom_data=None,\ndescription=None,\npermissions=None,\nweight=1000,\n):\n\"\"\"\n    Ensure item properties.\n    Args:\n        name (str): The name of the item.\n        link (str): The link to be used for this item.\n        model (str): The model to being used for this item to calculate the total count of objects.\n        custom_template (str): Name of custom template.\n        custom_data (dict): Custom data to be passed to the custom template.\n    \"\"\"\nsuper().__init__(permissions)\nself.name = name\nself.custom_template = custom_template\nself.custom_data = custom_data\nself.description = description\nself.link = link\nself.model = model\nself.weight = weight\nif model is not None and custom_template is not None:\nraise ValueError(\"Cannot specify model and custom_template at the same time.\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.HomePagePanel","title":"<code>nautobot.apps.ui.HomePagePanel</code>","text":"<p>             Bases: <code>HomePageBase</code>, <code>PermissionsMixin</code></p> <p>Defines properties that can be used for a panel.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class HomePagePanel(HomePageBase, PermissionsMixin):\n\"\"\"Defines properties that can be used for a panel.\"\"\"\npermissions = []\nitems = []\ntemplate_path = None\n@property\ndef initial_dict(self):\nreturn {\n\"custom_template\": self.custom_template,\n\"custom_data\": self.custom_data,\n\"weight\": self.weight,\n\"items\": {},\n\"permissions\": self.permissions,\n\"template_path\": self.template_path,\n}\n@property\ndef fixed_fields(self):\nreturn ()\ndef __init__(self, name, permissions=None, custom_data=None, custom_template=None, items=None, weight=1000):\n\"\"\"\n        Ensure panel properties.\n        Args:\n            name (str): The name of the panel.\n            permissions (list): The permissions required to view this panel.\n            custom_data (dict): Custom data to be passed to the custom template.\n            custom_template (str): Name of custom template.\n            items (list): List of items to be rendered in this panel.\n            weight (int): The weight of this panel.\n        \"\"\"\nif permissions is None:\npermissions = []\nsuper().__init__(permissions)\nself.custom_data = custom_data\nself.custom_template = custom_template\nself.name = name\nself.permissions = permissions\nself.weight = weight\nif items is not None and custom_template is not None:\nraise ValueError(\"Cannot specify items and custom_template at the same time.\")\nif items is not None:\nif not isinstance(items, (list, tuple)):\nraise TypeError(\"Items must be passed as a tuple or list.\")\nelif not all(isinstance(item, (HomePageGroup, HomePageItem)) for item in items):\nraise TypeError(\"All items defined in a panel must be an instance of HomePageGroup or HomePageItem\")\nself.items = items\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.HomePagePanel.__init__","title":"<code>__init__(name, permissions=None, custom_data=None, custom_template=None, items=None, weight=1000)</code>","text":"<p>Ensure panel properties.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the panel.</p> required <code>permissions</code> <code>list</code> <p>The permissions required to view this panel.</p> <code>None</code> <code>custom_data</code> <code>dict</code> <p>Custom data to be passed to the custom template.</p> <code>None</code> <code>custom_template</code> <code>str</code> <p>Name of custom template.</p> <code>None</code> <code>items</code> <code>list</code> <p>List of items to be rendered in this panel.</p> <code>None</code> <code>weight</code> <code>int</code> <p>The weight of this panel.</p> <code>1000</code> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>def __init__(self, name, permissions=None, custom_data=None, custom_template=None, items=None, weight=1000):\n\"\"\"\n    Ensure panel properties.\n    Args:\n        name (str): The name of the panel.\n        permissions (list): The permissions required to view this panel.\n        custom_data (dict): Custom data to be passed to the custom template.\n        custom_template (str): Name of custom template.\n        items (list): List of items to be rendered in this panel.\n        weight (int): The weight of this panel.\n    \"\"\"\nif permissions is None:\npermissions = []\nsuper().__init__(permissions)\nself.custom_data = custom_data\nself.custom_template = custom_template\nself.name = name\nself.permissions = permissions\nself.weight = weight\nif items is not None and custom_template is not None:\nraise ValueError(\"Cannot specify items and custom_template at the same time.\")\nif items is not None:\nif not isinstance(items, (list, tuple)):\nraise TypeError(\"Items must be passed as a tuple or list.\")\nelif not all(isinstance(item, (HomePageGroup, HomePageItem)) for item in items):\nraise TypeError(\"All items defined in a panel must be an instance of HomePageGroup or HomePageItem\")\nself.items = items\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.NavMenuAddButton","title":"<code>nautobot.apps.ui.NavMenuAddButton</code>","text":"<p>             Bases: <code>NavMenuButton</code></p> <p>Add button subclass.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class NavMenuAddButton(NavMenuButton):\n\"\"\"Add button subclass.\"\"\"\ndef __init__(self, *args, **kwargs):\n\"\"\"Ensure button properties.\"\"\"\nif \"title\" not in kwargs:\nkwargs[\"title\"] = \"Add\"\nif \"icon_class\" not in kwargs:\nkwargs[\"icon_class\"] = ButtonActionIconChoices.ADD\nif \"button_class\" not in kwargs:\nkwargs[\"button_class\"] = ButtonActionColorChoices.ADD\nif \"weight\" not in kwargs:\nkwargs[\"weight\"] = 100\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuAddButton.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>Ensure button properties.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\"\"\"Ensure button properties.\"\"\"\nif \"title\" not in kwargs:\nkwargs[\"title\"] = \"Add\"\nif \"icon_class\" not in kwargs:\nkwargs[\"icon_class\"] = ButtonActionIconChoices.ADD\nif \"button_class\" not in kwargs:\nkwargs[\"button_class\"] = ButtonActionColorChoices.ADD\nif \"weight\" not in kwargs:\nkwargs[\"weight\"] = 100\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.NavMenuButton","title":"<code>nautobot.apps.ui.NavMenuButton</code>","text":"<p>             Bases: <code>NavMenuBase</code>, <code>PermissionsMixin</code></p> <p>This class represents a button within a PluginMenuItem. Note that button colors should come from ButtonColorChoices.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class NavMenuButton(NavMenuBase, PermissionsMixin):\n\"\"\"\n    This class represents a button within a PluginMenuItem. Note that button colors should come from\n    ButtonColorChoices.\n    \"\"\"\n@property\ndef initial_dict(self):\nreturn {\n\"link\": self.link,\n\"icon_class\": self.icon_class,\n\"button_class\": self.button_class,\n\"weight\": self.weight,\n\"buttons\": {},\n\"permissions\": self.permissions,\n}\n@property\ndef fixed_fields(self):\nreturn (\n(\"button_class\", self.button_class),\n(\"icon_class\", self.icon_class),\n(\"link\", self.link),\n(\"permissions\", self.permissions),\n)\ndef __init__(\nself,\nlink,\ntitle,\nicon_class,\nbutton_class=ButtonActionColorChoices.DEFAULT,\npermissions=None,\nweight=1000,\n):\n\"\"\"\n        Ensure button properties.\n        Args:\n            link (str): The link to be used for this button.\n            title (str): The title of the button.\n            icon_class (str): The icon class to be used as the icon for the start of the button.\n            button_class (str): The button class defines to be used to define the style of the button.\n            permissions (list): The permissions required to view this button.\n            weight (int): The weight of this button.\n        \"\"\"\nsuper().__init__(permissions)\nself.link = link\nself.title = title\nself.icon_class = icon_class\nself.weight = weight\nself.button_class = button_class\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuButton.__init__","title":"<code>__init__(link, title, icon_class, button_class=ButtonActionColorChoices.DEFAULT, permissions=None, weight=1000)</code>","text":"<p>Ensure button properties.</p> <p>Parameters:</p> Name Type Description Default <code>link</code> <code>str</code> <p>The link to be used for this button.</p> required <code>title</code> <code>str</code> <p>The title of the button.</p> required <code>icon_class</code> <code>str</code> <p>The icon class to be used as the icon for the start of the button.</p> required <code>button_class</code> <code>str</code> <p>The button class defines to be used to define the style of the button.</p> <code>ButtonActionColorChoices.DEFAULT</code> <code>permissions</code> <code>list</code> <p>The permissions required to view this button.</p> <code>None</code> <code>weight</code> <code>int</code> <p>The weight of this button.</p> <code>1000</code> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>def __init__(\nself,\nlink,\ntitle,\nicon_class,\nbutton_class=ButtonActionColorChoices.DEFAULT,\npermissions=None,\nweight=1000,\n):\n\"\"\"\n    Ensure button properties.\n    Args:\n        link (str): The link to be used for this button.\n        title (str): The title of the button.\n        icon_class (str): The icon class to be used as the icon for the start of the button.\n        button_class (str): The button class defines to be used to define the style of the button.\n        permissions (list): The permissions required to view this button.\n        weight (int): The weight of this button.\n    \"\"\"\nsuper().__init__(permissions)\nself.link = link\nself.title = title\nself.icon_class = icon_class\nself.weight = weight\nself.button_class = button_class\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.NavMenuGroup","title":"<code>nautobot.apps.ui.NavMenuGroup</code>","text":"<p>             Bases: <code>NavMenuBase</code>, <code>PermissionsMixin</code></p> <p>Ths class represents a navigation menu group. This is built up from a name and a weight value. The name is the display text and the weight defines its position in the navbar.</p> <p>Items are each specified as a list of NavMenuItem instances.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class NavMenuGroup(NavMenuBase, PermissionsMixin):\n\"\"\"\n    Ths class represents a navigation menu group. This is built up from a name and a weight value. The name is\n    the display text and the weight defines its position in the navbar.\n    Items are each specified as a list of NavMenuItem instances.\n    \"\"\"\npermissions = []\nitems = []\n@property\ndef initial_dict(self):\nreturn {\n\"weight\": self.weight,\n\"items\": {},\n}\n@property\ndef fixed_fields(self):\nreturn ()\ndef __init__(self, name, items=None, weight=1000):\n\"\"\"\n        Ensure group properties.\n        Args:\n            name (str): The name of the group.\n            items (list): List of items to be rendered in this group.\n            weight (int): The weight of this group.\n        \"\"\"\nself.name = name\nself.weight = weight\nif items is not None and not isinstance(items, (list, tuple)):\nraise TypeError(\"Items must be passed as a tuple or list.\")\nelif not all(isinstance(item, NavMenuItem) for item in items):\nraise TypeError(\"All items defined in a group must be an instance of NavMenuItem\")\nself.items = items\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuGroup.__init__","title":"<code>__init__(name, items=None, weight=1000)</code>","text":"<p>Ensure group properties.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the group.</p> required <code>items</code> <code>list</code> <p>List of items to be rendered in this group.</p> <code>None</code> <code>weight</code> <code>int</code> <p>The weight of this group.</p> <code>1000</code> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>def __init__(self, name, items=None, weight=1000):\n\"\"\"\n    Ensure group properties.\n    Args:\n        name (str): The name of the group.\n        items (list): List of items to be rendered in this group.\n        weight (int): The weight of this group.\n    \"\"\"\nself.name = name\nself.weight = weight\nif items is not None and not isinstance(items, (list, tuple)):\nraise TypeError(\"Items must be passed as a tuple or list.\")\nelif not all(isinstance(item, NavMenuItem) for item in items):\nraise TypeError(\"All items defined in a group must be an instance of NavMenuItem\")\nself.items = items\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.NavMenuImportButton","title":"<code>nautobot.apps.ui.NavMenuImportButton</code>","text":"<p>             Bases: <code>NavMenuButton</code></p> <p>Import button subclass.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class NavMenuImportButton(NavMenuButton):\n\"\"\"Import button subclass.\"\"\"\ndef __init__(self, *args, **kwargs):\n\"\"\"Ensure button properties.\"\"\"\nif \"title\" not in kwargs:\nkwargs[\"title\"] = \"Import\"\nif \"icon_class\" not in kwargs:\nkwargs[\"icon_class\"] = ButtonActionIconChoices.IMPORT\nif \"button_class\" not in kwargs:\nkwargs[\"button_class\"] = ButtonActionColorChoices.IMPORT\nif \"weight\" not in kwargs:\nkwargs[\"weight\"] = 200\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuImportButton.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>Ensure button properties.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\"\"\"Ensure button properties.\"\"\"\nif \"title\" not in kwargs:\nkwargs[\"title\"] = \"Import\"\nif \"icon_class\" not in kwargs:\nkwargs[\"icon_class\"] = ButtonActionIconChoices.IMPORT\nif \"button_class\" not in kwargs:\nkwargs[\"button_class\"] = ButtonActionColorChoices.IMPORT\nif \"weight\" not in kwargs:\nkwargs[\"weight\"] = 200\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.NavMenuItem","title":"<code>nautobot.apps.ui.NavMenuItem</code>","text":"<p>             Bases: <code>NavMenuBase</code>, <code>PermissionsMixin</code></p> <p>This class represents a navigation menu item. This constitutes primary link and its text, but also allows for specifying additional link buttons that appear to the right of the item in the nav menu.</p> <p>Links are specified as Django reverse URL strings. Buttons are each specified as a list of NavMenuButton instances.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class NavMenuItem(NavMenuBase, PermissionsMixin):\n\"\"\"\n    This class represents a navigation menu item. This constitutes primary link and its text, but also allows for\n    specifying additional link buttons that appear to the right of the item in the nav menu.\n    Links are specified as Django reverse URL strings.\n    Buttons are each specified as a list of NavMenuButton instances.\n    \"\"\"\n@property\ndef initial_dict(self):\nreturn {\n\"name\": self.name,\n\"weight\": self.weight,\n\"buttons\": {},\n\"permissions\": self.permissions,\n\"args\": [],\n\"kwargs\": {},\n}\n@property\ndef fixed_fields(self):\nreturn (\n(\"name\", self.name),\n(\"permissions\", self.permissions),\n)\npermissions = []\nbuttons = []\nargs = []\nkwargs = {}\ndef __init__(self, link, name, args=None, kwargs=None, permissions=None, buttons=(), weight=1000):\n\"\"\"\n        Ensure item properties.\n        Args:\n            link (str): The link to be used for this item.\n            name (str): The name of the item.\n            args (list): Arguments that are being passed to the url with reverse() method\n            kwargs (dict): Keyword arguments are are being passed to the url with reverse() method\n            permissions (list): The permissions required to view this item.\n            buttons (list): List of buttons to be rendered in this item.\n            weight (int): The weight of this item.\n        \"\"\"\nsuper().__init__(permissions)\nself.link = link\nself.name = name\nself.weight = weight\nself.args = args\nself.kwargs = kwargs\nif not isinstance(buttons, (list, tuple)):\nraise TypeError(\"Buttons must be passed as a tuple or list.\")\nelif not all(isinstance(button, NavMenuButton) for button in buttons):\nraise TypeError(\"All buttons defined in an item must be an instance or subclass of NavMenuButton\")\nself.buttons = buttons\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuItem.__init__","title":"<code>__init__(link, name, args=None, kwargs=None, permissions=None, buttons=(), weight=1000)</code>","text":"<p>Ensure item properties.</p> <p>Parameters:</p> Name Type Description Default <code>link</code> <code>str</code> <p>The link to be used for this item.</p> required <code>name</code> <code>str</code> <p>The name of the item.</p> required <code>args</code> <code>list</code> <p>Arguments that are being passed to the url with reverse() method</p> <code>None</code> <code>kwargs</code> <code>dict</code> <p>Keyword arguments are are being passed to the url with reverse() method</p> <code>None</code> <code>permissions</code> <code>list</code> <p>The permissions required to view this item.</p> <code>None</code> <code>buttons</code> <code>list</code> <p>List of buttons to be rendered in this item.</p> <code>()</code> <code>weight</code> <code>int</code> <p>The weight of this item.</p> <code>1000</code> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>def __init__(self, link, name, args=None, kwargs=None, permissions=None, buttons=(), weight=1000):\n\"\"\"\n    Ensure item properties.\n    Args:\n        link (str): The link to be used for this item.\n        name (str): The name of the item.\n        args (list): Arguments that are being passed to the url with reverse() method\n        kwargs (dict): Keyword arguments are are being passed to the url with reverse() method\n        permissions (list): The permissions required to view this item.\n        buttons (list): List of buttons to be rendered in this item.\n        weight (int): The weight of this item.\n    \"\"\"\nsuper().__init__(permissions)\nself.link = link\nself.name = name\nself.weight = weight\nself.args = args\nself.kwargs = kwargs\nif not isinstance(buttons, (list, tuple)):\nraise TypeError(\"Buttons must be passed as a tuple or list.\")\nelif not all(isinstance(button, NavMenuButton) for button in buttons):\nraise TypeError(\"All buttons defined in an item must be an instance or subclass of NavMenuButton\")\nself.buttons = buttons\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.NavMenuTab","title":"<code>nautobot.apps.ui.NavMenuTab</code>","text":"<p>             Bases: <code>NavMenuBase</code>, <code>PermissionsMixin</code></p> <p>Ths class represents a navigation menu tab. This is built up from a name and a weight value. The name is the display text and the weight defines its position in the navbar.</p> <p>Groups are each specified as a list of NavMenuGroup instances.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class NavMenuTab(NavMenuBase, PermissionsMixin):\n\"\"\"\n    Ths class represents a navigation menu tab. This is built up from a name and a weight value. The name is\n    the display text and the weight defines its position in the navbar.\n    Groups are each specified as a list of NavMenuGroup instances.\n    \"\"\"\npermissions = []\ngroups = []\n@property\ndef initial_dict(self):\nreturn {\n\"weight\": self.weight,\n\"groups\": {},\n\"permissions\": set(),\n}\n@property\ndef fixed_fields(self):\nreturn ()\ndef __init__(self, name, permissions=None, groups=None, weight=1000):\n\"\"\"\n        Ensure tab properties.\n        Args:\n            name (str): The name of the tab.\n            permissions (list): The permissions required to view this tab.\n            groups (list): List of groups to be rendered in this tab.\n            weight (int): The weight of this tab.\n        \"\"\"\nsuper().__init__(permissions)\nself.name = name\nself.weight = weight\nif groups is not None:\nif not isinstance(groups, (list, tuple)):\nraise TypeError(\"Groups must be passed as a tuple or list.\")\nelif not all(isinstance(group, NavMenuGroup) for group in groups):\nraise TypeError(\"All groups defined in a tab must be an instance of NavMenuGroup\")\nself.groups = groups\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuTab.__init__","title":"<code>__init__(name, permissions=None, groups=None, weight=1000)</code>","text":"<p>Ensure tab properties.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the tab.</p> required <code>permissions</code> <code>list</code> <p>The permissions required to view this tab.</p> <code>None</code> <code>groups</code> <code>list</code> <p>List of groups to be rendered in this tab.</p> <code>None</code> <code>weight</code> <code>int</code> <p>The weight of this tab.</p> <code>1000</code> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>def __init__(self, name, permissions=None, groups=None, weight=1000):\n\"\"\"\n    Ensure tab properties.\n    Args:\n        name (str): The name of the tab.\n        permissions (list): The permissions required to view this tab.\n        groups (list): List of groups to be rendered in this tab.\n        weight (int): The weight of this tab.\n    \"\"\"\nsuper().__init__(permissions)\nself.name = name\nself.weight = weight\nif groups is not None:\nif not isinstance(groups, (list, tuple)):\nraise TypeError(\"Groups must be passed as a tuple or list.\")\nelif not all(isinstance(group, NavMenuGroup) for group in groups):\nraise TypeError(\"All groups defined in a tab must be an instance of NavMenuGroup\")\nself.groups = groups\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.TemplateExtension","title":"<code>nautobot.apps.ui.TemplateExtension</code>","text":"<p>This class is used to register plugin content to be injected into core Nautobot templates. It contains methods that are overridden by plugin authors to return template content.</p> <p>The <code>model</code> attribute on the class defines the which model detail page this class renders content for. It should be set as a string in the form <code>&lt;app_label&gt;.&lt;model_name&gt;</code>. <code>render()</code> provides the following context data:</p> <ul> <li>object - The object being viewed</li> <li>request - The current request</li> <li>settings - Global Nautobot settings</li> <li>config - Plugin-specific configuration parameters</li> </ul> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>class TemplateExtension:\n\"\"\"\n    This class is used to register plugin content to be injected into core Nautobot templates. It contains methods\n    that are overridden by plugin authors to return template content.\n    The `model` attribute on the class defines the which model detail page this class renders content for. It\n    should be set as a string in the form `&lt;app_label&gt;.&lt;model_name&gt;`. `render()` provides the following context data:\n    * object - The object being viewed\n    * request - The current request\n    * settings - Global Nautobot settings\n    * config - Plugin-specific configuration parameters\n    \"\"\"\nmodel = None\ndef __init__(self, context):\nself.context = context\ndef render(self, template_name, extra_context=None):\n\"\"\"\n        Convenience method for rendering the specified Django template using the default context data. An additional\n        context dictionary may be passed as `extra_context`.\n        \"\"\"\nif extra_context is None:\nextra_context = {}\nelif not isinstance(extra_context, dict):\nraise TypeError(\"extra_context must be a dictionary\")\nreturn get_template(template_name).render({**self.context, **extra_context})\ndef left_page(self):\n\"\"\"\n        Content that will be rendered on the left of the detail page view. Content should be returned as an\n        HTML string. Note that content does not need to be marked as safe because this is automatically handled.\n        \"\"\"\nraise NotImplementedError\ndef right_page(self):\n\"\"\"\n        Content that will be rendered on the right of the detail page view. Content should be returned as an\n        HTML string. Note that content does not need to be marked as safe because this is automatically handled.\n        \"\"\"\nraise NotImplementedError\ndef full_width_page(self):\n\"\"\"\n        Content that will be rendered within the full width of the detail page view. Content should be returned as an\n        HTML string. Note that content does not need to be marked as safe because this is automatically handled.\n        \"\"\"\nraise NotImplementedError\ndef buttons(self):\n\"\"\"\n        Buttons that will be rendered and added to the existing list of buttons on the detail page view. Content\n        should be returned as an HTML string. Note that content does not need to be marked as safe because this is\n        automatically handled.\n        \"\"\"\nraise NotImplementedError\ndef detail_tabs(self):\n\"\"\"\n        Tabs that will be rendered and added to the existing list of tabs on the detail page view.\n        Tabs will be ordered by their position in the list.\n        Content should be returned as a list of dicts in the following format:\n        ```\n        [\n            {\n                \"title\": \"&lt;title&gt;\",\n                \"url\": \"&lt;url for the tab link&gt;\",\n            },\n            {\n                \"title\": \"&lt;title&gt;\",\n                \"url\": \"&lt;url for the tab link&gt;\",\n            },\n        ]\n        ```\n        \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.extras.plugins.TemplateExtension.buttons","title":"<code>buttons()</code>","text":"<p>Buttons that will be rendered and added to the existing list of buttons on the detail page view. Content should be returned as an HTML string. Note that content does not need to be marked as safe because this is automatically handled.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>def buttons(self):\n\"\"\"\n    Buttons that will be rendered and added to the existing list of buttons on the detail page view. Content\n    should be returned as an HTML string. Note that content does not need to be marked as safe because this is\n    automatically handled.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.extras.plugins.TemplateExtension.detail_tabs","title":"<code>detail_tabs()</code>","text":"<p>Tabs that will be rendered and added to the existing list of tabs on the detail page view. Tabs will be ordered by their position in the list.</p> <p>Content should be returned as a list of dicts in the following format: <pre><code>[\n    {\n        \"title\": \"&lt;title&gt;\",\n        \"url\": \"&lt;url for the tab link&gt;\",\n    },\n    {\n        \"title\": \"&lt;title&gt;\",\n        \"url\": \"&lt;url for the tab link&gt;\",\n    },\n]\n</code></pre></p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>def detail_tabs(self):\n\"\"\"\n    Tabs that will be rendered and added to the existing list of tabs on the detail page view.\n    Tabs will be ordered by their position in the list.\n    Content should be returned as a list of dicts in the following format:\n    ```\n    [\n        {\n            \"title\": \"&lt;title&gt;\",\n            \"url\": \"&lt;url for the tab link&gt;\",\n        },\n        {\n            \"title\": \"&lt;title&gt;\",\n            \"url\": \"&lt;url for the tab link&gt;\",\n        },\n    ]\n    ```\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.extras.plugins.TemplateExtension.full_width_page","title":"<code>full_width_page()</code>","text":"<p>Content that will be rendered within the full width of the detail page view. Content should be returned as an HTML string. Note that content does not need to be marked as safe because this is automatically handled.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>def full_width_page(self):\n\"\"\"\n    Content that will be rendered within the full width of the detail page view. Content should be returned as an\n    HTML string. Note that content does not need to be marked as safe because this is automatically handled.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.extras.plugins.TemplateExtension.left_page","title":"<code>left_page()</code>","text":"<p>Content that will be rendered on the left of the detail page view. Content should be returned as an HTML string. Note that content does not need to be marked as safe because this is automatically handled.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>def left_page(self):\n\"\"\"\n    Content that will be rendered on the left of the detail page view. Content should be returned as an\n    HTML string. Note that content does not need to be marked as safe because this is automatically handled.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.extras.plugins.TemplateExtension.render","title":"<code>render(template_name, extra_context=None)</code>","text":"<p>Convenience method for rendering the specified Django template using the default context data. An additional context dictionary may be passed as <code>extra_context</code>.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>def render(self, template_name, extra_context=None):\n\"\"\"\n    Convenience method for rendering the specified Django template using the default context data. An additional\n    context dictionary may be passed as `extra_context`.\n    \"\"\"\nif extra_context is None:\nextra_context = {}\nelif not isinstance(extra_context, dict):\nraise TypeError(\"extra_context must be a dictionary\")\nreturn get_template(template_name).render({**self.context, **extra_context})\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.extras.plugins.TemplateExtension.right_page","title":"<code>right_page()</code>","text":"<p>Content that will be rendered on the right of the detail page view. Content should be returned as an HTML string. Note that content does not need to be marked as safe because this is automatically handled.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>def right_page(self):\n\"\"\"\n    Content that will be rendered on the right of the detail page view. Content should be returned as an\n    HTML string. Note that content does not need to be marked as safe because this is automatically handled.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"code-reference/nautobot/apps/urls.html","title":"nautobot.apps.urls","text":""},{"location":"code-reference/nautobot/apps/urls.html#nautobot.apps.urls","title":"<code>nautobot.apps.urls</code>","text":"<p>Utilities for apps to implement URL routing.</p>"},{"location":"code-reference/nautobot/apps/urls.html#nautobot.apps.urls.NautobotUIViewSetRouter","title":"<code>nautobot.apps.urls.NautobotUIViewSetRouter</code>","text":"<p>             Bases: <code>SimpleRouter</code></p> <p>Nautobot Custom Router that is intended for UI use only.</p> Source code in <code>nautobot/core/views/routers.py</code> <pre><code>class NautobotUIViewSetRouter(SimpleRouter):\n\"\"\"\n    Nautobot Custom Router that is intended for UI use only.\n    \"\"\"\nroutes = [\nRoute(\nurl=r\"^{prefix}/$\",\nmapping={\"get\": \"list\"},\nname=\"{basename}_list\",\ndetail=False,\ninitkwargs={\"suffix\": \"List\"},\n),\nRoute(\nurl=r\"^{prefix}/add/$\",\nmapping={\n\"get\": \"create\",\n\"post\": \"create\",\n},\nname=\"{basename}_add\",\ndetail=False,\ninitkwargs={\"suffix\": \"Add\"},\n),\nRoute(\nurl=r\"^{prefix}/import/$\",\nmapping={\n\"get\": \"bulk_create\",\n\"post\": \"bulk_create\",\n},\nname=\"{basename}_import\",\ndetail=False,\ninitkwargs={\"suffix\": \"Import\"},\n),\nRoute(\nurl=r\"^{prefix}/edit/$\",\nmapping={\n\"post\": \"bulk_update\",\n},\nname=\"{basename}_bulk_edit\",\ndetail=False,\ninitkwargs={\"suffix\": \"Bulk Edit\"},\n),\nRoute(\nurl=r\"^{prefix}/delete/$\",\nmapping={\n\"post\": \"bulk_destroy\",\n},\nname=\"{basename}_bulk_delete\",\ndetail=False,\ninitkwargs={\"suffix\": \"Bulk Delete\"},\n),\nRoute(\nurl=r\"^{prefix}/{lookup}/$\",\nmapping={\"get\": \"retrieve\"},\nname=\"{basename}\",\ndetail=True,\ninitkwargs={\"suffix\": \"Detail\"},\n),\nRoute(\nurl=r\"^{prefix}/{lookup}/delete/$\",\nmapping={\n\"get\": \"destroy\",\n\"post\": \"destroy\",\n},\nname=\"{basename}_delete\",\ndetail=True,\ninitkwargs={\"suffix\": \"Delete\"},\n),\nRoute(\nurl=r\"^{prefix}/{lookup}/edit/$\",\nmapping={\n\"get\": \"update\",\n\"post\": \"update\",\n},\nname=\"{basename}_edit\",\ndetail=True,\ninitkwargs={\"suffix\": \"Edit\"},\n),\n# DynamicRoute will handle ChangeLog &amp; Notes UI Views\nDynamicRoute(\nurl=r\"^{prefix}/{lookup}/{url_path}{trailing_slash}$\",\nname=\"{basename}_{url_name}\",\ndetail=True,\ninitkwargs={},\n),\n]\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html","title":"nautobot.apps.views","text":""},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views","title":"<code>nautobot.apps.views</code>","text":"<p>Utilities for apps to implement UI views.</p>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.NautobotUIViewSet","title":"<code>nautobot.apps.views.NautobotUIViewSet</code>","text":"<p>             Bases: <code>mixins.ObjectDetailViewMixin</code>, <code>mixins.ObjectListViewMixin</code>, <code>mixins.ObjectEditViewMixin</code>, <code>mixins.ObjectDestroyViewMixin</code>, <code>mixins.ObjectBulkDestroyViewMixin</code>, <code>mixins.ObjectBulkCreateViewMixin</code>, <code>mixins.ObjectBulkUpdateViewMixin</code>, <code>mixins.ObjectChangeLogViewMixin</code>, <code>mixins.ObjectNotesViewMixin</code></p> <p>Nautobot BaseViewSet that is intended for UI use only. It provides default Nautobot functionalities such as <code>create()</code>, <code>bulk_create()</code>, <code>update()</code>, <code>partial_update()</code>, <code>bulk_update()</code>, <code>destroy()</code>, <code>bulk_destroy()</code>, <code>retrieve()</code> <code>notes()</code>, <code>changelog()</code> and <code>list()</code> actions.</p> Source code in <code>nautobot/core/views/viewsets.py</code> <pre><code>class NautobotUIViewSet(\nmixins.ObjectDetailViewMixin,\nmixins.ObjectListViewMixin,\nmixins.ObjectEditViewMixin,\nmixins.ObjectDestroyViewMixin,\nmixins.ObjectBulkDestroyViewMixin,\nmixins.ObjectBulkCreateViewMixin,\nmixins.ObjectBulkUpdateViewMixin,\nmixins.ObjectChangeLogViewMixin,\nmixins.ObjectNotesViewMixin,\n):\n\"\"\"\n    Nautobot BaseViewSet that is intended for UI use only. It provides default Nautobot functionalities such as\n    `create()`, `bulk_create()`, `update()`, `partial_update()`, `bulk_update()`, `destroy()`, `bulk_destroy()`, `retrieve()`\n    `notes()`, `changelog()` and `list()` actions.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectBulkCreateViewMixin","title":"<code>nautobot.apps.views.ObjectBulkCreateViewMixin</code>","text":"<p>             Bases: <code>NautobotViewSetMixin</code></p> <p>UI mixin to bulk create model instances.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class ObjectBulkCreateViewMixin(NautobotViewSetMixin):\n\"\"\"\n    UI mixin to bulk create model instances.\n    \"\"\"\nbulk_create_active_tab = \"csv-data\"\nbulk_create_form_class = None\nbulk_create_widget_attrs = {}\ndef _process_bulk_create_form(self, form):\n# Iterate through CSV data and bind each row to a new model form instance.\nnew_objs = []\nrequest = self.request\nqueryset = self.get_queryset()\nwith transaction.atomic():\nif request.FILES:\nfield_name = \"csv_file\"\n# Set the bulk_create_active_tab to \"csv-file\"\n# In case the form validation fails, the user will be redirected\n# to the tab with errors rendered on the form.\nself.bulk_create_active_tab = \"csv-file\"\nelse:\nfield_name = \"csv_data\"\nheaders, records = form.cleaned_data[field_name]\nfor row, data in enumerate(records, start=1):\nobj_form = self.bulk_create_form_class(data, headers=headers)\nrestrict_form_fields(obj_form, request.user)\nif obj_form.is_valid():\nobj = self.form_save(obj_form)\nnew_objs.append(obj)\nelse:\nfor field, err in obj_form.errors.items():\nform.add_error(field_name, f\"Row {row} {field}: {err[0]}\")\nraise ValidationError(\"\")\n# Enforce object-level permissions\nif queryset.filter(pk__in=[obj.pk for obj in new_objs]).count() != len(new_objs):\nraise ObjectDoesNotExist\n# Compile a table containing the imported objects\ntable_class = self.get_table_class()\nobj_table = table_class(new_objs)\nif new_objs:\nmsg = f\"Imported {len(new_objs)} {new_objs[0]._meta.verbose_name_plural}\"\nself.logger.info(msg)\nmessages.success(request, msg)\nreturn obj_table\ndef bulk_create(self, request, *args, **kwargs):\ncontext = {}\nif request.method == \"POST\":\nreturn self.perform_bulk_create(request)\nreturn Response(context)\ndef perform_bulk_create(self, request):\nform_class = self.get_form_class()\nform = form_class(request.POST, request.FILES)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectBulkDestroyViewMixin","title":"<code>nautobot.apps.views.ObjectBulkDestroyViewMixin</code>","text":"<p>             Bases: <code>NautobotViewSetMixin</code>, <code>BulkDestroyModelMixin</code></p> <p>UI mixin to bulk destroy model instances.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class ObjectBulkDestroyViewMixin(NautobotViewSetMixin, BulkDestroyModelMixin):\n\"\"\"\n    UI mixin to bulk destroy model instances.\n    \"\"\"\nbulk_destroy_form_class = None\nfilterset_class = None\ndef _process_bulk_destroy_form(self, form):\nrequest = self.request\npk_list = self.pk_list\nqueryset = self.get_queryset()\nmodel = queryset.model\n# Delete objects\nqueryset = queryset.filter(pk__in=pk_list)\ntry:\nwith transaction.atomic():\ndeleted_count = queryset.delete()[1][model._meta.label]\nmsg = f\"Deleted {deleted_count} {model._meta.verbose_name_plural}\"\nself.logger.info(msg)\nself.success_url = self.get_return_url(request)\nmessages.success(request, msg)\nexcept ProtectedError as e:\nself.logger.info(\"Caught ProtectedError while attempting to delete objects\")\nhandle_protectederror(queryset, request, e)\nself.success_url = self.get_return_url(request)\ndef bulk_destroy(self, request, *args, **kwargs):\n\"\"\"\n        Call perform_bulk_destroy().\n        The function exist to keep the DRF's get/post pattern of {action}/perform_{action}, we will need it when we transition from using forms to serializers in the UI.\n        User should override this function to handle any actions as needed before bulk destroy.\n        \"\"\"\nreturn self.perform_bulk_destroy(request, **kwargs)\ndef perform_bulk_destroy(self, request, **kwargs):\n\"\"\"\n        request.POST \"_delete\": Function to render the user selection of objects in a table form/BulkDestroyConfirmationForm via Response that is passed to NautobotHTMLRenderer.\n        request.POST \"_confirm\": Function to validate the table form/BulkDestroyConfirmationForm and to perform the action of bulk destroy. Render the form with errors if exceptions are raised.\n        \"\"\"\nqueryset = self.get_queryset()\nmodel = queryset.model\n# Are we deleting *all* objects in the queryset or just a selected subset?\nif request.POST.get(\"_all\"):\nif self.filterset_class is not None:\nself.pk_list = [obj.pk for obj in self.filterset_class(request.POST, model.objects.only(\"pk\")).qs]\nelse:\nself.pk_list = model.objects.values_list(\"pk\", flat=True)\nelse:\nself.pk_list = request.POST.getlist(\"pk\")\nform_class = self.get_form_class(**kwargs)\ndata = {}\nif \"_confirm\" in request.POST:\nform = form_class(request.POST)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\ntable_class = self.get_table_class()\ntable = table_class(queryset.filter(pk__in=self.pk_list), orderable=False)\nif not table.rows:\nmessages.warning(\nrequest,\nf\"No {queryset.model._meta.verbose_name_plural} were selected for deletion.\",\n)\nreturn redirect(self.get_return_url(request))\ndata.update({\"table\": table})\nreturn Response(data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectBulkDestroyViewMixin.bulk_destroy","title":"<code>bulk_destroy(request, *args, **kwargs)</code>","text":"<p>Call perform_bulk_destroy(). The function exist to keep the DRF's get/post pattern of {action}/perform_{action}, we will need it when we transition from using forms to serializers in the UI. User should override this function to handle any actions as needed before bulk destroy.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def bulk_destroy(self, request, *args, **kwargs):\n\"\"\"\n    Call perform_bulk_destroy().\n    The function exist to keep the DRF's get/post pattern of {action}/perform_{action}, we will need it when we transition from using forms to serializers in the UI.\n    User should override this function to handle any actions as needed before bulk destroy.\n    \"\"\"\nreturn self.perform_bulk_destroy(request, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectBulkDestroyViewMixin.perform_bulk_destroy","title":"<code>perform_bulk_destroy(request, **kwargs)</code>","text":"<p>request.POST \"_delete\": Function to render the user selection of objects in a table form/BulkDestroyConfirmationForm via Response that is passed to NautobotHTMLRenderer. request.POST \"_confirm\": Function to validate the table form/BulkDestroyConfirmationForm and to perform the action of bulk destroy. Render the form with errors if exceptions are raised.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def perform_bulk_destroy(self, request, **kwargs):\n\"\"\"\n    request.POST \"_delete\": Function to render the user selection of objects in a table form/BulkDestroyConfirmationForm via Response that is passed to NautobotHTMLRenderer.\n    request.POST \"_confirm\": Function to validate the table form/BulkDestroyConfirmationForm and to perform the action of bulk destroy. Render the form with errors if exceptions are raised.\n    \"\"\"\nqueryset = self.get_queryset()\nmodel = queryset.model\n# Are we deleting *all* objects in the queryset or just a selected subset?\nif request.POST.get(\"_all\"):\nif self.filterset_class is not None:\nself.pk_list = [obj.pk for obj in self.filterset_class(request.POST, model.objects.only(\"pk\")).qs]\nelse:\nself.pk_list = model.objects.values_list(\"pk\", flat=True)\nelse:\nself.pk_list = request.POST.getlist(\"pk\")\nform_class = self.get_form_class(**kwargs)\ndata = {}\nif \"_confirm\" in request.POST:\nform = form_class(request.POST)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\ntable_class = self.get_table_class()\ntable = table_class(queryset.filter(pk__in=self.pk_list), orderable=False)\nif not table.rows:\nmessages.warning(\nrequest,\nf\"No {queryset.model._meta.verbose_name_plural} were selected for deletion.\",\n)\nreturn redirect(self.get_return_url(request))\ndata.update({\"table\": table})\nreturn Response(data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectBulkUpdateViewMixin","title":"<code>nautobot.apps.views.ObjectBulkUpdateViewMixin</code>","text":"<p>             Bases: <code>NautobotViewSetMixin</code>, <code>BulkUpdateModelMixin</code></p> <p>UI mixin to bulk update model instances.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class ObjectBulkUpdateViewMixin(NautobotViewSetMixin, BulkUpdateModelMixin):\n\"\"\"\n    UI mixin to bulk update model instances.\n    \"\"\"\nfilterset_class = None\nbulk_update_form_class = None\ndef _process_bulk_update_form(self, form):\nrequest = self.request\nqueryset = self.get_queryset()\nmodel = queryset.model\nform_custom_fields = getattr(form, \"custom_fields\", [])\nform_relationships = getattr(form, \"relationships\", [])\n# Standard fields are those that are intrinsic to self.model in the form\n# Relationships, custom fields, object_note are extrinsic fields\n# PK is used to identify an existing instance, not to modify the object\nstandard_fields = [\nfield\nfor field in form.fields\nif field not in form_custom_fields + form_relationships + [\"pk\"] + [\"object_note\"]\n]\nnullified_fields = request.POST.getlist(\"_nullify\")\nform_cf_to_key = {f\"cf_{cf.slug}\": cf.name for cf in CustomField.objects.get_for_model(model)}\nwith transaction.atomic():\nupdated_objects = []\nfor obj in queryset.filter(pk__in=form.cleaned_data[\"pk\"]):\nself.obj = obj\n# Update standard fields. If a field is listed in _nullify, delete its value.\nfor name in standard_fields:\ntry:\nmodel_field = model._meta.get_field(name)\nexcept FieldDoesNotExist:\n# This form field is used to modify a field rather than set its value directly\nmodel_field = None\n# Handle nullification\nif name in form.nullable_fields and name in nullified_fields:\nif isinstance(model_field, ManyToManyField):\ngetattr(obj, name).set([])\nelse:\nsetattr(obj, name, None if model_field is not None and model_field.null else \"\")\n# ManyToManyFields\nelif isinstance(model_field, ManyToManyField):\nif form.cleaned_data[name]:\ngetattr(obj, name).set(form.cleaned_data[name])\n# Normal fields\nelif form.cleaned_data[name] not in (None, \"\"):\nsetattr(obj, name, form.cleaned_data[name])\n# Update custom fields\nfor field_name in form_custom_fields:\nif field_name in form.nullable_fields and field_name in nullified_fields:\nobj.cf[form_cf_to_key[field_name]] = None\nelif form.cleaned_data.get(field_name) not in (None, \"\", []):\nobj.cf[form_cf_to_key[field_name]] = form.cleaned_data[field_name]\nobj.validated_save()\nupdated_objects.append(obj)\nself.logger.debug(f\"Saved {obj} (PK: {obj.pk})\")\n# Add/remove tags\nif form.cleaned_data.get(\"add_tags\", None):\nobj.tags.add(*form.cleaned_data[\"add_tags\"])\nif form.cleaned_data.get(\"remove_tags\", None):\nobj.tags.remove(*form.cleaned_data[\"remove_tags\"])\nif hasattr(form, \"save_relationships\") and callable(form.save_relationships):\n# Add/remove relationship associations\nform.save_relationships(instance=obj, nullified_fields=nullified_fields)\nif hasattr(form, \"save_note\") and callable(form.save_note):\nform.save_note(instance=obj, user=request.user)\n# Enforce object-level permissions\nif queryset.filter(pk__in=[obj.pk for obj in updated_objects]).count() != len(updated_objects):\nraise ObjectDoesNotExist\nif updated_objects:\nmsg = f\"Updated {len(updated_objects)} {model._meta.verbose_name_plural}\"\nself.logger.info(msg)\nmessages.success(self.request, msg)\nself.success_url = self.get_return_url(request)\ndef bulk_update(self, request, *args, **kwargs):\n\"\"\"\n        Call perform_bulk_update().\n        The function exist to keep the DRF's get/post pattern of {action}/perform_{action}, we will need it when we transition from using forms to serializers in the UI.\n        User should override this function to handle any actions as needed before bulk update.\n        \"\"\"\nreturn self.perform_bulk_update(request, **kwargs)\n# TODO: this conflicts with BulkUpdateModelMixin.perform_bulk_update(self, objects, update_data, partial)\ndef perform_bulk_update(self, request, **kwargs):  # pylint: disable=arguments-differ\n\"\"\"\n        request.POST \"_edit\": Function to render the user selection of objects in a table form/BulkUpdateForm via Response that is passed to NautobotHTMLRenderer.\n        request.POST \"_apply\": Function to validate the table form/BulkUpdateForm and to perform the action of bulk update. Render the form with errors if exceptions are raised.\n        \"\"\"\nqueryset = self.get_queryset()\nmodel = queryset.model\n# If we are editing *all* objects in the queryset, replace the PK list with all matched objects.\nif request.POST.get(\"_all\"):\nif self.filterset_class is not None:\nself.pk_list = [obj.pk for obj in self.filterset_class(request.POST, model.objects.only(\"pk\")).qs]\nelse:\nself.pk_list = model.objects.values_list(\"pk\", flat=True)\nelse:\nself.pk_list = request.POST.getlist(\"pk\")\ndata = {}\nform_class = self.get_form_class()\nif \"_apply\" in request.POST:\nself.kwargs = kwargs\nform = form_class(model, request.POST)\nrestrict_form_fields(form, request.user)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\ntable_class = self.get_table_class()\ntable = table_class(queryset.filter(pk__in=self.pk_list), orderable=False)\nif not table.rows:\nmessages.warning(\nrequest,\nf\"No {queryset.model._meta.verbose_name_plural} were selected for deletion.\",\n)\nreturn redirect(self.get_return_url(request))\ndata.update({\"table\": table})\nreturn Response(data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectBulkUpdateViewMixin.bulk_update","title":"<code>bulk_update(request, *args, **kwargs)</code>","text":"<p>Call perform_bulk_update(). The function exist to keep the DRF's get/post pattern of {action}/perform_{action}, we will need it when we transition from using forms to serializers in the UI. User should override this function to handle any actions as needed before bulk update.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def bulk_update(self, request, *args, **kwargs):\n\"\"\"\n    Call perform_bulk_update().\n    The function exist to keep the DRF's get/post pattern of {action}/perform_{action}, we will need it when we transition from using forms to serializers in the UI.\n    User should override this function to handle any actions as needed before bulk update.\n    \"\"\"\nreturn self.perform_bulk_update(request, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectBulkUpdateViewMixin.perform_bulk_update","title":"<code>perform_bulk_update(request, **kwargs)</code>","text":"<p>request.POST \"_edit\": Function to render the user selection of objects in a table form/BulkUpdateForm via Response that is passed to NautobotHTMLRenderer. request.POST \"_apply\": Function to validate the table form/BulkUpdateForm and to perform the action of bulk update. Render the form with errors if exceptions are raised.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def perform_bulk_update(self, request, **kwargs):  # pylint: disable=arguments-differ\n\"\"\"\n    request.POST \"_edit\": Function to render the user selection of objects in a table form/BulkUpdateForm via Response that is passed to NautobotHTMLRenderer.\n    request.POST \"_apply\": Function to validate the table form/BulkUpdateForm and to perform the action of bulk update. Render the form with errors if exceptions are raised.\n    \"\"\"\nqueryset = self.get_queryset()\nmodel = queryset.model\n# If we are editing *all* objects in the queryset, replace the PK list with all matched objects.\nif request.POST.get(\"_all\"):\nif self.filterset_class is not None:\nself.pk_list = [obj.pk for obj in self.filterset_class(request.POST, model.objects.only(\"pk\")).qs]\nelse:\nself.pk_list = model.objects.values_list(\"pk\", flat=True)\nelse:\nself.pk_list = request.POST.getlist(\"pk\")\ndata = {}\nform_class = self.get_form_class()\nif \"_apply\" in request.POST:\nself.kwargs = kwargs\nform = form_class(model, request.POST)\nrestrict_form_fields(form, request.user)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\ntable_class = self.get_table_class()\ntable = table_class(queryset.filter(pk__in=self.pk_list), orderable=False)\nif not table.rows:\nmessages.warning(\nrequest,\nf\"No {queryset.model._meta.verbose_name_plural} were selected for deletion.\",\n)\nreturn redirect(self.get_return_url(request))\ndata.update({\"table\": table})\nreturn Response(data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectChangeLogViewMixin","title":"<code>nautobot.apps.views.ObjectChangeLogViewMixin</code>","text":"<p>             Bases: <code>NautobotViewSetMixin</code></p> <p>UI mixin to list a model's changelog queryset</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class ObjectChangeLogViewMixin(NautobotViewSetMixin):\n\"\"\"\n    UI mixin to list a model's changelog queryset\n    \"\"\"\nbase_template = None\n@drf_action(detail=True)\ndef changelog(self, request, *args, **kwargs):\ndata = {\n\"base_template\": self.base_template,\n}\nreturn Response(data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectDestroyViewMixin","title":"<code>nautobot.apps.views.ObjectDestroyViewMixin</code>","text":"<p>             Bases: <code>NautobotViewSetMixin</code>, <code>mixins.DestroyModelMixin</code></p> <p>UI mixin to destroy a model instance.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class ObjectDestroyViewMixin(NautobotViewSetMixin, mixins.DestroyModelMixin):\n\"\"\"\n    UI mixin to destroy a model instance.\n    \"\"\"\ndestroy_form_class = ConfirmationForm\ndef _process_destroy_form(self, form):\nrequest = self.request\nobj = self.obj\nqueryset = self.get_queryset()\ntry:\nwith transaction.atomic():\nobj.delete()\nmsg = f\"Deleted {queryset.model._meta.verbose_name} {obj}\"\nself.logger.info(msg)\nmessages.success(request, msg)\nself.success_url = self.get_return_url(request, obj)\nexcept ProtectedError as e:\nself.logger.info(\"Caught ProtectedError while attempting to delete object\")\nhandle_protectederror([obj], request, e)\nself.success_url = obj.get_absolute_url()\ndef destroy(self, request, *args, **kwargs):\n\"\"\"\n        request.GET: render the ObjectDeleteConfirmationForm which is passed to NautobotHTMLRenderer as Response.\n        request.POST: call perform_destroy() which validates the form and perform the action of delete.\n        Override to add more variables to Response\n        \"\"\"\ncontext = {}\nif request.method == \"POST\":\nreturn self.perform_destroy(request, **kwargs)\nreturn Response(context)\ndef perform_destroy(self, request, **kwargs):\n\"\"\"\n        Function to validate the ObjectDeleteConfirmationForm and to delete the object.\n        \"\"\"\nself.obj = self.get_object()\nform_class = self.get_form_class()\nform = form_class(request.POST)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectDestroyViewMixin.destroy","title":"<code>destroy(request, *args, **kwargs)</code>","text":"<p>request.GET: render the ObjectDeleteConfirmationForm which is passed to NautobotHTMLRenderer as Response. request.POST: call perform_destroy() which validates the form and perform the action of delete. Override to add more variables to Response</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def destroy(self, request, *args, **kwargs):\n\"\"\"\n    request.GET: render the ObjectDeleteConfirmationForm which is passed to NautobotHTMLRenderer as Response.\n    request.POST: call perform_destroy() which validates the form and perform the action of delete.\n    Override to add more variables to Response\n    \"\"\"\ncontext = {}\nif request.method == \"POST\":\nreturn self.perform_destroy(request, **kwargs)\nreturn Response(context)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectDestroyViewMixin.perform_destroy","title":"<code>perform_destroy(request, **kwargs)</code>","text":"<p>Function to validate the ObjectDeleteConfirmationForm and to delete the object.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def perform_destroy(self, request, **kwargs):\n\"\"\"\n    Function to validate the ObjectDeleteConfirmationForm and to delete the object.\n    \"\"\"\nself.obj = self.get_object()\nform_class = self.get_form_class()\nform = form_class(request.POST)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectDetailViewMixin","title":"<code>nautobot.apps.views.ObjectDetailViewMixin</code>","text":"<p>             Bases: <code>NautobotViewSetMixin</code>, <code>mixins.RetrieveModelMixin</code></p> <p>UI mixin to retrieve a model instance.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class ObjectDetailViewMixin(NautobotViewSetMixin, mixins.RetrieveModelMixin):\n\"\"\"\n    UI mixin to retrieve a model instance.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectEditViewMixin","title":"<code>nautobot.apps.views.ObjectEditViewMixin</code>","text":"<p>             Bases: <code>NautobotViewSetMixin</code>, <code>mixins.CreateModelMixin</code>, <code>mixins.UpdateModelMixin</code></p> <p>UI mixin to create or update a model instance.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class ObjectEditViewMixin(NautobotViewSetMixin, mixins.CreateModelMixin, mixins.UpdateModelMixin):\n\"\"\"\n    UI mixin to create or update a model instance.\n    \"\"\"\ndef _process_create_or_update_form(self, form):\n\"\"\"\n        Helper method to create or update an object after the form is validated successfully.\n        \"\"\"\nrequest = self.request\nqueryset = self.get_queryset()\nwith transaction.atomic():\nobject_created = not form.instance.present_in_database\nobj = self.form_save(form)\n# Check that the new object conforms with any assigned object-level permissions\nqueryset.get(pk=obj.pk)\nif hasattr(form, \"save_note\") and callable(form.save_note):\nform.save_note(instance=obj, user=request.user)\nmsg = f'{\"Created\" if object_created else \"Modified\"} {queryset.model._meta.verbose_name}'\nself.logger.info(f\"{msg} {obj} (PK: {obj.pk})\")\nif hasattr(obj, \"get_absolute_url\"):\nmsg = f'{msg} &lt;a href=\"{obj.get_absolute_url()}\"&gt;{escape(obj)}&lt;/a&gt;'\nelse:\nmsg = f\"{msg} { escape(obj)}\"\nmessages.success(request, mark_safe(msg))\nif \"_addanother\" in request.POST:\n# If the object has clone_fields, pre-populate a new instance of the form\nif hasattr(obj, \"clone_fields\"):\nurl = f\"{request.path}?{prepare_cloned_fields(obj)}\"\nself.success_url = url\nself.success_url = request.get_full_path()\nelse:\nreturn_url = form.cleaned_data.get(\"return_url\")\nif return_url is not None and is_safe_url(url=return_url, allowed_hosts=request.get_host()):\nself.success_url = return_url\nelse:\nself.success_url = self.get_return_url(request, obj)\ndef create(self, request, *args, **kwargs):\n\"\"\"\n        request.GET: render the ObjectForm which is passed to NautobotHTMLRenderer as Response.\n        request.POST: call perform_create() which validates the form and perform the action of create.\n        Override to add more variables to Response.\n        \"\"\"\ncontext = {}\nif request.method == \"POST\":\nreturn self.perform_create(request, *args, **kwargs)\nreturn Response(context)\n# TODO: this conflicts with DRF's CreateModelMixin.perform_create(self, serializer) API\ndef perform_create(self, request, *args, **kwargs):  # pylint: disable=arguments-differ\n\"\"\"\n        Function to validate the ObjectForm and to create a new object.\n        \"\"\"\nself.obj = self.get_object()\nform_class = self.get_form_class()\nform = form_class(data=request.POST, files=request.FILES, instance=self.obj)\nrestrict_form_fields(form, request.user)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\ndef update(self, request, *args, **kwargs):\n\"\"\"\n        request.GET: render the ObjectEditForm which is passed to NautobotHTMLRenderer as Response.\n        request.POST: call perform_update() which validates the form and perform the action of update/partial_update of an existing object.\n        Override to add more variables to Response.\n        \"\"\"\ncontext = {}\nif request.method == \"POST\":\nreturn self.perform_update(request, *args, **kwargs)\nreturn Response(context)\n# TODO: this conflicts with DRF's UpdateModelMixin.perform_update(self, serializer) API\ndef perform_update(self, request, *args, **kwargs):  # pylint: disable=arguments-differ\n\"\"\"\n        Function to validate the ObjectEditForm and to update/partial_update an existing object.\n        \"\"\"\nself.obj = self.get_object()\nform_class = self.get_form_class()\nform = form_class(data=request.POST, files=request.FILES, instance=self.obj)\nrestrict_form_fields(form, request.user)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectEditViewMixin.create","title":"<code>create(request, *args, **kwargs)</code>","text":"<p>request.GET: render the ObjectForm which is passed to NautobotHTMLRenderer as Response. request.POST: call perform_create() which validates the form and perform the action of create. Override to add more variables to Response.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def create(self, request, *args, **kwargs):\n\"\"\"\n    request.GET: render the ObjectForm which is passed to NautobotHTMLRenderer as Response.\n    request.POST: call perform_create() which validates the form and perform the action of create.\n    Override to add more variables to Response.\n    \"\"\"\ncontext = {}\nif request.method == \"POST\":\nreturn self.perform_create(request, *args, **kwargs)\nreturn Response(context)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectEditViewMixin.perform_create","title":"<code>perform_create(request, *args, **kwargs)</code>","text":"<p>Function to validate the ObjectForm and to create a new object.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def perform_create(self, request, *args, **kwargs):  # pylint: disable=arguments-differ\n\"\"\"\n    Function to validate the ObjectForm and to create a new object.\n    \"\"\"\nself.obj = self.get_object()\nform_class = self.get_form_class()\nform = form_class(data=request.POST, files=request.FILES, instance=self.obj)\nrestrict_form_fields(form, request.user)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectEditViewMixin.perform_update","title":"<code>perform_update(request, *args, **kwargs)</code>","text":"<p>Function to validate the ObjectEditForm and to update/partial_update an existing object.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def perform_update(self, request, *args, **kwargs):  # pylint: disable=arguments-differ\n\"\"\"\n    Function to validate the ObjectEditForm and to update/partial_update an existing object.\n    \"\"\"\nself.obj = self.get_object()\nform_class = self.get_form_class()\nform = form_class(data=request.POST, files=request.FILES, instance=self.obj)\nrestrict_form_fields(form, request.user)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectEditViewMixin.update","title":"<code>update(request, *args, **kwargs)</code>","text":"<p>request.GET: render the ObjectEditForm which is passed to NautobotHTMLRenderer as Response. request.POST: call perform_update() which validates the form and perform the action of update/partial_update of an existing object. Override to add more variables to Response.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def update(self, request, *args, **kwargs):\n\"\"\"\n    request.GET: render the ObjectEditForm which is passed to NautobotHTMLRenderer as Response.\n    request.POST: call perform_update() which validates the form and perform the action of update/partial_update of an existing object.\n    Override to add more variables to Response.\n    \"\"\"\ncontext = {}\nif request.method == \"POST\":\nreturn self.perform_update(request, *args, **kwargs)\nreturn Response(context)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectListViewMixin","title":"<code>nautobot.apps.views.ObjectListViewMixin</code>","text":"<p>             Bases: <code>NautobotViewSetMixin</code>, <code>mixins.ListModelMixin</code></p> <p>UI mixin to list a model queryset</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class ObjectListViewMixin(NautobotViewSetMixin, mixins.ListModelMixin):\n\"\"\"\n    UI mixin to list a model queryset\n    \"\"\"\naction_buttons = (\"add\", \"import\", \"export\")\nfilterset_class = None\nfilterset_form_class = None\nnon_filter_params = (\n\"export\",  # trigger for CSV/export-template/YAML export\n\"page\",  # used by django-tables2.RequestConfig\n\"per_page\",  # used by get_paginate_count\n\"sort\",  # table sorting\n)\ndef filter_queryset(self, queryset):\n\"\"\"\n        Filter a query with request querystrings.\n        \"\"\"\nif self.filterset_class is not None:\nself.filter_params = self.get_filter_params(self.request)\nself.filterset = self.filterset_class(self.filter_params, queryset)\nqueryset = self.filterset.qs\nif not self.filterset.is_valid():\nmessages.error(\nself.request,\nmark_safe(f\"Invalid filters were specified: {self.filterset.errors}\"),\n)\nqueryset = queryset.none()\nreturn queryset\ndef check_for_export(self, request, model, content_type):\n# Check for export template rendering\nqueryset = self.filter_queryset(self.get_queryset())\nif request.GET.get(\"export\"):\net = get_object_or_404(\nExportTemplate,\ncontent_type=content_type,\nname=request.GET.get(\"export\"),\n)\ntry:\nreturn et.render_to_response(queryset)\nexcept Exception as e:\nmessages.error(\nrequest,\nf\"There was an error rendering the selected export template ({et.name}): {e}\",\n)\n# Check for YAML export support\nelif \"export\" in request.GET and hasattr(model, \"to_yaml\"):\nresponse = HttpResponse(self.queryset_to_yaml(), content_type=\"text/yaml\")\nfilename = f\"nautobot_{queryset.model._meta.verbose_name_plural}.yaml\"\nresponse[\"Content-Disposition\"] = f'attachment; filename=\"{filename}\"'\nreturn response\n# Fall back to built-in CSV formatting if export requested but no template specified\nelif \"export\" in request.GET and hasattr(model, \"to_csv\"):\nresponse = HttpResponse(self.queryset_to_csv(), content_type=\"text/csv\")\nfilename = f\"nautobot_{queryset.model._meta.verbose_name_plural}.csv\"\nresponse[\"Content-Disposition\"] = f'attachment; filename=\"{filename}\"'\nreturn response\nreturn None\ndef queryset_to_yaml(self):\n\"\"\"\n        Export the queryset of objects as concatenated YAML documents.\n        \"\"\"\nqueryset = self.filter_queryset(self.get_queryset())\nyaml_data = [obj.to_yaml() for obj in queryset]\nreturn \"---\\n\".join(yaml_data)\ndef queryset_to_csv(self):\n\"\"\"\n        Export the queryset of objects as comma-separated value (CSV), using the model's to_csv() method.\n        \"\"\"\nqueryset = self.filter_queryset(self.get_queryset())\ncsv_data = []\ncustom_fields = []\n# Start with the column headers\nheaders = queryset.model.csv_headers.copy()\n# Add custom field headers, if any\nif hasattr(queryset.model, \"_custom_field_data\"):\nfor custom_field in CustomField.objects.get_for_model(queryset.model):\nheaders.append(\"cf_\" + custom_field.slug)\ncustom_fields.append(custom_field.name)\ncsv_data.append(\",\".join(headers))\n# Iterate through the queryset appending each object\nfor obj in queryset:\ndata = obj.to_csv()\nfor custom_field in custom_fields:\ndata += (obj.cf.get(custom_field, \"\"),)\ncsv_data.append(csv_format(data))\nreturn \"\\n\".join(csv_data)\ndef list(self, request, *args, **kwargs):\n\"\"\"\n        List the model instances.\n        \"\"\"\ncontext = {}\nif \"export\" in request.GET:\nqueryset = self.get_queryset()\nmodel = queryset.model\ncontent_type = ContentType.objects.get_for_model(model)\nresponse = self.check_for_export(request, model, content_type)\nif response is not None:\nreturn response\nreturn Response(context)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectListViewMixin.filter_queryset","title":"<code>filter_queryset(queryset)</code>","text":"<p>Filter a query with request querystrings.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def filter_queryset(self, queryset):\n\"\"\"\n    Filter a query with request querystrings.\n    \"\"\"\nif self.filterset_class is not None:\nself.filter_params = self.get_filter_params(self.request)\nself.filterset = self.filterset_class(self.filter_params, queryset)\nqueryset = self.filterset.qs\nif not self.filterset.is_valid():\nmessages.error(\nself.request,\nmark_safe(f\"Invalid filters were specified: {self.filterset.errors}\"),\n)\nqueryset = queryset.none()\nreturn queryset\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectListViewMixin.list","title":"<code>list(request, *args, **kwargs)</code>","text":"<p>List the model instances.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def list(self, request, *args, **kwargs):\n\"\"\"\n    List the model instances.\n    \"\"\"\ncontext = {}\nif \"export\" in request.GET:\nqueryset = self.get_queryset()\nmodel = queryset.model\ncontent_type = ContentType.objects.get_for_model(model)\nresponse = self.check_for_export(request, model, content_type)\nif response is not None:\nreturn response\nreturn Response(context)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectListViewMixin.queryset_to_csv","title":"<code>queryset_to_csv()</code>","text":"<p>Export the queryset of objects as comma-separated value (CSV), using the model's to_csv() method.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def queryset_to_csv(self):\n\"\"\"\n    Export the queryset of objects as comma-separated value (CSV), using the model's to_csv() method.\n    \"\"\"\nqueryset = self.filter_queryset(self.get_queryset())\ncsv_data = []\ncustom_fields = []\n# Start with the column headers\nheaders = queryset.model.csv_headers.copy()\n# Add custom field headers, if any\nif hasattr(queryset.model, \"_custom_field_data\"):\nfor custom_field in CustomField.objects.get_for_model(queryset.model):\nheaders.append(\"cf_\" + custom_field.slug)\ncustom_fields.append(custom_field.name)\ncsv_data.append(\",\".join(headers))\n# Iterate through the queryset appending each object\nfor obj in queryset:\ndata = obj.to_csv()\nfor custom_field in custom_fields:\ndata += (obj.cf.get(custom_field, \"\"),)\ncsv_data.append(csv_format(data))\nreturn \"\\n\".join(csv_data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectListViewMixin.queryset_to_yaml","title":"<code>queryset_to_yaml()</code>","text":"<p>Export the queryset of objects as concatenated YAML documents.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def queryset_to_yaml(self):\n\"\"\"\n    Export the queryset of objects as concatenated YAML documents.\n    \"\"\"\nqueryset = self.filter_queryset(self.get_queryset())\nyaml_data = [obj.to_yaml() for obj in queryset]\nreturn \"---\\n\".join(yaml_data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectNotesViewMixin","title":"<code>nautobot.apps.views.ObjectNotesViewMixin</code>","text":"<p>             Bases: <code>NautobotViewSetMixin</code></p> <p>UI Mixin for an Object's Notes.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class ObjectNotesViewMixin(NautobotViewSetMixin):\n\"\"\"\n    UI Mixin for an Object's Notes.\n    \"\"\"\nbase_template = None\n@drf_action(detail=True)\ndef notes(self, request, *args, **kwargs):\ndata = {\n\"base_template\": self.base_template,\n}\nreturn Response(data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectView","title":"<code>nautobot.apps.views.ObjectView</code>","text":"<p>             Bases: <code>ObjectPermissionRequiredMixin</code>, <code>View</code></p> <p>Retrieve a single object for display.</p> <p>queryset: The base queryset for retrieving the object template_name: Name of the template to use</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>class ObjectView(ObjectPermissionRequiredMixin, View):\n\"\"\"\n    Retrieve a single object for display.\n    queryset: The base queryset for retrieving the object\n    template_name: Name of the template to use\n    \"\"\"\nqueryset = None\ntemplate_name = None\ndef get_required_permission(self):\nreturn get_permission_for_model(self.queryset.model, \"view\")\ndef get_template_name(self):\n\"\"\"\n        Return self.template_name if set. Otherwise, resolve the template path by model app_label and name.\n        \"\"\"\nif self.template_name is not None:\nreturn self.template_name\nmodel_opts = self.queryset.model._meta\nreturn f\"{model_opts.app_label}/{model_opts.model_name}.html\"\ndef get_extra_context(self, request, instance):\n\"\"\"\n        Return any additional context data for the template.\n        Args:\n            request (Request): The current request\n            instance (Model): The object being viewed\n        Returns:\n            (dict): Additional context data\n        \"\"\"\nreturn {\n\"active_tab\": request.GET.get(\"tab\", \"main\"),\n}\n# 2.0 TODO: Remove this method in 2.0. Can be retrieved from instance itself now\n# instance.get_changelog_url()\n# Only available on models that support changelogs\ndef get_changelog_url(self, instance):\n\"\"\"Return the changelog URL for a given instance.\"\"\"\nmeta = self.queryset.model._meta\n# Don't try to generate a changelog_url for an ObjectChange.\nif meta.model_name == \"objectchange\":\nreturn None\nroute = get_route_for_model(instance, \"changelog\")\n# Iterate the pk-like fields and try to get a URL, or return None.\nfields = [\"pk\", \"slug\"]\nfor field in fields:\nif not hasattr(instance, field):\ncontinue\ntry:\nreturn reverse(route, kwargs={field: getattr(instance, field)})\nexcept NoReverseMatch:\ncontinue\n# This object likely doesn't have a changelog route defined.\nreturn None\ndef get(self, request, *args, **kwargs):\n\"\"\"\n        Generic GET handler for accessing an object by PK or slug\n        \"\"\"\ninstance = get_object_or_404(self.queryset, **kwargs)\nchangelog_url = None\nif isinstance(instance, ChangeLoggedModel):\nchangelog_url = instance.get_changelog_url()\nreturn render(\nrequest,\nself.get_template_name(),\n{\n\"object\": instance,\n\"verbose_name\": self.queryset.model._meta.verbose_name,\n\"verbose_name_plural\": self.queryset.model._meta.verbose_name_plural,\n\"changelog_url\": changelog_url,  # 2.0 TODO: Remove in 2.0. This information can be retrieved from the object itself now.\n**self.get_extra_context(request, instance),\n},\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.generic.ObjectView.get","title":"<code>get(request, *args, **kwargs)</code>","text":"<p>Generic GET handler for accessing an object by PK or slug</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>def get(self, request, *args, **kwargs):\n\"\"\"\n    Generic GET handler for accessing an object by PK or slug\n    \"\"\"\ninstance = get_object_or_404(self.queryset, **kwargs)\nchangelog_url = None\nif isinstance(instance, ChangeLoggedModel):\nchangelog_url = instance.get_changelog_url()\nreturn render(\nrequest,\nself.get_template_name(),\n{\n\"object\": instance,\n\"verbose_name\": self.queryset.model._meta.verbose_name,\n\"verbose_name_plural\": self.queryset.model._meta.verbose_name_plural,\n\"changelog_url\": changelog_url,  # 2.0 TODO: Remove in 2.0. This information can be retrieved from the object itself now.\n**self.get_extra_context(request, instance),\n},\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.generic.ObjectView.get_changelog_url","title":"<code>get_changelog_url(instance)</code>","text":"<p>Return the changelog URL for a given instance.</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>def get_changelog_url(self, instance):\n\"\"\"Return the changelog URL for a given instance.\"\"\"\nmeta = self.queryset.model._meta\n# Don't try to generate a changelog_url for an ObjectChange.\nif meta.model_name == \"objectchange\":\nreturn None\nroute = get_route_for_model(instance, \"changelog\")\n# Iterate the pk-like fields and try to get a URL, or return None.\nfields = [\"pk\", \"slug\"]\nfor field in fields:\nif not hasattr(instance, field):\ncontinue\ntry:\nreturn reverse(route, kwargs={field: getattr(instance, field)})\nexcept NoReverseMatch:\ncontinue\n# This object likely doesn't have a changelog route defined.\nreturn None\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.generic.ObjectView.get_extra_context","title":"<code>get_extra_context(request, instance)</code>","text":"<p>Return any additional context data for the template.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The current request</p> required <code>instance</code> <code>Model</code> <p>The object being viewed</p> required <p>Returns:</p> Type Description <code>dict</code> <p>Additional context data</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>def get_extra_context(self, request, instance):\n\"\"\"\n    Return any additional context data for the template.\n    Args:\n        request (Request): The current request\n        instance (Model): The object being viewed\n    Returns:\n        (dict): Additional context data\n    \"\"\"\nreturn {\n\"active_tab\": request.GET.get(\"tab\", \"main\"),\n}\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.generic.ObjectView.get_template_name","title":"<code>get_template_name()</code>","text":"<p>Return self.template_name if set. Otherwise, resolve the template path by model app_label and name.</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>def get_template_name(self):\n\"\"\"\n    Return self.template_name if set. Otherwise, resolve the template path by model app_label and name.\n    \"\"\"\nif self.template_name is not None:\nreturn self.template_name\nmodel_opts = self.queryset.model._meta\nreturn f\"{model_opts.app_label}/{model_opts.model_name}.html\"\n</code></pre>"},{"location":"configuration/index.html","title":"Nautobot Configuration","text":"<p>This section describes how to get started with configuring Nautobot.</p>"},{"location":"configuration/index.html#initializing-the-configuration","title":"Initializing the Configuration","text":"<p>An initial configuration can be created by executing <code>nautobot-server init</code>. This will generate a new configuration with all of the default settings provided for you, and will also generate a unique <code>SECRET_KEY</code>.</p> <p>By default (if you haven't set <code>NAUTOBOT_ROOT</code> to some other value), the file will be created at <code>$HOME/.nautobot/nautobot_config.py</code>:</p> <pre><code>nautobot-server init\n</code></pre> <p>Example output:</p> <pre><code>Configuration file created at '/opt/nautobot/nautobot_config.py'\n</code></pre> <p>Tip</p> <p>The Nautobot Installation Docs example sets <code>NAUTOBOT_ROOT</code> to <code>/opt/nautobot</code>, so <code>nautobot_config.py</code> would be found at <code>/opt/nautobot/nautobot_config.py</code>.</p> <p>You may specify a different location for the configuration as the argument to <code>init</code>:</p> <pre><code>nautobot-server init /tmp/custom_config.py\n</code></pre> <pre><code>Configuration file created at '/tmp/custom_config.py'\n</code></pre> <p>Note</p> <p>Throughout the documentation, the configuration file will be referred to by name as <code>nautobot_config.py</code>. If you use a custom file name, you must use that instead.</p>"},{"location":"configuration/index.html#specifying-your-configuration","title":"Specifying your Configuration","text":"<p>If you place your configuration in the default location at <code>$HOME/.nautobot/nautobot_config.py</code>, you may utilize the <code>nautobot-server</code> command and it will use that location automatically.</p> <p>If you do not wish to utilize the default location, you have two options:</p>"},{"location":"configuration/index.html#config-argument","title":"Config argument","text":"<p>You may provide the <code>--config</code> argument when executing <code>nautobot-server</code> to tell Nautobot where to find your configuration. For example, to start a shell with the configuration in an alternate location:</p> <pre><code>nautobot-server --config=/etc/nautobot_config.py nbshell\n</code></pre>"},{"location":"configuration/index.html#environment-variable","title":"Environment variable","text":"<p>You may also set the <code>NAUTOBOT_CONFIG</code> environment variable to the location of your configuration file so that you don't have to keep providing the <code>--config</code> argument. If set, this overrides the default location.</p> <pre><code>export NAUTOBOT_CONFIG=/etc/nautobot_config.py\nnautobot-server nbshell\n</code></pre>"},{"location":"configuration/index.html#nautobot-root-directory","title":"Nautobot Root Directory","text":"<p>By default, Nautobot will always read or store files in <code>~/.nautobot</code> to allow for installation without requiring superuser (root) permissions.</p> <p>The <code>NAUTOBOT_ROOT</code> configuration setting specifies where these files will be stored on your file system. You may customize this location by setting the <code>NAUTOBOT_ROOT</code> environment variable. For example:</p> <pre><code>export NAUTOBOT_ROOT=/opt/nautobot\n</code></pre> <p>This setting is also used in the Nautobot deployment guide to make the <code>nautobot-server</code> command easier to find and use.</p> <p>Note</p> <p>The <code>--config</code> argument and the <code>NAUTOBOT_CONFIG</code> environment variable will always take precedence over <code>NAUTOBOT_ROOT</code> for the purpose of telling Nautobot where your <code>nautobot_config.py</code> can be found.</p> <p>Warning</p> <p>Do not override <code>NAUTOBOT_ROOT</code> in your <code>nautobot_config.py</code>. It will not work as expected. If you need to customize this setting, please always set the <code>NAUTOBOT_ROOT</code> environment variable.</p>"},{"location":"configuration/index.html#file-storage","title":"File Storage","text":"<p>Nautobot is capable of storing various types of files. This includes Jobs, Git repositories, image attachments, and static files (CSS, JavaScript, etc.).</p> <p>Each of the features requiring use of file storage default to being stored in <code>NAUTOBOT_ROOT</code>. If desired, you may customize each one individually. Please see each feature's respective documentation linked above for how to do that.</p>"},{"location":"configuration/index.html#configuration-parameters","title":"Configuration Parameters","text":"<p>While Nautobot has many configuration settings, only a few of them must be defined at the time of installation. These configuration parameters may be set in <code>nautobot_config.py</code> or by default many of them may also be set by environment variables. Please see the following links for more information:</p> <ul> <li>Required settings</li> <li>Optional settings</li> </ul>"},{"location":"configuration/index.html#optional-authentication-configuration","title":"Optional Authentication Configuration","text":"<ul> <li>LDAP Authentication</li> <li>Remote User Authentication</li> <li>SSO Authentication</li> </ul>"},{"location":"configuration/index.html#changing-the-configuration","title":"Changing the Configuration","text":"<p>Configuration settings may be changed at any time. However, the WSGI service (e.g. uWSGI) must be restarted before the changes will take effect. For example, if you're running Nautobot using <code>systemd:</code></p> <pre><code>sudo systemctl restart nautobot nautobot-worker\n</code></pre>"},{"location":"configuration/index.html#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"configuration/index.html#troubleshooting-the-configuration","title":"Troubleshooting the Configuration","text":"<p>To facilitate troubleshooting and debugging of settings, try inspecting the settings from a shell.</p> <p>First get a shell and load the Django settings:</p> <pre><code>nautobot-server nbshell\n</code></pre> <p>Output:</p> <pre><code>### Nautobot interactive shell (localhost)\n### Python 3.11.4 | Django 3.2.20 | Nautobot 1.6.0\n### lsmodels() will show available models. Use help(&lt;model&gt;) for more info.\n&gt;&gt;&gt; from django.conf import settings\n</code></pre> <p>Inspect the <code>SETTINGS_PATH</code> variable. Does it match the configuration you're expecting to be loading?</p> <pre><code>&gt;&gt;&gt; settings.SETTINGS_PATH\n'/home/example/.nautobot/nautobot_config.py'\n</code></pre> <p>If not, double check that you haven't set the <code>NAUTOBOT_CONFIG</code> environment variable, or if you did, that the path defined there is the correct one.</p> <pre><code>echo $NAUTOBOT_CONFIG\n</code></pre>"},{"location":"configuration/index.html#adding-your-own-dependencies","title":"Adding your own dependencies","text":"<p>Warning</p> <p>Be cautious not to confuse extra applications with Nautobot plugins which are installed using the <code>PLUGINS</code> setting. They are similar, but distinctly different!</p> <p>Nautobot, being a Django application, allows for installation of additional dependencies utilizing the <code>INSTALLED_APPS</code> settings. Due to the highly specialized nature of Nautobot, you cannot safely do this.</p> <p>For example, let's assume that you want to install the popular <code>django-health-check</code> plugin to your Nautobot deployment which requires you to add one or more <code>health_check</code> entries to your <code>INSTALLED_APPS</code>.</p> <p>If you attempt to modify <code>INSTALLED_APPS</code> yourself, you might see an error such as this:</p> <pre><code>Traceback (most recent call last):\nFile \"/usr/local/bin/nautobot-server\", line 8, in &lt;module&gt;\nsys.exit(main())\nFile \"/usr/local/lib/python3.8/site-packages/nautobot/core/cli.py\", line 53, in main\ninitializer=_configure_settings,  # Called after defaults\nFile \"/usr/local/lib/python3.8/site-packages/nautobot/core/runner/runner.py\", line 193, in run_app\nmanagement.execute_from_command_line([runner_name, command] + command_args)\nFile \"/usr/local/lib/python3.8/site-packages/django/core/management/__init__.py\", line 401, in execute_from_command_line\nutility.execute()\nFile \"/usr/local/lib/python3.8/site-packages/django/core/management/__init__.py\", line 377, in execute\ndjango.setup()\nFile \"/usr/local/lib/python3.8/site-packages/django/__init__.py\", line 24, in setup\napps.populate(settings.INSTALLED_APPS)\nFile \"/usr/local/lib/python3.8/site-packages/django/apps/registry.py\", line 95, in populate\n\"duplicates: %s\" % app_config.label)\ndjango.core.exceptions.ImproperlyConfigured: Application labels aren't unique, duplicates: health_check\n</code></pre> <p>To make it work, you would simply specify <code>EXTRA_INSTALLED_APPS</code> instead:</p> <pre><code>EXTRA_INSTALLED_APPS = [\n'health_check',\n...\n]\n</code></pre> <p>For more information on installing extra applications, please see the documentation on Extra Applications.</p> <p>For more information on installing or developing Nautobot plugins, please see the documentation on Plugins.</p>"},{"location":"configuration/optional-settings.html","title":"Optional Configuration Settings","text":""},{"location":"configuration/optional-settings.html#administratively-configurable-settings","title":"Administratively Configurable Settings","text":"<p>Added in version 1.2.0</p> <p>A number of settings can alternatively be configured via the Nautobot Admin UI. To do so, these settings must not be defined in your <code>nautobot_config.py</code>, as any settings defined there will take precedence over any values defined in the Admin UI. Settings that are currently configurable via the Admin UI include:</p> <ul> <li>BANNER_BOTTOM</li> <li>BANNER_LOGIN</li> <li>BANNER_TOP</li> <li>CHANGELOG_RETENTION</li> <li>DEPLOYMENT_ID</li> <li>DYNAMIC_GROUPS_MEMBER_CACHE_TIMEOUT</li> <li>HIDE_RESTRICTED_UI</li> <li>MAX_PAGE_SIZE</li> <li>NETWORK_DRIVERS</li> <li>PAGINATE_COUNT</li> <li>PER_PAGE_DEFAULTS</li> <li>PREFER_IPV4</li> <li>RACK_ELEVATION_DEFAULT_UNIT_HEIGHT</li> <li>RACK_ELEVATION_DEFAULT_UNIT_WIDTH</li> <li>RELEASE_CHECK_TIMEOUT</li> <li>RELEASE_CHECK_URL</li> </ul>"},{"location":"configuration/optional-settings.html#extra-applications","title":"Extra Applications","text":"<p>A need may arise to allow the user to register additional settings. These will automatically apply based on keynames prefixed with <code>EXTRA_</code> assuming the base key (the latter part of the setting name) is of type list or tuple.</p> <p>For example, to register additional <code>INSTALLED_APPS</code>, you would simply specify this in your custom (user) configuration::</p> <pre><code>EXTRA_INSTALLED_APPS = [\n'foo.bar',\n]\n</code></pre> <p>This will ensure your default setting's <code>INSTALLED_APPS</code> do not have to be modified, and the user can specify additional apps with ease.  Similarly, additional <code>MIDDLEWARE</code> can be added using <code>EXTRA_MIDDLEWARE</code>.</p>"},{"location":"configuration/optional-settings.html#allowed_url_schemes","title":"ALLOWED_URL_SCHEMES","text":"<p>Default: <code>('file', 'ftp', 'ftps', 'http', 'https', 'irc', 'mailto', 'sftp', 'ssh', 'tel', 'telnet', 'tftp', 'vnc', 'xmpp')</code></p> <p>A list of permitted URL schemes referenced when rendering links within Nautobot. Note that only the schemes specified in this list will be accepted: If adding your own, be sure to replicate all of the default values as well (excluding those schemes which are not desirable).</p>"},{"location":"configuration/optional-settings.html#banner_top","title":"BANNER_TOP","text":""},{"location":"configuration/optional-settings.html#banner_bottom","title":"BANNER_BOTTOM","text":"<p>Default: <code>\"\"</code> (Empty string)</p> <p>Setting these variables will display custom content in a banner at the top and/or bottom of the page, respectively. HTML is allowed. To replicate the content of the top banner in the bottom banner, set:</p> <pre><code>BANNER_TOP = 'Your banner text'\nBANNER_BOTTOM = BANNER_TOP\n</code></pre> <p>Added in version 1.2.0</p> <p>If you do not set a value for these settings in your <code>nautobot_config.py</code>, they can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for either setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"configuration/optional-settings.html#banner_login","title":"BANNER_LOGIN","text":"<p>Default: <code>\"\"</code> (Empty string)</p> <p>This defines custom content to be displayed on the login page above the login form. HTML is allowed.</p> <p>Added in version 1.2.0</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"configuration/optional-settings.html#branding_filepaths","title":"BRANDING_FILEPATHS","text":"<p>Default:</p> <pre><code>{\n\"logo\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_LOGO\", None),  # Navbar logo\n\"favicon\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_FAVICON\", None),  # Browser favicon\n\"icon_16\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_ICON_16\", None),  # 16x16px icon\n\"icon_32\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_ICON_32\", None),  # 32x32px icon\n\"icon_180\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_ICON_180\", None),  # 180x180px icon - used for the apple-touch-icon header\n\"icon_192\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_ICON_192\", None),  # 192x192px icon\n\"icon_mask\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_ICON_MASK\", None),  # mono-chrome icon used for the mask-icon header\n}\n</code></pre> <p>A set of filepaths relative to the <code>MEDIA_ROOT</code> which locate image assets used for custom branding. Each of these assets takes the place of the corresponding stock Nautobot asset. This allows for instance, providing your own navbar logo and favicon.</p> <p>These environment variables may be used to specify the values:</p> <ul> <li><code>NAUTOBOT_BRANDING_FILEPATHS_LOGO</code></li> <li><code>NAUTOBOT_BRANDING_FILEPATHS_FAVICON</code></li> <li><code>NAUTOBOT_BRANDING_FILEPATHS_ICON_16</code></li> <li><code>NAUTOBOT_BRANDING_FILEPATHS_ICON_32</code></li> <li><code>NAUTOBOT_BRANDING_FILEPATHS_ICON_180</code></li> <li><code>NAUTOBOT_BRANDING_FILEPATHS_ICON_192</code></li> <li><code>NAUTOBOT_BRANDING_FILEPATHS_ICON_MASK</code></li> </ul> <p>If a custom image asset is not provided for any of the above options, the stock Nautobot asset is used.</p>"},{"location":"configuration/optional-settings.html#branding_prepended_filename","title":"BRANDING_PREPENDED_FILENAME","text":"<p>Added in version 1.3.4</p> <p>Default: <code>\"nautobot_\"</code></p> <p>Environment Variable: <code>NAUTOBOT_BRANDING_PREPENDED_FILENAME</code></p> <p>Defines the prefix of the filename when exporting to CSV/YAML or export templates.</p>"},{"location":"configuration/optional-settings.html#branding_title","title":"BRANDING_TITLE","text":"<p>Default: <code>\"Nautobot\"</code></p> <p>Environment Variable: <code>NAUTOBOT_BRANDING_TITLE</code></p> <p>The defines the custom branding title that should be used in place of \"Nautobot\" within user facing areas of the application like the HTML title of web pages.</p>"},{"location":"configuration/optional-settings.html#branding_urls","title":"BRANDING_URLS","text":"<p>Default:</p> <pre><code>{\n\"code\": os.getenv(\"NAUTOBOT_BRANDING_URLS_CODE\", \"https://github.com/nautobot/nautobot\"),  # Code link in the footer\n\"docs\": os.getenv(\"NAUTOBOT_BRANDING_URLS_DOCS\", \"&lt;STATIC_URL&gt;docs/index.html\"),  # Docs link in the footer\n\"help\": os.getenv(\"NAUTOBOT_BRANDING_URLS_HELP\", \"https://github.com/nautobot/nautobot/wiki\"),  # Help link in the footer\n}\n</code></pre> <p>A set of URLs that correspond to helpful links in the right of the footer on every web page.</p> <p>These environment variables may be used to specify the values:</p> <ul> <li><code>NAUTOBOT_BRANDING_URLS_CODE</code></li> <li><code>NAUTOBOT_BRANDING_URLS_DOCS</code></li> <li><code>NAUTOBOT_BRANDING_URLS_HELP</code></li> </ul> <p>If a custom URL is not provided for any of the links, the default link within the Nautobot community is used.</p>"},{"location":"configuration/optional-settings.html#cacheops_defaults","title":"CACHEOPS_DEFAULTS","text":"<p>Default: <code>{'timeout': 900}</code> (15 minutes, in seconds)</p> <p>Environment Variable: <code>NAUTOBOT_CACHEOPS_TIMEOUT</code> (timeout value only)</p> <p>Warning</p> <p>It is an error to set the timeout value to <code>0</code>. If you wish to disable caching, please use <code>CACHEOPS_ENABLED</code>.</p> <p>Various defaults for caching, the most important of which being the cache timeout. The <code>timeout</code> is the number of seconds that cache entries will be retained before expiring.</p>"},{"location":"configuration/optional-settings.html#cacheops_enabled","title":"CACHEOPS_ENABLED","text":"<p>Default: <code>False</code></p> <p>Environment Variable: <code>NAUTOBOT_CACHEOPS_ENABLED</code></p> <p>A boolean that turns on/off caching.</p> <p>Changed in 1.5.0</p> <p>Cachopes is disabled by default and will be removed entirely in a future release.</p> <p>If set to <code>False</code>, all caching is bypassed and Nautobot operates as if there is no cache.</p>"},{"location":"configuration/optional-settings.html#cacheops_health_check_enabled","title":"CACHEOPS_HEALTH_CHECK_ENABLED","text":"<p>Default: <code>False</code></p> <p>A boolean that turns on/off health checks for the Redis server connection utilized by Cacheops. Most deployments share a Redis server with <code>django-redis</code> as such we only need to check the health of Redis one time.  If you are using a separate Redis deployment for Cacheops, please consider enabling this to monitor that Redis deployment.  Keep in mind the more health checks enabled the longer the health checks will take and timeouts might need to be increased.</p>"},{"location":"configuration/optional-settings.html#celery_broker_transport_options","title":"CELERY_BROKER_TRANSPORT_OPTIONS","text":"<p>Default: <code>{}</code></p> <p>A dict of additional options passed to the Celery broker transport. This is only required when configuring Celery to utilize Redis Sentinel.</p>"},{"location":"configuration/optional-settings.html#celery_broker_url","title":"CELERY_BROKER_URL","text":"<p>Environment Variable: <code>NAUTOBOT_CELERY_BROKER_URL</code></p> <p>Default: <code>'redis://localhost:6379/0'</code></p> <p>Celery broker URL used to tell workers where queues are located.</p>"},{"location":"configuration/optional-settings.html#celery_task_default_queue","title":"CELERY_TASK_DEFAULT_QUEUE","text":"<p>Added in version 1.5.0</p> <p>Environment Variable: <code>NAUTOBOT_CELERY_TASK_DEFAULT_QUEUE</code></p> <p>Default: <code>'default'</code></p> <p>The default celery queue name that will be used by workers if no queue is specified in the <code>nautobot-server celery worker</code> command. This queue will also be used by celery tasks if no queue is specified when a task is run.</p>"},{"location":"configuration/optional-settings.html#celery_result_backend","title":"CELERY_RESULT_BACKEND","text":"<p>Environment Variable: <code>NAUTOBOT_CELERY_RESULT_BACKEND</code></p> <p>Default: <code>'redis://localhost:6379/0'</code></p> <p>Celery result backend used to tell workers where to store task results (tombstones).</p>"},{"location":"configuration/optional-settings.html#celery_result_backend_transport_options","title":"CELERY_RESULT_BACKEND_TRANSPORT_OPTIONS","text":"<p>Default: <code>{}</code></p> <p>A dict of additional options passed to the Celery result backend transport. This is only required when configuring Celery to utilize Redis Sentinel.</p>"},{"location":"configuration/optional-settings.html#celery_task_soft_time_limit","title":"CELERY_TASK_SOFT_TIME_LIMIT","text":"<p>Default: <code>300</code> (5 minutes)</p> <p>Environment Variable: <code>NAUTOBOT_CELERY_TASK_SOFT_TIME_LIMIT</code></p> <p>The global Celery task soft timeout (in seconds). Any background task that exceeds this duration will receive a <code>SoftTimeLimitExceeded</code> exception and is responsible for handling this exception and performing any necessary cleanup or final operations before ending. See also <code>CELERY_TASK_TIME_LIMIT</code> below.</p>"},{"location":"configuration/optional-settings.html#celery_task_time_limit","title":"CELERY_TASK_TIME_LIMIT","text":"<p>Default: <code>600</code> (10 minutes)</p> <p>Environment Variable: <code>NAUTOBOT_CELERY_TASK_TIME_LIMIT</code></p> <p>The global Celery task hard timeout (in seconds). Any background task that exceeds this duration will be forcibly killed with a <code>SIGKILL</code> signal.</p>"},{"location":"configuration/optional-settings.html#celery_worker_prometheus_ports","title":"CELERY_WORKER_PROMETHEUS_PORTS","text":"<p>Added in version 1.5.10</p> <p>Default: <code>[]</code> (disabled)</p> <p>Environment Variable: <code>NAUTOBOT_CELERY_WORKER_PROMETHEUS_PORTS</code></p> <p>Ports for Prometheus metric HTTP server running on the celery worker(s).</p> <p>Normally this should be set to a single port, unless you have multiple workers running on a single machine, i.e. sharing the same available ports. In that case you need to specify a range of ports greater than or equal to the highest amount of workers you are running on a single machine (comma-separated, like \"8080,8081,8082\"). You can then use the <code>target_limit</code> parameter to the Prometheus <code>scrape_config</code> to ensure you are not getting duplicate metrics in that case. Set this to an empty list to disable it.</p>"},{"location":"configuration/optional-settings.html#changelog_retention","title":"CHANGELOG_RETENTION","text":"<p>Default: <code>90</code></p> <p>The number of days to retain logged changes (object creations, updates, and deletions). Set this to <code>0</code> to retain changes in the database indefinitely.</p> <p>Warning</p> <p>If enabling indefinite changelog retention, it is recommended to periodically delete old entries. Otherwise, the database may eventually exceed capacity.</p> <p>Added in version 1.2.0</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"configuration/optional-settings.html#config_context_dynamic_groups_enalbed","title":"CONFIG_CONTEXT_DYNAMIC_GROUPS_ENALBED","text":"<p>Default: <code>False</code></p> <p>Environment Variable: <code>NAUTOBOT_CONFIG_CONTEXT_DYNAMIC_GROUPS_ENABLED</code></p> <p>If <code>True</code>, it will be possible to apply Config Context objects to Devices and Virtual Machines via Dynamic Group membership. When set to <code>False</code> this behavior will not be available.</p> <p>Warning</p> <p>With a large number of dynamic groups, enabling this could invoke a performance penalty when processing Config Contexts.</p>"},{"location":"configuration/optional-settings.html#content_type_cache_timeout","title":"CONTENT_TYPE_CACHE_TIMEOUT","text":"<p>Added in version 1.6.0</p> <p>Default: <code>0</code> (disabled)</p> <p>Environment Variable: <code>NAUTOBOT_CONTENT_TYPE_CACHE_TIMEOUT</code></p> <p>The number of seconds to cache the content type accessible via a object's class property <code>Object._content_type_cached</code>. This can save frequent calls to <code>ContentType.objects.get_for_model(model)</code>. Set this to <code>0</code> to disable caching.</p>"},{"location":"configuration/optional-settings.html#cors_allow_all_origins","title":"CORS_ALLOW_ALL_ORIGINS","text":"<p>Default: <code>False</code></p> <p>Environment Variable: <code>NAUTOBOT_CORS_ALLOW_ALL_ORIGINS</code></p> <p>If <code>True</code>, all origins will be allowed. Other settings restricting allowed origins will be ignored.</p> <p>Setting this to <code>True</code> can be dangerous, as it allows any website to make cross-origin requests to yours. Generally you'll want to restrict the list of allowed origins with <code>CORS_ALLOWED_ORIGINS</code> or <code>CORS_ALLOWED_ORIGIN_REGEXES</code>.</p> <p>Previously this setting was called <code>CORS_ORIGIN_ALLOW_ALL</code>, which still works as an alias, with the new name taking precedence.</p>"},{"location":"configuration/optional-settings.html#cors_allowed_origins","title":"CORS_ALLOWED_ORIGINS","text":"<p>Default: <code>[]</code> (Empty list)</p> <p>A list of origins that are authorized to make cross-site HTTP requests.</p> <p>An Origin is defined by the CORS RFC Section 3.2 as a URI <code>scheme + hostname + port</code>, or one of the special values <code>'null'</code> or <code>'file://'</code>. Default ports (HTTPS = 443, HTTP = 80) are optional here.</p> <p>The special value <code>null</code> is sent by the browser in \"privacy-sensitive contexts\", such as when the client is running from a <code>file://</code> domain. The special value <code>file://</code> is sent accidentally by some versions of Chrome on Android as per this bug.</p> <p>Example:</p> <pre><code>CORS_ALLOWED_ORIGINS = [\n\"https://example.com\",\n\"https://sub.example.com\",\n\"http://localhost:8080\",\n\"http://127.0.0.1:9000\"\n]\n</code></pre> <p>Previously this setting was called <code>CORS_ORIGIN_WHITELIST</code>, which still works as an alias, with the new name taking precedence.</p>"},{"location":"configuration/optional-settings.html#cors_allowed_origin_regexes","title":"CORS_ALLOWED_ORIGIN_REGEXES","text":"<p>Default: <code>[]</code></p> <p>A list of strings representing regexes that match Origins that are authorized to make cross-site HTTP requests. Useful when <code>CORS_ALLOWED_ORIGINS</code> is impractical, such as when you have a large number of subdomains.</p> <p>Example:</p> <pre><code>CORS_ALLOWED_ORIGIN_REGEXES = [\nr\"^https://\\w+\\.example\\.com$\",\n]\n</code></pre> <p>Previously this setting was called <code>CORS_ORIGIN_REGEX_WHITELIST</code>, which still works as an alias, with the new name taking precedence.</p>"},{"location":"configuration/optional-settings.html#deployment_id","title":"DEPLOYMENT_ID","text":"<p>Added in version 1.6.0</p> <p>Default: a random UUID generated at install time.</p> <p>This setting is used to uniquely but anonymously identify Nautobot deployments when sending installation metrics. This setting is not generally intended to be user-serviceable. See the documentation for the <code>send_installation_metrics</code> management command for more details.</p>"},{"location":"configuration/optional-settings.html#disable_prefix_list_hierarchy","title":"DISABLE_PREFIX_LIST_HIERARCHY","text":"<p>Default: <code>False</code></p> <p>This setting disables rendering of the IP prefix hierarchy (parent/child relationships) in the IPAM prefix list view. With large sets of prefixes, users may encounter a performance penalty when trying to load the prefix list view due to the nature of calculating the parent/child relationships. This setting allows users to disable the hierarchy and instead only render a flat list of all prefixes in the table.</p> <p>A later release of Nautobot will address the underlying performance issues, and likely remove this configuration option.</p>"},{"location":"configuration/optional-settings.html#dynamic_groups_member_cache_timeout","title":"DYNAMIC_GROUPS_MEMBER_CACHE_TIMEOUT","text":"<p>Added in version 1.6.0</p> <p>Default: <code>0</code> (disabled)</p> <p>Environment Variable: <code>NAUTOBOT_DYNAMIC_GROUPS_MEMBER_CACHE_TIMEOUT</code></p> <p>The number of seconds to cache the member list of dynamic groups. With large datasets (those in scope of a Dynamic Group and number of Dynamic Groups themselves), users will encounter a performance penalty using or accessing the membership lists. This setting allows users to accept a cached list for common use cases (particularly in the UI) that expires after the configured time. Set this to <code>0</code> to disable caching.</p>"},{"location":"configuration/optional-settings.html#enforce_global_unique","title":"ENFORCE_GLOBAL_UNIQUE","text":"<p>Default: <code>False</code></p> <p>Environment Variable: <code>NAUTOBOT_ENFORCE_GLOBAL_UNIQUE</code></p> <p>By default, Nautobot will permit users to create duplicate prefixes and IP addresses in the global table (that is, those which are not assigned to any VRF). This behavior can be disabled by setting <code>ENFORCE_GLOBAL_UNIQUE</code> to <code>True</code>.</p>"},{"location":"configuration/optional-settings.html#exempt_view_permissions","title":"EXEMPT_VIEW_PERMISSIONS","text":"<p>Default: <code>[]</code> (Empty list)</p> <p>A list of Nautobot models to exempt from the enforcement of view permissions. Models listed here will be viewable by all users, both authenticated and anonymous.</p> <p>List models in the form <code>&lt;app&gt;.&lt;model&gt;</code>. For example:</p> <pre><code>EXEMPT_VIEW_PERMISSIONS = [\n'dcim.site',\n'dcim.region',\n'ipam.prefix',\n]\n</code></pre> <p>To exempt all models from view permission enforcement, set the following. (Note that <code>EXEMPT_VIEW_PERMISSIONS</code> must be an iterable.)</p> <pre><code>EXEMPT_VIEW_PERMISSIONS = ['*']\n</code></pre> <p>Note</p> <p>Using a wildcard will not affect certain potentially sensitive models, such as user permissions. If there is a need to exempt these models, they must be specified individually.</p>"},{"location":"configuration/optional-settings.html#external_auth_default_groups","title":"EXTERNAL_AUTH_DEFAULT_GROUPS","text":"<p>Default: <code>[]</code> (Empty list)</p> <p>The list of group names to assign a new user account when created using 3rd-party authentication.</p>"},{"location":"configuration/optional-settings.html#external_auth_default_permissions","title":"EXTERNAL_AUTH_DEFAULT_PERMISSIONS","text":"<p>Default: <code>{}</code> (Empty dictionary)</p> <p>A mapping of permissions to assign a new user account when created using SSO authentication. Each key in the dictionary will be the permission name specified as <code>&lt;app_label&gt;.&lt;action&gt;_&lt;model&gt;</code>, and the value should be set to the permission constraints, or <code>None</code> to allow all objects.</p>"},{"location":"configuration/optional-settings.html#example-permissions","title":"Example Permissions","text":"Permission Description <code>{'dcim.view_device': {}}</code> or <code>{'dcim.view_device': None}</code> Users can view all devices <code>{'dcim.add_device': {}}</code> Users can add devices, see note below <code>{'dcim.view_device': {\"site__name__in\":  [\"HQ\"]}}</code> Users can view all devices in the HQ site <p>Warning</p> <p>Permissions can be complicated! Be careful when restricting permissions to also add any required prerequisite permissions.</p> <p>For example, when adding Devices the Device Role, Device Type, Site, and Status fields are all required fields in order for the UI to function properly. Users will also need view permissions for those fields or the corresponding field selections in the UI will be unavailable and potentially prevent objects from being able to be created or edited.</p> <p>The following example gives a user a reasonable amount of access to add devices to a single site (HQ in this case):</p> <pre><code>{\n'dcim.add_device': {\"site__name__in\":  [\"HQ\"]},\n'dcim.view_device': {\"site__name__in\":  [\"HQ\"]},\n'dcim.view_devicerole': None,\n'dcim.view_devicetype': None,\n'extras.view_status': None,\n'dcim.view_site': {\"name__in\":  [\"HQ\"]},\n'dcim.view_manufacturer': None,\n'dcim.view_region': None,\n'dcim.view_rack': None,\n'dcim.view_rackgroup': None,\n'dcim.view_platform': None,\n'virtualization.view_cluster': None,\n'virtualization.view_clustergroup': None,\n'tenancy.view_tenant': None,\n'tenancy.view_tenantgroup': None,\n}\n</code></pre> <p>Please see the object permissions page for more information.</p>"},{"location":"configuration/optional-settings.html#git_root","title":"GIT_ROOT","text":"<p>Default: <code>os.path.join(NAUTOBOT_ROOT, \"git\")</code></p> <p>Environment Variable: <code>NAUTOBOT_GIT_ROOT</code></p> <p>The file path to a directory where cloned Git repositories will be located.</p> <p>The value of this variable can also be customized by setting the environment variable <code>NAUTOBOT_GIT_ROOT</code> to a directory path of your choosing.</p>"},{"location":"configuration/optional-settings.html#graphql_computed_field_prefix","title":"GRAPHQL_COMPUTED_FIELD_PREFIX","text":"<p>Default: <code>\"cpf\"</code></p> <p>By default, all computed fields in GraphQL will be prefixed with <code>cf</code>. A computed field named <code>my_field</code> will appear in GraphQL as <code>cpf_my_field</code> by default. It's possible to change or remove the prefix by setting the value of <code>GRAPHQL_COMPUTED_FIELD_PREFIX</code>.</p>"},{"location":"configuration/optional-settings.html#graphql_custom_field_prefix","title":"GRAPHQL_CUSTOM_FIELD_PREFIX","text":"<p>Default: <code>\"cf\"</code></p> <p>By default, all custom fields in GraphQL will be prefixed with <code>cf</code>. A custom field named <code>my_field</code> will appear in GraphQL as <code>cf_my_field</code> by default. It's possible to change or remove the prefix by setting the value of <code>GRAPHQL_CUSTOM_FIELD_PREFIX</code>.</p>"},{"location":"configuration/optional-settings.html#graphql_relationship_prefix","title":"GRAPHQL_RELATIONSHIP_PREFIX","text":"<p>Default: <code>\"rel\"</code></p> <p>By default, all relationship associations in GraphQL will be prefixed with <code>rel</code>. A relationship named <code>my_relationship</code> will appear in GraphQL as <code>rel_my_relationship</code> by default. It's possible to change or remove the prefix by setting the value of <code>GRAPHQL_RELATIONSHIP_PREFIX</code>.</p>"},{"location":"configuration/optional-settings.html#hide_restricted_ui","title":"HIDE_RESTRICTED_UI","text":"<p>Default: <code>False</code></p> <p>When set to <code>True</code>, users with limited permissions will only be able to see items in the UI they have access to.</p> <p>Added in version 1.2.0</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p> <p>Added in version 1.3.10</p> <p>When this setting is set to <code>True</code>, logged out users will be redirected to the login page when navigating to the Nautobot home page.</p>"},{"location":"configuration/optional-settings.html#http_proxies","title":"HTTP_PROXIES","text":"<p>Default: <code>None</code> (Disabled)</p> <p>A dictionary of HTTP proxies to use for outbound requests originating from Nautobot (e.g. when sending webhook requests). Proxies should be specified by schema (HTTP and HTTPS) as per the Python requests library documentation. For example:</p> <pre><code>HTTP_PROXIES = {\n'http': 'http://10.10.1.10:3128',\n'https': 'http://10.10.1.10:1080',\n}\n</code></pre> <p>Note</p> <p>When using Git repositories within Nautobot the Python library <code>GitPython</code> needs extra proxy configuration:</p> <pre><code>git config --global http.proxy http://192.0.2.1:3128\ngit config --global https.proxy http://192.0.2.1:3128\n</code></pre>"},{"location":"configuration/optional-settings.html#installation_metrics_enabled","title":"INSTALLATION_METRICS_ENABLED","text":"<p>Added in version 1.6.0</p> <p>Default: <code>True</code> for existing Nautobot deployments, user-specified when running <code>nautobot-server init</code> for a new deployment.</p> <p>Environment Variable: <code>NAUTOBOT_INSTALLATION_METRICS_ENABLED</code></p> <p>When set to <code>True</code>, Nautobot will send anonymized installation metrics to the Nautobot maintainers when running the <code>post_upgrade</code> or <code>send_installation_metrics</code> management commands. See the documentation for the <code>send_installation_metrics</code> management command for more details.</p>"},{"location":"configuration/optional-settings.html#jobs_root","title":"JOBS_ROOT","text":"<p>Default: <code>os.path.join(NAUTOBOT_ROOT, \"jobs\")</code></p> <p>Environment Variable: <code>NAUTOBOT_JOBS_ROOT</code></p> <p>The file path to a directory where Jobs can be discovered.</p> <p>Caution</p> <p>This directory must contain an <code>__init__.py</code> file.</p>"},{"location":"configuration/optional-settings.html#log_deprecation_warnings","title":"LOG_DEPRECATION_WARNINGS","text":"<p>Removed in version 1.5.3</p> <p>This setting was moved to environment variable only as it conflicts with app startup due to import-time order.</p>"},{"location":"configuration/optional-settings.html#maintenance_mode","title":"MAINTENANCE_MODE","text":"<p>Default: <code>False</code></p> <p>Environment Variable: <code>NAUTOBOT_MAINTENANCE_MODE</code></p> <p>Setting this to <code>True</code> will display a \"maintenance mode\" banner at the top of every page. Additionally, Nautobot will no longer update a user's \"last active\" time upon login. This is to allow new logins when the database is in a read-only state. Recording of login times will resume when maintenance mode is disabled.</p> <p>Note</p> <p>The default <code>SESSION_ENGINE</code> configuration will store sessions in the database, this obviously will not work when <code>MAINTENANCE_MODE</code> is <code>True</code> and the database is in a read-only state for maintenance.  Consider setting <code>SESSION_ENGINE</code> to <code>django.contrib.sessions.backends.cache</code> when enabling <code>MAINTENANCE_MODE</code>.</p> <p>Note</p> <p>The Docker container normally attempts to run migrations on startup; however, if the database is in a read-only state the Docker container will fail to start.  Setting the environment variable <code>NAUTOBOT_DOCKER_SKIP_INIT</code> to <code>true</code> will prevent the migrations from occurring.</p> <p>Note</p> <p>If you are using <code>django-auth-ldap</code> for LDAP authentication, <code>django-auth-ldap</code> by default will try to update a user object on every log in.  If the database is in a read-only state <code>django-auth-ldap</code> will fail.  You will also need to set <code>AUTH_LDAP_ALWAYS_UPDATE_USER=False</code> and <code>AUTH_LDAP_NO_NEW_USERS=True</code> to avoid this, please see the <code>django-auth-ldap</code> documentation for more information.</p>"},{"location":"configuration/optional-settings.html#max_page_size","title":"MAX_PAGE_SIZE","text":"<p>Default: <code>1000</code></p> <p>A web user or API consumer can request an arbitrary number of objects by appending the \"limit\" parameter to the URL (e.g. <code>?limit=1000</code>). This parameter defines the maximum acceptable limit. Setting this to <code>0</code> or <code>None</code> will allow a client to retrieve all matching objects at once with no limit by specifying <code>?limit=0</code>.</p> <p>Added in version 1.2.0</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"configuration/optional-settings.html#metrics_enabled","title":"METRICS_ENABLED","text":"<p>Default: <code>False</code></p> <p>Environment Variable: <code>NAUTOBOT_METRICS_ENABLED</code></p> <p>Toggle the availability Prometheus-compatible metrics at <code>/metrics</code>. See the Prometheus Metrics documentation for more details.</p>"},{"location":"configuration/optional-settings.html#napalm_username","title":"NAPALM_USERNAME","text":""},{"location":"configuration/optional-settings.html#napalm_password","title":"NAPALM_PASSWORD","text":"<p>Default: <code>\"\"</code> (Empty string)</p> <p>Environment Variables: <code>NAUTOBOT_NAPALM_USERNAME</code> and <code>NAUTOBOT_NAPALM_PASSWORD</code></p> <p>Nautobot will use these credentials when authenticating to remote devices via the NAPALM library, if installed. Both parameters are optional.</p> <p>Note</p> <p>If SSH public key authentication has been set up on the remote device(s) for the system account under which Nautobot runs, these parameters are not needed.</p> <p>Note</p> <p>If a given device has an appropriately populated secrets group assigned to it, the secrets defined in that group will take precedence over these default values.</p>"},{"location":"configuration/optional-settings.html#napalm_args","title":"NAPALM_ARGS","text":"<p>Default: <code>{}</code> (Empty dictionary)</p> <p>A dictionary of optional arguments to pass to NAPALM when instantiating a network driver. See the NAPALM documentation for a complete list of optional arguments. An example:</p> <pre><code>NAPALM_ARGS = {\n'api_key': '472071a93b60a1bd1fafb401d9f8ef41',\n'port': 2222,\n}\n</code></pre> <p>Some platforms (e.g. Cisco IOS) require an enable password to be passed in addition to the normal password. If desired, you can use the configured <code>NAPALM_PASSWORD</code> as the value for this argument:</p> <pre><code>NAPALM_USERNAME = 'username'\nNAPALM_PASSWORD = 'MySecretPassword'\nNAPALM_ARGS = {\n'secret': NAPALM_PASSWORD,          # ios and nxos_ssh\n'enable_password': NAPALM_PASSWORD, # eos\n# Include any additional args here\n}\n</code></pre> <p>Note</p> <p>If a given device has an appropriately populated secrets group assigned to it, a secret defined in that group can override the <code>NAPALM_ARGS[\"secret\"]</code> or <code>NAPALM_ARGS[\"enable_password\"]</code> default value defined here.</p>"},{"location":"configuration/optional-settings.html#napalm_timeout","title":"NAPALM_TIMEOUT","text":"<p>Default: <code>30</code></p> <p>Environment Variable: <code>NAUTOBOT_NAPALM_TIMEOUT</code></p> <p>The amount of time (in seconds) to wait for NAPALM to connect to a device.</p>"},{"location":"configuration/optional-settings.html#network_drivers","title":"NETWORK_DRIVERS","text":"<p>Added in version 1.6.0</p> <p>Default: <code>{}</code> (Empty dictionary)</p> <p>An optional dictionary to extend or override the default <code>Platform.network_driver</code> translations provided by netutils. For example, to add support for a custom <code>Platform.network_driver</code> value of <code>\"my_network_driver\"</code> for Netmiko and PyATS drivers:</p> <pre><code>NETWORK_DRIVERS = {\n\"netmiko\": {\"my_network_driver\": \"cisco_ios\"},\n\"pyats\": {\"my_network_driver\": \"iosxe\"},\n}\n</code></pre> <p>The default top-level keys are <code>ansible</code>, <code>hier_config</code>, <code>napalm</code>, <code>netmiko</code>, <code>ntc_templates</code>, <code>pyats</code>, <code>pyntc</code>, and <code>scrapli</code>, but you can also add additional keys if you have an alternative network driver that you want your Nautobot instance to include.</p> <p>Tip</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"configuration/optional-settings.html#paginate_count","title":"PAGINATE_COUNT","text":"<p>Default: <code>50</code></p> <p>The default maximum number of objects to display per page within each list of objects. Applies to both the UI and the REST API.</p> <p>Added in version 1.2.0</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"configuration/optional-settings.html#per_page_defaults","title":"PER_PAGE_DEFAULTS","text":"<p>Default: <code>[25, 50, 100, 250, 500, 1000]</code></p> <p>The options displayed in the web interface dropdown to limit the number of objects per page. For proper user experience, this list should include the <code>PAGINATE_COUNT</code> and <code>MAX_PAGE_SIZE</code> values as options.</p>"},{"location":"configuration/optional-settings.html#plugins","title":"PLUGINS","text":"<p>Default: <code>[]</code> (Empty list)</p> <p>A list of installed Nautobot plugins to enable. Plugins will not take effect unless they are listed here.</p> <p>Warning</p> <p>Plugins extend Nautobot by allowing external code to run with the same access and privileges as Nautobot itself. Only install plugins from trusted sources. The Nautobot maintainers make absolutely no guarantees about the integrity or security of your installation with plugins enabled.</p>"},{"location":"configuration/optional-settings.html#plugins_config","title":"PLUGINS_CONFIG","text":"<p>Default: <code>{}</code> (Empty dictionary)</p> <p>This parameter holds configuration settings for individual Nautobot plugins. It is defined as a dictionary, with each key using the name of an installed plugin. The specific parameters supported are unique to each plugin: Reference the plugin's documentation to determine the supported parameters. An example configuration is shown below:</p> <pre><code>PLUGINS_CONFIG = {\n'plugin1': {\n'foo': 123,\n'bar': True\n},\n'plugin2': {\n'foo': 456,\n},\n}\n</code></pre> <p>Note that a plugin must be listed in <code>PLUGINS</code> for its configuration to take effect.</p>"},{"location":"configuration/optional-settings.html#prefer_ipv4","title":"PREFER_IPV4","text":"<p>Default: <code>False</code></p> <p>When determining the primary IP address for a device, IPv6 is preferred over IPv4 by default. Set this to True to prefer IPv4 instead.</p> <p>Added in version 1.2.0</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"configuration/optional-settings.html#rack_elevation_default_unit_height","title":"RACK_ELEVATION_DEFAULT_UNIT_HEIGHT","text":"<p>Default: <code>22</code></p> <p>Default height (in pixels) of a unit within a rack elevation. For best results, this should be approximately one tenth of <code>RACK_ELEVATION_DEFAULT_UNIT_WIDTH</code>.</p> <p>Added in version 1.2.0</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"configuration/optional-settings.html#rack_elevation_default_unit_width","title":"RACK_ELEVATION_DEFAULT_UNIT_WIDTH","text":"<p>Default: <code>220</code></p> <p>Default width (in pixels) of a unit within a rack elevation.</p> <p>Added in version 1.2.0</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"configuration/optional-settings.html#redis_lock_timeout","title":"REDIS_LOCK_TIMEOUT","text":"<p>Default: <code>600</code></p> <p>Environment Variable: <code>NAUTOBOT_REDIS_LOCK_TIMEOUT</code></p> <p>Maximum duration of a Redis lock created when calling <code>/api/ipam/prefixes/{id}/available-prefixes/</code> or <code>/api/ipam/prefixes/{id}/available-ips/</code> to avoid inadvertently allocating the same prefix or IP to multiple simultaneous callers. Default is set to 600 seconds (10 minutes) to be longer than any theoretical API call time. This is to prevent a deadlock scenario where the server did not gracefully exit the <code>with</code> block when acquiring the Redis lock.</p>"},{"location":"configuration/optional-settings.html#release_check_timeout","title":"RELEASE_CHECK_TIMEOUT","text":"<p>Default: <code>86400</code> (24 hours)</p> <p>The number of seconds to retain the latest version that is fetched from the GitHub API before automatically invalidating it and fetching it from the API again.</p> <p>Warning</p> <p>This must be set to at least one hour (<code>3600</code> seconds). Setting it to a value lower than this is an error.</p> <p>Added in version 1.2.0</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"configuration/optional-settings.html#release_check_url","title":"RELEASE_CHECK_URL","text":"<p>Default: <code>None</code> (disabled)</p> <p>This parameter defines the URL of the repository that will be checked periodically for new Nautobot releases. When a new release is detected, a message will be displayed to administrative users on the home page. This can be set to the official repository (<code>'https://api.github.com/repos/nautobot/nautobot/releases'</code>) or a custom fork. Set this to <code>None</code> to disable automatic update checks.</p> <p>Note</p> <p>The URL provided must be compatible with the GitHub REST API.</p> <p>Added in version 1.2.0</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"configuration/optional-settings.html#sanitizer_patterns","title":"SANITIZER_PATTERNS","text":"<p>Added in version 1.3.4</p> <p>Default:</p> <pre><code>[\n(re.compile(r\"(https?://)?\\S+\\s*@\", re.IGNORECASE), r\"\\1{replacement}@\"),\n(re.compile(r\"(username|password|passwd|pwd)((?:\\s+is.?|:)?\\s+)\\S+\", re.IGNORECASE), r\"\\1\\2{replacement}\"),\n]\n</code></pre> <p>List of (regular expression, replacement pattern) tuples used by the <code>nautobot.utilities.logging.sanitize()</code> function. As of Nautobot 1.3.4 this function is used primarily for sanitization of Job log entries, but it may be used in other scopes in the future.</p>"},{"location":"configuration/optional-settings.html#storage_backend","title":"STORAGE_BACKEND","text":"<p>Default: <code>None</code> (local storage)</p> <p>The backend storage engine for handling uploaded files (e.g. image attachments). Nautobot supports integration with the <code>django-storages</code> package, which provides backends for several popular file storage services. If not configured, local filesystem storage will be used.</p> <p>An example of using django-storages with AWS S3 buckets, visit the django-storages with S3 user-guide.</p> <p>The configuration parameters for the specified storage backend are defined under the <code>STORAGE_CONFIG</code> setting.</p>"},{"location":"configuration/optional-settings.html#storage_config","title":"STORAGE_CONFIG","text":"<p>Default: <code>{}</code> (Empty dictionary)</p> <p>A dictionary of configuration parameters for the storage backend configured as <code>STORAGE_BACKEND</code>. The specific parameters to be used here are specific to each backend; see the <code>django-storages</code> documentation for more detail.</p> <p>If <code>STORAGE_BACKEND</code> is not defined, this setting will be ignored.</p>"},{"location":"configuration/optional-settings.html#strict_filtering","title":"STRICT_FILTERING","text":"<p>Added in version 1.4.0</p> <p>Default: <code>True</code></p> <p>Environment Variable: <code>NAUTOBOT_STRICT_FILTERING</code></p> <p>If set to <code>True</code> (default), UI and REST API filtering of object lists will fail if an unknown/unrecognized filter parameter is provided as a URL parameter. (For example, <code>/dcim/devices/?ice_cream_flavor=chocolate</code> or <code>/api/dcim/sites/?ice_cream_flavor=chocolate</code>). UI list (table) views will report an error message in this case and display no filtered objects; REST API list endpoints will return a 400 Bad Request response with an explanatory error message.</p> <p>If set to <code>False</code>, unknown/unrecognized filter parameters will be discarded and ignored, although Nautobot will log a warning message.</p> <p>Warning</p> <p>Setting this to <code>False</code> can result in unexpected filtering results in the case of user error, for example <code>/dcim/devices/?has_primry_ip=false</code> (note the typo <code>primry</code>) will result in a list of all devices, rather than the intended list of only devices that lack a primary IP address. In the case of Jobs or external automation making use of such a filter, this could have wide-ranging consequences.</p>"},{"location":"configuration/optional-settings.html#test_factory_seed","title":"TEST_FACTORY_SEED","text":"<p>Added in version 1.5.0</p> <p>Default: <code>None</code></p> <p>Environment Variable: <code>NAUTOBOT_TEST_FACTORY_SEED</code></p> <p>When <code>TEST_USE_FACTORIES</code> is set to <code>True</code>, this configuration provides a fixed seed string for the pseudo-random generator used to populate test data into the database, providing for reproducible randomness across consecutive test runs. If unset, a random seed will be used each time.</p>"},{"location":"configuration/optional-settings.html#test_use_factories","title":"TEST_USE_FACTORIES","text":"<p>Added in version 1.5.0</p> <p>Default: <code>False</code></p> <p>Environment Variable: <code>NAUTOBOT_TEST_USE_FACTORIES</code></p> <p>If set to <code>True</code>, the Nautobot test runner will call <code>nautobot-server generate_test_data ...</code> before executing any test cases, pre-populating the test database with various pseudo-random instances of many of Nautobot's data models.</p> <p>Warning</p> <p>This functionality requires the installation of the <code>factory-boy</code> Python package, which is present in Nautobot's own development environment, but is not an inherent dependency of the Nautobot package when installed otherwise, such as into a plugin's development environment.</p> <p>Info</p> <p>Setting this to <code>True</code> is a requirement for all Nautobot core tests as of 1.5.0, and it is set accordingly in <code>nautobot/core/tests/nautobot_config.py</code>, but defaults to <code>False</code> otherwise so as to remain backwards-compatible with plugins that also may use the Nautobot test runner in their own test environments, but have not yet updated their tests to account for the presence of this test data.</p> <p>Because this test data can obviate the need to manually construct complex test data, and the random factor can improve test robustness, plugin developers are encouraged to set this to <code>True</code> in their configuration, ensure that their development environments include the <code>factory-boy</code> Python package as a test dependency, and update their tests as needed.</p>"},{"location":"configuration/optional-settings.html#test_performance_baseline_file","title":"TEST_PERFORMANCE_BASELINE_FILE","text":"<p>Added in version 1.5.0</p> <p>Default: <code>nautobot/core/tests/performance_baselines.yml</code></p> <p>Environment Variable: <code>TEST_PERFORMANCE_BASELINE_FILE</code></p> <p><code>TEST_PERFORMANCE_BASELINE_FILE</code> is set to a certain file path, this file path should point to a .yml file that conforms to the following format:</p> <pre><code>tests:\n- name: &gt;-\ntest_run_job_with_sensitive_variables_and_requires_approval\n(nautobot.extras.tests.test_views.JobTestCase)\nexecution_time: 4.799533\n- name: test_run_missing_schedule (nautobot.extras.tests.test_views.JobTestCase)\nexecution_time: 4.367563\n- name: test_run_now_missing_args (nautobot.extras.tests.test_views.JobTestCase)\nexecution_time: 4.363194\n- name: &gt;-\ntest_create_object_with_constrained_permission\n(nautobot.extras.tests.test_views.GraphQLQueriesTestCase)\nexecution_time: 3.474244\n- name: &gt;-\ntest_run_now_constrained_permissions\n(nautobot.extras.tests.test_views.JobTestCase)\nexecution_time: 2.727531\n...\n</code></pre> <p>and store the performance baselines with the <code>name</code> of the test and the baseline <code>execution_time</code>. This file should provide the baseline times that all performance-related tests are running against.</p>"},{"location":"configuration/optional-settings.html#ui_rack_view_truncate_function","title":"UI_RACK_VIEW_TRUNCATE_FUNCTION","text":"<p>Added in version 1.4.0</p> <p>Default:</p> <pre><code>def UI_RACK_VIEW_TRUNCATE_FUNCTION(device_display_name):\nreturn str(device_display_name).split(\".\")[0]\n</code></pre> <p>This setting function is used to perform the rack elevation truncation feature. This provides a way to tailor the truncation behavior to best suit the needs of the installation.</p> <p>The function must take only one argument: the device display name, as a string, attempting to be rendered on the rack elevation.</p> <p>The function must return only one argument: a string of the truncated device display name.</p>"},{"location":"configuration/optional-settings.html#environment-variable-only-settings","title":"Environment-Variable-Only Settings","text":"<p>Warning</p> <p>The following settings are only configurable as environment variables, and not via <code>nautobot_config.py</code> or similar.</p>"},{"location":"configuration/optional-settings.html#git_ssl_no_verify","title":"GIT_SSL_NO_VERIFY","text":"<p>Default: Unset</p> <p>If you are using a self-signed git repository, you will need to set the environment variable <code>GIT_SSL_NO_VERIFY=\"1\"</code> in order for the repository to sync.</p> <p>Warning</p> <p>This must be specified as an environment variable. Setting it in <code>nautobot_config.py</code> will not have the desired effect.</p>"},{"location":"configuration/optional-settings.html#nautobot_log_deprecation_warnings","title":"NAUTOBOT_LOG_DEPRECATION_WARNINGS","text":"<p>Added in version 1.5.2</p> <p>Changed in version 1.5.3</p> <p>This was previously available as a config file setting but changed to environment-variable only. Also <code>DEBUG = True</code> will no longer work to log deprecation warnings.</p> <p>Default: <code>False</code></p> <p>This can be set to <code>True</code> to allow deprecation warnings raised by Nautobot to (additionally) be logged as <code>WARNING</code> level log messages. (Deprecation warnings are normally silent in Python, but can be enabled globally by various means such as setting the <code>PYTHONWARNINGS</code> environment variable. However, doing so can be rather noisy, as it will also include warnings from within Django about various code in various package dependencies of Nautobot's, etc. This configuration setting allows a more targeted enablement of only warnings from within Nautobot itself, which can be useful when vetting various Nautobot apps (plugins) for future-proofness against upcoming changes to Nautobot.)</p> <p>Caution</p> <p>In Nautobot 2.0, deprecation warnings will be logged by default; a future release of Nautobot 1.5.x will also enable default logging of deprecation warnings.</p>"},{"location":"configuration/optional-settings.html#nautobot_root","title":"NAUTOBOT_ROOT","text":"<p>Default: <code>~/.nautobot/</code></p> <p>The filesystem path to use to store Nautobot files (Jobs, uploaded images, Git repositories, etc.).</p> <p>This setting is used internally in the core settings to provide default locations for features that require file storage, and the default location of the <code>nautobot_config.py</code>.</p> <p>Warning</p> <p>Do not override <code>NAUTOBOT_ROOT</code> in your <code>nautobot_config.py</code>. It will not work as expected. If you need to customize this setting, please always set the <code>NAUTOBOT_ROOT</code> environment variable.</p>"},{"location":"configuration/optional-settings.html#django-configuration-settings","title":"Django Configuration Settings","text":"<p>While the official Django documentation documents all Django settings, the below is provided where either the setting is common in Nautobot deployments and/or there is a supported <code>NAUTOBOT_*</code> environment variable.</p>"},{"location":"configuration/optional-settings.html#admins","title":"ADMINS","text":"<p>Default: <code>[]</code> (Empty list)</p> <p>Nautobot will email details about critical errors to the administrators listed here. This should be a list of (name, email) tuples. For example:</p> <pre><code>ADMINS = [\n['Hank Hill', 'hhill@example.com'],\n['Dale Gribble', 'dgribble@example.com'],\n]\n</code></pre> <p>Please see the official Django documentation on <code>ADMINS</code> for more information.</p>"},{"location":"configuration/optional-settings.html#csrf_trusted_origins","title":"CSRF_TRUSTED_ORIGINS","text":"<p>Default: <code>[]</code></p> <p>A list of hosts (fully-qualified domain names (FQDNs) or subdomains) that are considered trusted origins for cross-site secure requests such as HTTPS POST.</p> <p>For more information, please see the official Django documentation on <code>CSRF_TRUSTED_ORIGINS</code> and more generally the official Django documentation on CSRF protection</p>"},{"location":"configuration/optional-settings.html#date-and-time-formatting","title":"Date and Time Formatting","text":"<p>You may define custom formatting for date and times. For detailed instructions on writing format strings, please see the Django documentation. Default formats are listed below.</p> <pre><code>DATE_FORMAT = 'N j, Y'               # June 26, 2016\nSHORT_DATE_FORMAT = 'Y-m-d'          # 2016-06-26\nTIME_FORMAT = 'g:i a'                # 1:23 p.m.\nDATETIME_FORMAT = 'N j, Y g:i a'     # June 26, 2016 1:23 p.m.\nSHORT_DATETIME_FORMAT = 'Y-m-d H:i'  # 2016-06-26 13:23\n</code></pre> <p>Environment Variables:</p> <ul> <li><code>NAUTOBOT_DATE_FORMAT</code></li> <li><code>NAUTOBOT_SHORT_DATE_FORMAT</code></li> <li><code>NAUTOBOT_TIME_FORMAT</code></li> <li><code>NAUTOBOT_SHORT_TIME_FORMAT</code></li> <li><code>NAUTOBOT_DATETIME_FORMAT</code></li> <li><code>NAUTOBOT_SHORT_DATETIME_FORMAT</code></li> </ul>"},{"location":"configuration/optional-settings.html#debug","title":"DEBUG","text":"<p>Default: <code>False</code></p> <p>Environment Variable: <code>NAUTOBOT_DEBUG</code></p> <p>This setting enables debugging. Debugging should be enabled only during development or troubleshooting. Note that only clients which access Nautobot from a recognized internal IP address will see debugging tools in the user interface.</p> <p>Warning</p> <p>Never enable debugging on a production system, as it can expose sensitive data to unauthenticated users and impose a substantial performance penalty.</p> <p>Please see the official Django documentation on <code>DEBUG</code> for more information.</p>"},{"location":"configuration/optional-settings.html#force_script_name","title":"FORCE_SCRIPT_NAME","text":"<p>Default: <code>None</code></p> <p>If not <code>None</code>, this will be used as the value of the <code>SCRIPT_NAME</code> environment variable in any HTTP request. This setting can be used to override the server-provided value of <code>SCRIPT_NAME</code>, which is most commonly used for hosting Nautobot in a subdirectory (e.g. example.com/nautobot/).</p> <p>Important</p> <p>To host Nautobot under a subdirectory you must set this value to match the same prefix configured on your HTTP server. For example, if you configure NGINX to serve Nautobot at <code>/nautobot/</code>, you must set <code>FORCE_SCRIPT_NAME = \"/nautobot/\"</code>.</p> <p>Please see the official Django documentation on <code>FORCE_SCRIPT_NAME</code> for more information.</p>"},{"location":"configuration/optional-settings.html#internal_ips","title":"INTERNAL_IPS","text":"<p>Default: <code>('127.0.0.1', '::1')</code></p> <p>A list of IP addresses recognized as internal to the system, used to control the display of debugging output. For example, the Django debugging toolbar, if installed, will be viewable only when a client is accessing Nautobot from one of the listed IP addresses (and <code>DEBUG</code> is true).</p>"},{"location":"configuration/optional-settings.html#logging","title":"LOGGING","text":"<p>Default:</p> <pre><code>{\n\"version\": 1,\n\"disable_existing_loggers\": False,\n\"formatters\": {\n\"normal\": {\n\"format\": \"%(asctime)s.%(msecs)03d %(levelname)-7s %(name)s :\\n  %(message)s\",\n\"datefmt\": \"%H:%M:%S\",\n},\n\"verbose\": {\n\"format\": \"%(asctime)s.%(msecs)03d %(levelname)-7s %(name)-20s %(filename)-15s %(funcName)30s() :\\n  %(message)s\",\n\"datefmt\": \"%H:%M:%S\",\n},\n},\n\"handlers\": {\n\"normal_console\": {\n\"level\": \"INFO\",\n\"class\": \"logging.StreamHandler\",\n\"formatter\": \"normal\",\n},\n\"verbose_console\": {\n\"level\": \"DEBUG\",\n\"class\": \"logging.StreamHandler\",\n\"formatter\": \"verbose\",\n},\n},\n\"loggers\": {\n\"django\": {\"handlers\": [\"normal_console\"], \"level\": \"INFO\"},\n\"nautobot\": {\n\"handlers\": [\"verbose_console\" if DEBUG else \"normal_console\"],\n\"level\": LOG_LEVEL,\n},\n},\n}\n</code></pre> <p>Changed in version 1.4.10</p> <p>While running unit or integration tests via <code>nautobot-server test ...</code>, LOGGING will be set to <code>{}</code> instead of the above defaults, as verbose logging to the console is typically not desirable while running tests.</p> <p>This translates to:</p> <ul> <li>all messages from Django and from Nautobot of INFO severity or higher will be logged to the console.</li> <li>if <code>DEBUG</code> is True, Nautobot DEBUG messages will also be logged, and all Nautobot messages will be logged with a more verbose format including the filename and function name that originated each log message.</li> </ul> <p>The above default log formatters split each log message across two lines of output for greater readability, which is useful for local observation and troubleshooting, but you may find it impractical to use in production environments that expect one line per log message. Fortunately, the Django framework on which Nautobot runs allows for extensive customization of logging format and destination. Please consult the Django logging documentation for more information on configuring this setting.</p> <p>Below is an example configuration extension which will additionally write all INFO and higher messages to a local file:</p> <pre><code>LOGGING[\"handlers\"][\"file\"] = {\n\"level\": \"INFO\",\n\"class\": \"logging.FileHandler\",\n\"filename\": \"/var/log/nautobot.log\",\n\"formatter\": \"normal\",\n}\nLOGGING[\"loggers\"][\"django\"][\"handlers\"] += [\"file\"]\nLOGGING[\"loggers\"][\"nautobot\"][\"handlers\"] += [\"file\"]\n</code></pre> <p>Additional examples are available in the <code>/examples/logging</code> directory in the Nautobot repository.</p>"},{"location":"configuration/optional-settings.html#available-loggers","title":"Available Loggers","text":"<ul> <li><code>django.*</code> - Generic Django operations (HTTP requests/responses, etc.)</li> <li><code>nautobot.&lt;app&gt;.&lt;module&gt;</code> - Generic form for model- or module-specific log messages</li> <li><code>nautobot.auth.*</code> - Authentication events</li> <li><code>nautobot.jobs.*</code> - Job execution (<code>* = JobClassName</code>)</li> <li><code>nautobot.graphql.*</code> - GraphQL initialization and operation.</li> <li><code>nautobot.plugins.*</code> - Plugin loading and activity</li> <li><code>nautobot.views.*</code> - Views which handle business logic for the web UI</li> </ul>"},{"location":"configuration/optional-settings.html#media_root","title":"MEDIA_ROOT","text":"<p>Default: <code>os.path.join(NAUTOBOT_ROOT, \"media\")</code></p> <p>The file path to the location where media files (such as image attachments) are stored.</p> <p>Please see the official Django documentation on <code>MEDIA_ROOT</code> for more information.</p>"},{"location":"configuration/optional-settings.html#session_expire_at_browser_close","title":"SESSION_EXPIRE_AT_BROWSER_CLOSE","text":"<p>Default: <code>False</code></p> <p>Environment Variable: <code>NAUTOBOT_SESSION_EXPIRE_AT_BROWSER_CLOSE</code></p> <p>If this is set to True, Nautobot will use browser-length cookies - cookies that expire as soon as the user closes their browser.</p> <p>By default, <code>SESSION_EXPIRE_AT_BROWSER_CLOSE</code> is set to False, which means session cookies will be stored in users\u2019 browsers for as long as <code>SESSION_COOKIE_AGE</code>.</p> <p>Please see the official Django documentation on <code>SESSION_EXPIRE_AT_BROWSER_CLOSE</code> for more information.</p>"},{"location":"configuration/optional-settings.html#session_cookie_age","title":"SESSION_COOKIE_AGE","text":"<p>Default: <code>1209600</code> (2 weeks, in seconds)</p> <p>Environment Variable: <code>NAUTOBOT_SESSION_COOKIE_AGE</code></p> <p>The age of session cookies, in seconds.</p> <p>Please see the official Django documentation on <code>SESSION_COOKIE_AGE</code> for more information.</p>"},{"location":"configuration/optional-settings.html#session_engine","title":"SESSION_ENGINE","text":"<p>Default: <code>'django.contrib.sessions.backends.db'</code></p> <p>Controls where Nautobot stores session data.</p> <p>To use cache-based sessions, set this to <code>'django.contrib.sessions.backends.cache'</code>. To use file-based sessions, set this to <code>'django.contrib.sessions.backends.file'</code>.</p> <p>See the official Django documentation on Configuring the session engine for more details.</p>"},{"location":"configuration/optional-settings.html#session_file_path","title":"SESSION_FILE_PATH","text":"<p>Default: <code>None</code></p> <p>Environment Variable: <code>NAUTOBOT_SESSION_FILE_PATH</code></p> <p>HTTP session data is used to track authenticated users when they access Nautobot. By default, Nautobot stores session data in its database. However, this inhibits authentication to a standby instance of Nautobot without write access to the database. Alternatively, a local file path may be specified here and Nautobot will store session data as files instead of using the database. Note that the Nautobot system user must have read and write permissions to this path.</p> <p>When the default value (<code>None</code>) is used, Nautobot will use the standard temporary directory for the system.</p> <p>If you set this value, you must also enable file-based sessions as explained above using <code>SESSION_ENGINE</code>.</p>"},{"location":"configuration/optional-settings.html#static_root","title":"STATIC_ROOT","text":"<p>Default: <code>os.path.join(NAUTOBOT_ROOT, \"static\")</code></p> <p>The location where static files (such as CSS, JavaScript, fonts, or images) used to serve the web interface will be staged by the <code>nautobot-server collectstatic</code> command.</p> <p>Please see the official Django documentation on <code>STATIC_ROOT</code> for more information.</p>"},{"location":"configuration/optional-settings.html#time_zone","title":"TIME_ZONE","text":"<p>Default: <code>\"UTC\"</code></p> <p>Environment Variable: <code>NAUTOBOT_TIME_ZONE</code></p> <p>The time zone Nautobot will use when dealing with dates and times. It is recommended to use UTC time unless you have a specific need to use a local time zone. Please see the list of available time zones.</p> <p>Please see the official Django documentation on <code>TIME_ZONE</code> for more information.</p>"},{"location":"configuration/required-settings.html","title":"Required Configuration Settings","text":""},{"location":"configuration/required-settings.html#allowed_hosts","title":"ALLOWED_HOSTS","text":"<p>Environment Variable: <code>NAUTOBOT_ALLOWED_HOSTS</code> specified as a space-separated quoted string (e.g. <code>NAUTOBOT_ALLOWED_HOSTS=\"localhost 127.0.0.1 example.com\"</code>).</p> <p>This is a list of valid fully-qualified domain names (FQDNs) and/or IP addresses that can be used to reach the Nautobot service. Usually this is the same as the hostname for the Nautobot server, but can also be different; for example, when using a reverse proxy serving the Nautobot website under a different FQDN than the hostname of the Nautobot server. To help guard against HTTP Host header attacks, Nautobot will not permit access to the server via any other hostnames (or IPs).</p> <p>Keep in mind that by default Nautobot sets <code>USE_X_FORWARDED_HOST</code> to <code>True</code>, which means that if you're using a reverse proxy, the FQDN used to reach that reverse proxy needs to be in this list.</p> <p>Note</p> <p>This parameter must always be defined as a list or tuple, even if only a single value is provided.</p> <p>Example:</p> <pre><code>ALLOWED_HOSTS = ['nautobot.example.com', '192.0.2.123']\n</code></pre> <p>Tip</p> <p>If there is more than one hostname in this list, you may also need to set <code>CSRF_TRUSTED_ORIGINS</code> as well.</p> <p>If you are not yet sure what the domain name and/or IP address of the Nautobot installation will be, and are comfortable accepting the risks in doing so, you can set this to a wildcard (asterisk) to allow all host values:</p> <pre><code>ALLOWED_HOSTS = ['*']\n</code></pre> <p>Warning</p> <p>It is not recommended to leave this value as <code>['*']</code> for production deployments. Please see the official Django documentation on <code>ALLOWED_HOSTS</code> for help.</p>"},{"location":"configuration/required-settings.html#databases","title":"DATABASES","text":"<p>Nautobot requires access to a supported database service to store data. This service can run locally on the Nautobot server or on a remote system. The following parameters must be defined within the <code>DATABASES</code> dictionary:</p> <ul> <li><code>NAME</code> - Database name</li> <li><code>USER</code> - Database username</li> <li><code>PASSWORD</code> - Database password</li> <li><code>HOST</code> - Name or IP address of the database server (use <code>localhost</code> if running locally)</li> <li><code>PORT</code> - The port to use when connecting to the database. An empty string means the default port for your selected backend. (PostgreSQL: <code>5432</code>, MySQL: <code>3306</code>)</li> <li><code>CONN_MAX_AGE</code> - Lifetime of a persistent database connection, in seconds (300 is the default)</li> <li><code>ENGINE</code> - The database backend to use. This can be either <code>django.db.backends.postgresql</code> or <code>django.db.backends.mysql</code>.  If <code>METRICS_ENABLED</code> is <code>True</code> this can also be either <code>django_prometheus.db.backends.postgresql</code> or <code>django_prometheus.db.backends.mysql</code></li> </ul> <p>The following environment variables may also be set for each of the above values:</p> <ul> <li><code>NAUTOBOT_DB_NAME</code></li> <li><code>NAUTOBOT_DB_USER</code></li> <li><code>NAUTOBOT_DB_PASSWORD</code></li> <li><code>NAUTOBOT_DB_HOST</code></li> <li><code>NAUTOBOT_DB_PORT</code></li> <li><code>NAUTOBOT_DB_TIMEOUT</code></li> <li><code>NAUTOBOT_DB_ENGINE</code></li> </ul> <p>Added in version 1.1.0</p> <p>The <code>NAUTOBOT_DB_ENGINE</code> setting was added along with support for MySQL.</p> <p>Warning</p> <p>Nautobot supports either MySQL or PostgreSQL as a database backend. You must make sure that the <code>ENGINE</code> setting matches your selected database backend or you will be unable to connect to the database.</p> <p>Example:</p> <pre><code>DATABASES = {\n'default': {\n'NAME': 'nautobot',                         # Database name\n'USER': 'nautobot',                         # Database username\n'PASSWORD': 'awesome_password',             # Database password\n'HOST': 'localhost',                        # Database server\n'PORT': '',                                 # Database port (leave blank for default)\n'CONN_MAX_AGE': 300,                        # Max database connection age\n'ENGINE': 'django.db.backends.postgresql',  # Database driver (\"mysql\" or \"postgresql\")\n}\n}\n</code></pre> <p>Note</p> <p>Nautobot supports all database options supported by the underlying Django framework. For a complete list of available parameters, please see the official Django documentation on <code>DATABASES</code>.</p>"},{"location":"configuration/required-settings.html#mysql-unicode-settings","title":"MySQL Unicode Settings","text":"<p>Added in version 1.1.0</p> <p>Tip</p> <p>By default, MySQL is case-insensitive in its handling of text strings. This is different from PostgreSQL which is case-sensitive by default. We strongly recommend that you configure MySQL to be case-sensitive for use with Nautobot, either when you enable the MySQL server, or when you create the Nautobot database in MySQL. If you follow the provided installation instructions for CentOS or Ubuntu, the recommended steps there will include the appropriate database configuration.</p> <p>When using MySQL as a database backend, and you want to enable support for Unicode characters like the beloved poop emoji, you'll need to update your settings.</p> <p>If you try to use emojis without this setting, you will encounter a server error along the lines of <code>Incorrect string value</code>, because you are running afoul of the legacy implementation of Unicode (aka <code>utf8</code>) encoding in MySQL. The <code>utf8</code> encoding in MySQL is limited to 3-bytes per character. Newer Unicode emoji require 4-bytes.</p> <p>To properly support using such characters, you will need to create an entry in <code>DATABASES</code> -&gt; <code>default</code> -&gt; <code>OPTIONS</code> with the value <code>{\"charset\": \"utf8mb4\"}</code> in your <code>nautobot_config.py</code> and restart all Nautobot services. This will tell MySQL to always use <code>utf8mb4</code> character set for database client connections.</p> <p>For example:</p> <pre><code>DATABASES = {\n\"default\": {\n# Other settings...\n\"OPTIONS\": {\"charset\": \"utf8mb4\"},  # Add this line\n}\n}\n</code></pre> <p>Added in version 1.1.0</p> <p>If you have generated a new <code>nautobot_config.py</code> using <code>nautobot-server init</code>, this line is already there for you in your config. You'll just need to uncomment it!</p> <p>Changed in version 1.1.5</p> <p>If you have generated a new <code>nautobot_config.py</code> using <code>nautobot-server init</code>, this line is already present in your config and no action is required.</p>"},{"location":"configuration/required-settings.html#redis-settings","title":"Redis Settings","text":"<p>Redis is an in-memory data store similar to memcached. It is required to support Nautobot's caching, task queueing, and webhook features. The connection settings are explained here, allowing Nautobot to connect to different Redis instances/databases per feature.</p> <p>Warning</p> <p>It is highly recommended to keep the Redis databases for caching and tasks separate. Using the same database number on the same Redis instance for both may result in queued background tasks being lost during cache flushing events. For this reason, the default settings utilize database <code>1</code> for caching and database <code>0</code> for tasks.</p> <p>Tip</p> <p>The default Redis settings in your <code>nautobot_config.py</code> should be suitable for most deployments and should only require customization for more advanced configurations.</p>"},{"location":"configuration/required-settings.html#caching","title":"Caching","text":"<p>Nautobot supports database query caching using <code>django-cacheops</code>.</p> <p>Caching is configured by defining the <code>CACHEOPS_REDIS</code> setting which in its simplest form is just a URL.</p> <p>For more details on Nautobot's caching, including TLS and HA configuration, see the guide on Caching.</p> <p>Important</p> <p>Nautobot does not utilize the built-in Django cache framework to perform caching, as <code>django-cacheops</code> takes its place.</p>"},{"location":"configuration/required-settings.html#cacheops_redis","title":"CACHEOPS_REDIS","text":"<p>Default: <code>\"redis://localhost:6379/1\"</code></p> <p>Environment Variable: <code>NAUTOBOT_CACHEOPS_REDIS</code></p> <p>If you wish to use SSL, you may set the URL scheme to <code>rediss://</code>, for example:</p> <pre><code>CACHEOPS_REDIS = \"rediss://localhost:6379/1\"\n</code></pre> <p>This setting may also be a dictionary style to provide additional options such as custom TLS/SSL settings, for example:</p> <pre><code>import ssl\nCACHEOPS_REDIS = {\n\"host\": os.getenv(\"NAUTOBOT_REDIS_HOST\", \"localhost\"),\n\"port\": int(os.getenv(\"NAUTOBOT_REDIS_PORT\", 6379)),\n\"password\": os.getenv(\"NAUTOBOT_REDIS_PASSWORD\", \"\"),\n\"ssl\": True,\n\"ssl_cert_reqs\": ssl.CERT_REQUIRED,\n\"ssl_ca_certs\": \"/opt/nautobot/redis/ca.crt\",\n\"ssl_certfile\": \"/opt/nautobot/redis/tls.crt\",\n\"ssl_keyfile\": \"/opt/nautobot/redis/tls.key\",\n}\n</code></pre> <p>Additional settings may be available and are not covered here. Please see the official guide on Cacheops setup.</p>"},{"location":"configuration/required-settings.html#cacheops_sentinel","title":"CACHEOPS_SENTINEL","text":"<p>Default: <code>undefined</code></p> <p>If you are using Redis Sentinel for high-availability purposes, you must replace the <code>CACHEOPS_REDIS</code> setting with <code>CACHEOPS_SENTINEL</code>. For more details on configuring Nautobot to use Redis Sentinel see Using Redis Sentinel. For more details on how to configure Cacheops specifically to use Redis Sentinel see the official guide on Cacheops setup.</p> <p>Warning</p> <p><code>CACHEOPS_REDIS</code> and <code>CACHEOPS_SENTINEL</code> are mutually exclusive and will result in an error if both are set.</p>"},{"location":"configuration/required-settings.html#task-queuing","title":"Task Queuing","text":""},{"location":"configuration/required-settings.html#caches","title":"CACHES","text":"<p>The <code>django-redis</code> Django plugin is used to enable Redis as a concurrent write lock for preventing race conditions when allocating IP address objects, and also to define centralized Redis connection settings that will be used by RQ. The <code>CACHES</code> setting is required to to simplify the configuration for defining queues. It is not used for caching at this time.</p> <p>Important</p> <p>Nautobot does not utilize the built-in Django cache framework (which also relies on the <code>CACHES</code> setting) to perform caching because Cacheops is being used instead as detailed just above. Yes, we know this is confusing, which is why this is being called out explicitly!</p> <p>Default:</p> <pre><code># Uncomment the following line to configure TLS/SSL\n# import ssl\nCACHES = {\n\"default\": {\n\"BACKEND\": \"django_redis.cache.RedisCache\",\n\"LOCATION\": \"redis://localhost:6379/0\",\n\"TIMEOUT\": 300,\n\"OPTIONS\": {\n\"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n# Uncomment the following lines to configure TLS/SSL\n# \"CONNECTION_POOL_KWARGS\": {\n#     \"ssl_cert_reqs\": ssl.CERT_REQUIRED,\n#     \"ssl_ca_certs\": \"/opt/nautobot/redis/ca.crt\",\n#     \"ssl_certfile\": \"/opt/nautobot/redis/tls.crt\",\n#     \"ssl_keyfile\": \"/opt/nautobot/redis/tls.key\",\n# },\n},\n}\n}\n</code></pre> <p>The following environment variables may also be set for some of the above values:</p> <ul> <li><code>NAUTOBOT_CACHES_BACKEND</code></li> </ul>"},{"location":"configuration/required-settings.html#task-queuing-with-rq","title":"Task Queuing with RQ","text":"<p>Changed in version 1.1.0</p> <p>Using task queueing with RQ is deprecated in exchange for using Celery. Support for RQ will be removed entirely starting in Nautobot 2.0.</p> <p>Task queues are configured by defining them within the <code>RQ_QUEUES</code> setting.</p> <p>Nautobot's core functionality relies on several distinct queues and these represent the minimum required set of queues that must be defined. By default, these use identical connection settings as defined in <code>CACHES</code> (yes, that's confusing and we'll explain below).</p> <p>In most cases the default settings will be suitable for production use, but it is up to you to modify the task queues for your environment and know that other use cases such as utilizing specific plugins may require additional queues to be defined.</p>"},{"location":"configuration/required-settings.html#rq_queues","title":"RQ_QUEUES","text":"<p>The default value for this setting defines the queues and instructs RQ to use the <code>default</code> Redis connection defined in <code>CACHES</code>. This is intended to simplify default configuration for the common case.</p> <p>Please see the official <code>django-rq</code> documentation on support for django-redis connection settings for more information.</p> <p>Changed in version 1.1.0</p> <p>The <code>check_releases</code>, <code>custom_fields</code>, and <code>webhooks</code> queues are no longer in use by Nautobot but maintained here for backwards compatibility; they will be removed in Nautobot 2.0.</p> <p>Default:</p> <pre><code>RQ_QUEUES = {\n\"default\": {\n\"USE_REDIS_CACHE\": \"default\",\n},\n\"check_releases\": {\n\"USE_REDIS_CACHE\": \"default\",\n},\n\"custom_fields\": {\n\"USE_REDIS_CACHE\": \"default\",\n},\n\"webhooks\": {\n\"USE_REDIS_CACHE\": \"default\",\n},\n}\n</code></pre> <p>More verbose dictionary-style configuration is still supported, but is not required unless you absolutely need more advanced task queuing configuration. An example configuration follows:</p> <pre><code>RQ_QUEUES = {\n\"default\": {\n\"HOST\": \"localhost\",\n\"PORT\": 6379,\n\"DB\": 0,\n\"PASSWORD\": \"\",\n\"SSL\": False,\n\"DEFAULT_TIMEOUT\": 300\n},\n\"webhooks\": {\n\"HOST\": \"localhost\",\n\"PORT\": 6379,\n\"DB\": 0,\n\"PASSWORD\": \"\",\n\"SSL\": False,\n\"DEFAULT_TIMEOUT\": 300\n},\n\"check_releases\": {\n\"HOST\": \"localhost\",\n\"PORT\": 6379,\n\"DB\": 0,\n\"PASSWORD\": \"\",\n\"SSL\": False,\n\"DEFAULT_TIMEOUT\": 300\n},\n\"custom_fields\": {\n\"HOST\": \"localhost\",\n\"PORT\": 6379,\n\"DB\": 0,\n\"PASSWORD\": \"\",\n\"SSL\": False,\n\"DEFAULT_TIMEOUT\": 300\n}\n}\n</code></pre> <ul> <li><code>HOST</code> - Name or IP address of the Redis server (use <code>localhost</code> if running locally)</li> <li><code>PORT</code> - TCP port of the Redis service; leave blank for default port (6379)</li> <li><code>PASSWORD</code> - Redis password (if set)</li> <li><code>DB</code> - Numeric database ID</li> <li><code>SSL</code> - Use SSL connection to Redis</li> <li><code>DEFAULT_TIMEOUT</code> - The maximum execution time of a background task (such as running a Job), in seconds.</li> </ul> <p>The following environment variables may also be set for some of the above values:</p> <ul> <li><code>NAUTOBOT_REDIS_SCHEME</code></li> <li><code>NAUTOBOT_REDIS_HOST</code></li> <li><code>NAUTOBOT_REDIS_PORT</code></li> <li><code>NAUTOBOT_REDIS_PASSWORD</code></li> <li><code>NAUTOBOT_REDIS_USERNAME</code></li> <li><code>NAUTOBOT_REDIS_SSL</code></li> <li><code>NAUTOBOT_REDIS_TIMEOUT</code></li> </ul> <p>Note</p> <p>If you overload any of the default values in <code>CACHES</code> or <code>RQ_QUEUES</code> you may be unable to utilize the environment variables, depending on what you change.</p> <p>For more details on configuring RQ, please see the documentation for Django RQ installation.</p>"},{"location":"configuration/required-settings.html#task-queuing-with-celery","title":"Task Queuing with Celery","text":"<p>Added in version 1.1.0</p> <p>Out of the box you do not need to make any changes to utilize task queueing with Celery. All of the default settings are sufficient for most installations.</p> <p>In the event you do need to make customizations to how Celery interacts with the message broker such as for more advanced clustered deployments, the following settings are required.</p>"},{"location":"configuration/required-settings.html#celery_broker_url","title":"CELERY_BROKER_URL","text":"<p>This setting tells Celery and its workers how and where to communicate with the message broker. The default value for this points to <code>redis://localhost:6379/0</code>. Please see the optional settings documentation for <code>CELERY_BROKER_URL</code> for more information on customizing this setting.</p>"},{"location":"configuration/required-settings.html#celery_result_backend","title":"CELERY_RESULT_BACKEND","text":"<p>This setting tells Celery and its workers how and where to store message results. This defaults to the same value as <code>CELERY_BROKER_URL</code>. In some more advanced setups it may be required for these to be separate locations, however in our configuration guides these are always the same. Please see the optional settings documentation for <code>CELERY_RESULT_BACKEND</code> for more information on customizing this setting.</p>"},{"location":"configuration/required-settings.html#configuring-celery-with-tls","title":"Configuring Celery with TLS","text":"<p>Optionally, you can configure Celery to use custom SSL certificates to connect to redis by setting the following variables:</p> <pre><code>import ssl\nCELERY_REDIS_BACKEND_USE_SSL = {\n\"ssl_cert_reqs\": ssl.CERT_REQUIRED,\n\"ssl_ca_certs\": \"/opt/nautobot/redis/ca.crt\",\n\"ssl_certfile\": \"/opt/nautobot/redis/tls.crt\",\n\"ssl_keyfile\": \"/opt/nautobot/redis/tls.key\",\n}\nCELERY_BROKER_USE_SSL = CELERY_REDIS_BACKEND_USE_SSL\n</code></pre> <p>Please see the celery documentation for additional details.</p>"},{"location":"configuration/required-settings.html#configuring-celery-for-high-availability","title":"Configuring Celery for High Availability","text":"<p>High availability clustering of Redis for use with Celery can be performed using Redis Sentinel. Please see documentation section on configuring Celery for Redis Sentinel for more information.</p>"},{"location":"configuration/required-settings.html#secret_key","title":"SECRET_KEY","text":"<p>Environment Variable: <code>NAUTOBOT_SECRET_KEY</code></p> <p>This is a secret, random string used to assist in the creation new cryptographic hashes for passwords and HTTP cookies. The key defined here should not be shared outside of the configuration file. <code>SECRET_KEY</code> can be changed at any time, however be aware that doing so will invalidate all existing sessions.</p> <p>Bug</p> <p>Due to an unresolved bug in the <code>django-cryptography</code> library, if you have any Git repositories configured in your database, changing the <code>SECRET_KEY</code> will cause errors like:</p> <pre><code>&lt;class 'django.core.signing.BadSignature'&gt;\n\nSignature \"b'mG5+660ye92rJBEtyZxuorLD6A6tcRmeS7mrGCP9ayg=\\n'\" does not match\n</code></pre> <p>If you encounter this error, it can be resolved in one of two ways:</p> <ol> <li>Change the <code>SECRET_KEY</code> back to its previous value, and delete all Git repository records via the UI or API.</li> <li>Connect to the database and use SQL commands to delete all Git repository records without needing to revert the <code>SECRET_KEY</code>.</li> </ol> <p>Please note that this key is not used directly for hashing user passwords or (with the exception of the aforementioned <code>django-cryptography</code> bug) for the encrypted storage of secret data in Nautobot.</p> <p><code>SECRET_KEY</code> should be at least 50 characters in length and contain a random mix of letters, digits, and symbols.</p> <p>Note</p> <p>A unique <code>SECRET_KEY</code> is generated for you automatically when you use <code>nautobot-server init</code> to create a new <code>nautobot_config.py</code>.</p> <p>You may run <code>nautobot-server generate_secret_key</code> to generate a new key at any time.</p> <pre><code>nautobot-server generate_secret_key\n</code></pre> <p>Sample output:</p> <pre><code>+$_kw69oq&amp;fbkfk6&amp;q-+ksbgzw1&amp;061ghw%420u3(wen54w(m\n</code></pre> <p>Alternatively use the following command to generate a secret even before <code>nautobot-server</code> is runnable:</p> <pre><code>LC_ALL=C tr -cd '[:lower:][:digit:]!@#$%^&amp;*(\\-_=+)' &lt; /dev/urandom | fold -w50 | head -n1\n</code></pre> <p>Example output:</p> <pre><code>9.V$@Kxkc@@Kd@z&lt;a/=.J-Y;rYc79&lt;y@](9o9(L(*sS)Q+ud5P\n</code></pre> <p>Warning</p> <p>In the case of a highly available installation with multiple web servers, <code>SECRET_KEY</code> must be identical among all servers in order to maintain a persistent user session state.</p> <p>For more details see Nautobot Configuration.</p>"},{"location":"configuration/authentication/ldap.html","title":"LDAP Authentication","text":"<p>This guide explains how to implement LDAP authentication using an external server. User authentication will fall back to built-in Django users in the event of a failure.</p>"},{"location":"configuration/authentication/ldap.html#install-requirements","title":"Install Requirements","text":""},{"location":"configuration/authentication/ldap.html#install-system-packages","title":"Install System Packages","text":"<p>On Ubuntu:</p> <pre><code>sudo apt install -y libldap-dev libsasl2-dev\n</code></pre> <p>On CentOS:</p> <pre><code>sudo dnf install -y openldap-devel\n</code></pre>"},{"location":"configuration/authentication/ldap.html#install-django-auth-ldap","title":"Install django-auth-ldap","text":"<p>Warning</p> <p>This and all remaining steps in this document should all be performed as the <code>nautobot</code> user!</p> <p>Hint: Use <code>sudo -iu nautobot</code></p> <p>Activate the Python virtual environment and install the <code>django-auth-ldap</code> package using pip:</p> <pre><code>source /opt/nautobot/bin/activate\npip3 install \"nautobot[ldap]\"\n</code></pre> <p>Once installed, add the package to <code>local_requirements.txt</code> to ensure it is re-installed during future rebuilds of the virtual environment:</p> <pre><code>echo \"nautobot[ldap]\" &gt;&gt; /opt/nautobot/local_requirements.txt\n</code></pre>"},{"location":"configuration/authentication/ldap.html#configuration","title":"Configuration","text":"<p>Enable the LDAP authentication backend by adding the following to your <code>nautobot_config.py</code>:</p> <p>Note</p> <p>It is critical that you include the <code>ObjectPermissionsBackend</code> provided by Nautobot after the <code>LDAPBackend</code> so that object-level permissions features can work properly.</p> <pre><code>AUTHENTICATION_BACKENDS = [\n'django_auth_ldap.backend.LDAPBackend',\n'nautobot.core.authentication.ObjectPermissionBackend',\n]\n</code></pre>"},{"location":"configuration/authentication/ldap.html#general-server-configuration","title":"General Server Configuration","text":"<p>Define all of the parameters required below in your <code>nautobot_config.py</code>. Complete documentation of all <code>django-auth-ldap</code> configuration options is included in the project's official documentation.</p> <p>Info</p> <p>When using Windows Server 2012 you may wish to use the Global Catalog by specifying a port on <code>AUTH_LDAP_SERVER_URI</code>. Use <code>3269</code> for secure (<code>ldaps://</code>), or <code>3268</code> for non-secure.</p> <pre><code>import ldap\n# Server URI\nAUTH_LDAP_SERVER_URI = \"ldap://ad.example.com\"\n# The following may be needed if you are binding to Active Directory.\nAUTH_LDAP_CONNECTION_OPTIONS = {\nldap.OPT_REFERRALS: 0\n}\n# Set the DN and password for the Nautobot service account.\nAUTH_LDAP_BIND_DN = \"CN=NAUTOBOTSA, OU=Service Accounts,DC=example,DC=com\"\nAUTH_LDAP_BIND_PASSWORD = \"demo\"\n</code></pre>"},{"location":"configuration/authentication/ldap.html#encryption-options","title":"Encryption Options","text":"<p>It is recommended when using LDAP to use STARTTLS, however SSL can also be used.</p>"},{"location":"configuration/authentication/ldap.html#tls-options","title":"TLS Options","text":"<p>STARTTLS can be configured by setting <code>AUTH_LDAP_START_TLS = True</code> and using the <code>ldap://</code> URI scheme.</p> <pre><code>AUTH_LDAP_SERVER_URI = \"ldap://ad.example.com\"\nAUTH_LDAP_START_TLS = True\n</code></pre>"},{"location":"configuration/authentication/ldap.html#ssl-options","title":"SSL Options","text":"<p>SSL can also be used by using the <code>ldaps://</code> URI scheme.</p> <pre><code>AUTH_LDAP_SERVER_URI = \"ldaps://ad.example.com\"\n</code></pre>"},{"location":"configuration/authentication/ldap.html#certificate-validation","title":"Certificate Validation","text":"<p>When using either TLS or SSL it is necessary to validate the certificate from your LDAP server. Copy your CA cert to <code>/opt/nautobot/ca.pem</code>.</p> <pre><code># Set the path to the trusted CA certificates and create a new internal SSL context.\nAUTH_LDAP_CONNECTION_OPTIONS = {\nldap.OPT_X_TLS_CACERTFILE: \"/opt/nautobot/ca.pem\",\nldap.OPT_X_TLS_NEWCTX: 0\n}\n</code></pre> <p>If you prefer you can ignore the certificate, however, this is only recommended in development and not production.</p> <pre><code># WARNING: You should not do this in production!\nAUTH_LDAP_CONNECTION_OPTIONS = {\nldap.OPT_X_TLS_REQUIRE_CERT: ldap.OPT_X_TLS_NEVER,\n}\n</code></pre> <p>Additional ldap connection options can be found in the python-ldap documentation.</p>"},{"location":"configuration/authentication/ldap.html#user-authentication","title":"User Authentication","text":"<p>Info</p> <p>When using Windows Server 2012, <code>AUTH_LDAP_USER_DN_TEMPLATE</code> should be set to None.</p> <pre><code>from django_auth_ldap.config import LDAPSearch\n# This search matches users with the sAMAccountName equal to the provided username. This is required if the user's\n# username is not in their DN (Active Directory).\nAUTH_LDAP_USER_SEARCH = LDAPSearch(\"ou=Users,dc=example,dc=com\",\nldap.SCOPE_SUBTREE,\n\"(sAMAccountName=%(user)s)\")\n# If a user's DN is producible from their username, we don't need to search.\nAUTH_LDAP_USER_DN_TEMPLATE = \"uid=%(user)s,ou=users,dc=example,dc=com\"\n# You can map user attributes to Django attributes as so.\nAUTH_LDAP_USER_ATTR_MAP = {\n\"first_name\": \"givenName\",\n\"last_name\": \"sn\",\n\"email\": \"mail\"\n}\n</code></pre>"},{"location":"configuration/authentication/ldap.html#searching-in-multiple-ldap-groups","title":"Searching in Multiple LDAP Groups","text":"<p>Define the user-groups in your environment, such as a <code>*.env</code> file (delimiter <code>';'</code>):</p> <pre><code># Groups to search for user objects. \"(sAMAccountName=%(user)s),...\"\nNAUTOBOT_AUTH_LDAP_USER_SEARCH_DN=OU=IT-Admins,OU=special-users,OU=Acme-User,DC=Acme,DC=local;OU=Infrastruktur,OU=IT,OU=my-location,OU=User,OU=Acme-User,DC=Acme,DC=local\n</code></pre> <p>Import LDAPSearchUnion in <code>nautobot_config.py</code>, and replace the AUTH_LDAP_USER_SEARCH command from above:</p> <pre><code>from django_auth_ldap.config import ..., LDAPSearchUnion\n# ...\nAUTH_LDAP_USER_SEARCH_DN = os.getenv(\"NAUTOBOT_AUTH_LDAP_USER_SEARCH_DN\", \"\")\nif AUTH_LDAP_USER_SEARCH_DN != \"\":\nuser_search_dn_list = str(AUTH_LDAP_USER_SEARCH_DN).split(\";\")\nldapsearch_objects = []\nfor sdn in user_search_dn_list:\nldapsearch_objects.append(LDAPSearch(sdn.strip(), ldap.SCOPE_SUBTREE, \"(sAMAccountName=%(user)s)\"))\nAUTH_LDAP_USER_SEARCH = LDAPSearchUnion(*ldapsearch_objects)\n</code></pre>"},{"location":"configuration/authentication/ldap.html#user-groups-for-permissions","title":"User Groups for Permissions","text":"<p>Info</p> <p>When using Microsoft Active Directory, support for nested groups can be activated by using <code>NestedGroupOfNamesType()</code> instead of <code>GroupOfNamesType()</code> for <code>AUTH_LDAP_GROUP_TYPE</code>. You will also need to modify the import line to use <code>NestedGroupOfNamesType</code> instead of <code>GroupOfNamesType</code> .</p> <pre><code>from django_auth_ldap.config import LDAPSearch, GroupOfNamesType\n# This search ought to return all groups to which the user belongs. django_auth_ldap uses this to determine group\n# hierarchy.\nAUTH_LDAP_GROUP_SEARCH = LDAPSearch(\"dc=example,dc=com\", ldap.SCOPE_SUBTREE,\n\"(objectClass=group)\")\nAUTH_LDAP_GROUP_TYPE = GroupOfNamesType()\n# Define a group required to login.\nAUTH_LDAP_REQUIRE_GROUP = \"CN=NAUTOBOT_USERS,DC=example,DC=com\"\n# Define special user types using groups. Exercise great caution when assigning superuser status.\nAUTH_LDAP_USER_FLAGS_BY_GROUP = {\n\"is_active\": \"cn=active,ou=groups,dc=example,dc=com\",\n\"is_staff\": \"cn=staff,ou=groups,dc=example,dc=com\",\n\"is_superuser\": \"cn=superuser,ou=groups,dc=example,dc=com\"\n}\n# For more granular permissions, we can map LDAP groups to Django groups.\nAUTH_LDAP_FIND_GROUP_PERMS = True\n# Cache groups for one hour to reduce LDAP traffic\nAUTH_LDAP_CACHE_TIMEOUT = 3600\n</code></pre> <ul> <li><code>is_active</code> - All users must be mapped to at least this group to enable authentication. Without this, users cannot log in.</li> <li><code>is_staff</code> - Users mapped to this group are enabled for access to the administration tools; this is the equivalent of checking the \"staff status\" box on a manually created user. This doesn't grant any specific permissions.</li> <li><code>is_superuser</code> - Users mapped to this group will be granted superuser status. Superusers are implicitly granted all permissions.</li> </ul> <p>Warning</p> <p>Authentication will fail if the groups (the distinguished names) do not exist in the LDAP directory.</p>"},{"location":"configuration/authentication/ldap.html#multiple-ldap-server-support","title":"Multiple LDAP Server Support","text":"<p>Multiple servers can be supported in <code>django-auth-ldap</code> by the use of additional LDAP backends, as described in the library's documentation.</p> <p>In order to define and load additional backends into Nautobot a plugin can be used. This plugin will allow the backend(s) to be loaded into the Django settings for use within the <code>nautobot_config.py</code> file. At the simplest form the plugin should have a custom backend(s) defined:</p> <pre><code># my_customer_backends.py\nfrom django_auth_ldap.backend import LDAPBackend\nclass LDAPBackendSecondary(LDAPBackend):\nsettings_prefix = \"AUTH_LDAP_SECONDARY_\"\n</code></pre> <p>If the plugin is named <code>nautobot_ldap_plugin</code>, the following snippet could be used to load the additional LDAP backend:</p> <pre><code># nautobot_config.py\nAUTHENTICATION_BACKENDS = [\n'django_auth_ldap.backend.LDAPBackend',\n'nautobot_ldap_plugin.my_customer_backends.LDAPBackendSecondary',  # path to the custom LDAP Backend\n'nautobot.core.authentication.ObjectPermissionBackend',\n]\n</code></pre> <p>Once the custom backend is loaded into the settings all the configuration items mentioned previously need to be completed for each server. As a simplified example defining the URIs would be accomplished by the following two lines in the <code>nautobot_config.py</code> file. A similar approach would be done to define the rest of the settings.</p> <pre><code># nautobot_config.py\n# Server URI which uses django_auth_ldap.backend.LDAPBackend\nAUTH_LDAP_SERVER_URI = \"ldap://ad.example.com\"\n# Server URI which uses nautobot_ldap_plugin.my_customer_backends.LDAPBackendSecondary\nAUTH_LDAP_SECONDARY_SERVER_URI = \"ldap://secondary-ad.example.com\"\n</code></pre> <p>Info</p> <p>In this example the default LDAPBackend was still used as the first LDAP server, which utilized the <code>AUTH_LDAP_*</code> environment variables. It is also possible to remove the default backend and create multiple custom backends instead to normalize the environment variable naming scheme.</p>"},{"location":"configuration/authentication/ldap.html#troubleshooting-ldap","title":"Troubleshooting LDAP","text":"<p><code>systemctl restart nautobot</code> restarts the Nautobot service, and initiates any changes made to <code>nautobot_config.py</code>. If there are syntax errors present, the Nautobot process will not spawn an instance, and errors should be logged to <code>/var/log/messages</code>.</p> <p>For troubleshooting LDAP user/group queries, add or merge the following logging configuration to <code>nautobot_config.py</code>:</p> <pre><code>LOGGING = {\n'version': 1,\n'disable_existing_loggers': False,\n'handlers': {\n'nautobot_auth_log': {\n'level': 'DEBUG',\n'class': 'logging.handlers.RotatingFileHandler',\n'filename': '/opt/nautobot/logs/django-ldap-debug.log',\n'maxBytes': 1024 * 500,\n'backupCount': 5,\n},\n},\n'loggers': {\n'django_auth_ldap': {\n'handlers': ['nautobot_auth_log'],\n'level': 'DEBUG',\n},\n},\n}\n</code></pre> <p>Ensure the file and path specified in logfile exist and are writable and executable by the application service account. Restart the nautobot service and attempt to log into the site to trigger log entries to this file.</p> <p>Be sure to configure <code>EXTERNAL_AUTH_DEFAULT_GROUPS</code> and <code>EXTERNAL_AUTH_DEFAULT_PERMISSIONS</code> next.</p>"},{"location":"configuration/authentication/remote.html","title":"Remote User Authentication","text":"<p>Nautobot can be configured to support remote user authentication by inferring users from an HTTP header set by an authenticating reverse proxy (e.g. NGINX).</p> <p>This document describes how to make use of an external authentication source (where the Web server sets the <code>REMOTE_USER</code> environment variable). This type of authentication solution is typically seen on intranet sites, with single sign-on solutions.</p> <p>User authentication will still fall back to built-in Django users in the event of a failure in remote authentication.</p>"},{"location":"configuration/authentication/remote.html#installation","title":"Installation","text":"<p>Enable the remote user authentication backend by adding the following to your <code>nautobot_config.py</code>:</p> <p>Note</p> <p>It is critical that you include the <code>ObjectPermissionsBackend</code> provided by Nautobot after the <code>RemoteUserBackend</code> so that object-level permissions features can work properly.</p> <pre><code>AUTHENTICATION_BACKENDS = [\n'nautobot.core.authentication.RemoteUserBackend',\n'nautobot.core.authentication.ObjectPermissionBackend',\n]\n</code></pre>"},{"location":"configuration/authentication/remote.html#configuration","title":"Configuration","text":"<p>The following configuration variables describe the default values and as long as <code>RemoteUserBackend</code> has been installed as described above, no changes are required.</p> <p>If you do require customizing any of these settings, they must be set in your <code>nautobot_config.py</code>.</p>"},{"location":"configuration/authentication/remote.html#remote_auth_auto_create_user","title":"REMOTE_AUTH_AUTO_CREATE_USER","text":"<p>Default: <code>False</code></p> <p>If set to <code>True</code>, local accounts will be automatically created for users authenticated via a remote service.</p>"},{"location":"configuration/authentication/remote.html#remote_auth_header","title":"REMOTE_AUTH_HEADER","text":"<p>Default: <code>'HTTP_REMOTE_USER'</code></p> <p>When remote user authentication is in use, this is the name of the HTTP header which informs Nautobot of the currently authenticated user. For example, to use the request header <code>X-Remote-User</code> it needs to be set to <code>HTTP_X_REMOTE_USER</code>.</p> <p>Be sure to configure <code>EXTERNAL_AUTH_DEFAULT_GROUPS</code> and <code>EXTERNAL_AUTH_DEFAULT_PERMISSIONS</code> next.</p>"},{"location":"configuration/authentication/sso.html","title":"Single Sign On","text":"<p>Nautobot supports several different authentication mechanisms including OAuth (1 and 2), OpenID, SAML, and others. To accomplish this, Nautobot comes preinstalled with the social-auth-app-django Python module.</p> <p>This module supports several authentication backends by default including:</p> <ul> <li>Google</li> <li>Microsoft Azure Active Directory</li> <li>Okta</li> <li>And many more...</li> </ul>"},{"location":"configuration/authentication/sso.html#installation","title":"Installation","text":"<p>Warning</p> <p>Unless otherwise noted, all remaining steps in this document should all be performed as the <code>nautobot</code> user!</p> <p>Hint: Use <code>sudo -iu nautobot</code></p>"},{"location":"configuration/authentication/sso.html#install-dependencies","title":"Install Dependencies","text":"<p>If you are using OpenID Connect or SAML you will also need to install the extra dependencies for those.</p>"},{"location":"configuration/authentication/sso.html#openid-connect-dependencies","title":"OpenID Connect Dependencies","text":"<p>For OpenID connect, you'll need to install the <code>sso</code> Python extra.</p> <pre><code>pip3 install \"nautobot[sso]\"\n</code></pre>"},{"location":"configuration/authentication/sso.html#saml-dependencies","title":"SAML Dependencies","text":"<p>For SAML, additional system-level dependencies are required so that the specialized XML libraries can be built and compiled for your system.</p> <p>Note</p> <p>These instructions have only been certified on Ubuntu 20.04 at this time.</p> <p>Install the system dependencies as <code>root</code>:</p> <pre><code>sudo apt install -y libxmlsec1-dev libxmlsec1-openssl pkg-config\n</code></pre> <p>Install the <code>sso</code> Python extra as the <code>nautobot</code> user.</p> <pre><code>pip3 install \"nautobot[sso]\"\n</code></pre> <p>Please see the SAML configuration guide below for an example of how to configure Nautobot to authenticate using SAML with Google as the identity provider.</p>"},{"location":"configuration/authentication/sso.html#configuration","title":"Configuration","text":""},{"location":"configuration/authentication/sso.html#authentication-backends","title":"Authentication Backends","text":"<p>To use external authentication, you'll need to define <code>AUTHENTICATION_BACKENDS</code> in your <code>nautobot_config.py</code>.</p> <ul> <li>Insert the desired external authentication backend as the first item in the list. This step is key to properly redirecting when users click the login button.</li> <li>You must also ensure that <code>nautobot.core.authentication.ObjectPermissionBackend</code> is always the second item in the list. It is an error to exclude this backend.</li> </ul> <p>Note</p> <p>It is critical that you include the <code>ObjectPermissionsBackend</code> provided by Nautobot after the desired backend so that object-level permissions features can work properly.</p> <p>For example, if you wanted to use Google OAuth2 as your authentication backend:</p> <pre><code>AUTHENTICATION_BACKENDS = [\n\"social_core.backends.google.GoogleOAuth2\",\n\"nautobot.core.authentication.ObjectPermissionBackend\",\n]\n</code></pre> <p>Note</p> <p>Many backends have settings specific to that backend that are not covered in this guide. Please consult the documentation for your desired backend linked in the next section.</p> <p>Warning</p> <p>You should only enable one social authentication authentication backend. It is technically possible to use multiple backends but we cannot officially support more than one at this time.</p>"},{"location":"configuration/authentication/sso.html#custom-authentication-backends","title":"Custom Authentication Backends","text":"<p>The default external authentication supported is social-auth-app-django as stated above. If you have developed your own external authentication backend, you will need to configure <code>SOCIAL_AUTH_BACKEND_PREFIX</code> to use your backend instead and correctly enable the SSO redirect when the login button is clicked. For example, if your custom authentication backend is available at <code>custom_auth.backends.custom.Oauth2</code>, you would set things as follows:</p> <pre><code>SOCIAL_AUTH_BACKEND_PREFIX = \"custom_auth.backends\"\nAUTHENTICATION_BACKENDS = [\n\"custom_auth.backends.custom.Oauth2\",\n\"nautobot.core.authentication.ObjectPermissionBackend\",\n]\n</code></pre> <p>In the example above, <code>SOCIAL_AUTH_BACKEND_PREFIX</code> was set to <code>custom_auth.backends</code> within the <code>nautobot_config.py</code> for our custom authentication plugin we created (custom_auth.backends.custom.Oauth2). This will enable the SSO redirect for users when they click the login button.</p>"},{"location":"configuration/authentication/sso.html#select-your-authentication-backend","title":"Select your Authentication Backend","text":"<p>You will need to select the correct social authentication module name for your desired method of external authentication. Please see the official Python Social Auth documentation on supported backends for more the full list of backends and any specific configuration or required settings.</p> <p>Some common backend module names include:</p> Backend Social Auth Backend Module Name Microsoft Azure Active Directory <code>social_core.backends.azuread.AzureADOAuth2</code> <code>social_core.backends.azuread_b2c.AzureADB2COAuth2</code> <code>social_core.backends.azuread_tenant.AzureADTenantOAuth2</code> <code>social_core.backends.azuread_tenant.AzureADV2TenantOAuth2</code> Google <code>social_core.backends.gae.GoogleAppEngineAuth</code> <code>social_core.backends.google.GoogleOAuth2</code> <code>social_core.backends.google.GoogleOAuth</code> <code>social_core.backends.google_openidconnect.GoogleOpenIdConnect</code> Okta <code>social_core.backends.okta.OktaOAuth2</code> <code>social_core.backends.okta_openidconnect.OktaOpenIdConnect</code> SAML <code>social_core.backends.saml.SAMLAuth</code>"},{"location":"configuration/authentication/sso.html#user-permissions","title":"User Permissions","text":"<p>By default, once authenticated, if the user has never logged in before a new user account will be created for the user. This new user will not be a member of any group or have any permissions assigned. If you would like to create users with a default set of permissions there are some additional variables to configure the permissions.</p> <p>Please see the documentation on <code>EXTERNAL_AUTH_DEFAULT_GROUPS</code> and <code>EXTERNAL_AUTH_DEFAULT_PERMISSIONS</code> for more information.</p>"},{"location":"configuration/authentication/sso.html#configuration-guides","title":"Configuration Guides","text":"<p>The following guides are provided for some of the most common authentication methods.</p>"},{"location":"configuration/authentication/sso.html#okta","title":"Okta","text":"<ol> <li>In the Okta admin portal, create a new Web application</li> <li> <p>Configure the application as follows:</p> <ul> <li>Base URIs: should be the URI of your Nautobot application such as <code>https://nautobot.example.com</code></li> <li>Login redirect URIs: should be the Base URI plus <code>/complete/okta-openidconnect/</code> such as <code>https://nautobot.example.com/complete/okta-openidconnect/</code></li> <li>Logout redirect URIs: should be the Base URI plus <code>/disconnect/okta-openidconnect/</code> such as <code>https://nautobot.example.com/disconnect/okta-openidconnect/</code></li> </ul> </li> <li> <p>Once the application is configured in Okta, SSO can either be configured with OAuth2 or OpenID Connect (OIDC). When using an organization's authentication server OAuth2 is preferred; with custom Okta authentication backends, use OIDC.</p> </li> </ol>"},{"location":"configuration/authentication/sso.html#okta-oauth2","title":"Okta - OAuth2","text":"<p>Edit your <code>nautobot_config.py</code> as follows:</p> <pre><code>AUTHENTICATION_BACKENDS = [\n\"social_core.backends.okta.OktaOAuth2\",\n\"nautobot.core.authentication.ObjectPermissionBackend\",\n]\nSOCIAL_AUTH_OKTA_OAUTH2_KEY = '&lt;Client ID from Okta&gt;'\nSOCIAL_AUTH_OKTA_OAUTH2_SECRET = '&lt;Client Secret From Okta&gt;'\nSOCIAL_AUTH_OKTA_OAUTH2_API_URL = 'https://&lt;Okta URL&gt;'\n</code></pre>"},{"location":"configuration/authentication/sso.html#okta-openid","title":"Okta - OpenID","text":"<p>Edit your <code>nautobot_config.py</code> as follows:</p> <pre><code>AUTHENTICATION_BACKENDS = [\n\"social_core.backends.okta_openidconnect.OktaOpenIdConnect\",\n\"nautobot.core.authentication.ObjectPermissionBackend\",\n]\nSOCIAL_AUTH_OKTA_OPENIDCONNECT_KEY = '&lt;Client ID from Okta&gt;'\nSOCIAL_AUTH_OKTA_OPENIDCONNECT_SECRET = '&lt;Client Secret From Okta&gt;'\nSOCIAL_AUTH_OKTA_OPENIDCONNECT_API_URL = 'https://&lt;Okta URL&gt;/oauth2/&lt;Authentication Server&gt;'\n</code></pre> <p>The <code>/default</code> authentication server can be used for testing, however, it should not be used in production.</p>"},{"location":"configuration/authentication/sso.html#okta-saml","title":"Okta - SAML","text":"<p>See SAML Prerequisites for common setup.</p> <p>Setup SAML in Okta</p> <ol> <li>Visit your Okta Admin Dasboard.</li> <li>Create a new application (Create App Integration) and select SAML 2.0.</li> <li>Give you application a name and logo if you choose.</li> <li>Configure the SAML Settings as follows.<ul> <li>Single Sign-on URL: <code>https://nautobot.example.com/complete/saml/</code></li> <li>Audience URI: <code>https://nautobot.example.com</code></li> <li>Default RelayState: <code>okta</code></li> <li>Name ID Format: <code>Unspecified</code></li> <li>Application Username: <code>Okta Username</code></li> </ul> </li> <li>Under Attribute Statements, configure the following:<ul> <li><code>firstName</code> - Basic - <code>user.firstName</code></li> <li><code>lastName</code> - Basic - <code>user.lastName</code></li> <li><code>emailAddress</code> - Basic <code>user.email</code></li> </ul> </li> <li>(Optional) Configure group Attribute statements.<ul> <li><code>groups</code> - Basic - Startswith - <code>nautobot</code> (example, needs to be adjusted to your environment)</li> </ul> </li> <li>Select <code>internal application</code> and then <code>finish</code>.</li> <li>Don't forget to assign users/groups to the application so they have access.</li> <li>Lastly, look at the <code>Sign On</code> tab, then Show Details under Metadata details for detail you will need to configure Nautobot.</li> </ol> <p>Edit your <code>nautobot_config.py</code> as follows:</p> <pre><code># Django authentication backends\nAUTHENTICATION_BACKENDS = [\n\"social_core.backends.saml.SAMLAuth\",\n\"nautobot.core.authentication.ObjectPermissionBackend\",\n]\n# The https FQDN to your Nautobot instance\nSOCIAL_AUTH_SAML_SP_ENTITY_ID = \"https://nautobot.example.com/\"\n# X.509 cert/key pair used for host verification are not used for this example because\n# Nautobot is directly authenticating itself to Google. Set them to empty strings.\nSOCIAL_AUTH_SAML_SP_PUBLIC_CERT = \"\"\nSOCIAL_AUTH_SAML_SP_PRIVATE_KEY = \"\"\n# A dictionary that contains information about your app. You must specify values for\n# English at a minimum.\nSOCIAL_AUTH_SAML_ORG_INFO = {\n\"en-US\": {\n\"name\": \"Nautobot\",\n\"displayname\": \"Nautobot\",\n\"url\": \"https://nautobot.example.com\",\n}\n}\n# Technical point of contact\nSOCIAL_AUTH_SAML_TECHNICAL_CONTACT = {\n\"givenName\": \"Bob Jones\",\n\"emailAddress\": \"bob@example.com\"\n}\n# Support point of contact\nSOCIAL_AUTH_SAML_SUPPORT_CONTACT = {\n\"givenName\": \"Alice Jenkins\",\n\"emailAddress\": \"alice@example.com\"\n}\n# The Issuer URL for Okta from step 9\nOKTA_ENTITY_ID = \"&lt;Issuer from Okta&gt;\"\n# The Sign On URL for Okta from step 9\nOKTA_SSO_URL = \"&lt;Sign On URL from Okta&gt;\"\n# The Signing Certificate for  Okta from step 9\nOKTA_CERTIFICATE = \"&lt;Signing Certificate from Okta&gt;\"\n# The most important setting. List the Entity ID (Issuer), SSO URL (Sign On URL), and x.509 public key certificate\n# for each provider that you app wants to support. \nSOCIAL_AUTH_SAML_ENABLED_IDPS = {\n\"okta\": {\n'force_authn': \"true\",\n'allow_unsolicited': \"true\",\n'requested_authn_context': \"false\",\n\"entity_id\": OKTA_ENTITY_ID,\n\"url\": OKTA_SSO_URL,\n\"x509cert\": OKTA_CERTIFICATE,\n# These are used to map to User object fields in Nautobot using Google\n# attribute fields we configured in step 8 of \"Setup SAML in Google\".\n\"attr_user_permanent_id\": \"emailAddress\",\n\"attr_first_name\": \"firstName\",\n\"attr_last_name\": \"lastName\",\n\"attr_username\": \"emailAddress\",\n\"attr_email\": \"emailAddress\",\n}\n}\n# Required for correctly redirecting when behind SSL proxy (NGINX). You may or may not need\n# these depending on your production deployment. They are provided here just in case.\nSECURE_SSL_REDIRECT = True\nSECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\n</code></pre>"},{"location":"configuration/authentication/sso.html#login-with-okta-saml","title":"Login with Okta SAML","text":"<p>Note the provider entry we configured in SOCIAL_AUTH_SAML_ENABLED_IDPS as okta. This will be used to login and will be referenced in the query parameter using idp=okta. For example /login/saml/?idp=okta.</p> <p>This should be the URL that is mapped to the \"Log in\" button on the top right of the index page when you navigate to Nautobot in your browser. Clicking this link should automatically redirect you to Google, ask you to \"Choose an account\", log you in and redirect you back to the Nautobot home page. Your email address will also be your username.</p> <p>Be sure to configure EXTERNAL_AUTH_DEFAULT_GROUPS and EXTERNAL_AUTH_DEFAULT_PERMISSIONS next.</p>"},{"location":"configuration/authentication/sso.html#okta-additional-scopes","title":"Okta - Additional Scopes","text":"<p>It is possible to get additional OAuth scopes from okta by adding them to the <code>SOCIAL_AUTH_{BACKEND}_SCOPE</code> list. For example to get the <code>groups</code> scope from Okta using OAuth2 add the following to your <code>nautobot_config.py</code>:</p> <pre><code>SOCIAL_AUTH_OKTA_OAUTH2_SCOPE = ['groups']\n</code></pre> <p>for OpenID:</p> <pre><code>SOCIAL_AUTH_OKTA_OPENIDCONNECT_SCOPE = ['groups']\n</code></pre> <p>In order to use this returned scope a custom function needs to be written and added to the <code>SOCIAL_AUTH_PIPELINE</code> as described in the <code>python-social-auth</code> authentication pipeline documentation.</p> <p>An example to sync groups with Okta is provided in the <code>examples/okta</code> folder in the root of the Nautobot repository.</p>"},{"location":"configuration/authentication/sso.html#google-oauth2","title":"Google - OAuth2","text":"<p>The following instructions guide you through the process of configuring Google for OAuth2 authentication.</p> <p>Important</p> <p>Please note there is further guidance provided by python-social-auth as well as Google. For more</p> <p>information please utilize these additional resources.</p> <ol> <li>In the Google API Console create a new project or select an existing one.</li> <li>Select OAuth consent screen from the menu on the left side of the page</li> <li>For User Type select Internal and click Create</li> <li> <p>Configure as follows:</p> <ul> <li>App name: Acme Corp Nautobot</li> <li>User support email: select an email</li> <li>App logo: The Nautobot logo can be found at <code>nautobot/project-static/img/nautobot_logo.png</code></li> </ul> </li> <li> <p>Click Save and Continue</p> </li> <li>No additional scopes are needed click Save and Continue</li> <li>Select Credentials from the menu on the left side of the page</li> <li>Click + Create Credentials at the top of the page and select OAuth client ID</li> <li> <p>Configure as follows:</p> <ul> <li>Application type: Web application</li> <li>Name: Nautobot</li> <li>Authorized redirect URIs: should be the Nautobot URL plus <code>/complete/google-oauth2/</code> for example <code>https://nautobot.example.com/complete/google-oauth2/</code></li> </ul> </li> <li> <p>Click Create</p> </li> <li>Edit your <code>nautobot_config.py</code> as follows:</li> </ol> <pre><code>AUTHENTICATION_BACKENDS = [\n\"social_core.backends.google.GoogleOAuth2\",\n\"nautobot.core.authentication.ObjectPermissionBackend\",\n]\nSOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '&lt;Client ID from Google&gt;'\nSOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '&lt;Secret ID from Google&gt;'\nSOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ['openid']\n</code></pre>"},{"location":"configuration/authentication/sso.html#saml","title":"SAML","text":"<p>This guide will walk you through configuring Nautobot to authenticate using SAML with Google as the identity provider.</p> <p>Important</p> <p>Please note that there is further guidance provided by python-social-auth and Google. For more information please utilize these additional resources.</p>"},{"location":"configuration/authentication/sso.html#prerequisites","title":"Prerequisites","text":"<p>Warning</p> <p>SAML will not work without end-to-end encryption. These requirements are not flexible.</p> <p>Before you begin you will need the following:</p> <ul> <li>The fully-qualified domain name (FQDN) of your Nautobot host must be registered in DNS. For this example we will be using <code>nautobot.example.com</code>.</li> <li>A valid publicly trusted SSL certificate matching the FQDN of your host. You cannot use a self-signed certificate. Google validates this certificate to assert authenticity of SAML authentication requests.</li> <li>The name and email address for a technical point of contact. For this example we will use \"Bob Jones, bob@example.com\".</li> <li>The name and email address for a support point of contact. For this example we will use \"Alice Jenkins, alice@example.com.\"</li> </ul>"},{"location":"configuration/authentication/sso.html#setup-saml-in-google","title":"Setup SAML in Google","text":"<ol> <li>Visit the Web and mobile apps console in the Google Admin dashboard.</li> <li>Follow Google's official document to Set up your own custom SAML application, pausing at step 6.</li> <li>From step 6 of the instructions, capture the SSO URL, Entity ID, and Certificate. You will use these in later steps to configure Nautobot. Each of these will be referred to as <code>GOOGLE_SSO_URL</code>, <code>GOOGLE_ENTITY_ID</code>, and <code>GOOGLE_CERTIFICATE</code> respectively.</li> <li>Skip step 7 in the instructions, as that does not apply here because we will be configuring Nautobot directly.</li> <li>For step 9 of the instructions under Service provider details, provide the following<ul> <li>ACS URL: <code>https://nautobot.example.com/complete/saml/</code></li> <li>Entity ID: <code>https://nautobot.example.com/</code></li> <li>Start URL: Leave this field blank</li> </ul> </li> <li>Skip step 10 in the instructions, as a signed response is not required.</li> <li>For step 11 of the instructions, under Name ID, set the following:<ul> <li>Name ID Format: Select EMAIL</li> <li>Name ID: Select Basic Information &gt; Primary Email</li> </ul> </li> <li>For step 13 of the instructions, on the Attribute mapping page, add the following mappings for Google Directory attributes to App attributes:<ul> <li>Primary email --&gt; <code>email</code></li> <li>First name --&gt; <code>first_name</code></li> <li>Last name --&gt; <code>last_name</code></li> </ul> </li> <li>Click Finish</li> </ol>"},{"location":"configuration/authentication/sso.html#configure-nautobot","title":"Configure Nautobot","text":"<p>There is a lot to configure to inform Nautobot how to integrate with SAML, so please provide the following configuration very carefully. All of these values must be correct in your <code>nautobot_config.py</code>.</p> <p>Important</p> <p>Refer to the official Python Social Auth documentation for required SAML configuration if you run into any issues.</p> <pre><code># Django authentication backends\nAUTHENTICATION_BACKENDS = [\n\"social_core.backends.saml.SAMLAuth\",\n\"nautobot.core.authentication.ObjectPermissionBackend\",\n]\n# The https FQDN to your Nautobot instance\nSOCIAL_AUTH_SAML_SP_ENTITY_ID = \"https://nautobot.example.com/\"\n# X.509 cert/key pair used for host verification are not used for this example because\n# Nautobot is directly authenticating itself to Google. Set them to empty strings.\nSOCIAL_AUTH_SAML_SP_PUBLIC_CERT = \"\"\nSOCIAL_AUTH_SAML_SP_PRIVATE_KEY = \"\"\n# A dictionary that contains information about your app. You must specify values for\n# English at a minimum.\nSOCIAL_AUTH_SAML_ORG_INFO = {\n\"en-US\": {\n\"name\": \"Nautobot\",\n\"displayname\": \"Nautobot\",\n\"url\": \"https://nautobot.example.com\",\n}\n}\n# Technical point of contact\nSOCIAL_AUTH_SAML_TECHNICAL_CONTACT = {\n\"givenName\": \"Bob Jones\",\n\"emailAddress\": \"bob@example.com\"\n}\n# Support point of contact\nSOCIAL_AUTH_SAML_SUPPORT_CONTACT = {\n\"givenName\": \"Alice Jenkins\",\n\"emailAddress\": \"alice@example.com\"\n}\n# The Entity ID URL for Google from step 3\nGOOGLE_ENTITY_ID = \"&lt;Entity ID from Google&gt;\"\n# The SSO URL for Google from step 3\nGOOGLE_SSO_URL = \"&lt;SSO URL from Google&gt;\"\n# The Certificate for Google from step 3\nGOOGLE_CERTIFICATE = \"&lt;Certificate from Google&gt;\"\n# The most important setting. List the Entity ID, SSO URL, and x.509 public key certificate\n# for each provider that you app wants to support. We are only supporting Google for this\n# example.\nSOCIAL_AUTH_SAML_ENABLED_IDPS = {\n\"google\": {\n\"entity_id\": GOOGLE_ENTITY_ID,\n\"url\": GOOGLE_SSO_URL,\n\"x509cert\": GOOGLE_CERTIFICATE,\n# These are used to map to User object fields in Nautobot using Google\n# attribute fields we configured in step 8 of \"Setup SAML in Google\".\n\"attr_user_permanent_id\": \"email\",\n\"attr_first_name\": \"first_name\",\n\"attr_last_name\": \"last_name\",\n\"attr_username\": \"email\",\n\"attr_email\": \"email\",\n}\n}\n# Required for correctly redirecting when behind SSL proxy (NGINX). You may or may not need\n# these depending on your production deployment. They are provided here just in case.\nSECURE_SSL_REDIRECT = True\nSECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\n</code></pre>"},{"location":"configuration/authentication/sso.html#enable-saml-in-google","title":"Enable SAML in Google","text":"<p>Now that you've configured both Google and Nautobot for SAML, you still need to enable SAML for your users in your Google domain.</p> <p>On Google's official site to Set up your own custom SAML application, scroll down to Turn on your SAML app and follow the remaining instructions to enable and verify SAML in Google.</p>"},{"location":"configuration/authentication/sso.html#login-with-saml","title":"Login with SAML","text":"<p>Note the provider entry we configured in <code>SOCIAL_AUTH_SAML_ENABLED_IDPS</code> as <code>google</code>. This will be used to login and will be referenced in the query parameter using <code>idp=google</code>. For example <code>/login/saml/?idp=google</code>.</p> <p>This should be the URL that is mapped to the \"Log in\" button on the top right of the index page when you navigate to Nautobot in your browser. Clicking this link should automatically redirect you to Google, ask you to \"Choose an account\", log you in and redirect you back to the Nautobot home page. Your email address will also be your username.</p> <p>Be sure to configure <code>EXTERNAL_AUTH_DEFAULT_GROUPS</code> and <code>EXTERNAL_AUTH_DEFAULT_PERMISSIONS</code> next.</p>"},{"location":"configuration/authentication/sso.html#azure-ad","title":"Azure AD","text":"<ol> <li>In the Azure admin portal, search for and select Azure Active Directory.</li> <li>Under Manage, select App registrations -&gt; New registration.</li> <li> <p>Configure the application as follows:</p> <ul> <li>Name: This is the user-facing display name for the app.</li> <li>Supported account types: This specifies the AD directories that you're allowing to authenticate with this app.</li> <li>Redirect URIs: Don't fill this out yet, it will be configured in the following steps.</li> </ul> </li> <li> <p>Once the application is configured in Azure, you'll be shown the app registration's Overview page. Please take note of the Application (client) ID for use later. SSO with Azure can either be configured with OAuth2 or OpenID Connect (OIDC). When using an organization's authentication server OAuth2 is preferred; with custom Azure authentication backends, use OIDC.</p> </li> <li>From the App registration page, click on Authentication. Under Platform configurations, select Add a platform and select Web.</li> <li> <p>Click on the Add a Redirect URI link on the page and configure it as follows:</p> <ul> <li>Redirect URIs: should be the Base URI plus <code>/complete/azuread-oauth2/</code> such as <code>https://nautobot.example.com/complete/azuread-oauth2/</code></li> </ul> </li> <li> <p>Once the Redirect URI is set, the last thing you'll need is to generate a client secret. To do so, click on Certificates &amp; secrets and then the New client secret option. At this point you'll need to specify the expiration for the secret. Microsoft recommends less than 12 months with a maximum of 24 months as an option. Ensure you make a note of the secret that's generated for the next step.</p> </li> <li> <p>With the client secret generated, edit your <code>nautobot_config.py</code> as follows:</p> </li> </ol>"},{"location":"configuration/authentication/sso.html#azure-ad-oauth2","title":"Azure AD - OAuth2","text":"<p>If your app is linked to the common tenant, you'll want to edit your <code>nautobot_config.py</code> as follows:</p> <pre><code>AUTHENTICATION_BACKENDS = [\n\"social_core.backends.azuread.AzureADOAuth2\",\n\"nautobot.core.authentication.ObjectPermissionBackend\",\n]\nSOCIAL_AUTH_AZUREAD_OAUTH2_KEY = \"&lt;Client ID from Azure&gt;\"\nSOCIAL_AUTH_AZUREAD_OAUTH2_SECRET = \"&lt;Client Secret From Azure&gt;\"\n</code></pre>"},{"location":"configuration/authentication/sso.html#azure-tenant-support","title":"Azure - Tenant Support","text":"<p>If your app is linked to a specific tenant instead of the common tenant, you'll want to edit your <code>nautobot_config.py</code> as follows:</p> <pre><code>AUTHENTICATION_BACKENDS = [\n\"social_core.backends.azuread_tenant.AzureADTenantOAuth2\",\n\"nautobot.core.authentication.ObjectPermissionBackend\",\n]\nSOCIAL_AUTH_AZUREAD_TENANT_OAUTH2_KEY = \"&lt;Client ID from Azure&gt;\"\nSOCIAL_AUTH_AZUREAD_TENANT_OAUTH2_SECRET = \"&lt;Client Secret From Azure&gt;\"\nSOCIAL_AUTH_AZUREAD_TENANT_OAUTH2_TENANT_ID = \"&lt;Tenant ID from Azure&gt;\"\n</code></pre> <p>With those settings in place your users should be able to authenticate against Azure AD and successfully login to Nautobot. However, that user will not be placed in any groups or given any permissions. In order to do so, you'll need to utilize a script to synchronize the groups passed from Azure to Nautobot after authentication succeeds. Any group permissions will need to be set manually in the Nautobot admin panel.</p> <p>An example to sync groups with Azure is provided in the <code>examples/azure_ad</code> folder in the root of the Nautobot repository.</p> <p>Note</p> <p>You may need to set <code>UWSGI_BUFFER_SIZE</code> to something bigger than the default 4096 bytes in the UWSGI config if you are seeing errors like <code>invalid request block size</code> in your application logs (see here for more information)</p>"},{"location":"core-functionality/circuits.html","title":"Circuits","text":""},{"location":"core-functionality/circuits.html#providers","title":"Providers","text":"<p>A circuit provider is any entity which provides some form of connectivity of among sites or organizations within a site. While this obviously includes carriers which offer Internet and private transit service, it might also include Internet exchange (IX) points and even organizations with whom you peer directly. Each circuit within Nautobot must be assigned a provider and a circuit ID which is unique to that provider.</p> <p>Each provider may be assigned an autonomous system number (ASN), an account number, and contact information.</p>"},{"location":"core-functionality/circuits.html#provider-network","title":"Provider Network","text":"<p>Added in version 1.3.0</p> <p>A provider network represents an abstract portion of network topology, just like in a topology diagram. For example, a provider network may be used to represent a provider's MPLS network.</p> <p>Each provider network must be assigned to a provider. A circuit may terminate to either a provider network or to a site.</p>"},{"location":"core-functionality/circuits.html#circuits_1","title":"Circuits","text":"<p>A communications circuit represents a single physical link connecting exactly two endpoints, commonly referred to as its A and Z terminations. A circuit in Nautobot may have zero, one, or two terminations defined. It is common to have only one termination defined when you don't necessarily care about the details of the provider side of the circuit, e.g. for Internet access circuits. Both terminations would likely be modeled for circuits which connect one customer site to another.</p> <p>Each circuit is associated with a provider and a user-defined type. For example, you might have Internet access circuits delivered to each site by one provider, and private MPLS circuits delivered by another. Each circuit must be assigned a circuit ID, each of which must be unique per provider.</p> <p>Each circuit must be assigned to a <code>status</code>. The following statuses are available by default:</p> <ul> <li>Planned</li> <li>Provisioning</li> <li>Active</li> <li>Offline</li> <li>Deprovisioning</li> <li>Decommissioned</li> </ul> <p>Circuits also have optional fields for annotating their installation date and commit rate, and may be assigned to Nautobot tenants.</p> <p>Note</p> <p>Nautobot currently models only physical circuits: those which have exactly two endpoints. It is common to layer virtualized constructs (virtual circuits) such as MPLS or EVPN tunnels on top of these, however Nautobot does not yet support virtual circuit modeling.</p>"},{"location":"core-functionality/circuits.html#circuit-types","title":"Circuit Types","text":"<p>Circuits are classified by functional type. These types are completely customizable, and are typically used to convey the type of service being delivered over a circuit. For example, you might define circuit types for:</p> <ul> <li>Internet transit</li> <li>Out-of-band connectivity</li> <li>Peering</li> <li>Private backhaul</li> </ul>"},{"location":"core-functionality/circuits.html#circuit-terminations","title":"Circuit Terminations","text":"<p>The association of a circuit with a particular site, location, and/or device is modeled separately as a circuit termination. A circuit may have up to two terminations, labeled A and Z. A single-termination circuit can be used when you don't know (or care) about the far end of a circuit (for example, an Internet access circuit which connects to a transit provider). A dual-termination circuit is useful for tracking circuits which connect two sites.</p> <p>Each circuit termination is attached to either a site (and optionally also a location within the site) or a provider network. Site terminations may optionally be connected via a cable to a specific device interface or port within that site. Each termination must be assigned a port speed, and can optionally be assigned an upstream speed if it differs from the downstream speed (a common scenario with e.g. DOCSIS cable modems). Fields are also available to track cross-connect and patch panel details.</p> <p>In adherence with Nautobot's philosophy of closely modeling the real world, a circuit may be connected only to a physical interface. For example, circuits may not terminate to LAG interfaces, which are virtual in nature. In such cases, a separate physical circuit is associated with each LAG member interface and each needs to be modeled discretely.</p> <p>Note</p> <p>A circuit in Nautobot represents a physical link, and cannot have more than two endpoints. When modeling a multi-point topology, each leg of the topology must be defined as a discrete circuit, with one end terminating within the provider's infrastructure. The provider network model is ideal for representing these networks.</p>"},{"location":"core-functionality/device-types.html","title":"Device Types","text":""},{"location":"core-functionality/device-types.html#device-types_1","title":"Device Types","text":"<p>A device type represents a particular make and model of hardware that exists in the real world. Device types define the physical attributes of a device (rack height and depth) and its individual components (console, power, network interfaces, and so on).</p> <p>Device types are instantiated as devices installed within sites and/or equipment racks. For example, you might define a device type to represent a Juniper EX4300-48T network switch with 48 Ethernet interfaces. You can then create multiple instances of this type named \"switch1,\" \"switch2,\" and so on. Each device will automatically inherit the components (such as interfaces) of its device type at the time of creation. However, changes made to a device type will not apply to instances of that device type retroactively.</p> <p>Some devices house child devices which share physical resources, like space and power, but which functional independently from one another. A common example of this is blade server chassis. Each device type is designated as one of the following:</p> <ul> <li>A parent device (which has device bays)</li> <li>A child device (which must be installed within a device bay)</li> <li>Neither</li> </ul> <p>Note</p> <p>This parent/child relationship is not suitable for modeling chassis-based devices, wherein child members share a common control plane. Instead, line cards and similarly non-autonomous hardware should be modeled as inventory items within a device, with any associated interfaces or other components assigned directly to the device.</p>"},{"location":"core-functionality/device-types.html#manufacturers","title":"Manufacturers","text":"<p>A manufacturer represents the \"make\" of a device; e.g. Cisco or Dell. Each device type must be assigned to a manufacturer. (Inventory items and platforms may also be associated with manufacturers.) Each manufacturer must have a unique name and may have a description assigned to it.</p>"},{"location":"core-functionality/device-types.html#device-component-templates","title":"Device Component Templates","text":"<p>Added in version 1.4.5</p> <p>The fields <code>created</code> and <code>last_updated</code> were added to all device component template models. If you upgraded from Nautobot 1.4.4 or earlier, the values for these fields will default to <code>None</code> (null).</p> <p>Each device type is assigned a number of component templates which define the physical components within a device. These are:</p> <ul> <li>Console ports</li> <li>Console server ports</li> <li>Power ports</li> <li>Power outlets</li> <li>Network interfaces</li> <li>Front ports</li> <li>Rear ports</li> <li>Device bays (which house child devices)</li> </ul> <p>Whenever a new device is created, its components are automatically created per the templates assigned to its device type. For example, a Juniper EX4300-48T device type might have the following component templates defined:</p> <ul> <li>One template for a console port (\"Console\")</li> <li>Two templates for power ports (\"PSU0\" and \"PSU1\")</li> <li>48 templates for 1GE interfaces (\"ge-0/0/0\" through \"ge-0/0/47\")</li> <li>Four templates for 10GE interfaces (\"xe-0/2/0\" through \"xe-0/2/3\")</li> </ul> <p>Once component templates have been created, every new device that you create as an instance of this type will automatically be assigned each of the components listed above. However, this automation occurs only when a device is first created: Adding or removing components on a device type does not automatically change existing device instances based on that device type.</p> <p>Note</p> <p>Assignment of components from templates occurs only at the time of device creation. If you modify the templates of a device type, it will not affect devices which have already been created. This is intentional and by design as device type templates may evolve over time in your organization. However, you always have the option of adding, modifying, or deleting components on existing devices.</p> <p>Consider also that automatically changing components of existing devices when a device-type changes would require Nautobot to make very dangerous assumptions. For example, suppose you had a device type which included a specific line card with a specific set of interfaces. After creating some devices, representing your existing deployment of this device type, your deployment for new devices of this type changed to include a different line card and hence different interfaces, so you decided to update the device-type templates accordingly. If Nautobot were to automatically propagate this change to all existing devices of this type, it would result in an incorrect reflection of the reality that all existing devices have not yet been retrofitted with the new line card.</p>"},{"location":"core-functionality/device-types.html#console-port-templates","title":"Console Port Templates","text":"<p>A template for a console port that will be created on all instantiations of the parent device type. Each console port can be assigned a physical type.</p>"},{"location":"core-functionality/device-types.html#console-server-port-templates","title":"Console Server Port Templates","text":"<p>A template for a console server port that will be created on all instantiations of the parent device type. Each console server port can be assigned a physical type.</p>"},{"location":"core-functionality/device-types.html#power-port-templates","title":"Power Port Templates","text":"<p>A template for a power port that will be created on all instantiations of the parent device type. Each power port can be assigned a physical type, as well as a maximum and allocated draw in watts.</p>"},{"location":"core-functionality/device-types.html#power-outlet-templates","title":"Power Outlet Templates","text":"<p>A template for a power outlet that will be created on all instantiations of the parent device type. Each power outlet can be assigned a physical type, and its power source may be mapped to a specific feed leg and power port template. This association will be automatically replicated when the device type is instantiated.</p>"},{"location":"core-functionality/device-types.html#interface-templates","title":"Interface Templates","text":"<p>A template for a network interface that will be created on all instantiations of the parent device type. Each interface may be assigned a physical or virtual type, and may be designated as \"management-only.\"</p>"},{"location":"core-functionality/device-types.html#front-port-templates","title":"Front Port Templates","text":"<p>A template for a front-facing pass-through port that will be created on all instantiations of the parent device type. Front ports may have a physical type assigned, and must be associated with a corresponding rear port and position. This association will be automatically replicated when the device type is instantiated.</p>"},{"location":"core-functionality/device-types.html#rear-port-templates","title":"Rear Port Templates","text":"<p>A template for a rear-facing pass-through port that will be created on all instantiations of the parent device type. Each rear port may have a physical type and one or more front port templates assigned to it. The number of positions associated with a rear port determines how many front ports can be assigned to it (the maximum is 1024).</p>"},{"location":"core-functionality/device-types.html#device-bay-templates","title":"Device Bay Templates","text":"<p>A template for a device bay that will be created on all instantiations of the parent device type.</p>"},{"location":"core-functionality/devices.html","title":"Devices and Cabling","text":""},{"location":"core-functionality/devices.html#devices","title":"Devices","text":"<p>Every piece of hardware which is installed within a site or rack exists in Nautobot as a device. Devices are measured in rack units (U) and can be half depth or full depth. A device may have a height of 0U: These devices do not consume vertical rack space and cannot be assigned to a particular rack unit. A common example of a 0U device is a vertically-mounted PDU.</p> <p>When assigning a multi-U device to a rack, it is considered to be mounted in the lowest-numbered rack unit which it occupies. For example, a 3U device which occupies U8 through U10 is said to be mounted in U8. This logic applies to racks with both ascending and descending unit numbering.</p> <p>A device is said to be full-depth if its installation on one rack face prevents the installation of any other device on the opposite face within the same rack unit(s). This could be either because the device is physically too deep to allow a device behind it, or because the installation of an opposing device would impede airflow.</p> <p>Each device must be instantiated from a pre-created device type, and its default components (console ports, power ports, interfaces, etc.) will be created automatically. (The device type associated with a device may be changed after its creation, however its components will not be updated retroactively.)</p> <p>Each device must be assigned a site, device role, and operational <code>status</code>, and may optionally be assigned to a specific location and/or rack within a site. A platform, serial number, and asset tag may optionally be assigned to each device.</p> <p>Device names must be unique within a site, unless the device has been assigned to a tenant. Devices may also be unnamed.</p> <p>When a device has one or more interfaces with IP addresses assigned, a primary IP for the device can be designated, for both IPv4 and IPv6.</p> <p>For Devices forming a group (Failover, Load-Sharing, Redundacy or similar) refer to Device Redundancy Groups model documentation.</p>"},{"location":"core-functionality/devices.html#developer-api","title":"Developer API","text":"<p>The <code>Device</code> Django model class supports a method called <code>create_components()</code>. This method is normally called during <code>device_instance.save()</code>, which is called whenever you save create a Device via the GUI or the REST API, but if you are working directly in the ORM and encounter one of the two following scenarios, <code>device_instance.save()</code> is not called:</p> <ul> <li>Usage of <code>device_instance.objects.bulk_create()</code> to perform a bulk creation of Device objects</li> <li>Usage of <code>device_instance.save()</code> during handling of the <code>nautobot_database_ready</code> signal (which uses historical models)</li> </ul> <p>In these cases you will have to manually run <code>device_instance.create_components()</code> in order to instantiate the device type's component templates (interfaces, power ports, etc.).</p>"},{"location":"core-functionality/devices.html#device-roles","title":"Device Roles","text":"<p>Devices can be organized by functional roles, which are fully customizable by the user. For example, you might create roles for core switches, distribution switches, and access switches within your network.</p>"},{"location":"core-functionality/devices.html#platforms","title":"Platforms","text":"<p>A platform defines the type of software running on a device or virtual machine. This can be helpful to model when it is necessary to distinguish between different versions or feature sets. Note that two devices of the same type may be assigned different platforms: For example, one Juniper MX240 might run Junos 14 while another runs Junos 15.</p> <p>Platforms may optionally be limited by manufacturer: If a platform is assigned to a particular manufacturer, it can only be assigned to devices with a type belonging to that manufacturer.</p> <p>The platform model can be used to indicate which \"network driver\" Nautobot (and Jobs, Apps, etc.) should use when connecting to a remote device running this platform. This is a generic string corresponding loosely to a Netmiko driver name. As there are many different libraries and applications for connecting to a device, rather than having a separate model field for each such connection type, Nautobot uses netutils to translate the generic network driver string into a variety of library-specific driver strings (Ansible \"collection name\", PyATS \"OS\" value, Scrapli \"platform\", etc.) which can be accessed via the UI, REST API, and GraphQL as needed. An administrator can extend or override the default translations provided by netutils by configuring the <code>NETWORK_DRIVERS</code> dictionary appropriately. (If your extensions are generally applicable, please consider making a pull request against netutils to update the package!)</p> <p>Added in version 1.6.0</p> <p>The <code>network_driver</code> database field and the <code>network_driver_mappings</code> derived property were added to the Platform data model. Support for the <code>NETWORK_DRIVERS</code> setting was added.</p> <p>For historical reasons, the NAPALM driver (<code>napalm_driver</code> field) and any associated arguments (<code>napalm_args</code> field) Nautobot should use when connecting to a remote device via NAPALM can (and must) be configured directly rather than being derived from the network driver. The name of the NAPALM driver along with optional parameters are stored with the platform.</p> <p>Apps and Jobs should transition to using the <code>network_driver_mappings[\"napalm\"]</code> property when connecting to a device via NAPALM. Nautobot may deprecate the use of the <code>napalm_driver</code> and <code>napalm_args</code> fields in a future release.</p> <p>The assignment of platforms to devices is an optional feature, and may be disregarded if not desired.</p>"},{"location":"core-functionality/devices.html#device-components","title":"Device Components","text":"<p>Added in version 1.4.5</p> <p>The fields <code>created</code> and <code>last_updated</code> were added to all device component models. If you upgraded from Nautobot 1.4.4 or earlier, the values for these fields will default to <code>None</code> (null).</p>"},{"location":"core-functionality/devices.html#console-ports","title":"Console Ports","text":"<p>A console port provides connectivity to the physical console of a device. These are typically used for temporary access by someone who is physically near the device, or for remote out-of-band access provided via a networked console server. Each console port may be assigned a physical type.</p> <p>Cables can connect console ports to console server ports or pass-through ports.</p>"},{"location":"core-functionality/devices.html#console-server-ports","title":"Console Server Ports","text":"<p>A console server is a device which provides remote access to the local consoles of connected devices. They are typically used to provide remote out-of-band access to network devices. Each console server port may be assigned a physical type.</p> <p>Cables can connect console server ports to console ports or pass-through ports.</p>"},{"location":"core-functionality/devices.html#power-ports","title":"Power Ports","text":"<p>A power port represents the inlet of a device where it draws its power, i.e. the connection port(s) on a device's power supply. Each power port may be assigned a physical type, as well as allocated and maximum draw values (in watts). These values can be used to calculate the overall utilization of an upstream power feed.</p> <p>Info</p> <p>When creating a power port on a device which supplies power to downstream devices, the allocated and maximum draw numbers should be left blank. Utilization will be calculated by taking the sum of all power ports of devices connected downstream.</p> <p>Cables can connect power ports only to power outlets or power feeds. (Pass-through ports cannot be used to model power distribution.)</p>"},{"location":"core-functionality/devices.html#power-outlets","title":"Power Outlets","text":"<p>Power outlets represent the outlets on a power distribution unit (PDU) or other device that supply power to dependent devices. Each power port may be assigned a physical type, and may be associated with a specific feed leg (where three-phase power is used) and/or a specific upstream power port. This association can be used to model the distribution of power within a device.</p> <p>For example, imagine a PDU with one power port which draws from a three-phase feed and 48 power outlets arranged into three banks of 16 outlets each. Outlets 1-16 would be associated with leg A on the port, and outlets 17-32 and 33-48 would be associated with legs B and C, respectively.</p> <p>Cables can connect power outlets only to downstream power ports. (Pass-through ports cannot be used to model power distribution.)</p>"},{"location":"core-functionality/devices.html#interfaces","title":"Interfaces","text":"<p>Interfaces in Nautobot represent network interfaces used to exchange data with connected devices. On modern networks, these are most commonly Ethernet, but other types are supported as well. Each interface must be assigned a type, an operational <code>status</code> and may optionally be assigned a MAC address, MTU, and IEEE 802.1Q mode (tagged or access). Each interface can also be enabled or disabled, and optionally designated as management-only (for out-of-band management).</p> <p>The following operational statuses are available by default:</p> <ul> <li>Planned</li> <li>Maintenance</li> <li>Active</li> <li>Decommissioning</li> <li>Failed</li> </ul> <p>Added in version 1.4.0</p> <ul> <li>Added <code>bridge</code> field.</li> <li>Added <code>parent_interface</code> field.</li> <li>Added <code>status</code> field.</li> </ul> <p>Interfaces may be physical or virtual in nature, but only physical interfaces may be connected via cables. Cables can connect interfaces to pass-through ports, circuit terminations, or other interfaces.</p> <p>Physical interfaces may be arranged into a link aggregation group (LAG) and associated with a parent LAG (virtual) interface. LAG interfaces can be recursively nested to model bonding of trunk groups. Like all virtual interfaces, LAG interfaces cannot be connected physically.</p> <p>IP addresses can be assigned to interfaces. VLANs can also be assigned to each interface as either tagged or untagged. (An interface may have only one untagged VLAN.)</p> <p>Note</p> <p>Although devices and virtual machines both can have interfaces, a separate model is used for each. Thus, device interfaces have some properties that are not present on virtual machine interfaces and vice versa.</p>"},{"location":"core-functionality/devices.html#front-ports","title":"Front Ports","text":"<p>Front ports are pass-through ports used to represent physical cable connections that comprise part of a longer path. For example, the ports on the front face of a UTP patch panel would be modeled in Nautobot as front ports. Each port is assigned a physical type, and must be mapped to a specific rear port on the same device. A single rear port may be mapped to multiple rear ports, using numeric positions to annotate the specific alignment of each.</p>"},{"location":"core-functionality/devices.html#rear-ports","title":"Rear Ports","text":"<p>Like front ports, rear ports are pass-through ports which represent the continuation of a path from one cable to the next. Each rear port is defined with its physical type and a number of positions: Rear ports with more than one position can be mapped to multiple front ports. This can be useful for modeling instances where multiple paths share a common cable (for example, six discrete two-strand fiber connections sharing a 12-strand MPO cable).</p> <p>Note</p> <p>Front and rear ports need not necessarily reside on the actual front or rear device face. This terminology is used primarily to distinguish between the two components in a pass-through port pairing.</p>"},{"location":"core-functionality/devices.html#device-bays","title":"Device Bays","text":"<p>Device bays represent a space or slot within a parent device in which a child device may be installed. For example, a 2U parent chassis might house four individual blade servers. The chassis would appear in the rack elevation as a 2U device with four device bays, and each server within it would be defined as a 0U device installed in one of the device bays. Child devices do not appear within rack elevations or count as consuming rack units.</p> <p>Child devices are first-class Devices in their own right: That is, they are fully independent managed entities which don't share any control plane with the parent.  Just like normal devices, child devices have their own platform (OS), role, tags, and components.  LAG interfaces may not group interfaces belonging to different child devices.</p> <p>Note</p> <p>Device bays are not suitable for modeling line cards (such as those commonly found in chassis-based routers and switches), as these components depend on the control plane of the parent device to operate. Instead, line cards and similarly non-autonomous hardware should be modeled as inventory items within a device, with any associated interfaces or other components assigned directly to the device.</p>"},{"location":"core-functionality/devices.html#inventory-items","title":"Inventory Items","text":"<p>Inventory items represent hardware components installed within a device, such as a power supply or CPU or line card. Inventory items are distinct from other device components in that they cannot be templatized on a device type, and cannot be connected by cables. They are intended to be used primarily for inventory purposes.</p> <p>Each inventory item can be assigned a manufacturer, part ID, serial number, and asset tag (all optional). A boolean toggle is also provided to indicate whether each item was entered manually or discovered automatically (by some process outside of Nautobot).</p> <p>Inventory items are hierarchical in nature, such that any individual item may be designated as the parent for other items. For example, an inventory item might be created to represent a line card which houses several SFP optics, each of which exists as a child item within the device.</p>"},{"location":"core-functionality/devices.html#virtual-chassis","title":"Virtual Chassis","text":"<p>A virtual chassis represents a set of devices which share a common control plane. A common example of this is a stack of switches which are connected and configured to operate as a single device. A virtual chassis must be assigned a name and may be assigned a domain.</p> <p>Each device in the virtual chassis is referred to as a VC member, and assigned a position and (optionally) a priority. VC member devices commonly reside within the same rack, though this is not a requirement. One of the devices may be designated as the VC master: This device will typically be assigned a name, services, and other attributes related to managing the VC.</p> <p>Note</p> <p>It's important to recognize the distinction between a virtual chassis and a chassis-based device. A virtual chassis is not suitable for modeling a chassis-based switch with removable line cards (such as the Juniper EX9208), as its line cards are not physically autonomous devices.</p>"},{"location":"core-functionality/devices.html#cables","title":"Cables","text":"<p>All connections between device components in Nautobot are represented using cables. A cable represents a direct physical connection between two termination points, such as between a console port and a patch panel port, or between two network interfaces.</p> <p>Each cable must have two endpoints defined. These endpoints are sometimes referenced as A and B for clarity, however cables are direction-agnostic and the order in which terminations are made has no meaning. Cables may be connected to the following objects:</p> <ul> <li>Circuit terminations</li> <li>Console ports</li> <li>Console server ports</li> <li>Interfaces</li> <li>Pass-through ports (front and rear)</li> <li>Power feeds</li> <li>Power outlets</li> <li>Power ports</li> </ul> <p>Each cable may be assigned a type, label, length, and color. Each cable must also assigned to an operational <code>status</code>. The following statuses are available by default:</p> <ul> <li>Active</li> <li>Planned</li> <li>Decommissioning</li> </ul>"},{"location":"core-functionality/devices.html#tracing-cables","title":"Tracing Cables","text":"<p>A cable may be traced from either of its endpoints by clicking the \"trace\" button. (A REST API endpoint also provides this functionality.) Nautobot will follow the path of connected cables from this termination across the directly connected cable to the far-end termination. If the cable connects to a pass-through port, and the peer port has another cable connected, Nautobot will continue following the cable path until it encounters a non-pass-through or unconnected termination point. The entire path will be displayed to the user.</p> <p>In the example below, three individual cables comprise a path between devices A and D:</p> <p></p> <p>Traced from Interface 1 on Device A, Nautobot will show the following path:</p> <ul> <li>Cable 1: Interface 1 to Front Port 1</li> <li>Cable 2: Rear Port 1 to Rear Port 2</li> <li>Cable 3: Front Port 2 to Interface 2</li> </ul> <p>A cable can also be traced through a circuit.</p> <p></p> <p>Traced from Interface 1 on Device A, Nautobot will show the following path:</p> <ul> <li>Cable 1: Interface 1 to Side A</li> <li>Cable 2: Side Z to Interface 2</li> </ul>"},{"location":"core-functionality/ipam.html","title":"IP Address Management","text":""},{"location":"core-functionality/ipam.html#aggregates","title":"Aggregates","text":"<p>IP addressing is by nature hierarchical. The first few levels of the IPv4 hierarchy, for example, look like this:</p> <ul> <li>0.0.0.0/0<ul> <li>0.0.0.0/1<ul> <li>0.0.0.0/2</li> <li>64.0.0.0/2</li> </ul> </li> <li>128.0.0.0/1<ul> <li>128.0.0.0/2</li> <li>192.0.0.0/2</li> </ul> </li> </ul> </li> </ul> <p>This hierarchy comprises 33 tiers of addressing, from /0 all the way down to individual /32 address (and much, much further to /128 for IPv6). Of course, most organizations are concerned with only relatively small portions of the total IP space, so tracking the uppermost of these tiers isn't necessary.</p> <p>Nautobot allows us to specify the portions of IP space that are interesting to us by defining aggregates. Typically, an aggregate will correspond to either an allocation of public (globally routable) IP space granted by a regional authority, or a private (internally-routable) designation. Common private designations include:</p> <ul> <li>10.0.0.0/8 (RFC 1918)</li> <li>100.64.0.0/10 (RFC 6598)</li> <li>172.16.0.0/12 (RFC 1918)</li> <li>192.168.0.0/16 (RFC 1918)</li> <li>One or more /48s within fd00::/8 (IPv6 unique local addressing)</li> </ul> <p>Each aggregate is assigned to a RIR. For \"public\" aggregates, this will be the real-world authority which has granted your organization permission to use the specified IP space on the public Internet. For \"private\" aggregates, this will be a statutory authority, such as RFC 1918. Each aggregate can also annotate that date on which it was allocated, where applicable.</p> <p>Prefixes are automatically arranged beneath their parent aggregates in Nautobot. Typically you'll want to create aggregates only for the prefixes and IP addresses that your organization actually manages: There is no need to define aggregates for provider-assigned space which is only used on Internet circuits, for example.</p> <p>Note</p> <p>Because aggregates represent swaths of the global IP space, they cannot overlap with one another: They can only exist side-by-side. For instance, you cannot define both 10.0.0.0/8 and 10.16.0.0/16 as aggregates, because they overlap. 10.16.0.0/16 in this example would be created as a container prefix and automatically grouped under the 10.0.0.0/8 aggregate. Remember, the purpose of aggregates is to establish the root of your IP addressing hierarchy.</p>"},{"location":"core-functionality/ipam.html#regional-internet-registries-rirs","title":"Regional Internet Registries (RIRs)","text":"<p>Regional Internet registries are responsible for the allocation of globally-routable address space. The five RIRs are ARIN, RIPE, APNIC, LACNIC, and AFRINIC. However, some address space has been set aside for internal use, such as defined in RFCs 1918 and 6598. Nautobot considers these RFCs as a sort of RIR as well; that is, an authority which \"owns\" certain address space. There also exist lower-tier registries which serve particular geographic areas.</p> <p>Users can create whatever RIRs they like, but each aggregate must be assigned to one RIR. The RIR model includes a boolean flag which indicates whether the RIR allocates only private IP space.</p> <p>For example, suppose your organization has been allocated 104.131.0.0/16 by ARIN. It also makes use of RFC 1918 addressing internally. You would first create RIRs named \"ARIN\" and \"RFC 1918,\" then create an aggregate for each of these top-level prefixes, assigning it to its respective RIR.</p>"},{"location":"core-functionality/ipam.html#prefixes","title":"Prefixes","text":"<p>A prefix is an IPv4 or IPv6 network and mask expressed in CIDR notation (e.g. 192.0.2.0/24). A prefix entails only the \"network portion\" of an IP address: All bits in the address not covered by the mask must be zero. (In other words, a prefix cannot be a specific IP address.)</p> <p>Prefixes are automatically organized by their parent aggregates. Additionally, each prefix can be assigned to a particular site (optionally also to a location within the site) and a virtual routing and forwarding instance (VRF). Each VRF represents a separate IP space or routing table. All prefixes not assigned to a VRF are considered to be in the \"global\" table.</p> <p>Each prefix must be assigned a <code>status</code> and can optionally be assigned a role. These terms are often used interchangeably so it's important to recognize the difference between them. The status defines a prefix's operational state. The following statuses are provided by default:</p> <ul> <li>Container - A summary of child prefixes</li> <li>Active - Provisioned and in use</li> <li>Reserved - Designated for future use</li> <li>Deprecated - No longer in use</li> </ul> <p>On the other hand, a prefix's role defines its function. Role assignment is optional and roles are fully customizable. For example, you might create roles to differentiate between production and development infrastructure.</p> <p>A prefix may also be assigned to a VLAN. This association is helpful for associating address space with layer two domains. A VLAN may have multiple prefixes assigned to it.</p> <p>The prefix model include an \"is pool\" flag. If enabled, Nautobot will treat this prefix as a range (such as a NAT pool) wherein every IP address is valid and assignable. This logic is used when identifying available IP addresses within a prefix. If this flag is disabled, Nautobot will assume that the first and last (broadcast) address within an IPv4 prefix are unusable.</p>"},{"location":"core-functionality/ipam.html#prefixvlan-roles","title":"Prefix/VLAN Roles","text":"<p>A role indicates the function of a prefix or VLAN. For example, you might define Data, Voice, and Security roles. Generally, a prefix will be assigned the same functional role as the VLAN to which it is assigned (if any).</p>"},{"location":"core-functionality/ipam.html#ip-addresses","title":"IP Addresses","text":"<p>An IP address comprises a single host address (either IPv4 or IPv6) and its subnet mask. Its mask should match exactly how the IP address is configured on an interface in the real world.</p> <p>Like a prefix, an IP address can optionally be assigned to a VRF (otherwise, it will appear in the \"global\" table). IP addresses are automatically arranged under parent prefixes within their respective VRFs according to the IP hierarchy.</p> <p>Each IP address can also be assigned an operational <code>status</code> and a functional role.  The following statuses are available by default:</p> <ul> <li>Active</li> <li>Reserved</li> <li>Deprecated</li> <li>DHCP</li> <li>SLAAC (IPv6 Stateless Address Autoconfiguration)</li> </ul> <p>Roles are used to indicate some special attribute of an IP address; for example, use as a loopback or as the the virtual IP for a VRRP group. (Note that functional roles are conceptual in nature, and thus cannot be customized by the user.) Available roles include:</p> <ul> <li>Loopback</li> <li>Secondary</li> <li>Anycast</li> <li>VIP</li> <li>VRRP</li> <li>HSRP</li> <li>GLBP</li> </ul> <p>An IP address can be assigned to any device or virtual machine interface, and an interface may have multiple IP addresses assigned to it. Further, each device and virtual machine may have one of its interface IPs designated as its primary IP per address family (one for IPv4 and one for IPv6).</p> <p>Note</p> <p>When primary IPs are set for both IPv4 and IPv6, Nautobot will prefer IPv6. This can be changed by setting the <code>PREFER_IPV4</code> configuration parameter.</p>"},{"location":"core-functionality/ipam.html#network-address-translation-nat","title":"Network Address Translation (NAT)","text":"<p>An IP address can be designated as the network address translation (NAT) inside IP address for one or more other IP addresses. This is useful primarily to denote a translation between public and private IP addresses. This relationship is followed in both directions: For example, if 10.0.0.1 is assigned as the inside IP for 192.0.2.1, 192.0.2.1 will be displayed as the outside IP for 10.0.0.1.</p> <p>Added in version 1.3.0</p> <p>Support for multiple outside NAT IP addresses was added.</p>"},{"location":"core-functionality/ipam.html#virtual-routing-and-forwarding-vrf","title":"Virtual Routing and Forwarding (VRF)","text":"<p>A VRF object in Nautobot represents a virtual routing and forwarding (VRF) domain. Each VRF is essentially a separate routing table. VRFs are commonly used to isolate customers or organizations from one another within a network, or to route overlapping address space (e.g. multiple instances of the 10.0.0.0/8 space). Each VRF may be assigned to a specific tenant to aid in organizing the available IP space by customer or internal user.</p> <p>Each VRF is assigned a unique name and an optional route distinguisher (RD). The RD is expected to take one of the forms prescribed in RFC 4364, however its formatting is not strictly enforced.</p> <p>Each prefix and IP address may be assigned to one (and only one) VRF. If you have a prefix or IP address which exists in multiple VRFs, you will need to create a separate instance of it in Nautobot for each VRF. Any prefix or IP address not assigned to a VRF is said to belong to the \"global\" table.</p> <p>By default, Nautobot will allow duplicate prefixes to be assigned to a VRF. This behavior can be toggled by setting the \"enforce unique\" flag on the VRF model.</p> <p>Note</p> <p>Enforcement of unique IP space can be toggled for global table (non-VRF prefixes) using the <code>ENFORCE_GLOBAL_UNIQUE</code> configuration setting.</p> <p>Each VRF may have one or more import and/or export route targets applied to it. Route targets are used to control the exchange of routes (prefixes) among VRFs in L3VPNs.</p>"},{"location":"core-functionality/ipam.html#route-targets","title":"Route Targets","text":"<p>A route target is a particular type of extended BGP community used to control the redistribution of routes among VRF tables in a network. Route targets can be assigned to individual VRFs in Nautobot as import or export targets (or both) to model this exchange in an L3VPN. Each route target must be given a unique name, which should be in a format prescribed by RFC 4364, similar to a VR route distinguisher.</p> <p>Each route target can optionally be assigned to a tenant, and may have tags assigned to it.</p>"},{"location":"core-functionality/power.html","title":"Power Tracking","text":""},{"location":"core-functionality/power.html#power-panel","title":"Power Panel","text":"<p>A power panel represents the origin point in Nautobot for electrical power being disseminated by one or more power feeds. In a data center environment, one power panel often serves a group of racks, with an individual power feed extending to each rack, though this is not always the case. It is common to have two sets of panels and feeds arranged in parallel to provide redundant power to each rack.</p> <p>Each power panel must be assigned to a site, and may optionally be assigned to a particular location and/or rack group.</p> <p>Note</p> <p>Nautobot does not model the mechanism by which power is delivered to a power panel. Power panels define the root level of the power distribution hierarchy in Nautobot.</p>"},{"location":"core-functionality/power.html#power-feed","title":"Power Feed","text":"<p>A power feed represents the distribution of power from a power panel to a particular device, typically a power distribution unit (PDU). The power port (inlet) on a device can be connected via a cable to a power feed. A power feed may optionally be assigned to a rack to allow more easily tracking the distribution of power among racks.</p> <p>Each power feed is assigned an operational type (primary or redundant) and a <code>status</code>. The following statuses are available by default:</p> <ul> <li>Offline</li> <li>Active</li> <li>Planned</li> <li>Failed</li> </ul> <p>Each power feed also defines the electrical characteristics of the circuit which it represents. These include the following:</p> <ul> <li>Supply type (AC or DC)</li> <li>Phase (single or three-phase)</li> <li>Voltage</li> <li>Amperage</li> <li>Maximum utilization (percentage)</li> </ul>"},{"location":"core-functionality/power.html#rack-power-utilization","title":"Rack Power Utilization","text":"<p>The power utilization of a rack is calculated when one or more power feeds are assigned to the rack and connected to devices that draw power.</p> <p>Here are the typical instances required for the power utilization of a rack to be calculated and shown in the web UI:</p> <ul> <li>Power Panel in the same site as the rack</li> <li>Power Feed assigned to the power panel and to the rack</li> <li>1 Device (i.e. PDU)<ul> <li>power port connected to the power feed</li> <li>power outlet(s) connected to the power port of itself</li> </ul> </li> <li>1 or more Devices<ul> <li>power port connected to a power outlet of the PDU</li> </ul> </li> </ul> <p>The total power utilization for a rack is calculated as the sum of all allocated draw (from power ports of devices either directly connected to a power feed or connected to a power outlet of a device that is connected to a power feed) divided by the Total Power (Amps \u00d7 Volts \u00d7 Max Utilization %) for all power feeds.</p>"},{"location":"core-functionality/power.html#example-power-topology","title":"Example Power Topology","text":""},{"location":"core-functionality/secrets.html","title":"Secrets","text":""},{"location":"core-functionality/secrets.html#secrets_1","title":"Secrets","text":"<p>Added in version 1.2.0</p> <p>For security reasons, Nautobot generally does not store sensitive secrets (device access credentials, systems-integration API tokens, etc.) in its own database. There are other approaches and systems better suited to this purpose, ranging from simple solutions such as process-specific environment variables or restricted-access files on disk, all the way through to dedicated systems such as Hashicorp Vault or AWS Secrets Manager.</p> <p>However, any number of Nautobot features (including, but not limited to, device access via NAPALM, Git repository access, custom Jobs, and various plugins seeking to integrate with third-party systems) do need the ability to retrieve and make use of such secrets. Towards that end, Nautobot provides a <code>Secret</code> database model. This model does not store the secret value itself, but instead defines how Nautobot can retrieve the secret value as and when it is needed. By using this model as an abstraction of the underlying secrets storage implementation, this makes it possible for any Nautobot feature to make use of secret values without needing to know or care where or how the secret is actually stored.</p> <p>Secrets can be grouped and assigned a specific purpose as members of a Secrets Group, which can then be attached to a Git repository, device, or other data model as needed for a given purpose.</p>"},{"location":"core-functionality/secrets.html#secrets-providers","title":"Secrets Providers","text":"<p>Each Secret is associated with a secrets provider (not to be confused with a circuit provider), which provides the functionality needed to retrieve a specific value from a particular source of secrets. Each secrets provider also defines the set of parameters that a given Secret must specify in order to retrieve a secret value from this provider. Nautobot includes the following built-in secrets providers:</p> <ul> <li>Environment Variable - for retrieving a secret value defined in an environment variable; Secrets using this provider must specify the <code>variable</code> name to retrieve.</li> <li>Text File - for retrieving a secret value stored in a text file; Secrets using this provider must specify the absolute <code>path</code> of the file to retrieve.</li> </ul> <p>Changed in version 1.4.3</p> <p>When using the Text File secrets provider, any leading and trailing whitespace or newlines will be stripped.</p> <p>When defining a new Secret, you will need to select the desired secrets provider and then fill in the specific parameters required by that provider in order to have a completely specified, usable Secret record.</p> <p>Tip</p> <p>Nautobot plugins can also implement and register additional secrets providers as desired to support other sources such as Hashicorp Vault or AWS Secrets Manager.</p>"},{"location":"core-functionality/secrets.html#templated-secret-parameters","title":"Templated Secret Parameters","text":"<p>In some cases you may have a collection of closely related secrets values that all follow a similar retrieval pattern. For example you might have a directory of text files each containing the unique password for a specific device, or have defined a set of environment variables providing authentication tokens for each different Git repository. In this case, to reduce the need for repeated data entry, Nautobot provides an option to use Jinja2 templates to dynamically alter the provider parameters of a given Secret based on the requesting object. The relevant object is passed to Jinja2 as <code>obj</code>. Thus, for example:</p> <ul> <li>A \"Device Password\" secret could use the Text File provider and specify the file <code>path</code> as <code>\"/opt/nautobot/device_passwords/{{ obj.site.slug }}/{{ obj.name }}.txt\"</code>, so that a device <code>csr1</code> at site <code>nyc</code> would be able to retrieve its password value from <code>/opt/nautobot/device_passwords/nyc/csr1.txt</code>.</li> <li>A \"Git Token\" secret could use the Environment Variable provider and specify the <code>variable</code> name as <code>\"GIT_TOKEN_{{ obj.slug | replace('-', '_') | upper }}\"</code>, so that a Git repository <code>golden-config</code> would be able to retrieve its token value from <code>$GIT_TOKEN_GOLDEN_CONFIG</code>.</li> </ul> <p>Note</p> <p>To access custom fields of an object within a template, use the <code>cf</code> attribute. For example, <code>{{ obj.cf.color }}</code> will return the value (if any) for a custom field named <code>color</code> on <code>obj</code>.</p>"},{"location":"core-functionality/secrets.html#secrets-and-security","title":"Secrets and Security","text":"<p>Secrets are of course closely linked to security, and as such they pose a number of unique concerns that are worth discussing.</p>"},{"location":"core-functionality/secrets.html#leakage-of-secret-values","title":"Leakage of Secret Values","text":"<p>By design, the UI, REST API, and GraphQL do not provide access to retrieve or report the actual value of any given Secret, as these values are only meant for use within Nautobot itself.</p> <p>Tip</p> <p>If you need to use a secret value for some other purpose (such as to manually log into a device, or query an authenticated REST API endpoint yourself), you should be retrieving the value directly from the appropriate secrets provider rather than trying to relay it through Nautobot.</p> <p>However, code is power, and with power comes responsibility.</p> <p>Warning</p> <p>Any user or process that has the ability to execute code within Nautobot has the potential to access the value of any Secret, and a user or process that has the ability to execute arbitrary code absolutely can access Secrets.</p> <p>What does this mean in practice?</p> <ul> <li>Any plugin can potentially access your Secrets, including displaying their values onscreen or even forwarding them to an external system, so only install plugins that you trust.</li> <li>Any Job can potentially access your Secrets, and can trivially log a Secret value to its JobResult, where it may be visible to users, so only install Jobs that you trust, carefully limit which users are able to execute jobs and view job results, and be aware of the potential for privilege escalation resulting from careless or malicious logging.</li> <li>Any Git repository can add new Jobs to your system, so be careful about which users you grant the ability to create/edit <code>GitRepository</code> records.</li> <li>Any user with access to <code>nautobot-server nbshell</code> can execute arbitrary code, including accessing Secrets, and will be able to bypass any Nautobot permissions restrictions as well.</li> <li>Any user with access to modify Secrets can take advantage of a leak of one Secret's information through any of the above vectors to additionally leak other secret values (except as restricted with object permissions, see below). For example, if a Job erroneously logs a username obtained from a Secret as a part of its output, a user could modify the corresponding Secret definition to make the Job log any other secret value they have access to.</li> </ul>"},{"location":"core-functionality/secrets.html#using-object-permissions-with-secrets","title":"Using Object Permissions with Secrets","text":"<p>Tip</p> <p>In practice you will likely want to carefully restrict which users are allowed to define and edit Secrets, and may want to use object permissions to further restrict which specific Secrets they are allowed to utilize.</p> <p>The two default Secrets providers potentially allow a user to define and use a Secret corresponding to any environment variable in the Nautobot execution context and/or any file readable by the <code>nautobot</code> user. For many users and use cases, you will not want to grant this much power to define and access arbitrary secrets; fortunately Nautobot's built-in permissions model is granular enough to allow for more specifically tailored access grants.</p> <p>For example, to restrict a specific user to only be able to work with Secrets that use the <code>environment-variable</code> Secrets provider, and specifically only to access those environment variables whose names begin with <code>NAPALM_</code>, you could define a Permission with a specific constraint like:</p> <pre><code>{\n\"provider\": \"environment-variable\",\n\"parameters__variable__startswith\": \"NAPALM_\"\n}\n</code></pre> <p>Or for a Permission to work with Secrets that use <code>text-file</code>, but only files located in <code>/opt/nautobot/secrets/</code>, you could use the following constraint:</p> <pre><code>{\n\"provider\": \"text-file\",\n\"parameters__path__startswith\": \"/opt/nautobot/secrets/\"\n}\n</code></pre>"},{"location":"core-functionality/secrets.html#secrets-groups","title":"Secrets Groups","text":"<p>Added in version 1.2.0</p> <p>A Secrets Group provides a way to collect and assign a purpose to one or more Secrets. The Secrets Group can then be attached to any object that needs to reference and make use of these Secrets, such as a Git repository needing a username/token to authenticate to a private GitHub repository, or a device using a group of Secrets to drive its NAPALM integration.</p> <p>When creating or editing a Secrets Group, you can assign any number of defined Secrets to this group, assigning each secret an access type and a secret type that are unique within the context of this group. Some examples of how a Secrets Group might be populated for use by a given feature:</p> Feature Access Type Secrets Type(s) Git private repository <code>HTTP(S)</code> <code>Token</code>, possibly also <code>Username</code> Device NAPALM integration <code>Generic</code> <code>Username</code>, <code>Password</code>, possibly an enable <code>Secret</code> <p>A Secrets Group is not limited to containing secrets of a single access type either - for example, a plugin that supports both NETCONF and gNMI protocols to interact with a device could be able to make use of a Secrets Group containing distinct secrets for each protocol.</p>"},{"location":"core-functionality/secrets.html#accessing-secrets-in-code","title":"Accessing Secrets in Code","text":"<p>Accessing a Secret's value from code is as simple as calling its <code>get_value()</code> method. Providing an <code>obj</code> parameter for context is recommended so as to allow for proper handling of templated secret parameters:</p> <pre><code>&gt;&gt;&gt; secret = Secret.objects.get(slug=\"napalm-username\")\n&gt;&gt;&gt; secret.get_value()\n'user'\n&gt;&gt;&gt; secret = Secret.objects.get(slug=\"napalm-password\")\n&gt;&gt;&gt; secret.get_value(obj=device1)\n'secret-device1-password'\n</code></pre> <p>In the case where a secret's value cannot be retrieved successfully, Nautobot will raise a <code>SecretError</code> or one of its subclasses:</p> <pre><code>&gt;&gt;&gt; from nautobot.extras.secrets.exceptions import SecretError\n&gt;&gt;&gt; try:\n...     Secret.objects.get(slug=\"napalm-secret\").get_value()\n... except SecretError as exc:\n...     print(exc)\n...\nSecretValueNotFoundError: Secret \"NAPALM Secret\" (provider \"EnvironmentVariableSecretsProvider\"): Undefined environment variable \"NAPALM_SECRET\"!\n</code></pre> <p>In many cases, rather than accessing a specific Secret directly, you will be working with a Secrets Group instead. To retrieve the value of a specific secret within a group, use the group's <code>get_secret_value()</code> method, again with the option of providing an <code>obj</code> for template context:</p> <pre><code>&gt;&gt;&gt; secrets_group = SecretsGroup.objects.get(slug=\"netconf-credentials\")\n&gt;&gt;&gt; from nautobot.extras.choices import SecretsGroupAccessTypeChoices, SecretsGroupSecretTypeChoices\n&gt;&gt;&gt; secrets_group.get_secret_value(\n...     access_type=SecretsGroupAccessTypeChoices.TYPE_NETCONF,\n...     secret_type=SecretsGroupSecretTypeChoices.TYPE_USERNAME,\n...     obj=device1,\n... )\n\"user-device1\"\n</code></pre>"},{"location":"core-functionality/services.html","title":"Service Mapping","text":""},{"location":"core-functionality/services.html#services","title":"Services","text":"<p>A service represents a layer four TCP or UDP service available on a device or virtual machine. For example, you might want to document that an HTTP service is running on a device. Each service includes a name, protocol, and port number; for example, \"SSH (TCP/22)\" or \"DNS (UDP/53).\"</p> <p>A service may optionally be bound to one or more specific IP addresses belonging to its parent device or VM. (If no IP addresses are bound, the service is assumed to be reachable via any assigned IP address.)</p>"},{"location":"core-functionality/sites-and-racks.html","title":"Sites, Locations, and Racks","text":""},{"location":"core-functionality/sites-and-racks.html#sites","title":"Sites","text":"<p>How you choose to employ sites when modeling your network may vary depending on the nature of your organization, but generally a site will equate to a building or campus. For example, a chain of banks might create a site to represent each of its branches, a site for its corporate headquarters, and two additional sites for its presence in two co-location facilities.</p> <p>Each site must be assigned a unique name and operational <code>status</code> and may optionally be assigned to a region and/or tenant. The following operational statuses are available by default:</p> <ul> <li>Planned</li> <li>Staging</li> <li>Active</li> <li>Decommissioning</li> <li>Retired</li> </ul> <p>The site model also provides a facility ID field which can be used to annotate a facility ID (such as a data center name) associated with the site. Each site may also have an autonomous system (AS) number and time zone associated with it. (Time zones are provided by the pytz package.)</p> <p>The site model also includes several fields for storing contact and address information as well as geo-location data (GPS coordinates).</p> <p>Info</p> <p>In a future Nautobot release, sites may become just another Location Type, and the Site model may be collapsed into the Location model.</p>"},{"location":"core-functionality/sites-and-racks.html#regions","title":"Regions","text":"<p>Sites can be arranged geographically using regions. A region might represent a continent, country, city, campus, or other area depending on your use case. Regions can be nested recursively to construct a hierarchy. For example, you might define several country regions, and within each of those several state or city regions to which sites are assigned.</p> <p>Info</p> <p>In a future Nautobot release, regions may become another Location Type, and the Region model may be collapsed into the Location model.</p>"},{"location":"core-functionality/sites-and-racks.html#location-types","title":"Location Types","text":"<p>Added in version 1.4.0</p> <p>Before defining individual Locations, you must first define the hierarchy of Location Types that you wish to use for the organization of your network. An example hierarchy might be <code>Building \u2190 Floor \u2190 Room</code>, but you might have more or fewer distinct types depending on your specific organizational requirements.</p> <p>Each Location Type can define a set of \"content types\" that are permitted to associate to Locations of this type. For example, you might permit assigning Prefixes and VLAN Groups to an entire Building or Floor, but only allow Devices and Racks to be assigned to Rooms, never to a more abstract location. Doing so can help ensure consistency of your data.</p> <p>Added in version 1.5.0</p> <p>Location Types can now be marked as <code>nestable</code>. When this flag is set, Locations of this type may nest within one another, allowing for variable-depth hierarchies of Locations and reducing the number of distinct Location Types you may need to define. For example, with two Location Types, \"Building Group\" and \"Building\", by flagging \"Building Group\" as nestable, you could model the following hierarchy of Locations:</p> <ul> <li>Main Campus (Building Group)<ul> <li>West Campus (Building Group)<ul> <li>Building A (Building)</li> <li>Building B (Building)</li> </ul> </li> <li>East Campus (Building Group)<ul> <li>Building C (Building)</li> <li>Building D (Building)</li> </ul> </li> <li>South Campus (Building Group)<ul> <li>Western South Campus (Building Group)<ul> <li>Building G (Building)</li> </ul> </li> <li>Eastern South Campus (Building Group)<ul> <li>Building H (Building)</li> </ul> </li> </ul> </li> </ul> </li> <li>Satellite Campus (Building Group)<ul> <li>Building Z (Building)</li> </ul> </li> </ul> <p>Tip</p> <p>Although it is possible to define a \"tree\" of Location Types with multiple \"branches\", in the majority of cases doing so adds more unnecessary complexity than it's worth. Consider the following hypothetical Location Type tree:</p> <pre><code>Branch Office\n  \u21b3 Branch Floor\n      \u21b3 Branch Floor Room\n  \u21b3 Branch Basement\n      \u21b3 Branch Basement Room\nHeadquarters\n  \u21b3 Headquarters Floor\n      \u21b3 Headquarters Floor Room\n  \u21b3 Headquarters Basement\n      \u21b3 Headquarters Basement Room\n</code></pre> <p>This would complicate your life significantly when constructing queries, filters, and so forth to actually work with your data - for example, if you wanted a list of all Prefixes that are mapped to floors rather than individual rooms, you would now need to construct a query for Prefixes that are mapped to (a <code>Branch Floor</code> OR a <code>Headquarters Floor</code> OR a <code>Branch Basement</code> OR a <code>Headquarters Basement</code>). In most cases you would be better served with a far simpler \"linear\" sequence of Location Types, such as <code>Building \u2190 Floor \u2190 Room</code>; you could then use tags or custom fields to distinguish whether a given Building is a Branch Office or a Headquarters, if that distinction is even important to your network model.</p>"},{"location":"core-functionality/sites-and-racks.html#locations","title":"Locations","text":"<p>Added in version 1.4.0</p> <p>To locate network information more precisely than a Site defines, you can define a hierarchy of Locations within each Site. Data objects such as devices, prefixes, VLAN groups, etc. can thus be mapped or assigned to a specific building, wing, floor, room, etc. as appropriate to your needs.</p> <p>Once you have defined the hierarchy of Location Types that you wish to use, you can then define Locations. Any \"top-level\" Locations (those whose Location Type has no parent) belong directly to a Site, while \"child\" Locations belong to their immediate parent Location, rather than to the Site as a whole.</p> <p>Info</p> <p>At present, Locations fill the conceptual space between the more abstract Region and Site models and the more concrete Rack Group model. In a future Nautobot release, some or all of these other models may be collapsed into Locations. That is to say, in the future you might not deal with Regions and Sites as distinct models, but instead your Location Type hierarchy might include these higher-level categories, becoming something like Country \u2190 City \u2190 Site \u2190 Building \u2190 Floor \u2190 Room.</p> <p>Much like Sites, each Location must be assigned a name and operational <code>status</code>. The same default operational statuses are defined for Locations as for Sites, but as always, you can customize these to suit your needs. Locations can also be assigned to a tenant.</p>"},{"location":"core-functionality/sites-and-racks.html#racks","title":"Racks","text":"<p>The rack model represents a physical two- or four-post equipment rack in which devices can be installed. Each rack must be assigned to a site, and may optionally be assigned to a location, rack group, and/or tenant. Racks can also be organized by user-defined functional roles.</p> <p>Rack height is measured in rack units (U); racks are commonly between 42U and 48U tall, but Nautobot allows you to define racks of arbitrary height. A toggle is provided to indicate whether rack units are in ascending (from the ground up) or descending order.</p> <p>Each rack is assigned a name and (optionally) a separate facility ID. This is helpful when leasing space in a data center your organization does not own: The facility will often assign a seemingly arbitrary ID to a rack (for example, \"M204.313\") whereas internally you refer to is simply as \"R113.\" A unique serial number and asset tag may also be associated with each rack.</p> <p>A rack must be designated as one of the following types:</p> <ul> <li>2-post frame</li> <li>4-post frame</li> <li>4-post cabinet</li> <li>Wall-mounted frame</li> <li>Wall-mounted cabinet</li> </ul> <p>Similarly, each rack must be assigned an operational <code>status</code>. The following statuses are available by default:</p> <ul> <li>Reserved</li> <li>Available</li> <li>Planned</li> <li>Active</li> <li>Deprecated</li> </ul> <p>Each rack has two faces (front and rear) on which devices can be mounted. Rail-to-rail width may be 10, 19, 21, or 23 inches. The outer width and depth of a rack or cabinet can also be annotated in millimeters or inches.</p>"},{"location":"core-functionality/sites-and-racks.html#rack-groups","title":"Rack Groups","text":"<p>Racks can be organized into groups, which can be nested into themselves similar to regions. As with sites, how you choose to designate rack groups will depend on the nature of your organization.</p> <p>Each rack group must be assigned to a parent site (and optionally also a more specific location within that site). Rack groups may optionally be nested within one another to model a multi-level hierarchy.</p> <p>The name and facility ID of each rack within a group must be unique. (Racks not assigned to the same rack group may have identical names and/or facility IDs.)</p>"},{"location":"core-functionality/sites-and-racks.html#rack-roles","title":"Rack Roles","text":"<p>Each rack can optionally be assigned a user-defined functional role. For example, you might designate a rack for compute or storage resources, or to house co-located customer devices. Rack roles are fully customizable and may be color-coded.</p>"},{"location":"core-functionality/sites-and-racks.html#rack-reservations","title":"Rack Reservations","text":"<p>Users can reserve specific units within a rack for future use. An arbitrary set of units within a rack can be associated with a single reservation, but reservations cannot span multiple racks. A description is required for each reservation, reservations may optionally be associated with a specific tenant.</p>"},{"location":"core-functionality/tenancy.html","title":"Tenancy Assignment","text":""},{"location":"core-functionality/tenancy.html#tenants","title":"Tenants","text":"<p>A tenant represents a discrete grouping of resources used for administrative purposes. Typically, tenants are used to represent individual customers or internal departments within an organization. The following objects can be assigned to tenants:</p> <ul> <li>Sites</li> <li>Racks</li> <li>Rack reservations</li> <li>Devices</li> <li>VRFs</li> <li>Prefixes</li> <li>IP addresses</li> <li>VLANs</li> <li>Circuits</li> <li>Clusters</li> <li>Virtual machines</li> </ul> <p>Tenant assignment is used to signify the ownership of an object in Nautobot. As such, each object may only be owned by a single tenant. For example, if you have a firewall dedicated to a particular customer, you would assign it to the tenant which represents that customer. However, if the firewall serves multiple customers, it doesn't belong to any particular customer, so tenant assignment would not be appropriate.</p>"},{"location":"core-functionality/tenancy.html#tenant-groups","title":"Tenant Groups","text":"<p>Tenants can be organized by custom groups. For instance, you might create one group called \"Customers\" and one called \"Departments.\" The assignment of a tenant to a group is optional.</p> <p>Tenant groups may be nested recursively to achieve a multi-level hierarchy. For example, you might have a group called \"Customers\" containing subgroups of individual tenants grouped by product or account team.</p>"},{"location":"core-functionality/virtualization.html","title":"Virtualization","text":""},{"location":"core-functionality/virtualization.html#clusters","title":"Clusters","text":"<p>A cluster is a logical grouping of physical resources within which virtual machines run. A cluster must be assigned a type (technological classification), and may optionally be assigned to a cluster group, site, location, and/or tenant.</p> <p>Physical devices may be associated with clusters as hosts. This allows users to track on which host(s) a particular virtual machine may reside. However, Nautobot does not support pinning a specific VM within a cluster to a particular host device.</p>"},{"location":"core-functionality/virtualization.html#cluster-types","title":"Cluster Types","text":"<p>A cluster type represents a technology or mechanism by which a cluster is formed. For example, you might create a cluster type named \"VMware vSphere\" for a locally hosted cluster or \"DigitalOcean NYC3\" for one hosted by a cloud provider.</p>"},{"location":"core-functionality/virtualization.html#cluster-groups","title":"Cluster Groups","text":"<p>Cluster groups may be created for the purpose of organizing clusters. The arrangement of clusters into groups is optional.</p>"},{"location":"core-functionality/virtualization.html#virtual-machines","title":"Virtual Machines","text":"<p>A virtual machine represents a virtual compute instance hosted within a cluster. Each VM must be assigned to exactly one cluster.</p> <p>Like devices, each VM can be assigned a platform and/or functional role, and an operational <code>status</code>. The following statuses are available by default:</p> <ul> <li>Active</li> <li>Offline</li> <li>Planned</li> <li>Staged</li> <li>Failed</li> <li>Decommissioning</li> </ul> <p>Additional fields are available for annotating the vCPU count, memory (GB), and disk (GB) allocated to each VM. Each VM may optionally be assigned to a tenant. Virtual machines may have virtual interfaces assigned to them, but do not support any physical component.</p>"},{"location":"core-functionality/virtualization.html#interfaces","title":"Interfaces","text":"<p>Virtual machine interfaces behave similarly to device interfaces, and can be assigned IP addresses, VLANs, an operational <code>status</code> and services. However, given their virtual nature, they lack properties pertaining to physical attributes. For example, VM interfaces do not have a physical type and cannot have cables attached to them.</p> <p>The following operational statuses are available by default:</p> <ul> <li>Planned</li> <li>Maintenance</li> <li>Active</li> <li>Decommissioning</li> <li>Failed</li> </ul> <p>Added in version 1.4.0</p> <ul> <li>Added <code>bridge</code> field.</li> <li>Added <code>parent_interface</code> field.</li> <li>Added <code>status</code> field.</li> </ul>"},{"location":"core-functionality/vlans.html","title":"VLAN Management","text":""},{"location":"core-functionality/vlans.html#vlans","title":"VLANs","text":"<p>A VLAN represents an isolated layer two domain, identified by a name and a numeric ID (1-4094) as defined in IEEE 802.1Q. Each VLAN may be assigned to a site, location, tenant, and/or VLAN group.</p> <p>Each VLAN must be assigned a <code>status</code>. The following statuses are available by default:</p> <ul> <li>Active</li> <li>Reserved</li> <li>Deprecated</li> </ul> <p>As with prefixes, each VLAN may also be assigned a functional role. Prefixes and VLANs share the same set of customizable roles.</p> <p>Changed in version 1.5.9</p> <p>The maximum <code>name</code> length was increased from 64 characters to 255 characters.</p>"},{"location":"core-functionality/vlans.html#vlan-groups","title":"VLAN Groups","text":"<p>VLAN groups can be used to organize VLANs within Nautobot. Each group may optionally be assigned to a specific site or a location within a site, but a group cannot belong to multiple sites.</p> <p>Groups can also be used to enforce uniqueness: Each VLAN within a group must have a unique ID and name. VLANs which are not assigned to a group may have overlapping names and IDs (including VLANs which belong to a common site). For example, you can create two VLANs with ID 123, but they cannot both be assigned to the same group.</p>"},{"location":"development/index.html","title":"Nautobot Development","text":"<p>Nautobot is maintained as a GitHub project under the Apache 2 license. Users are encouraged to submit GitHub issues for feature requests and bug reports.</p>"},{"location":"development/index.html#governance","title":"Governance","text":"<p>Nautobot is a community-based Free Open Source Software (FOSS) project sponsored by Network to Code (NTC). As a network automation solution provider, Network to Code works with its clients around the world to craft and build network automation strategies and solutions, often tightly integrated with Nautobot serving as a Source of Truth and Network Automation Platform. The direction of this project will be shaped by the community as well as by input from NTC customers; independent of where requests come from, contributors will need to follow the Contributing Guidelines.</p> <p>The Nautobot Core Team is responsible for the direction and execution of the code that gets committed to the project.</p>"},{"location":"development/index.html#project-structure","title":"Project Structure","text":"<p>Nautobot components are arranged into functional subsections called apps (a carryover from Django vernacular). Each app holds the models, views, and templates relevant to a particular function:</p> <ul> <li><code>circuits</code>: Communications circuits and providers (not to be confused with power circuits)</li> <li><code>dcim</code>: Datacenter infrastructure management (sites, racks, and devices)</li> <li><code>extras</code>: Additional features not considered part of the core data model</li> <li><code>ipam</code>: IP address management (VRFs, prefixes, IP addresses, and VLANs)</li> <li><code>tenancy</code>: Tenants (such as customers) to which Nautobot objects may be assigned</li> <li><code>users</code>: Authentication and user preferences</li> <li><code>utilities</code>: Resources which are not user-facing (extendable classes, etc.)</li> <li><code>virtualization</code>: Virtual machines and clusters</li> </ul>"},{"location":"development/index.html#release-management","title":"Release Management","text":""},{"location":"development/index.html#roadmap","title":"Roadmap","text":"<p>In order to best understand how to contribute and where to open an issue or discussion, you should understand how work moves from idea to feature and how the roadmap is structured.</p> <p>There are three major \"buckets\" of work to be aware of within the lifecycle of getting contributions committed and released:</p> <ul> <li>Current - Work that is planned for the release currently being developed.</li> <li>Near Term - Work that is planned for one of the next two releases after the one currently being developed.</li> <li>Future - Work that needs more discussion and/or will be planned for a version three or more releases later.</li> </ul> <p>The following provides more detail on these.</p>"},{"location":"development/index.html#current","title":"Current","text":"<ul> <li>Current tickets (GitHub issues) that are being worked on for the current release or bugs that are found and will be fixed in the current release.</li> <li>Uses <code>current</code> label on GitHub.</li> <li>The GitHub Release Milestone will track items for the current release.</li> </ul>"},{"location":"development/index.html#near-term","title":"Near Term","text":"<ul> <li>Current tickets (GitHub issues) that are estimated to complete in one of the next two releases, e.g. 3-6 months to get into core, if accepted.</li> <li>GitHub discussions are used to create one or more GitHub issues when and if something moves from Future to Near Term.</li> <li>Uses <code>near-term</code> label on GitHub.</li> </ul>"},{"location":"development/index.html#future","title":"Future","text":"<ul> <li>Work that is for 3+ releases away or work that needs more free form discussions and brainstorming to better scope future bodies of work.</li> <li>Estimated 7+ months to get into core, if accepted.</li> <li>GitHub Discussions are used for collaborating on future work.</li> <li>If a GitHub issue is opened and is deemed that it is out of scope for Current or Near Term, it will be converted into a GitHub Discussion.</li> <li>GitHub Discussions will be closed when the topic/feature moves from Future to Near Term.</li> </ul> <p>Over time, the process of moving work from Future to Near Term to Current will continue to get further refined.</p> <p>Please read through the Nautobot Roadmap so you can understand the current backlog and roadmap and which items are already in Current, Near Term, and Future.</p>"},{"location":"development/index.html#versioning","title":"Versioning","text":"<p>Nautobot adheres to the Semantic Versioning (\"SemVer\") strategy, which gives us versions of the format <code>X.Y.Z</code>.</p> <ul> <li><code>X</code> is the major release number. Contains breaking changes or switching default behavior and shadowing legacy/deprecated behavior. May contain new functionality and bug fixes as well.</li> <li><code>Y</code> is the minor release number. Contains new functionality and bug fixes. May introduce deprecation warnings but will not remove or change default behavior.</li> <li><code>Z</code> is the patch release number. Will only contain bug fixes, security updates, and small feature enhancements aimed at addressing user-experience bugs.</li> </ul> <p>For more information, please visit SemVer.org.</p>"},{"location":"development/index.html#release-schedule","title":"Release Schedule","text":"<p>Nautobot aims to publish against following release schedule:</p> <ul> <li>One (1) major release per year</li> <li>Three (3) minor releases per year</li> <li>At minimum one (1) patch release every two weeks or more frequently as needed.</li> </ul> <p>Using <code>2.0</code> as a release cycle example, that would mean we would publish:</p> <ul> <li><code>2.0.z</code></li> <li><code>2.1.z</code></li> <li><code>2.2.z</code></li> <li><code>2.3.z</code></li> </ul> <p>After the third minor release (<code>2.3.0</code>), we would plan for another major release, in this case <code>3.0.0</code>.</p> <p>We estimate non-patch releases will be released quarterly but dates are not set in stone. Dates and notifications will occur by updating the GitHub Release Milestone and on Slack.</p> <p>An example of the release timeline for the <code>2.0</code> release cycle:</p> <p></p>"},{"location":"development/index.html#patch-releases","title":"Patch Releases","text":"<p>Specifics around patch releases:</p> <ul> <li>Will be released every two weeks on Mondays, starting March 7th, 2022.</li> <li>Will be focused on bugs, security vulnerabilities, backports, and other issues as they arise.</li> <li>Will not introduce significant new functionality except as needed to address a bug.</li> <li>Will not be released if there have been no new merges to <code>develop</code> since the previous release.</li> <li>Should not be considered a mandatory upgrade: If it does not fix a bug or issue you are experiencing, you should not feel the need to upgrade right away.</li> <li>May happen a day or two after the Monday schedule if Monday is an observed holiday. We would like to ensure full team availability post-release.</li> </ul> <p>Should a patch release contain a fix for security vulnerability(s) (i.e. CVE(s)), data-loss bug(s), or other critical issue(s), we will:</p> <ul> <li>Release a new patch release as soon as the fix has been identified, implemented, and thoroughly tested. No waiting for the next regularly scheduled release date.</li> <li>Bring special attention to these releases in our notification channels.</li> <li>Strongly urge you to upgrade to address these more serious issues as soon as possible.</li> <li>Not adjust any subsequent release dates (the next scheduled release will still occur as scheduled).</li> </ul>"},{"location":"development/index.html#maintenance-release-ltm","title":"Maintenance Release (LTM)","text":""},{"location":"development/index.html#overview","title":"Overview","text":"<p>For the sake of abundance in clarity, we are officially naming what is sometimes called an \"LTS\" release of software a \"Maintenance\" or \"Long Term Maintenance\" (LTM) release of Nautobot. The mindset is that we always aim to release stable software and in fact label the latest releases of the current major version of Nautobot as \"stable\" (as seen in our documentation and in our Docker container tags).</p> <p>New users who may choose to install an \"LTS\" release because it is assumed to be more stable, may almost immediately be presented with breaking changes upon their next upgrade to a \"stable\" Nautobot release. We want to avoid any confusion that may arise between the term \"stable\" representing our latest stable release compared to \"long term support\" which is commonly interpreted to represent a stable release.</p> <p>Our LTM release will be the last minor version of the previous major release train. At the time of this writing <code>1.5</code> will be our maintenance release train of Nautobot for the <code>1.y</code> release cycle. Version 1 of Nautobot had an extended release cycle as it was our first major release of the platform. Going forward it can be expected that the <code>x.3</code> version of the platform will be the maintenance train of any major version.</p> <p>With this schedule you can expect a few things per major/minor release:</p> <ul> <li><code>x.0.0</code><ul> <li>Introduce breaking changes.</li> <li>Changing default behavior for user interfaces, APIs, and functions.</li> <li>Removal of previous REST API versions and possibly some functions and classes.</li> </ul> </li> <li><code>x.1.z</code><ul> <li>Typical minor release, adding features, bug fixes, potential deprecations.</li> </ul> </li> <li><code>x.2.z</code><ul> <li>Removal of the remainder of deprecated functions, classes introduced in the previous major release (ex: only if deprecated in <code>1.y</code>, removed in <code>2.2</code>).</li> </ul> </li> <li><code>x.3.z</code><ul> <li>Maintenance release candidate.</li> <li>Features may be added in <code>x.3.0</code> but nothing further in this cycle.</li> </ul> </li> </ul> <p>A release will only be marked as \"In Maintenance\" when the next major release is published. Active bug fixes will be applied to a <code>x.3</code> until that time. Once a new major release has been published, the following will apply to the <code>x.3</code> codebase:</p> <ul> <li>Dependencies are frozen/pinned to a specific release; will only be upgraded if addressing a security vulnerability.</li> <li>Data loss and CVE-related fixes will be back ported from the new active release cycle. All other fixes will be back ported on a case-by-case basis.</li> <li>Patch releases for this phase will be on an as-needed basis.</li> <li>Core features from newer releases will never be back ported. In some cases, developer-centric features that ease the transition to the next major release train may be back ported if it is determined that they will alleviate transitions related to backwards incompatible changes.</li> </ul> <p>A maintenance release will be actively maintained until the next maintenance release is available, roughly a year from the launch of the previous one.</p>"},{"location":"development/index.html#launch-of-maintenance-release-schedule-as-an-example","title":"Launch of Maintenance Release Schedule (as an Example)","text":"<p>At the time of this writing we are in the active development of Nautobot 1.5. This will be our last minor release of the v1 series of releases and therefore become our first \"Long Term Maintenance\" (LTM) release of Nautobot. We will be actively applying the normal category of bug fixes (including UI tweaks, display bugs, etc.) to this release train until the release of Nautobot 2.0.</p> <p>Once we launch Nautobot 2.0, 1.5 will go into maintenance mode and be considered LTM, continuing to receive data loss and CVE-related fixes. At that time we will encourage users to migrate to v2 as they are ready. Nautobot 1.5 will continue to receive such fixes until the release of Nautobot 2.3, where we will end the maintenance of Nautobot 1.5 and it will formally become \"End of Life\" (EOL). Nautobot 2.3 will then become the LTM release until Nautobot 3.3 is published the following year.</p> <p>If for any reason the next maintenance release is delayed, we will continue to support the current maintenance release. There is no time limitation for this. We want to ensure our users always have a maintenance release available.</p>"},{"location":"development/index.html#deprecation-policy","title":"Deprecation Policy","text":"<p>Functionality, features, or Python primitives that have been deprecated will be planned to be removed in the following major train's <code>x.2</code> release (ex: if deprecated in <code>1.y</code>, removed in <code>2.2</code>).</p> <p>To provide assistance for knowing what features and functionality have been deprecated, additional transition features are as follows:</p> <ul> <li>Python primitives that have been deprecated will emit a <code>DeprecationWarning</code>, along with a message to which objects will be replacing them. The new objects may not be a direct replacement so please check the release notes and documentation for more migration information.</li> <li>Nautobot 1.2 introduced REST APIs versioning. Newer versions of the API become the default behavior on a major release (<code>x.0.0</code>) and older versions will be removed. For more information, see the Versioning section of our REST API documentation.</li> <li>We will drop support for Python versions on a case-by-case basis: A patch release may drop support for a Python version if a security update of a critical dependency would require split or conditional support. For example, if the dependency has not published a vulnerability fix for an older Python version, we will drop support at that time. All other cases will be documented and will tend to occur on minor release boundaries.</li> <li>Any deprecation notice (announcement or removal) will be available in our release notes.</li> </ul> <p>Backwards-Incompatible Changes and Deprecations</p> <p>Deprecated REST APIs will be removed in a <code>x.0.0</code> release. Deprecated REST APIs are kept intact during the same major release to simplify migrations to newer minor releases, however even subtle breaking changes in an <code>x.0.0</code> release can cause breaking changes to previous API versions. Therefore it is preferred to remove these API versions entirely to prevent accidental errors when their exact behavior cannot be kept intact.  Types of breaking REST API changes include, but are not limited to, renaming of fields or filters, removing or collapsing of data models, and changing object relationships. This will also mean we will not publish deprecated APIs for models that no longer exist.</p> <p>For example, in the upcoming <code>2.0.0</code> release we plan to collapse <code>Site</code> and <code>Region</code> to be <code>LocationType</code>s. This means there would no longer be a <code>site</code> property on objects such as <code>Device</code> as well as no <code>/api/dcim/sites</code> or <code>/api/dcim/regions</code> API endpoints.</p> <p>Previously deprecated Python APIs may still be kept around on a case-by-case basis if adapting those changes are minimal, but in the example above, <code>.site</code> will no longer be an available property on <code>Device</code>.</p> <p>We will document in major releases how breaking changes will affect existing APIs and Python primitives. Backwards-compatible changes would still be kept around following the normal deprecation policy.</p>"},{"location":"development/index.html#communication","title":"Communication","text":"<p>Communication among the contributors should always occur via public channels. The following outlines the best ways to communicate and engage on all things Nautobot.</p>"},{"location":"development/index.html#slack","title":"Slack","text":"<ul> <li>#nautobot on Network to Code Slack - Good for quick chats. Avoid any discussion that might need to be referenced later on, as the chat history is not retained long.</li> </ul>"},{"location":"development/index.html#github","title":"GitHub","text":"<ul> <li>GitHub issues - All feature requests, bug reports, and other substantial changes should be documented in an issue.</li> <li>GitHub discussions - The preferred forum for general discussion and support issues. Ideal for shaping a feature request prior to submitting an issue.</li> </ul> <p>GitHub's discussions are the best place to get help or propose rough ideas for new functionality. Their integration with GitHub allows for easily cross- referencing and converting posts to issues as needed. There are several categories for discussions:</p> <ul> <li>General - General community discussion.</li> <li>Ideas - Ideas for new functionality that isn't yet ready for a formal   feature request. These ideas are what will be in scope to review when moving work from Future to Near Term as stated in the previous section.</li> <li>Q&amp;A - Request help with installing or using Nautobot.</li> </ul>"},{"location":"development/index.html#contributing","title":"Contributing","text":"<p>We welcome many forms of contributions to Nautobot. While we understand most contributions will commonly come from developers, we encourage others to contribute in the form of docs, tutorials, and user guides. If you have other ideas for contributing, don't hesitate to open an issue or have a discussion in one of the forums above.</p> <p>Please also take a chance to look at our Wiki on GitHub to review any specifics as to how we define and scope work as a community.</p>"},{"location":"development/index.html#reporting-bugs","title":"Reporting Bugs","text":"<ul> <li> <p>First, ensure that you're running the latest stable version   of Nautobot. If you're running an older version, it's possible that the bug has   already been fixed.</p> </li> <li> <p>Next, check the GitHub issues list   to see if the bug you've found has already been reported. If you think you may   be experiencing a reported issue that hasn't already been resolved, please   click \"add a reaction\" in the top right corner of the issue and add a thumbs   up (+1). You might also want to add a comment describing how it's affecting your installation. This will allow us to prioritize bugs based on how many users are affected.</p> </li> <li> <p>When submitting an issue, please be as descriptive as possible. Be sure to   provide all information request in the issue template, including:</p> <ul> <li>The environment in which Nautobot is running</li> <li>The exact steps that can be taken to reproduce the issue</li> <li>Expected and observed behavior</li> <li>Any error messages generated</li> <li>Screenshots (if applicable)</li> </ul> </li> <li> <p>Please avoid prepending any sort of tag (e.g. \"[Bug]\") to the issue title.   The issue will be reviewed by a maintainer after submission and the appropriate   labels will be applied for categorization.</p> </li> <li> <p>Keep in mind that bugs are prioritized based on their severity and how much   work is required to resolve them. It may take some time for someone to address   your issue.</p> </li> </ul> <p>Bugs will follow our published workflow from inbound triage to ultimate terminal state, whether accepted or closed:</p> <p></p>"},{"location":"development/index.html#opening-feature-requests","title":"Opening Feature Requests","text":"<ul> <li> <p>First, check the GitHub issues   list and   Discussions to see if the   feature you're requesting is already listed. You can greater visibility on the   committed by looking at the Nautobot   Roadmap (Be sure to search   closed issues as well, since some feature requests have not have been accepted.)   If the feature you'd like to see has already been requested and is open, click   \"add a reaction\" in the top right corner of the issue and add a thumbs up (+1).   This ensures that the issue has a better chance of receiving attention. Also   feel free to add a comment with any additional justification for the feature.   (However, note that comments with no substance other than a \"+1\" will be deleted. Please use GitHub's reactions feature to indicate your support.)</p> </li> <li> <p>Before filing a new feature request, consider starting with a GitHub   Discussion. Feedback you receive there will help validate and shape the proposed feature before filing a formal issue. If the feature request does not get accepted into the current or near term backlog, it will get converted to a Discussion anyway.</p> </li> <li> <p>Good feature requests are very narrowly defined. Be sure to thoroughly   describe the functionality and data model(s) being proposed. The more effort you put into writing a feature request, the better its chance is of being   implemented. Overly broad feature requests will be closed.</p> </li> <li> <p>When submitting a feature request on GitHub, be sure to include all   information requested by the issue template, including:</p> <ul> <li>A detailed description of the proposed functionality</li> <li>A use case for the feature; who would use it and what value it would add to Nautobot</li> <li>A rough description of changes necessary to the database schema (if applicable)</li> <li>Any third-party libraries or other resources which would be involved</li> <li>Please avoid prepending any sort of tag (e.g. \"[Feature]\") to the issue title.</li> </ul> </li> </ul> <p>The issue will be reviewed by a moderator after submission and the appropriate labels will be applied for categorization.</p> <p>Feature requests will follow our published workflow from inbound triage to ultimate terminal state, whether accepted or closed:</p> <p></p>"},{"location":"development/index.html#submitting-pull-requests","title":"Submitting Pull Requests","text":"<ul> <li> <p>If you're interested in contributing to Nautobot, be sure to check out our   getting started   documentation for tips on setting up your development environment.</p> </li> <li> <p>It is recommended to open an issue before starting work on a pull request, and discuss your idea with the Nautobot maintainers before beginning work. This will help prevent wasting time on something that we might not be able to implement. When suggesting a new feature, also make sure it won't conflict with any work that's already in progress.</p> </li> <li> <p>Once you've opened or identified an issue you'd like to work on, ask that it   be assigned to you so that others are aware it's being worked on. A maintainer   will then mark the issue as \"accepted.\"</p> </li> <li> <p>If you followed the project guidelines, have ample tests, code quality, you will first be acknowledged for your work. So, thank you in advance! After that, the PR will be quickly reviewed to ensure that it makes sense as a contribution to the project, and to gauge the work effort or issues with merging into current. If the effort required by the core team isn\u2019t trivial, it\u2019ll likely still be a few weeks before it gets thoroughly reviewed and merged, thus it won't be uncommon to move it to near term with a <code>near-term</code> label. It will just depend on the current backlog.</p> </li> <li> <p>All code submissions should meet the following criteria (CI will enforce   these checks):</p> <ul> <li>Python syntax is valid</li> <li>All unit tests pass successfully</li> <li>PEP 8 compliance is enforced, with the exception that lines may be   greater than 80 characters in length</li> <li>At least one changelog fragment has   been included in the feature branch</li> </ul> </li> </ul>"},{"location":"development/index.html#creating-changelog-fragments","title":"Creating Changelog Fragments","text":"<p>All pull requests to <code>next</code> or <code>develop</code> must include a changelog fragment file in the <code>./changes</code> directory. To create a fragment, use your github issue number and fragment type as the filename. For example, <code>2362.added</code>. Valid fragment types are <code>added</code>, <code>changed</code>, <code>dependencies</code>, <code>deprecated</code>, <code>fixed</code>, <code>removed</code>, and <code>security</code>. The change summary is added to the file in plain text. Change summaries should be complete sentences, starting with a capital letter and ending with a period, and be in past tense. Each line of the change fragment will generate a single change entry in the release notes. Use multiple lines in the same file if your change needs to generate multiple release notes in the same category. If the change needs to create multiple entries in separate categories, create multiple files.</p> <p>Example</p> <p>Wrong changes/1234.fixed<pre><code>fix critical bug in documentation\n</code></pre></p> <p>Right changes/1234.fixed<pre><code>Fixed critical bug in documentation.\n</code></pre></p> <p>Multiple Entry Example</p> <p>This will generate 2 entries in the <code>fixed</code> category and one entry in the <code>changed</code> category.</p> changes/1234.fixed<pre><code>Fixed critical bug in documentation.\nFixed release notes generation.\n</code></pre> changes/1234.changed<pre><code>Changed release notes generation.\n</code></pre>"},{"location":"development/application-registry.html","title":"Application Registry","text":"<p>The registry is an in-memory data structure which houses various application-wide parameters, such as the list of enabled plugins. It is not exposed to the user and is not intended to be modified by any code outside of Nautobot core.</p> <p>The registry behaves essentially like a Python dictionary, with the notable exception that once a store (key) has been declared, it cannot be deleted or overwritten. The value of a store can, however, be modified; e.g. by appending a value to a list. Store values generally do not change once the application has been initialized.</p> <p>The registry can be inspected by importing <code>registry</code> from <code>nautobot.extras.registry</code>. Page templates that need access to the registry can use the <code>registry</code> template tag to load it into the template context, for example:</p> <pre><code>&lt;!-- Load the \"registry\" template tag library --&gt;\n{% load registry %}\n&lt;!-- Load the registry into the template context as variable \"registry\"--&gt;\n{% registry %}\n&lt;!-- Use the registry variable in the template --&gt;\n{{ registry.datasource_contents }}\n</code></pre>"},{"location":"development/application-registry.html#stores","title":"Stores","text":""},{"location":"development/application-registry.html#datasource_contents","title":"<code>datasource_contents</code>","text":"<p>Definition of data types that can be provided by data source models (such as Git repositories). Implemented as a dictionary mapping the data source model name to a list of the types of data that it may contain and callback functions associated with those data types. The default mapping in Nautobot is currently:</p> <pre><code>{\n\"extras.gitrepository\": [\nDatasourceContent(\nname='config contexts',\ncontent_identifier='extras.configcontext',\nicon='mdi-code-json',\ncallback=extras.datasources.git.refresh_git_config_contexts,\n),\nDatasourceContent(\nname='jobs',\ncontent_identifier='extras.job',\nicon='mdi-script-text',\ncallback=extras.datasources.git.refresh_git_jobs,\n),\nDatasourceContent(\nname='export templates',\ncontent_identifier='extras.exporttemplate',\nicon='mdi-database-export',\ncallback=extras.datasources.git.refresh_git_export_templates,\n),\n]\n}\n</code></pre> <p>Plugins may extend this dictionary with additional data sources and/or data types by calling <code>extras.registry.register_datasource_contents()</code> as desired.</p>"},{"location":"development/application-registry.html#homepage_layout","title":"<code>homepage_layout</code>","text":"<p>Added in version 1.2.0</p> <p>A dictionary holding information about the layout of Nautobot's homepage. Each app may register homepage panels and items using objects from the generic app class. Each object has a weight attribute allowing the developer to define the position of the object.</p> <pre><code>{\n\"panels\": {\n\"Panel 1\" {\n\"weight\": 100,\n\"items\": {\n\"Item 1\": {\n\"description\": \"This is item 1\",\n\"link\": \"example.link_1\"\n\"model\": Example,\n\"permissions\": \"example.view_link_1\",\n\"weight\": 100,\n},\n\"Item 2\": {\n\"description\": \"This is item 2\",\n\"link\": \"example.link_2\"\n\"model\": Example,\n\"permissions\": \"example.view_link_2\",\n\"weight\": 200,\n}\n}\n}\n\"Panel 2\": {\n\"weight\": 200,\n\"custom_template\": \"panel_example.html\",\n\"custom_data\": {\n\"example\": example_callback_function,\n},\n}\n}\n}\n</code></pre>"},{"location":"development/application-registry.html#model_features","title":"<code>model_features</code>","text":"<p>A dictionary of particular features (e.g. custom fields) mapped to the Nautobot models which support them, arranged by app. For example:</p> <pre><code>{\n'custom_fields': {\n'circuits': ['provider', 'circuit'],\n'dcim': ['site', 'rack', 'devicetype', ...],\n...\n},\n'webhooks': {\n...\n},\n...\n}\n</code></pre>"},{"location":"development/application-registry.html#nav_menu","title":"<code>nav_menu</code>","text":"<p>Added in version 1.1.0</p> <p>Navigation menu items provided by Nautobot applications. Each app may register its navbar configuration inside of the <code>nav_menu</code> dictionary using <code>navigation.py</code>. Tabs are stored in the top level moving down to groups, items and buttons. Tabs, groups and items can be modified by using the key values inside other application and plugins. The <code>nav_menu</code> dict should never be modified directly.</p> <p>Example:</p> <pre><code>{\n\"tabs\": {\n\"tab_1\": {\n\"weight\": 100,\n\"permissions\": [],\n\"groups\": {\n\"group_1\":{\n\"weight\": 100,\n\"permissions\": [],\n\"items\": {\n\"item_link_1\": {\n\"link_text\": \"Item 1\",\n\"weight\": 100,\n\"permissions\": [],\n\"buttons\": {\n\"button_1\": {\n\"button_class\": \"success\",\n\"icon_class\": \"mdi-plus-thick\",\n\"link\": \"button_link_1\",\n\"weight\": 100,\n\"permissions\": [],\n},\n\"button_2\": {\n\"button_class\": \"success\",\n\"icon_class\": \"mdi-plus-thick\",\n\"link\": \"button_link_2\",\n\"weight\": 200,\n\"permissions\": [],\n}\n}\n},\n\"item_link_2\": {\n\"link_text\": \"Item 2\",\n\"weight\": 200,\n\"permissions\": [],\n\"buttons\": {\n\"button_1\": {\n\"button_class\": \"success\",\n\"icon_class\": \"mdi-plus-thick\",\n\"link\": \"button_link_1\",\n\"weight\": 100,\n\"permissions\": [],\n},\n\"button_2\": {\n\"button_class\": \"success\",\n\"icon_class\": \"mdi-plus-thick\",\n\"link\": \"button_link_2\",\n\"weight\": 200,\n\"permissions\": [],\n}\n}\n},\n}\n}\n}\n}\n}\n}\n</code></pre>"},{"location":"development/application-registry.html#plugin_custom_validators","title":"<code>plugin_custom_validators</code>","text":"<p>Plugin custom validator classes that provide additional data model validation logic. Implemented as a dictionary mapping data model names to a list of <code>CustomValidator</code> subclasses, for example:</p> <pre><code>{\n'circuits.circuit': [CircuitMustHaveDescriptionValidator],\n'dcim.site': [SiteMustHaveRegionValidator, SiteNameMustIncludeCountryCodeValidator],\n}\n</code></pre>"},{"location":"development/application-registry.html#plugin_graphql_types","title":"<code>plugin_graphql_types</code>","text":"<p>List of GraphQL Type objects that will be added to the GraphQL schema. GraphQL objects that are defined in a plugin will be automatically registered into this registry. An example:</p> <pre><code>[\n&lt;DjangoObjectType&gt;, &lt;DjangoObjectType&gt;, &lt;OptimizedDjangoObjectType&gt;\n]\n</code></pre>"},{"location":"development/application-registry.html#plugin_jobs","title":"<code>plugin_jobs</code>","text":"<p>Jobs provided by plugins. A list of <code>Job</code> classes, for example:</p> <pre><code>[\ndemo_data_plugin.jobs.CreateDemoData,\ndemo_data_plugin.jobs.DestroyDemoData,\nbranch_creation_plugin.jobs.CreateNewSmallBranch,\nbranch_creation_plugin.jobs.CreateNewMediumBranch,\nbranch_creation_plugin.jobs.CreateNewLargeBranch,\n]\n</code></pre>"},{"location":"development/application-registry.html#plugin_template_extensions","title":"<code>plugin_template_extensions</code>","text":"<p>Plugin content that gets embedded into core Nautobot templates. The store comprises Nautobot models registered as dictionary keys, each pointing to a list of applicable template extension classes that exist. An example:</p> <pre><code>{\n'dcim.site': [\n&lt;TemplateExtension&gt;, &lt;TemplateExtension&gt;, &lt;TemplateExtension&gt;,\n],\n'dcim.rack': [\n&lt;TemplateExtension&gt;, &lt;TemplateExtension&gt;,\n],\n}\n</code></pre>"},{"location":"development/best-practices.html","title":"Best Practices","text":"<p>While there are many different development interfaces in Nautobot that each expose unique functionality, there are a common set of a best practices that have broad applicability to users and developers alike. This includes elements of writing Jobs, Plugins, and scripts for execution through the <code>nbshell</code>.</p> <p>The below best practices apply to test code as well as feature code, and there are additional test-specific best practices to be aware of as well.</p>"},{"location":"development/best-practices.html#base-classes","title":"Base Classes","text":"<p>For models that support change-logging, custom fields, and relationships (which includes all subclasses of <code>OrganizationalModel</code> and <code>PrimaryModel</code>), the \"Full-featured models\" base classes below should always be used. For less full-featured models, refer to the \"Minimal models\" column instead.</p> Feature Full-featured models Minimal models FilterSets <code>NautobotFilterSet</code> <code>BaseFilterSet</code> Object create/edit forms <code>NautobotModelForm</code> <code>BootstrapMixin</code> Object bulk-edit forms <code>NautobotBulkEditForm</code> <code>BootstrapMixin</code> Table filter forms <code>NautobotFilterForm</code> <code>BootstrapMixin</code> Read-only serializers <code>BaseModelSerializer</code> <code>BaseModelSerializer</code> Nested serializers <code>WritableNestedSerializer</code> <code>WritableNestedSerializer</code> All other serializers <code>NautobotModelSerializer</code> <code>ValidatedModelSerializer</code> API View Sets <code>NautobotModelViewSet</code> <code>ModelViewSet</code>"},{"location":"development/best-practices.html#model-existence-in-the-database","title":"Model Existence in the Database","text":"<p>A common Django pattern is to check whether a model instance's primary key (<code>pk</code>) field is set as a proxy for whether the instance has been written to the database or whether it exists only in memory. Because of the way Nautobot's UUID primary keys are implemented, this check will not work as expected because model instances are assigned a UUID in memory at instance creation time, not at the time they are written to the database (when the model's <code>save()</code> method is called). Instead, for any model which inherits from <code>nautobot.core.models.BaseModel</code>, you should check an instance's <code>present_in_database</code> property which will be either <code>True</code> or <code>False</code>.</p> <p>Instead of:</p> <pre><code>if instance.pk:\n# Are we working with an existing instance in the database?\n# Actually, the above check doesn't tell us one way or the other!\n...\nelse:\n# Will never be reached!\n...\n</code></pre> <p>Use:</p> <pre><code>if instance.present_in_database:\n# We're working with an existing instance in the database!\n...\nelse:\n# We're working with a newly created instance not yet written to the database!\n...\n</code></pre> <p>Note</p> <p>There is one case where a model instance will have a null primary key, and that is the case where it has been removed from the database and is in the process of being deleted. For most purposes, this is not the case you are intending to check!</p>"},{"location":"development/best-practices.html#model-validation","title":"Model Validation","text":"<p>Django offers several places and mechanism in which to exert data and model validation. All model specific validation should occur within the model's <code>clean()</code> method or field specific validators. This ensures the validation logic runs and is consistent through the various Nautobot interfaces (Web UI, REST API, ORM, etc).</p>"},{"location":"development/best-practices.html#consuming-model-validation","title":"Consuming Model Validation","text":"<p>Django places specific separation between validation and the saving of an instance and this means it is a common Django pattern to make explicit calls first to a model instance's <code>clean()</code>/<code>full_clean()</code> methods and then the <code>save()</code> method. Calling only the <code>save()</code> method does not automatically enforce validation and may lead to data integrity issues.</p> <p>Nautobot provides a convenience method that both enforces model validation and saves the instance in a single call to <code>validated_save()</code>. Any model which inherits from <code>nautobot.core.models.BaseModel</code> has this method available. This includes all core models and it is recommended that all new Nautobot models and plugin-provided models also inherit from <code>BaseModel</code> or one of its descendants such as <code>nautobot.core.models.generics.OrganizationalModel</code> or <code>nautobot.core.models.generics.PrimaryModel</code>.</p> <p>The intended audience for the <code>validated_save()</code> convenience method is Job authors and anyone writing scripts for, or interacting with the ORM directly through the <code>nbshell</code> command. It is generally not recommended however, to use <code>validated_save()</code> as a blanket replacement for the <code>save()</code> method in the core of Nautobot.</p> <p>During execution, should model validation fail, <code>validated_save()</code> will raise <code>django.core.exceptions.ValidationError</code> in the normal Django fashion.</p>"},{"location":"development/best-practices.html#slug-field","title":"Slug Field","text":"<p>Moving forward in Nautobot, all models should have a <code>slug</code> field. This field can be safely/correctly used in URL patterns, dictionary keys, GraphQL and REST API. Nautobot has provided the <code>AutoSlugField</code> to handle automatically populating the <code>slug</code> field from another field(s). Generally speaking model slugs should be populated from the <code>name</code> field. Below is an example on defining the <code>slug</code> field.</p> <pre><code>from django.db import models\nfrom nautobot.core.fields import AutoSlugField\nfrom nautobot.core.models.generics import PrimaryModel\nclass ExampleModel(PrimaryModel):\nname = models.CharField(max_length=100, unique=True)\nslug = AutoSlugField(populate_from='name')\n</code></pre>"},{"location":"development/best-practices.html#getting-url-routes","title":"Getting URL Routes","text":"<p>When developing new models a need often arises to retrieve a reversible route for a model to access it in either the web UI or the REST API. When this time comes, you must use <code>nautobot.utilities.utils.get_route_for_model</code>. You must not write your own logic to construct route names.</p> <pre><code>from nautobot.utilities.utils import get_route_for_model\n</code></pre> <p>This utility function supports both UI and API views for both Nautobot core apps and Nautobot plugins.</p> <p>Added in version 1.4.3</p> <p>Support for generating API routes was added to <code>get_route_for_model()</code> by passing the argument <code>api=True</code>.</p>"},{"location":"development/best-practices.html#ui-routes","title":"UI Routes","text":"<p>Instead of:</p> <pre><code>route = f\"{model._meta.app_label}:{model._meta.model_name}_list\"\nif model._meta.app_label in settings.PLUGINS:\nroute = f\"plugins:{route}\"\n</code></pre> <p>Use:</p> <pre><code>route = get_route_for_model(model, \"list\")\n</code></pre>"},{"location":"development/best-practices.html#rest-api-routes","title":"REST API Routes","text":"<p>Instead of:</p> <pre><code>api_route = f\"{model._meta.app_label}-api:{model._meta.model_name}-list\"\nif model._meta.app_label in settings.PLUGINS:\napi_route = f\"plugins-api:{api_route}\"\n</code></pre> <p>Use:</p> <pre><code>api_route = get_route_for_model(model, \"list\", api=True)\n</code></pre>"},{"location":"development/best-practices.html#examples","title":"Examples","text":"<p>Core models:</p> <pre><code>&gt;&gt;&gt; get_route_for_model(Device, \"list\")\n\"dcim:device_list\"\n&gt;&gt;&gt; get_route_for_model(Device, \"list\", api=True)\n\"dcim-api:device-list\"\n</code></pre> <p>Plugin models:</p> <pre><code>&gt;&gt;&gt; get_route_for_model(ExampleModel, \"list\")\n\"plugins:example_plugin:examplemodel_list\"\n&gt;&gt;&gt; get_route_for_model(ExampleModel, \"list\", api=True)\n\"plugins-api:example_plugin-api:examplemodel-list\"\n</code></pre> <p>Tip</p> <p>The first argument may also optionally be an instance of a model, or a string using the dotted notation of <code>{app_label}.{model}</code> (e.g. <code>dcim.device</code>).</p> <p>Using an instance:</p> <pre><code>&gt;&gt;&gt; instance = Device.objects.first()\n&gt;&gt;&gt; get_route_for_model(instance, \"list\")\n\"dcim:device_list\"\n</code></pre> <p>Using dotted notation:</p> <pre><code>&gt;&gt;&gt; get_route_for_model(\"dcim.device\", \"list\")\n\"dcim:device_list\"\n</code></pre>"},{"location":"development/best-practices.html#filtering-models-with-filtersets","title":"Filtering Models with FilterSets","text":"<p>The following best practices must be considered when establishing new <code>FilterSet</code> classes for model classes.</p>"},{"location":"development/best-practices.html#mapping-model-fields-to-filters","title":"Mapping Model Fields to Filters","text":"<ul> <li>Filtersets must inherit from <code>nautobot.extras.filters.NautobotFilterSet</code> (which inherits from <code>nautobot.utilities.filters.BaseFilterSet</code>)<ul> <li>This affords that automatically generated lookup expressions (<code>ic</code>, <code>nic</code>, <code>iew</code>, <code>niew</code>, etc.) are always included</li> <li>This also asserts that the correct underlying <code>Form</code> class that maps the generated form field types and widgets will be included</li> </ul> </li> <li>FIltersets must publish all model fields from a model, including related fields.<ul> <li>All fields should be provided using <code>Meta.fields = \"__all__\"</code> and this would be preferable for the first and common case as it requires the least maintanence and overhead and asserts parity between the model fields and the filterset filters.</li> <li>In some cases simply excluding certain fields would be the next most preferable e.g. <code>Meta.exclude = [\"unwanted_field\", \"other_unwanted_field\"]</code></li> <li>Finally, the last resort should be explicitly declaring the desired fields using <code>Meta.fields =</code>. This should be avoided because it incurs the highest technical debt in maintaining alignment between model fields and filters.</li> </ul> </li> <li>In the event that fields do need to be customized to extend lookup expressions, a dictionary of field names mapped to a list of lookups may be used, however, this pattern is only compatible with explicitly declaring all fields, which should also be avoided for the common case. For example:</li> </ul> <pre><code>class UserFilter(NautobotFilterSet):\nclass Meta:\nmodel = User\nfields = {\n'username': ['exact', 'contains'],\n'last_login': ['exact', 'year__gt'],\n}\n</code></pre> <ul> <li>It is acceptable that default filter mappings may need to be overridden with custom filter declarations, but <code>filter_overrides</code> (see below) should be used as a first resort.</li> <li>Custom filter definitions must not shadow the name of an existing model field if it is also changing the type.<ul> <li>For example <code>DeviceFilterSet.interfaces</code> is a <code>BooleanFilter</code> that is shadowing the <code>Device.interfaces</code> related manager. This introduces problems with automatic introspection of the filterset and this pattern must be avoided.</li> </ul> </li> <li>For foreign-key related fields, on existing core models in the v1.3 release train:<ul> <li>The field should be shadowed, replacing the PK filter with a lookup-based on a more human-readable value (typically <code>slug</code>, if available).</li> </ul> </li> </ul> <pre><code>    provider = NaturalKeyorPKMultipleChoiceFilter(\nqueryset=Provider.objects.all(),\nlabel=\"Provider (ID or slug)\",\n)\n</code></pre> <ul> <li>For foreign-key related fields on new core models for v1.4 or later:<ul> <li>The field must be shadowed utilizing a hybrid <code>NaturalKeyOrPKMultipleChoiceFilter</code> which will automatically try to lookup by UUID or <code>slug</code> depending on the value of the incoming argument (e.g. UUID string vs. slug string).</li> <li>Fields that use <code>name</code> instead of <code>slug</code> can set the <code>natural_key</code> argument on <code>NaturalKeyOrPKMultipleChoiceFilter</code>.</li> <li>In default settings for filtersets, when not using <code>NaturalKeyOrPKMultipleChoiceFilter</code>, <code>provider</code> would be a <code>pk</code> (UUID) field, whereas using <code>NaturalKeyOrPKMultipleChoiceFilter</code> will automatically support both input values for <code>slug</code> or <code>pk</code>.</li> <li>New filtersets should follow this direction vs. propagating the need to continue to overload the default foreign-key filter and define an additional <code>_id</code> filter on each new filterset. We know that most existing FilterSets aren't following this pattern, and we plan to change that in a major release.</li> <li>Using the previous field (<code>provider</code>) as an example, it would look something like this:</li> </ul> </li> </ul> <pre><code>    from nautobot.utilities.filters import NaturalKeyOrPKMultipleChoiceFilter\nprovider = NaturalKeyOrPKMultipleChoiceFilter(\nqueryset=Provider.objects.all(),\nlabel=\"Provider (slug or ID)\",\n)\n# optionally use the to_field_name argument to set the field to name instead of slug\nprovider = NaturalKeyOrPKMultipleChoiceFilter(\nto_field_name=\"name\",\nqueryset=Provider.objects.all(),\nlabel=\"Provider (name or ID)\",\n)\n</code></pre>"},{"location":"development/best-practices.html#filter-naming-and-definition","title":"Filter Naming and Definition","text":"<ul> <li> <p>Boolean filters for membership must be named with <code>has_{related_name}</code> (e.g. <code>has_interfaces</code>)</p> </li> <li> <p>Boolean filters for identity must be named with <code>is_{name}</code> (e.g. <code>is_virtual_chassis</code>) although this is semantically identical to <code>has_</code> filters, there may be occasions where naming the filter <code>is_</code> would be more intuitive.</p> </li> <li> <p>Filters must declare <code>field_name</code> when they have a different name than the underlying model field they are referencing. Where possible the suffix component of the filter name must map directly to the underlying field name.</p> </li> </ul> <p>For example, <code>DeviceFilterSet.has_console_ports</code> could be better named, to assert that the filter name following the <code>has_</code> prefix is a one-to-one mapping to the underlying model's related field name (<code>consoleports</code>) therefore <code>field_name</code> must point to the field name as defined on the model:</p> <pre><code>    has_consoleports = BooleanFilter(field_name=\"consoleports\")\n</code></pre> <ul> <li>Filters must be declared using the appropriate lookup expression (<code>lookup_expr</code>) if any other expression than <code>exact</code> (the default) is required. For example:</li> </ul> <pre><code>   has_consoleports = BooleanFilter(field_name=\"consoleports\", lookup_expr=\"isnull\")\n</code></pre> <ul> <li>Filters must be declared using <code>exclude=True</code> if a queryset <code>.exclude()</code> is required to be called vs. queryset <code>.filter()</code> which is the default when the filter default <code>exclude=False</code> is passed through. If you require <code>Foo.objects.exclude()</code>, you must pass <code>exclude=True</code> instead of defining a filterset method to explicitly hard-code such a query. For example:</li> </ul> <pre><code>   has_consoleports = BooleanFilter(field_name=\"consoleports\", lookup_expr=\"isnull\", exclude=True)\n</code></pre> <ul> <li> <p>Filters must be declared using <code>disinct=True</code> if a queryset <code>.distinct()</code>is required to be called on the queryset</p> </li> <li> <p>Filters must not be set to be required using <code>required=True</code></p> </li> <li> <p>Filter methods defined using the <code>method=</code> keyword argument may only be used as a last resort (see below) when correct usage of <code>field_name</code>, <code>lookup_expr</code>, <code>exclude</code>, or other filter keyword arguments do not suffice. In other words: filter methods should used as the exception and not the rule.</p> </li> <li> <p>Use of <code>filter_overrides</code> must be considered in cases where more-specific class-local overrides. The need may ocassionally arise to change certain filter-level arguments used for filter generation, such such as changing a filter class, or customizing a UI widget. Any <code>extra</code> arguments are sent to the filter as keyword arguments at instance creation time. (Hint: <code>extra</code> must be a callable)</p> <p>For example:</p> </li> </ul> <pre><code>class ProductFilter(NautobotFilterSet):\nclass Meta:\nmodel = Interface\nfields = \"__all__\"\nfilter_overrides = {\n# This would change the default to all CharFields to use lookup_expr=\"icontains\". It\n# would also pass in the custom `choices` generated by the `generate_choices()`\n# function.\nmodels.CharField: {\n\"filter_class\": filters.MultiValueCharFilter,\n\"extra\": lambda f: {\n\"lookup_expr\": \"icontains\",\n\"choices\": generate_choices(),\n},\n},\n# This would make BooleanFields use a radio select widget vs. the default of checkbox\nmodels.BooleanField: {\n\"extra\": lambda f: {\n\"widget\": forms.RadioSelect,\n},\n},\n}\n</code></pre> <p>Warning</p> <p>Existing features of filtersets and filters must be exhausted first using keyword arguments before resorting to customizing, re-declaring/overloading, or defining filter methods.</p>"},{"location":"development/best-practices.html#filter-methods","title":"Filter Methods","text":"<p>Filters on a filterset can reference a <code>method</code> (either a callable, or the name of a method on the filterset) to perform custom business logic for that filter field. However, many uses of filter methods in Nautobot are problematic because they break the ability for such filter fields to be properly reversible.</p> <p>Consider this example from <code>nautobot.dcim.filters.DeviceFilterSet.pass_through_ports</code>:</p> <pre><code>    # Filter field definition is a BooleanFilter, for which an \"isnull\" lookup_expr\n# is the only valid filter expression\npass_through_ports = django_filters.BooleanFilter(\nmethod=\"_pass_through_ports\",\nlabel=\"Has pass-through ports\",\n)\n# Method definition loses context and further the field's lookup_expr\n# falls back to the default of \"exact\" and the `name` value is irrelevant here.\ndef _pass_through_ports(self, queryset, name, value):\nbreakpoint()  # This was added to illustrate debugging with pdb below\nreturn queryset.exclude(frontports__isnull=value, rearports__isnull=value)\n</code></pre> <p>The default <code>lookup_expr</code> unless otherwise specified is \u201cexact\u201d, as seen in django_filters.conf:</p> <pre><code>  'DEFAULT_LOOKUP_EXPR': 'exact',\n</code></pre> <p>When this method is called, the internal state is default, making reverse introspection impossible, because the <code>lookup_expr</code> is defaulting to \u201cexact\u201d:</p> <pre><code>(Pdb) field = self.filters[name]\n(Pdb) field.exclude\nFalse\n(Pdb) field.lookup_expr\n'exact'\n</code></pre> <p>This means that the arguments for the field are being completely ignored and the hard-coded queryset <code>queryset.exclude(frontports__isnull=value, rearports__isnull=value)</code> is all that is being run when this method is called.</p> <p>Additionally, <code>name</code> variable that gets passed to the method cannot be used here because there are two field names at play (<code>frontports</code> and <code>rearports</code>). This hard-coding is impossible to introspect and therefore impossible to reverse.</p> <p>So while this filter definition coudl be improved like so, there is still no way to know what is going on in the method body:</p> <pre><code>    pass_through_ports = django_filters.BooleanFilter(\nmethod=\"_pass_through_ports\",  # The method that is called\nexclude=True,                  # Perform an `.exclude()` vs. `.filter()``\nlookup_expr=\"isnull\",          # Perform `isnull` vs. `exact``\nlabel=\"Has pass-through ports\",\n)\n</code></pre> <p>For illustration, if we use another breakpoint, you can see that the filter field now has the correct attributes that can be used to help reverse this query:</p> <pre><code>(Pdb) field = self.filters[name]\n(Pdb) field.exclude\nTrue\n(Pdb) field.lookup_expr\n'isnull'\n</code></pre> <p>Except that it stops there becuse of the method body. Here are the problems:</p> <ul> <li>There's no way to identify either of the field names required here</li> <li>The <code>name</code> that is incoming to the method is the filter name as defined (<code>pass_through_ports</code> in this case) does not map to an actual model field</li> <li>So the filter can be introspected for <code>lookup_expr</code> value using <code>self.filters[name].lookup_expr</code>, but it would have to be assumed that applies to both fields.</li> <li>Same with <code>exclude</code> (<code>self.filters[name].exclude</code>)</li> </ul> <p>It would be better to just eliminate <code>pass_through_ports=True</code> entirely in exchange for <code>front_ports=True&amp;rear_ports=True</code> (current) or <code>has_frontports=True&amp;has_rearports=True</code> (future).</p>"},{"location":"development/best-practices.html#generating-reversible-q-objects","title":"Generating Reversible Q Objects","text":"<p>With consistent and proper use of filter field arguments when defining them on a fitlerset, a query could be constructed using the <code>field_name</code> and <code>lookup_expr</code> values. For example:</p> <pre><code>    def generate_query(self, field, value):\nquery = Q()\npredicate = {f\"{field.field_name}__{field.lookup_expr}\": value}\nif field.exclude:\nquery |= ~Q(**predicate)\nelse:\nquery |= Q(**predicate)\nreturn query\n## Somewhere else in business logic:\nfield = filterset.filters[name]\nvalue = filterset.data[name]\nquery = generate_query(field, value)\nfilterset.qs.filter(query).count()  # 339\n</code></pre>"},{"location":"development/best-practices.html#summary","title":"Summary","text":"<ul> <li>For the vast majority of cases where we have method filters, it\u2019s for Boolean filters</li> <li>For the common case method filters are unnecessary technical debt and should be eliminated where better suited by proper use of filter field arguments</li> <li>Reversibility may not always necessarily be required, but by properly defining <code>field_name</code>, <code>lookup_expr</code>, and <code>exclude</code> on filter fields, introspection becomes deterministic and reversible queries can be reliably generated as needed.</li> <li>For exceptions such as <code>DeviceFilterSet.has_primary_ip</code> where it checks for both <code>Device.primary_ip4</code> OR <code>Device.primary_ip6</code>, method filters may still be necessary, however, they would be the exception and not the norm.</li> <li>The good news is that in the core there are not that many of these filter methods defined, but we also don\u2019t want to see them continue to proliferate.</li> </ul>"},{"location":"development/best-practices.html#using-nautobotuiviewset-for-plugin-development","title":"Using NautobotUIViewSet for Plugin Development","text":"<p>Added in version 1.4.0</p> <p>Using <code>NautobotUIViewSet</code> for plugin development is strongly recommended.</p>"},{"location":"development/docker-compose-advanced-use-cases.html","title":"Docker Compose Advanced Use Cases","text":"<p>This section describes some of the more advanced use cases for the Docker Compose development workflow.</p>"},{"location":"development/docker-compose-advanced-use-cases.html#invoke-configuration","title":"Invoke Configuration","text":"<p>The Invoke tasks have some default configuration which you may want to override. Configuration properties include:</p> <ul> <li><code>project_name</code>: The name that all Docker containers will be grouped together under (default: <code>nautobot</code>, resulting in containers named <code>nautobot_nautobot_1</code>, <code>nautobot_redis_1</code>, etc.)</li> <li><code>python_ver</code>: the Python version which is used to build the Docker container (default: <code>3.8</code>)</li> <li><code>local</code>: run the commands in the local environment vs the Docker container (default: <code>False</code>)</li> <li><code>compose_dir</code>: the full path to the directory containing the Docker Compose YAML files (default: <code>\"&lt;nautobot source directory&gt;/development\"</code>)</li> <li><code>compose_files</code>: the Docker Compose YAML file(s) to use (default: <code>[\"docker-compose.yml\", \"docker-compose.postgres.yml\", \"docker-compose.dev.yml\"]</code>)</li> <li><code>docker_image_names_main</code> and <code>docker_image_names_develop</code>: Used when building Docker images for publication; you shouldn't generally need to change these.</li> </ul> <p>These setting may be overridden several different ways (from highest to lowest precedence):</p> <ul> <li>Command line argument on the individual commands (see <code>invoke $command --help</code>) if available</li> <li>Using environment variables such as <code>INVOKE_NAUTOBOT_PYTHON_VER</code>; the variables are prefixed with <code>INVOKE_NAUTOBOT_</code> and must be uppercase; note that Invoke does not presently support environment variable overriding of list properties such as <code>compose_files</code>.</li> <li>Using an <code>invoke.yml</code> file (see <code>invoke.yml.example</code>)</li> </ul>"},{"location":"development/docker-compose-advanced-use-cases.html#working-with-docker-compose","title":"Working with Docker Compose","text":"<p>The files related to the Docker development environment can be found inside of the <code>development</code> directory at the root of the project.</p> <p>In this directory you'll find the following core files:</p> <ul> <li><code>docker-compose.yml</code> - Docker service containers and their relationships to the Nautobot container</li> <li><code>docker-compose.debug.yml</code> - Docker compose override file used to start the Nautobot container for use with Visual Studio Code's dev container integration.</li> <li><code>docker-compose.dev.yml</code> - Docker compose override file used to mount the Nautobot source code inside the container at <code>/source</code> and the <code>nautobot_config.py</code> from the same directory as <code>/opt/nautobot/nautobot_config.py</code> for the active configuration.</li> <li><code>docker-compose.final.yml</code> - Docker compose override file used to start/build the <code>final</code> (production) Docker images for local testing.</li> <li><code>docker-compose.final-dev.yml</code> - Docker compose override file used to start/build the <code>final-dev</code> (app development environment) Docker images for local testing.</li> <li><code>docker-compose.keycloak.yml</code> - Docker compose override file used to setup an SSO auth backend for Nautobot.</li> <li><code>docker-compose.mysql.yml</code> - Docker compose override file used to add a MySQL container as the database backend for Nautobot.</li> <li><code>docker-compose.postgres.yml</code> - Docker compose override file used to add a Postgres container as the database backend for Nautobot.</li> <li><code>dev.env</code> - Environment variables used to setup the container services</li> <li><code>nautobot_config.py</code> - Nautobot configuration file</li> </ul> <p>In addition to the <code>development</code> directory, additional non-development-specific Docker-related files are located in the <code>docker</code> directory at the root of the project.</p> <p>In the <code>docker</code> directory you will find the following files:</p> <ul> <li><code>Dockerfile</code> - Docker container definition for Nautobot containers</li> <li><code>docker-entrypoint.sh</code> - Commands and operations ran once Nautobot container is started including database migrations and optionally creating a superuser</li> <li><code>uwsgi.ini</code> - The uWSGI ini file used in the production docker container</li> </ul>"},{"location":"development/docker-compose-advanced-use-cases.html#docker-compose-overrides","title":"Docker-Compose Overrides","text":"<p>If you require changing any of the defaults found in <code>docker-compose.yml</code>, create a file inside the <code>development</code> directory called <code>docker-compose.override.yml</code> and add this file to the <code>compose_files</code> setting in your <code>invoke.yml</code> file, for example:</p> <pre><code>---\nnautobot:\ncompose_files:\n- \"docker-compose.yml\"\n- \"docker-compose.postgres.yml\"\n- \"docker-compose.dev.yml\"\n- \"docker-compose.override.yml\"\n</code></pre> <p>This file will override any configuration in the main <code>docker-compose.yml</code> file, without making changes to the repository.</p> <p>Please see the official documentation on extending Docker Compose for more information.</p>"},{"location":"development/docker-compose-advanced-use-cases.html#automatically-creating-a-superuser","title":"Automatically Creating a Superuser","text":"<p>There may be times where you want to bootstrap Nautobot with a superuser account and API token already created for quick access or for running within a CI/CD pipeline. By using a custom <code>invoke.yml</code> as described above, in combination with custom <code>docker-compose.override.yml</code> and <code>override.env</code> files, you can automatically bootstrap Nautobot with a user and token.</p> <p>Create <code>invoke.yml</code> as described above, then create <code>development/docker-compose.override.yml</code> with the following contents:</p> <pre><code>---\nservices:\nnautobot:\nenv_file:\n- \"override.env\"\n</code></pre> <p>The <code>docker-entrypoint.sh</code> script will run any migrations and then look for specific variables set to create the superuser. The <code>docker-entrypoint.sh</code> script is copied in during the Docker image build and will read from the default <code>dev.env</code> as the <code>env_file</code> until you override it as seen above.</p> <p>Any variables defined in this file will override the defaults. The <code>override.env</code> should be located in the <code>development/</code> directory, and should look like the following:</p> <pre><code># Superuser information. NAUTOBOT_CREATE_SUPERUSER defaults to false.\nNAUTOBOT_CREATE_SUPERUSER=true\nNAUTOBOT_SUPERUSER_NAME=admin\nNAUTOBOT_SUPERUSER_EMAIL=admin@example.com\nNAUTOBOT_SUPERUSER_PASSWORD=admin\nNAUTOBOT_SUPERUSER_API_TOKEN=0123456789abcdef0123456789abcdef01234567\n</code></pre> <p>The variables defined above within <code>override.env</code> will signal the <code>docker-entrypoint.sh</code> script to create the superuser with the specified username, email, password, and API token.</p> <p>After these two files are created, you can use the <code>invoke</code> tasks to manage the development containers.</p>"},{"location":"development/docker-compose-advanced-use-cases.html#using-mysql-instead-of-postgresql","title":"Using MySQL instead of PostgreSQL","text":"<p>By default the Docker development environment is configured to use a PostgreSQL container as the database backend. For development or testing purposes, you might optionally choose to use MySQL instead. In order to do so, you need to make the following changes to your environment:</p> <ul> <li>Set up <code>invoke.yml</code> as described above and use it to override the postgres docker-compose file:</li> </ul> <pre><code>---\nnautobot:\ncompose_files:\n- \"docker-compose.yml\"\n- \"docker-compose.mysql.yml\"\n- \"docker-compose.dev.yml\"\n</code></pre> <p>Then <code>invoke stop</code> (if you previously had the docker environment running with Postgres) and <code>invoke start</code> and you should now be running with MySQL.</p>"},{"location":"development/docker-compose-advanced-use-cases.html#running-an-rq-worker","title":"Running an RQ worker","text":"<p>By default the Docker development environment no longer includes an RQ worker container, as RQ support in Nautobot is deprecated and will be removed entirely in a future release. If you need to run an RQ worker, you can set up <code>invoke.yml</code> as described above with the following <code>docker-compose.override.yml</code>:</p> <pre><code>---\nservices:\nrq_worker:\nimage: \"networktocode/nautobot-dev-py${PYTHON_VER}:local\"\nentrypoint: \"nautobot-server rqworker\"\nhealthcheck:\ninterval: 60s\ntimeout: 30s\nstart_period: 5s\nretries: 3\ntest: [\"CMD\", \"nautobot-server\", \"health_check\"]\ndepends_on:\n- nautobot\nenv_file:\n- ./dev.env\ntty: true\nvolumes:\n- ./nautobot_config.py:/opt/nautobot/nautobot_config.py\n- ../:/source\n</code></pre>"},{"location":"development/docker-compose-advanced-use-cases.html#sso-auth-backend-with-keycloak","title":"SSO Auth Backend with Keycloak","text":"<p>Keycloak and its database are run in the same docker-compose project as Nautobot. A separate database is used to ensure you are able to have two separate instances of Postgres, one for Nautobot and one for Keycloak, and allows you to use a MySQL database for Nautobot but maintain Keycloaks required Postgres DB. This setup is meant for local development and testing, and should not be used as a reference for deploying Keycloak in production.</p> <p>The <code>invoke.yml</code> file must be updated to add <code>development/docker-compose.keycloak.yml</code> to the docker-compose project and to enable OIDC. These setting are solely for local development inside the Nautobot repository and is not applicable to any other deployment. An example <code>invoke.yml</code> file:</p> <pre><code>---\nnautobot:\ncompose_files:\n- \"docker-compose.yml\"\n- \"docker-compose.postgres.yml\"\n- \"docker-compose.dev.yml\"\n- \"docker-compose.keycloak.yml\"\n</code></pre>"},{"location":"development/docker-compose-advanced-use-cases.html#validating-setup","title":"Validating Setup","text":"<p>Once all steps are completed Nautobot should now have the <code>Continue to SSO</code> button on the login screen and should immediately redirect the user to sign in with Keycloak.</p>"},{"location":"development/docker-compose-advanced-use-cases.html#keycloak-login-credentials","title":"Keycloak Login Credentials","text":"<p>Keycloak admin console is reachable via <code>http://localhost:8087/admin/</code> with user <code>admin</code> and password <code>admin</code>. The below users are pre-configured within Keycloak, at this time their permissions are not directly mapped to any permissions provided by default by Nautobot. This will be a later enhancement to the local development environment.</p> <p>| Username         | Password  | +------------------+-----------+ | nautobot_unpriv  | unpriv123 | | nautobot_admin   | admin123  | | nautobot_auditor | audit123  |</p>"},{"location":"development/docker-compose-advanced-use-cases.html#microsoft-visual-studio-code-integration","title":"Microsoft Visual Studio Code Integration","text":"<p>For users of Microsoft Visual Studio Code, several files are included to ease development and integrate with the VS Code Remote - Containers extension. The following related files are found relative to the root of the project:</p> <ul> <li><code>.devcontainers/devcontainer.json</code> - Dev. container definition</li> <li><code>nautobot.code-workspace</code> - VS Code workspace configuration for Nautobot</li> <li><code>development/docker-compose.debug.yml</code> - Docker Compose file with debug configuration for VS Code</li> </ul> <p>After opening the project directory in VS Code in a supported environment, you will be prompted by VS Code to Reopen in Container and Open Workspace. Select Reopen in Container to build and start the development containers. Once your window is connected to the container, you can open the workspace which enables support for Run/Debug.</p> <p>To start Nautobot, select Run Without Debugging or Start Debugging from the Run menu. Once Nautobot has started, you will be prompted to open a browser to connect to Nautobot.</p> <p>Note</p> <p>You can run tests with <code>nautobot-server --config=nautobot/core/tests/nautobot_config.py test nautobot</code> while inside the Container.</p>"},{"location":"development/docker-compose-advanced-use-cases.html#special-workflow-for-containers-on-remote-servers","title":"Special Workflow for Containers on Remote Servers","text":"<p>A slightly different workflow is needed when your development container is running on a remotely-connected server (such as with SSH). VS Code will not offer the Reopen in Container option on a remote server.</p> <p>To work with remote containers, after <code>invoke build</code> use <code>docker-compose</code> as follows to start the containers. This prevents the HTTP service from automatically starting inside the container:</p> <pre><code>cd development\ndocker-compose -f docker-compose.yml -f docker-compose.debug.yml up\n</code></pre> <ul> <li>Now open the VS Code Docker extension. In the <code>CONTAINERS/development</code> section, right click on a running container and select the Attach Visual Studio Code menu item.</li> <li>The Select the container to attach VS Code input field provides a list of running containers.</li> <li>Click on <code>development_nautobot_1</code> to use VS Code inside the container. The <code>devcontainer</code> will startup now.</li> <li>As a last step open the folder <code>/opt/nautobot</code> in VS Code.</li> </ul>"},{"location":"development/docker-compose-advanced-use-cases.html#remote-debugging-configuration","title":"Remote Debugging Configuration","text":"<p>Using the Remote-Attach functionality of VS Code debugger is an alternative to debugging in a development container. This allows a local VS Code instance to connect to a remote container and debug the code running in the container the same way as when debugging locally.</p> <p>Follow the steps below to configure VS Code to debug Nautobot and Celery Worker running in a remote container:</p> <ol> <li> <p>Configure <code>invoke.yml</code> to use the <code>docker-compose.vscode-rdb.yml</code> file</p> <p>This overrides the container settings without touching the original <code>docker-compose.yml</code> file.</p> <p>Your <code>invoke.yml</code> file should look something like this:</p> <pre><code>---\nnautobot:\ncompose_files:\n- \"docker-compose.yml\"\n- \"docker-compose.postgres.yml\"\n- \"docker-compose.dev.yml\"\n- \"docker-compose.vscode-rdb.yml\"\n</code></pre> <p>If you already have a custom <code>invoke.yml</code> file, append <code>docker-compose.vscode-rdb.yml</code> to the end of the <code>compose_files</code> list.</p> <p>See the docker compose override documentation for more details.</p> </li> <li> <p>VS Code debug configuration</p> <p>If you have opened the workspace file <code>nautobot.code-workspace</code> then there are two debug configurations for remote debugging already available.</p> <p>If you add nautobot to an existing VS Code workspace (Menu: File &gt; Add Folder to Workspace...) then copy the <code>launch:</code> values to the <code>.vscode/launch.json</code> file.</p> <ul> <li>Debug Configurations for Remote Debugging:</li> </ul> <pre><code>{\n\"version\": \"0.2.0\",\n\"configurations\": [\n{\n\"name\": \"Python: Remote Attach\",\n...\n},\n{\n\"name\": \"Python: Remote Attach Celery Worker\",\n...\n}\n]\n}\n</code></pre> </li> </ol> <p>It is now possible to debug the containerized Nautobot and Celery Worker using the VS Code debugger.</p> <p>After restarting the Celery-Worker container you need to restart the debug session.</p>"},{"location":"development/extending-models.html","title":"Extending Models","text":"<p>Below is a list of tasks to consider when adding a new field to a core model.</p>"},{"location":"development/extending-models.html#1-generate-and-run-database-migrations","title":"1. Generate and run database migrations","text":"<p>Django migrations are used to express changes to the database schema. In most cases, Django can generate these automatically, however very complex changes may require manual intervention. Always remember to specify a short but descriptive name when generating a new migration.</p> <p>Warning</p> <p>Assert that you have installed Nautobot in your development environment using <code>poetry install</code> so that changes you make to migrations will apply to the source tree!</p> <pre><code>nautobot-server makemigrations &lt;app&gt; -n &lt;name&gt;\nnautobot-server migrate\n</code></pre> <p>Where possible, try to merge related changes into a single migration. For example, if three new fields are being added to different models within an app, these can be expressed in the same migration. You can merge a new migration with an existing one by combining their <code>operations</code> lists.</p> <p>Note</p> <p>Migrations can only be merged within a release. Once a new release has been published, its migrations cannot be altered (other than for the purpose of correcting a bug).</p>"},{"location":"development/extending-models.html#2-add-validation-logic-to-clean","title":"2. Add validation logic to <code>clean()</code>","text":"<p>If the new field introduces additional validation requirements (beyond what's included with the field itself), implement them in the model's <code>clean()</code> method. Remember to call the model's original method using <code>super()</code> before or after your custom validation as appropriate:</p> <pre><code>class Foo(models.Model):\ndef clean(self):\nsuper().clean()\n# Custom validation goes here\nif self.bar is None:\nraise ValidationError()\n</code></pre>"},{"location":"development/extending-models.html#3-add-csv-helpers","title":"3. Add CSV helpers","text":"<p>Add the name of the new field to <code>csv_headers</code> and included a CSV-friendly representation of its data in the model's <code>to_csv()</code> method. These will be used when exporting objects in CSV format.</p>"},{"location":"development/extending-models.html#4-update-relevant-querysets","title":"4. Update relevant querysets","text":"<p>If you're adding a relational field (e.g. <code>ForeignKey</code>) and intend to include the data when retrieving a list of objects, be sure to include the field using <code>prefetch_related()</code> as appropriate. This will optimize the view and avoid extraneous database queries.</p>"},{"location":"development/extending-models.html#5-update-api-serializer","title":"5. Update API serializer","text":"<p>Extend the model's API serializer in <code>&lt;app&gt;.api.serializers</code> to include the new field. In most cases, it will not be necessary to also extend the nested serializer, which produces a minimal representation of the model.</p>"},{"location":"development/extending-models.html#6-add-field-to-forms","title":"6. Add field to forms","text":"<p>Extend any forms to include the new field as appropriate. Common forms include:</p> <ul> <li>Credit/edit - Manipulating a single object</li> <li>Bulk edit - Performing a change on many objects at once</li> <li>CSV import - The form used when bulk importing objects in CSV format</li> <li>Filter - Displays the options available for filtering a list of objects (both UI and API)</li> </ul>"},{"location":"development/extending-models.html#7-extend-object-filter-set","title":"7. Extend object filter set","text":"<p>If the new field should be filterable, add it to the <code>FilterSet</code> for the model. If the field should be searchable, remember to reference it in the FilterSet's <code>SearchFilter</code> definition.</p> <p>All filtersets should inherit from <code>BaseFilterSet</code> or <code>NautobotFilterSet</code> as appropriate to the scope of the model's functionality.</p>"},{"location":"development/extending-models.html#8-add-column-to-object-table","title":"8. Add column to object table","text":"<p>If the new field will be included in the object list view, add a column to the model's table. For simple fields, adding the field name to <code>Meta.fields</code> will be sufficient. More complex fields may require declaring a custom column.</p>"},{"location":"development/extending-models.html#9-update-the-ui-templates","title":"9. Update the UI templates","text":"<p>Edit the object's view template to display the new field. There may also be a custom add/edit form template that needs to be updated.</p>"},{"location":"development/extending-models.html#10-validate-the-new-field-in-graphql","title":"10. Validate the new field in GraphQL","text":"<p>If the model is already part of the GraphQL schema, the new field will be included automatically. Validate that the new field is rendering properly in GraphQL. If the field is not compatible with GraphQL or shouldn't be included in GraphQL it's possible to exclude a specific field in the GraphQL Type Object associated with this specific model. You can refer to the graphene-django documentation for additional information.</p> <p>Note that if you're using the <code>convert_django_field</code> registry to override the default GraphQL representation for any field type, this override must be registered within the relevant app's <code>ready()</code> function, rather than at module import time.</p>"},{"location":"development/extending-models.html#11-createextend-test-cases","title":"11. Create/extend test cases","text":"<p>Create or extend the relevant test cases to verify that the new field and any accompanying validation logic perform as expected. This is especially important for relational fields. Nautobot incorporates various test suites, including:</p> <ul> <li>API serializer/view tests</li> <li>Filter tests</li> <li>Form tests</li> <li>Model tests</li> <li>View tests</li> </ul> <p>Be diligent to ensure all of the relevant test suites are adapted or extended as necessary to test any new functionality.</p>"},{"location":"development/extending-models.html#12-update-the-models-documentation","title":"12. Update the model's documentation","text":"<p>Each model has a dedicated page in the documentation, at <code>models/&lt;app&gt;/&lt;model&gt;.md</code>. Update this file to include any relevant information about the new field.</p> <p>Note that this documentation page will be accessible through the web UI via a \"question mark\" icon on the corresponding model create/edit page.</p> <p>Warning</p> <p>Due to a limitation in how the documentation is rendered in the web UI, cross-reference hyperlinks between Nautobot documentation pages will not work in the web UI (they will be broken links), so avoid using them in a model documentation page. External hyperlinks (to the Django documentation, for example) will work correctly and may be used as needed.</p>"},{"location":"development/generic-views.html","title":"Generic Views","text":"<ul> <li><code>ObjectView</code> - Retrieve a single object for display.</li> <li><code>ObjectListView</code> - List a series of objects.</li> <li><code>ObjectEditView</code> - Create or edit a single object.</li> <li><code>ObjectDeleteView</code> - Delete a single object.</li> <li><code>BulkCreateView</code> - Create new objects in bulk.</li> <li><code>BulkDeleteView</code> - Delete objects in bulk.</li> <li><code>BulkEditView</code> - Edit objects in bulk.</li> <li><code>BulkImportView</code> - Import objects in bulk from CSV.</li> </ul> <p>Once you define a view by subclassing any of the above generic classes, you must register it in your <code>urls.py</code> as usual. There are a few things to be aware of here:</p> <ul> <li>Reverse URL naming needs to follow a template of <code>{modelname}_{method}</code> where the model name is lowercased model class name from <code>models.py</code> and method is the purpose of the view. E.g. <code>_list</code>, <code>_add</code>, <code>_edit</code>.</li> <li>The default rendering context for the <code>ObjectListView</code> includes some standard <code>action_buttons</code> for interacting with the listed model. By default this view defines <code>action_buttons = (\"add\", \"import\", \"export\")</code>. The <code>export</code> action is handled automatically by <code>ObjectListView</code>, but the <code>add</code> and <code>import</code> actions need corresponding views in order to work. In other words, if you implement an <code>ObjectListView</code> and do not override its <code>action_buttons</code>, you must also implement and register the corresponding <code>ObjectEditView</code> and <code>BulkImportView</code> subclasses as well.</li> </ul> <p>Warning</p> <p>If you're missing any of the aforementioned URLs/Views, when accessing your list view it will result in a error <code>Reverse for 'None' not found. 'None' is not a valid view function or pattern name.</code></p> <p>If you do not need <code>ObjectEditView</code> and/or <code>BulkImportView</code> for your particular model, as an alternative you can simply update your <code>ObjectListView</code> subclass to overload the action buttons.  For example, <code>action_buttons = (\"add\",)</code> or if none are required <code>action_buttons = ()</code>.</p> <p>To demonstrate these concepts we can look at the <code>example_plugin</code> included in the Nautobot repository.</p> <p>The example plugin has a simple model called <code>ExampleModel</code>:</p> <pre><code>class ExampleModel(OrganizationalModel):\nname = models.CharField(max_length=20, help_text=\"The name of this Example.\")\nnumber = models.IntegerField(default=100, help_text=\"The number of this Example.\")\ncsv_headers = [\"name\", \"number\"]\nclass Meta:\nordering = [\"name\"]\n</code></pre> <p>The list view for this model subclasses <code>generic.ObjectListView</code> and does not overload the <code>action_buttons</code>:</p> <pre><code>class ExampleModelListView(generic.ObjectListView):\n\"\"\"List `ExampleModel` objects.\"\"\"\nqueryset = ExampleModel.objects.all()\nfilterset = filters.ExampleModelFilterSet\nfilterset_form = forms.ExampleModelFilterForm\ntable = tables.ExampleModelTable\n</code></pre> <p>Info</p> <p>Since <code>action_buttons</code> was not overloaded, <code>action_buttons = (\"add\", \"import\", \"export\")</code> is inherited.</p> <p>In order for this to work properly we expect to see <code>urls.py</code> have each of the required URLs/Views implemented with the template mentioned above.</p> <pre><code>urlpatterns = [\n...\npath(\"models/\", views.ExampleModelListView.as_view(),name=\"examplemodel_list\"),\npath(\"models/add/\", views.ExampleModelEditView.as_view(), name=\"examplemodel_add\"),\n...\npath(\n\"models/import/\",\nviews.ExampleModelBulkImportView.as_view(),\nname=\"examplemodel_import\",\n),\n...\n]\n</code></pre>"},{"location":"development/getting-started.html","title":"Getting Started","text":""},{"location":"development/getting-started.html#git-branches","title":"Git Branches","text":"<p>The Nautobot project follows a branching model based on Git-flow. As such, there are three persistent git branches:</p> <ul> <li><code>main</code> - Serves as a snapshot of the current stable release</li> <li><code>develop</code> - All bug fixes and minor feature development on the upcoming stable release occurs here</li> <li><code>next</code> - All major new feature development for the next feature release occurs here.</li> </ul> <p>You will always base pull requests off of either the <code>develop</code> branch, for fixes and minor features, or <code>next</code>, if you're working on a feature targeted for a later release. Never target fix or feature pull requests into the <code>main</code> branch, which receives merges only from the <code>develop</code> branch and only for new stable releases of Nautobot.</p>"},{"location":"development/getting-started.html#forking-the-repo","title":"Forking the Repo","text":"<p>When developing Nautobot, you'll be working on your own fork, so your first step will be to fork the official GitHub repository. You will then clone your GitHub fork locally for development.</p> <p>Note</p> <p>It is highly recommended that you use SSH with GitHub. If you haven't already, make sure that you setup Git and add an SSH key to your GitHub account before proceeding.</p> <p>In this guide, SSH will be used to interact with Git.</p> <pre><code>git clone git@github.com:yourusername/nautobot.git\n</code></pre> <p>Example output:</p> <pre><code>Cloning into 'nautobot'...\nremote: Enumerating objects: 231, done.\nremote: Counting objects: 100% (231/231), done.\nremote: Compressing objects: 100% (147/147), done.\nremote: Total 56705 (delta 134), reused 145 (delta 84), pack-reused 56474\nReceiving objects: 100% (56705/56705), 27.96 MiB | 34.92 MiB/s, done.\nResolving deltas: 100% (44177/44177), done.\n</code></pre> <pre><code>ls nautobot/\n</code></pre> <p>Example output:</p> <pre><code>CHANGELOG.md     README.md    docs        nautobot.code-workspace  site\nCONTRIBUTING.md  contrib      manage.py   poetry.lock              tasks.py\nLICENSE.txt      development  mkdocs.yml  pyproject.toml           upgrade.sh\nNOTICE           dist         nautobot    scripts\n</code></pre>"},{"location":"development/getting-started.html#about-remote-repos","title":"About Remote Repos","text":"<p>Git refers to remote repositories as remotes. When you make your initial clone of your fork, Git defaults to naming this remote <code>origin</code>. Throughout this documentation, the following remote names will be used:</p> <ul> <li><code>origin</code> - The default remote name used to refer to your fork of Nautobot</li> <li><code>upstream</code> - The main remote used to refer to the official Nautobot repository</li> </ul>"},{"location":"development/getting-started.html#setting-up-your-remotes","title":"Setting up your Remotes","text":"<p>Remote repos are managed using the <code>git remote</code> command.</p> <p>Upon cloning Nautobot for the first time, you will have only a single remote:</p> <pre><code>git remote -v\n</code></pre> <p>Example output:</p> <pre><code>origin  git@github.com:yourusername/nautobot.git (fetch)\norigin  git@github.com:yourusername/nautobot.git (push)\n</code></pre> <p>Add the official Nautobot repo as a the <code>upstream</code> remote:</p> <pre><code>git remote add upstream git@github.com:nautobot/nautobot.git\n</code></pre> <p>View your remotes again to confirm you've got both <code>origin</code> pointing to your fork and <code>upstream</code> pointing to the official repo:</p> <pre><code>git remote -v\n</code></pre> <p>Example output:</p> <pre><code>origin  git@github.com:yourusername/nautobot.git (fetch)\norigin  git@github.com:yourusername/nautobot.git (push)\nupstream    git@github.com:nautobot/nautobot.git (fetch)\nupstream    git@github.com:nautobot/nautobot.git (push)\n</code></pre> <p>You're now ready to proceed to the next steps.</p> <p>Hint</p> <p>You will always push changes to <code>origin</code> (your fork) and pull changes from <code>upstream</code> (official repo).</p>"},{"location":"development/getting-started.html#creating-a-branch","title":"Creating a Branch","text":"<p>Before you make any changes, always create a new branch. Again, for bug fixes and minor features, you'll want to create your branches from the <code>develop</code> branch, while for major new features, you'll branch from <code>next</code> instead.</p> <p>Before you ever create a new branch, always checkout the appropriate branch and make sure you you've got the latest changes from <code>upstream</code>:</p> <pre><code>git checkout develop\ngit pull upstream develop\n</code></pre> <p>Warning</p> <p>If you do not do this, you run the risk of having merge conflicts in your branch, and that's never fun to deal with. Trust us on this one.</p> <p>Now that you've got the latest upstream changes, create your branch. Whether you're creating a branch off a fork or working against the Nautobot origin repo, you should follow this convention for naming your branch: <code>u/yourusername-0000-branch-summary</code>, where <code>0000</code> is the related GitHub issue number and <code>yourusername</code> is your GitHub username. For example:</p> <pre><code>git checkout -b u/yourusername-1234-next-amazing-feature\n</code></pre> <p>If you do not have a relevant GitHub issue, please consider opening one to document the context behind your changes.</p>"},{"location":"development/getting-started.html#prototypes","title":"Prototypes","text":"<p>Sometimes code is written as a proof of concept or early implementation candidate but is not quite ready to be merged, or may be picked up by another author sometime in the future. In that case, the convention is to use the <code>prototype/</code> prefix to the branch name and not requiring the original authors username. In that scenario, using the example above, you would instead:</p> <pre><code>git checkout -b prototype/1234-next-amazing-feature\n</code></pre>"},{"location":"development/getting-started.html#enabling-pre-commit-hooks","title":"Enabling Pre-Commit Hooks","text":"<p>Nautobot ships with a Git pre-commit hook script that automatically checks for style compliance and missing database migrations prior to committing changes. This helps avoid erroneous commits that result in CI test failures.</p> <p>Note</p> <p>This pre-commit hook currently only supports the Python Virtual Environment Workflow.</p> <p>You are encouraged to enable it by creating a link to <code>scripts/git-hooks/pre-commit</code>:</p> <pre><code>cd .git/hooks/\nln -s ../../scripts/git-hooks/pre-commit\n</code></pre>"},{"location":"development/getting-started.html#setting-up-your-development-environment","title":"Setting up your Development Environment","text":"<p>Getting started with Nautobot development is pretty straightforward, and should feel very familiar to anyone with Django development experience. We can recommend either a Docker Compose workflow (if you don't want to install dependencies such as PostgreSQL and Redis directly onto your system) or a Python virtual environment workflow.</p>"},{"location":"development/getting-started.html#windows-development","title":"Windows Development","text":"<p>The Docker Compose development workflow on Windows Subsystem for Linux (WSL) has been tested successfully with Docker Desktop using the WSL2 backend and the Ubuntu 20.04 WSL2 distribution. The Poetry workflow has also been tested successfully on the Ubuntu 20.04 WSL2 distribution.</p> <p>To install WSL2 and Ubuntu follow the instructions from the WSL installation guide or if running Windows 10 version 2004 and higher you can open an administrator Powershell terminal and enter the following command:</p> <pre><code>wsl --install\n</code></pre> <p>This will install the WSL2 Ubuntu distribution. Reboot if prompted. After the image installs successfully you may install Docker Desktop with the WSL2 backend.</p>"},{"location":"development/getting-started.html#docker-compose-workflow","title":"Docker Compose Workflow","text":"<p>This workflow uses Docker and Docker Compose and assumes that you have them installed.</p> <p>For the Docker Compose workflow, Nautobot uses Invoke as a replacement for Make. Invoke was chosen because it is less arcane than make. Instead of a <code>Makefile</code>, Invoke reads the <code>tasks.py</code> in the project root.</p> <p>Note</p> <p>Although the Docker Compose workflow uses containers, it is important to note that the containers are running the local repository code on your machine. Changes you make to your local code will be picked up and executed by the containers.</p>"},{"location":"development/getting-started.html#install-invoke","title":"Install Invoke","text":"<p>Because it is used to execute all common Docker workflow tasks, Invoke must be installed for your user environment. On most systems, if you're installing without root/superuser permissions, the default will install into your local user environment.</p> <pre><code>pip3 install invoke\n</code></pre> <p>If you run into issues, you may also deliberately tell <code>pip3</code> to install into your user environment by adding the <code>--user</code> flag:</p> <pre><code>pip3 install --user invoke\n</code></pre> <p>Please see the official documentation on Pip user installs for more information.</p>"},{"location":"development/getting-started.html#list-invoke-tasks","title":"List Invoke Tasks","text":"<p>Now that you have an <code>invoke</code> command, list the tasks defined in <code>tasks.py</code>:</p> <pre><code>invoke --list\n</code></pre> <p>Example output:</p> <pre><code>Available tasks:\n\n  black                  Check Python code style with Black.\n  build                  Build Nautobot docker image.\n  build-and-check-docs   Build docs for use within Nautobot.\n  buildx                 Build Nautobot docker image using the experimental buildx docker functionality (multi-arch\n                         capablility).\n  check-migrations       Check for missing migrations.\n  check-schema           Render the REST API schema and check for problems.\n  cli                    Launch a bash shell inside the running Nautobot (or other) Docker container.\n  createsuperuser        Create a new Nautobot superuser account (default: \"admin\"), will prompt for password.\n  debug                  Start Nautobot and its dependencies in debug mode.\n  destroy                Destroy all containers and volumes.\n  docker-push            Tags and pushes docker images to the appropriate repos, intended for release use only.\n  dumpdata               Dump data from database to db_output file.\n  flake8                 Check for PEP8 compliance and other style issues.\n  hadolint               Check Dockerfile for hadolint compliance and other style issues.\n  integration-test       Run Nautobot integration tests.\n  loaddata               Load data from file.\n  makemigrations         Perform makemigrations operation in Django.\n  markdownlint           Lint Markdown files.\n  migrate                Perform migrate operation in Django.\n  nbshell                Launch an interactive nbshell session.\n  performance-test       Run Nautobot performance specific unit tests.\n  post-upgrade           Performs Nautobot common post-upgrade operations using a single entrypoint.\n  pylint                 Perform static analysis of Nautobot code.\n  restart                Gracefully restart containers.\n  start                  Start Nautobot and its dependencies in detached mode.\n  stop                   Stop Nautobot and its dependencies.\n  tests                  Run all linters and unit tests.\n  unittest               Run Nautobot unit tests.\n  unittest-coverage      Report on code test coverage as measured by 'invoke unittest'.\n  vscode                 Launch Visual Studio Code with the appropriate Environment variables to run in a container.\n</code></pre>"},{"location":"development/getting-started.html#using-docker-with-invoke","title":"Using Docker with Invoke","text":"<p>A development environment can be easily started up from the root of the project using the following commands:</p> <ul> <li><code>invoke build</code> - Builds Nautobot docker images</li> <li><code>invoke migrate</code> - Performs database migration operation in Django</li> <li><code>invoke createsuperuser</code> - Creates a superuser account for the Nautobot application</li> <li><code>invoke debug</code> - Starts Docker containers for Nautobot, PostgreSQL, Redis, Celery, and the RQ worker in debug mode and attaches their output to the terminal in the foreground. You may enter Control-C to stop the containers</li> </ul> <p>Additional useful commands for the development environment:</p> <ul> <li><code>invoke start [-s servicename]</code> - Starts Docker containers for Nautobot, PostgreSQL, Redis, Celery, and the RQ worker (or a specific container/service, such as <code>invoke start -s redis</code>) to run in the background with debug disabled</li> <li><code>invoke cli [-s servicename]</code> - Launch a <code>bash</code> shell inside the specified service container (if none is specified, defaults to the Nautobot container)</li> <li><code>invoke stop [-s servicename]</code> - Stops all containers (or a specific container/service) created by <code>invoke start</code></li> </ul> <p>Note</p> <p>The mkdocs container must be started manually with <code>invoke start -s mkdocs</code>. It will not start automatically with the <code>invoke start</code> or <code>invoke debug</code> commands.</p> <p>Tip</p> <p>The Nautobot server uses a Django webservice and worker uses watchdog to provide automatic reload of your web and worker servers in most cases when using <code>invoke start</code> or <code>invoke debug</code>.</p> <p>Tip</p> <p>To learn about advanced use cases within the Docker Compose workflow, see the Docker Compose Advanced Use Cases page.</p> <p>Proceed to the Working in your Development Environment section</p>"},{"location":"development/getting-started.html#python-virtual-environment-workflow","title":"Python Virtual Environment Workflow","text":"<p>This workflow uses Python and Poetry to work with your development environment locally. It requires that you install the required system dependencies on your system yourself.</p> <p>There are a few things you'll need:</p> <ul> <li>A Linux system or environment</li> <li>A MySQL or PostgreSQL server, which can be installed locally per the documentation</li> <li>A Redis server, which can also be installed locally</li> <li>A supported version of Python</li> <li>A recent version of Poetry</li> </ul>"},{"location":"development/getting-started.html#install-poetry","title":"Install Poetry","text":"<p>Poetry is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on and it will manage (install/update/remove) them for you. It will also manage virtual environments automatically, and allow for publishing packages to the Python Package Index.</p> <p>You may install Poetry in your user environment by running:</p> <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre> <p>Changed in version 1.5.6</p> <p>Poetry 1.3+ is required to be able to install packages against the latest lockfile.</p> <p>Danger</p> <p>Always utilize this documented method to install Poetry for use when developing Nautobot.</p> <p>Never use <code>pip</code> to install Poetry into your Nautobot virtual environment, as it will result in dependency version conflicts that will very likely break Nautobot. Poetry is used as a package manager for Python packages, so you should not install it into the Nautobot environment, because it relies upon a number of the same dependencies as Nautobot, but with conflicting versions.</p> <p>While there are certain cases where running <code>pip install poetry</code> is valid, such as in Nautobot's automated release deployments where Nautobot is not actually installed, installing Poetry into Nautobot's runtime development environment is not one of them!</p> <p>For detailed installation instructions, please see the official Poetry installation guide.</p>"},{"location":"development/getting-started.html#install-hadolint","title":"Install Hadolint","text":"<p>Hadolint is a tool used to validate and lint Dockerfiles to ensure we are following best practices. On macOS with Homebrew you can install Hadolint by running:</p> <pre><code>brew install hadolint\n</code></pre>"},{"location":"development/getting-started.html#install-markdownlint-cli","title":"Install markdownlint-cli","text":"<p>markdownlint-cli is a tool used to validate and lint Markdown files, such as Nautobot's documentation, to ensure that they are correctly constructed. On macOS with Homebrew you can install markdownlint-cli by running:</p> <pre><code>brew install markdownlint-cli\n</code></pre>"},{"location":"development/getting-started.html#creating-a-python-virtual-environment","title":"Creating a Python Virtual Environment","text":"<p>A Python virtual environment (or virtualenv) is like a container for a set of Python packages. A virtualenv allow you to build environments suited to specific projects without interfering with system packages or other projects. When installed per the documentation, Nautobot uses a virtual environment in production.</p> <p>For Nautobot development, we have selected Poetry, which will transparently create a virtualenv for you, automatically install all dependencies required for Nautobot to operate, and will also install the <code>nautobot-server</code> CLI command that you will utilize to interact with Nautobot from here on out.</p> <p>Bootstrap your virtual environment using <code>poetry install</code>:</p> <pre><code>poetry install\n</code></pre> <p>Hint</p> <p>If you are doing development or testing using MySQL, you may quickly install the <code>mysqlclient</code> library along with Nautobot by running <code>poetry install --extras mysql</code>.</p> <p>This will create automatically create a virtualenv in your home directory, which houses a virtual copy of the Python executable and its related libraries and tooling. When running Nautobot for development, it will be run using the Python binary at found within the virtualenv.</p> <p>Once created, you may activate the virtual environment using <code>poetry shell</code>:</p> <pre><code>poetry shell\n</code></pre> <p>Example output:</p> <pre><code>Spawning shell within /home/example/.cache/pypoetry/virtualenvs/nautobot-Ams_xyDt-py3.8\n\n. /home/example/.cache/pypoetry/virtualenvs/nautobot-Ams_xyDt-py3.8/bin/activate\n(nautobot-Ams_xyDt-py3.8) $\n</code></pre> <p>Notice that the console prompt changes to indicate the active environment. This updates the necessary system environment variables to ensure that any Python scripts are run within the virtual environment.</p> <p>Observe also that the <code>python</code> interpreter is bound within the virtualenv:</p> <pre><code>which python\n</code></pre> <p>Example output:</p> <pre><code>(nautobot-Ams_xyDt-py3.8) $ /home/example/.cache/pypoetry/virtualenvs/nautobot-Ams_xyDt-py3.8/bin/python\n</code></pre> <p>To exit the virtual shell, use <code>exit</code>:</p> <pre><code>exit\n</code></pre> <p>Example output:</p> <pre><code>$\n</code></pre>"},{"location":"development/getting-started.html#working-with-poetry","title":"Working with Poetry","text":"<p>Poetry automatically installs your dependencies. However, if you need to install any additional dependencies this can be done with <code>pip</code>. For example, if you really like using <code>ipython</code> for development:</p> <pre><code>pip3 install ipython\n</code></pre> <p>Example output:</p> <pre><code>Collecting ipython\n  Using cached ipython-7.20.0-py3-none-any.whl (784 kB)\n  ...\n</code></pre> <ul> <li>Install verify that you have the proper dependencies installed and are in the virtual environment via Poetry. This also ensures that you have the proper mkdocs themes installed.</li> </ul> <pre><code>poetry shell\npoetry install\n</code></pre> <p>It may not always be convenient to enter into the virtual shell just to run programs. You may also execute a given command ad hoc within the project's virtual shell by using <code>poetry run</code>:</p> <pre><code>poetry run mkdocs serve\n</code></pre> <p>Check out the Poetry usage guide for more tips.</p>"},{"location":"development/getting-started.html#configuring-nautobot","title":"Configuring Nautobot","text":"<p>Note</p> <p>Unless otherwise noted, all following commands should be executed inside the virtualenv.</p> <p>Hint</p> <p>Use <code>poetry shell</code> to enter the virtualenv.</p> <p>Nautobot's configuration file is <code>nautobot_config.py</code>.</p>"},{"location":"development/getting-started.html#initializing-a-config","title":"Initializing a Config","text":"<p>You may also initialize a new configuration using <code>nautobot-server init</code>:</p> <pre><code>nautobot-server init\n</code></pre> <p>Example output:</p> <pre><code>Configuration file created at '/home/example/.nautobot/nautobot_config.py'\n</code></pre> <p>You may also specify alternate file locations. Please refer to Configuring Nautobot for how to do that.</p>"},{"location":"development/getting-started.html#using-the-development-config","title":"Using the Development Config","text":"<p>A <code>nautobot_config.py</code> suitable for development purposes can be found at <code>development/nautobot_config.py</code>. You may customize the values there or utilize environment variables to override the default values.</p> <p>If you want to use this file, initialize a config first, then copy this file to the default location Nautobot expects to find its config:</p> <pre><code>cp development/nautobot_config.py ~/.nautobot/nautobot_config.py\n</code></pre>"},{"location":"development/getting-started.html#required-settings","title":"Required Settings","text":"<p>A newly created configuration includes sane defaults. If you need to customize them, edit your <code>nautobot_config.py</code> and update the following settings as required:</p> <ul> <li><code>ALLOWED_HOSTS</code>: This can be set to <code>[\"*\"]</code> for development purposes and must be set if <code>DEBUG=False</code></li> <li><code>DATABASES</code>: Database connection parameters, if different from the defaults</li> <li>Redis settings: Redis configuration requires multiple settings including <code>CACHEOPS_REDIS</code> and <code>RQ_QUEUES</code>. The defaults should be fine for development.</li> <li><code>DEBUG</code>: Set to <code>True</code> to enable verbose exception logging and, if installed, the Django debug toolbar</li> <li><code>EXTRA_INSTALLED_APPS</code>: Optionally provide a list of extra Django apps/plugins you may desire to use for development</li> </ul>"},{"location":"development/getting-started.html#working-in-your-development-environment","title":"Working in your Development Environment","text":"<p>Below are common commands for working your development environment.</p>"},{"location":"development/getting-started.html#creating-a-superuser","title":"Creating a Superuser","text":"<p>You'll need to create a administrative superuser account to be able to log into the Nautobot Web UI for the first time. Specifying an email address for the user is not required, but be sure to use a very strong password.</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke createsuperuser</code> <code>nautobot-server createsuperuser</code>"},{"location":"development/getting-started.html#starting-the-development-server","title":"Starting the Development Server","text":"<p>Django provides a lightweight HTTP/WSGI server for development use. The development server automatically reloads Python code for each request, as needed. You don\u2019t need to restart the server for code changes to take effect. However, some actions like adding files don\u2019t trigger a restart, so you\u2019ll have to restart the server in these cases.</p> <p>Danger</p> <p>DO NOT USE THIS SERVER IN A PRODUCTION SETTING. The development server and watchdog is for development and testing purposes only. It is neither performant nor secure enough for production use.</p> <p>You can start the Nautobot development server with the <code>invoke start</code> command (if using Docker), or the <code>nautobot-server runserver</code> management command:</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke start</code> <code>nautobot-server runserver</code> <p>For example:</p> <pre><code>nautobot-server runserver\n</code></pre> <p>Example output:</p> <pre><code>Performing system checks...\n\nSystem check identified no issues (0 silenced).\nNovember 18, 2020 - 15:52:31\nDjango version 3.1, using settings 'nautobot.core.settings'\nStarting development server at http://127.0.0.1:8080/\nQuit the server with CONTROL-C.\n</code></pre> <p>Warning</p> <p>Do not use <code>poetry run nautobot-server runserver</code> as it will crash unless you also pass the <code>--noreload</code> flag, which somewhat defeats the purpose of using the development server. It is recommended to use <code>nautobot-server runserver</code> from within an active virtualenv (e.g. <code>poetry shell</code>). This is a known issue with Django and Poetry.</p> <p>Please see the official Django documentation on <code>runserver</code> for more information.</p> <p>You can then log into the development server at <code>localhost:8080</code> with the superuser you created.</p>"},{"location":"development/getting-started.html#starting-the-worker-server","title":"Starting the Worker Server","text":"<p>In order to run Nautobot Jobs or anything that requires a worker you must start a Celery worker.</p> <p>The worker is started in Docker Workflow with watchdog and can be setup to be started with watchdog in the Virtual Environment Workflow. Watchdog provides a similar experience to the Django lightweight HTTP/WSGI for restarting your application automatically. Watchdog can watch for changes on your filesystem, this is helpful when adjusting existing Python files to not have to restart the celery worker when testing jobs.</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke start</code> <code>nautobot-server celery worker</code> <p>Tip</p> <p>You can leverage watchdog for your celery worker as described above, with the following watchmedo command in your development environment <code>watchmedo auto-restart --directory './' --pattern '*.py' --recursive -- nautobot-server celery worker -l INFO --events</code>.</p>"},{"location":"development/getting-started.html#starting-the-interactive-shell","title":"Starting the Interactive Shell","text":"<p>Nautobot provides an interactive Python shell that sets up the server environment and gives you direct access to the database models for debugging. Nautobot extends this slightly to automatically import models and other utilities.</p> <p>Run the Nautobot interactive shell with <code>invoke nbshell</code> (Docker) or the <code>nautobot-server nbshell</code> management command:</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke nbshell</code> <code>nautobot-server nbshell</code> <p>For example:</p> <pre><code>nautobot-server nbshell\n</code></pre> <p>Example output:</p> <pre><code>### Nautobot interactive shell (localhost)\n### Python 3.11.4 | Django 3.2.20 | Nautobot 1.6.0\n### lsmodels() will show available models. Use help(&lt;model&gt;) for more info.\n&gt;&gt;&gt;\n</code></pre>"},{"location":"development/getting-started.html#post-upgrade-operations","title":"Post-upgrade Operations","text":"<p>There will be times where you're working with the bleeding edge of Nautobot from the <code>develop</code> branch or feature branches and will need to pull in database changes or run server operations.</p> <p>Get into the habit of running <code>nautobot-server post_upgrade</code> (or <code>invoke post-upgrade</code> when using Docker) after you pull in a major set of changes from Nautobot, which performs a handful of common operations (such as <code>migrate</code>) from a single command:</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke post-upgrade</code> <code>nautobot-server post_upgrade</code> <p>Please see the documentation on the <code>nautobot-server post_upgrade</code> command for more information.</p>"},{"location":"development/getting-started.html#reinstalling-nautobot","title":"Reinstalling Nautobot","text":"<p>Note</p> <p>This mostly applies to working with Nautobot in a virtualenv, since Docker containers are typically rebuilt when the code changes.</p> <p>Sometimes when files are renamed, moved, or deleted and you've been working in the same environment for a while, you can encounter weird behavior. If this happens, don't panic and nuke your environment.</p> <p>First, use <code>pip3</code> to explicitly uninstall the Nautobot package from the environment:</p> <pre><code>pip3 uninstall -y nautobot\n</code></pre> <p>Example output:</p> <pre><code>Found existing installation: nautobot 1.0.0b2\nUninstalling nautobot-1.0.0b2:\n  Successfully uninstalled nautobot-1.0.0b2\n</code></pre> <p>Then try to just have Poetry do the right thing by telling it to install again:</p> <pre><code>poetry install\n</code></pre> <p>Example output:</p> <pre><code>Installing dependencies from lock file\n\nNo dependencies to install or update\n\nInstalling the current project: nautobot (1.0.0-beta.2)\n</code></pre>"},{"location":"development/getting-started.html#running-tests","title":"Running Tests","text":"<p>Throughout the course of development, it's a good idea to occasionally run Nautobot's test suite to catch any potential errors. Tests come in two primary flavors: Unit tests and integration tests.</p> <p>For information about writing tests, refer to the testing documentation.</p>"},{"location":"development/getting-started.html#unit-tests","title":"Unit Tests","text":"<p>Unit tests are automated tests written and run to ensure that a section of the Nautobot application (known as the \"unit\") meets its design and behaves as intended and expected. Most commonly as a developer of or contributor to Nautobot you will be writing unit tests to exercise the code you have written. Unit tests are not meant to test how the application behaves, only the individual blocks of code, therefore use of mock data and phony connections is common in unit test code. As a guiding principle, unit tests should be fast, because they will be executed quite often.</p> <p>Unit tests are run using the <code>invoke unittest</code> command (if using the Docker development environment) or the <code>nautobot-server test</code> command:</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke unittest</code> <code>nautobot-server --config=nautobot/core/tests/nautobot_config.py test nautobot</code> <p>Info</p> <p>By default <code>invoke unittest</code> will start and run the unit tests inside the Docker development container; this ensures that PostgreSQL and Redis servers are available during the test. However, if you have your environment configured such that <code>nautobot-server</code> can run locally, outside of the Docker environment, you may wish to set the environment variable <code>INVOKE_NAUTOBOT_LOCAL=True</code> to execute these tests in your local environment instead. See the Invoke configuration for more information.</p> <p>In cases where you haven't made any changes to the database (which is most of the time), you can append the <code>--keepdb</code> argument to this command to reuse the test database between runs. This cuts down on the time it takes to run the test suite since the database doesn't have to be rebuilt each time.</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke unittest --keepdb</code> <code>nautobot-server --config=nautobot/core/tests/nautobot_config.py test --keepdb nautobot</code> <p>Note</p> <p>Using the <code>--keepdb</code> argument will raise errors if you've modified any model fields since the previous test run.</p> <p>Warning</p> <p>In some cases when tests fail and exit uncleanly it may leave the test database in an inconsistent state. If you encounter errors about missing objects, remove <code>--keepdb</code> and run the tests again.</p>"},{"location":"development/getting-started.html#integration-tests","title":"Integration Tests","text":"<p>Integration tests are automated tests written and run to ensure that the Nautobot application behaves as expected when being used as it would be in practice. By contrast to unit tests, where individual units of code are being tested, integration tests rely upon the server code actually running, and web UI clients or API clients to make real connections to the service to exercise actual workflows, such as navigating to the login page, filling out the username/passwords fields, and clicking the \"Log In\" button.</p> <p>Running integrations tests requires the use of Docker at this time. They can be directly invoked using <code>nautobot-server test</code> just as unit tests can, however, a headless Firefox browser provided by Selenium is required. Because Selenium installation and setup is complicated, we have included a configuration for this to work out of the box using Docker.</p> <p>The Selenium container is running a standalone, headless Firefox \"web driver\" browser that can be remotely controlled by Nautobot for use in integration testing.</p> <p>Before running integration tests, the <code>selenium</code> container must be running. If you are using the Docker Compose workflow, it is automatically started for you. For the Virtual Environment workflow, you must start it manually.</p> Docker Compose Workflow Virtual Environment Workflow (automatic) <code>invoke start --service selenium</code> <p>Integration tests are run using the <code>invoke integration-test</code> command. All integration tests must inherit from <code>nautobot.utilities.testing.integration.SeleniumTestCase</code>, which itself is tagged with <code>integration</code>. A custom test runner has been implemented to automatically skip any test case tagged with <code>integration</code> by default, so normal unit tests run without any concern. To run the integration tests the <code>--tag integration</code> argument must be passed to <code>nautobot-server test</code>.</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke integration-test</code> <code>nautobot-server --config=nautobot/core/tests/nautobot_config.py test --tag integration nautobot</code> <p>Info</p> <p>The same arguments supported by <code>invoke unittest</code> are supported by <code>invoke integration-test</code>. The key difference being the dependency upon the Selenium container, and inclusion of the <code>integration</code> tag.</p> <p>Tip</p> <p>You may also use <code>invoke integration-test</code> in the Virtual Environment workflow given that the <code>selenium</code> container is running, and that the <code>INVOKE_NAUTOBOT_LOCAL=True</code> environment variable has been set.</p>"},{"location":"development/getting-started.html#customizing-integration-test-executions","title":"Customizing Integration Test Executions","text":"<p>The following environment variables can be provided when running tests to customize where Nautobot looks for Selenium and where Selenium looks for Nautobot. If using the default setup documented above, there is no need to customize these.</p> <ul> <li><code>NAUTOBOT_SELENIUM_URL</code> - The URL used by the Nautobot test runner to remotely control the headless Selenium Firefox node. You can provide your own, but it must be a <code>Remote</code> WebDriver. (Default: <code>http://localhost:4444/wd/hub</code>; for Docker: <code>http://selenium:4444/wd/hub</code>)</li> <li><code>NAUTOBOT_SELENIUM_HOST</code> - The hostname used by the Selenium WebDriver to access Nautobot using Firefox. (Default: <code>host.docker.internal</code>; for Docker: <code>nautobot</code>)</li> </ul>"},{"location":"development/getting-started.html#verifying-the-rest-api-schema","title":"Verifying the REST API Schema","text":"<p>If you make changes to the REST API, you should verify that the REST API OpenAPI schema renders correctly without errors. To verify that there are no errors, you can run the <code>invoke check-schema</code> command (if using the Docker development environment) or the <code>nautobot-server spectacular</code> command. In the latter case you should run the command for each supported REST API version that Nautobot provides (e.g. \"1.2\", \"1.3\")</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke check-schema</code> <code>nautobot-server spectacular --api-version 1.2 --validate --fail-on-warn --file /dev/null</code>"},{"location":"development/getting-started.html#verifying-code-style-and-static-analysis","title":"Verifying Code Style and Static Analysis","text":"<p>To enforce best practices around consistent coding style, Nautobot uses Flake8 and Black. Additionally, static analysis of Nautobot code is performed by Pylint. You should run all of these commands and ensure that they pass fully with regard to your code changes before opening a pull request upstream.</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke flake8</code> <code>flake8</code> <code>invoke black</code> <code>black</code> <code>invoke pylint</code> <code>nautobot-server pylint nautobot tasks.py &amp;&amp; nautobot-server pylint --recursive development/ examples/</code>"},{"location":"development/getting-started.html#handling-migrations","title":"Handling Migrations","text":"<p>If you're unsure whether a database schema migration is needed based on your changes, you can run the following command:</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke check-migrations</code> <code>nautobot-server --config=nautobot/core/tests/nautobot_config.py makemigrations --dry-run --check</code> <p>If your branch modifies a Django model (and as a result requires a database schema modification), please be sure to provide a meaningful name to the migration before pushing.</p> <ul> <li>If you have yet to run <code>invoke makemigrations</code>, you can pass in a name for the migration with the <code>-n</code> option, example <code>invoke makemigrations -n provider_increase_account_length</code>.</li> <li>If you have already run <code>invoke makemigrations</code>, rename the generated migration files, for example <code>0004_provider_increase_account_length</code> instead of <code>0004_auto_20211220_2104</code>.</li> </ul> <p>You\u2019ll also want to run <code>black</code> against the generated migration file as the autogenerated code doesn\u2019t follow our style guide by default.</p> <p>When modifying model field attributes, modify the test data in the tests too to reflect these changes and also any forms which refer to the model.</p>"},{"location":"development/getting-started.html#working-on-documentation","title":"Working on Documentation","text":"<p>Some features require documentation updates or new documentation to be written. The documentation files can be found in the <code>docs</code> directory. To preview these changes locally, you can use <code>mkdocs</code>.</p> <p>For substantial changes to the code (including new features, removal of existing features, or significant changes in behavior) you should always make corresponding documentation updates. Nautobot's documentation pipeline includes a custom plugin for <code>mkdocs</code> that adds a few useful macros for annotating such changes:</p> <ul> <li><code>+++ 1.4.3</code>, on a line by itself, is a shorthand for <code>!!! version-added \"Added in version 1.4.3\"</code></li> <li><code>+/- 1.4.3</code>, on a line by itself, is a shorthand for <code>!!! version-changed \"Changed in version 1.4.3\"</code></li> <li><code>--- 1.4.3</code>, on a line by itself, is a shorthand for <code>!!! version-removed \"Removed in version 1.4.3\"</code></li> </ul> <p>These admonitions in turn appear in the rendered documentation as follows:</p> <p>Added in version 1.4.3</p> <p>Changed in version 1.4.3</p> <p>Removed in version 1.4.3</p> <p>You can also add text to any of these admonitions for further clarity, for example:</p> <pre><code>+++ 1.4.3\n    The custom `mkdocs` plugin was added.\n</code></pre> <p>will render as:</p> <p>Added in version 1.4.3</p> <p>The custom <code>mkdocs</code> plugin was added.</p> <p>Caution</p> <p>While you can use the <code>version-added</code> / <code>version-changed</code> / <code>version-removed</code> admonitions directly to add a custom title to a specific admonition, in general, you should use the macros for consistency across the documentation.</p>"},{"location":"development/getting-started.html#writing-documentation","title":"Writing Documentation","text":"<p>You can preview the documentation using the server built into mkdocs, which should start a web server at <code>http://localhost:8001</code>.</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke start -s mkdocs</code> <code>mkdocs serve</code> <p>Documentation is written in Markdown. If you need to add additional pages or sections to the documentation, you can add them to <code>mkdocs.yml</code> at the root of the repository.</p>"},{"location":"development/getting-started.html#verifying-documentation","title":"Verifying Documentation","text":"<p>Nautobot uses <code>markdownlint-cli</code> to verify correctness of the documentation. You should run this command and ensure that it passes fully with regard to your documentation changes before opening a pull request upstream.</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke markdownlint</code> <code>markdownlint --ignore nautobot/project-static --config .markdownlint.yml nautobot examples *.md</code>"},{"location":"development/getting-started.html#submitting-pull-requests","title":"Submitting Pull Requests","text":"<p>Once you're happy with your work and have verified that all tests pass, commit your changes and push it upstream to your fork. Always provide descriptive (but not excessively verbose) commit messages. When working on a specific issue, be sure to reference it.</p> <pre><code>git commit -m \"Closes #1234: Add IPv5 support\"\ngit push origin\n</code></pre> <p>Once your fork has the new commit, submit a pull request to the Nautobot repo to propose the changes. Be sure to provide a detailed accounting of the changes being made and the reasons for doing so.</p> <p>Once submitted, a maintainer will review your pull request and either merge it or request changes. If changes are needed, you can make them via new commits to your fork: The pull request will update automatically.</p> <p>Note</p> <p>Remember, pull requests are entertained only for accepted issues. If an issue you want to work on hasn't been approved by a maintainer yet, it's best to avoid risking your time and effort on a change that might not be accepted.</p>"},{"location":"development/getting-started.html#troubleshooting","title":"Troubleshooting","text":"<p>Below are common issues you might encounter in your development environment and how to address them.</p>"},{"location":"development/getting-started.html#fatal-sorry-too-many-clients-already","title":"FATAL: sorry, too many clients already","text":"<p>When using <code>nautobot-server runserver</code> to do development you might run into a traceback that looks something like this:</p> <pre><code>Exception Type: OperationalError at /extras/tags/\nException Value: FATAL:  sorry, too many clients already\n</code></pre> <p>The <code>runserver</code> development server is multi-threaded by default, which means that every request is creating its own connection. If you are doing some local testing or development that is resulting in a lot of connections to the database, pass <code>--nothreading</code> to the runserver command to disable threading:</p> <pre><code>nautobot-server runserver --nothreading\n</code></pre>"},{"location":"development/homepage.html","title":"Populating the Home Page","text":"<p>Added in version 1.2.0</p> <p>Both core applications and plugins can contribute items to the Nautobot home page by defining <code>layout</code> inside of their app's <code>homepage.py</code>. Using a key and weight system, a developer can integrate amongst existing home page panels or can create entirely new panels as desired.</p>"},{"location":"development/homepage.html#adding-a-new-home-page-panel","title":"Adding a new Home Page Panel","text":"<p>Each panel on the home page is defined by a <code>HomePagePanel</code> object. A <code>HomePagePanel</code> may contain either or both of <code>HomePageItem</code> and/or <code>HomePageGroup</code> objects, or may define custom content via a referenced Django template. A <code>HomePageGroup</code> may itself contain <code>HomePageItem</code> objects as well, and individual <code>HomePageItem</code> objects may also reference custom Django templates.</p> <p>Some examples:</p> <p></p> <p>This is a single <code>HomePagePanel</code> (defined in <code>nautobot/dcim/homepage.py</code>) containing four <code>HomePageItem</code> and one <code>HomePageGroup</code> (the <code>Connections</code> group, which in turn contains four more <code>HomePageItem</code>). Using these objects together allows you to create panels that match the visual style of most other panels on the Nautobot home page.</p> <p></p> <p>This is a <code>HomePagePanel</code> (defined in <code>nautobot/extras/homepage.py</code>) that uses a custom template to render content that doesn't fit into the <code>HomePageGroup</code>/<code>HomePageItem</code> pattern.</p> <p>The position of a panel in the home page is defined by its <code>weight</code>. The lower the weight the closer to the start (top/left) of the home page the object will be. All core objects have weights in multiples of 100, meaning there is plenty of space around the objects for plugins to customize.</p> <p>In the below code example, you can see that the <code>Example Plugin</code> panel has a <code>weight</code> value of <code>150</code>. This means it will appear between <code>Organization</code> (weight <code>100</code>) and <code>DCIM</code> (weight <code>200</code>).</p> <p>Tip</p> <p>Weights for already existing items can be found in the Nautobot source code (in <code>nautobot/&lt;app&gt;/homepage.py</code>) or with a web session open to your Nautobot instance, you can inspect an element of the home page using the developer tools.</p> <p>Example of custom code being used in a panel can be seen in the <code>Custom Example Plugin</code> panel below. The attribute <code>custom_template</code> is used to refer to the filename of a template. Templates need to be stored in the templates <code>inc</code> folder for the plugin (<code>/example_plugin/templates/example_plugin/inc/</code>).</p> <p>If additional data is needed to render the custom template, callback functions can be used to collect this data. In the below example, the <code>Custom Example Plugin</code> panel is using the callback <code>get_example_data()</code> to dynamically populate the key <code>example_data</code> into the rendering context of this panel.</p> <pre><code>from nautobot.core.apps import HomePageItem, HomePagePanel\nfrom .models import ExampleModel\ndef get_example_data(request):\nreturn ExampleModel.objects.all()\nlayout = (\nHomePagePanel(\nname=\"Example Plugin\",\nweight=150,\nitems=(\nHomePageItem(\nname=\"Example Models\",\nlink=\"plugins:example_plugin:examplemodel_list\",\ndescription=\"List example plugin models.\",\npermissions=[\"example_plugin.view_examplemodel\"],\nweight=100,\n),\n),\n),\nHomePagePanel(\nname=\"Custom Example Plugin\",\ncustom_template=\"panel_example_example.html\",\ncustom_data={\"example_data\": get_example_data},\npermissions=[\"example_plugin.view_examplemodel\"],\nweight=350,\n),\n)\n</code></pre>"},{"location":"development/navigation-menu.html","title":"Populating the Navigation Menu","text":"<p>Both core applications and plugins can contribute items to the navigation menu by defining <code>menu_items</code> inside of their app's <code>navigation.py</code>. Using the key and weight system, a developer can integrate amongst existing menu tabs, groups, items and buttons and/or create entirely new menus as desired.</p>"},{"location":"development/navigation-menu.html#modifying-existing-menu","title":"Modifying Existing Menu","text":"<p>By defining an object with the same identifier, a developer can modify existing objects. The example below shows modifying an existing tab to have a new group.</p> <p>A tab object is being created with the same identifier as an existing object using the <code>name</code> attribute. Then a group is being created with a weight of <code>150</code>, which means it will appear between the already defined <code>Circuits</code> and <code>Provider</code> groups.</p> <p>Tip</p> <p>Weights for already existing items can be found in the nautobot source code (in <code>navigation.py</code>) or with a web session open to your nautobot instance, you can inspect an element of the navbar using the developer tools. Each type of element will have an attribute <code>data-{type}-weight</code>. The type can be <code>tab</code>, <code>group</code>, <code>item</code> or <code>button</code>.</p> <p>This pattern works for modifying all objects in the tree. New items can be added to existing groups and new buttons can be added to existing items.</p> <pre><code>menu_tabs = (\nNavMenuTab(\nname=\"Circuits\",\ngroups=(\nNavMenuGroup(\nname=\"Example Circuit Group\",\nweight=150,\nitems=(\nNavMenuItem(\nlink=\"plugins:example_plugin:examplemodel_list\",\nname=\"Example Model\",\npermissions=[\n\"example_plugin.view_examplemodel\"\n],\nbuttons=(\nNavMenuAddButton(\nlink=\"plugins:example_plugin:examplemodel_add\",\npermissions=[\n\"example_plugin.add_examplemodel\",\n],\n),\nNavMenuImportButton(\nlink=\"plugins:example_plugin:examplemodel_import\",\npermissions=[\n\"example_plugin.add_examplemodel\"\n],\n),\n),\n),\n),\n),\n),\n),\n)\n</code></pre>"},{"location":"development/navigation-menu.html#adding-a-new-menu","title":"Adding a New Menu","text":"<p>The code below shows how to add a new tab to the navbar. A tab is defined by a <code>NavMenuTab</code> object. Similarly a group is defined using <code>NavMenuGroup</code>. Both of these objects are used as containers for actual items.</p> <p>The position in the navigation menu is defined by the weight. The lower the weight the closer to the start of the menus the object will be. All core objects have weights in multiples of 100, meaning there is plenty of space around the objects for plugins to customize.</p> <p>Below you can see <code>Example Tab</code> has a weight value of <code>150</code>. This means the tab will appear between <code>Organization</code> and <code>Devices</code>.</p> <pre><code>from nautobot.core.apps import NavMenuAddButton, NavMenuGroup, NavMenuItem, NavMenuImportButton, NavMenuTab\nmenu_items = (\nNavMenuTab(\nname=\"Example Tab\",\nweight=150,\ngroups=(\nNavMenuGroup(\nname=\"Example Group 1\",\nweight=100,\nitems=(\nNavMenuItem(\nlink=\"plugins:example_plugin:examplemodel_list\",\nlink_text=\"Example Model\",\npermissions=[\n\"example_plugin.view_examplemodel\"\n],\nbuttons=(\nNavMenuAddButton(\nlink=\"plugins:example_plugin:examplemodel_add\",\npermissions=[\n\"example_plugin.add_examplemodel\",\n],\n),\nNavMenuImportButton(\nlink=\"plugins:example_plugin:examplemodel_import\",\npermissions=[\n\"example_plugin.add_examplemodel\"\n],\n),\n),\n),\n),\n),\n),\n),\n)\n</code></pre>"},{"location":"development/navigation-menu.html#classes-and-attributes","title":"Classes and Attributes","text":"<p>Note</p> <p>For the <code>NavMenuTab</code>, <code>NavMenuGroup</code>, and <code>NavMenuItem</code> objects to be hidden when the user does not have permissions, set <code>HIDE_RESTRICTED_UI = True</code> in the <code>nautobot_config.py</code>. Please refer to HIDE_RESTRICTED_UI</p> <p>A <code>NavMenuTab</code> has the following attributes:</p> <ul> <li><code>name</code> - Display name to be shown in navigation menu</li> <li><code>weight</code> - Defines the position the object should be displayed at (optional)</li> <li><code>permissions</code> - A list of permissions required to display this link (optional)</li> <li><code>groups</code> - List or tuple of <code>NavMenuGroup</code></li> </ul> <p>A <code>NavMenuGroup</code> has the following attributes:</p> <ul> <li><code>name</code> - Display name to be shown in navigation menu</li> <li><code>weight</code> - Defines the position the object should be displayed at (optional)</li> <li><code>permissions</code> - A list of permissions required to display this link (optional)</li> <li><code>items</code> - List or tuple of <code>NavMenuItem</code></li> </ul> <p>A <code>NavMenuItem</code> has the following attributes:</p> <ul> <li><code>link</code> - The name of the URL path to which this menu item links</li> <li><code>name</code> - The text presented to the user</li> <li><code>weight</code> - Defines the position the object should be displayed at (optional)</li> <li><code>permissions</code> - A list of permissions required to display this link (optional)</li> <li><code>buttons</code> - An iterable of NavMenuButton (or subclasses of NavMenuButton) instances to display (optional)</li> </ul> <p>Note</p> <p>Any buttons associated within a menu item will be hidden if the user does not have permission to access the menu item, regardless of what permissions are set on the buttons.</p> <p>A <code>NavMenuButton</code> has the following attributes:</p> <ul> <li><code>title</code> - The tooltip text (displayed when the mouse hovers over the button)</li> <li><code>link</code> - The name of the URL path to which this button links</li> <li><code>weight</code> - Defines the position the object should be displayed at (optional)</li> <li><code>icon_class</code> - Button icon CSS classes (Nautobot currently supports Material Design Icons or one of the choices provided by <code>ButtonActionIconChoices</code>)</li> <li><code>button_class</code> - One of the choices provided by <code>ButtonActionColorChoices</code> (optional)</li> <li><code>permissions</code> - A list of permissions required to display this button (optional)</li> </ul> <p>Note</p> <p><code>NavMenuAddButton</code> and <code>NavMenuImportButton</code> are subclasses of <code>NavMenuButton</code> that can be used to provide the commonly used \"Add\" and \"Import\" buttons.</p>"},{"location":"development/release-checklist.html","title":"Release Checklist","text":"<p>This document is intended for Nautobot maintainers and covers the steps to perform when releasing new versions.</p>"},{"location":"development/release-checklist.html#minor-version-bumps","title":"Minor Version Bumps","text":""},{"location":"development/release-checklist.html#update-requirements","title":"Update Requirements","text":"<p>Required Python packages are maintained in two files: <code>pyproject.toml</code> and <code>poetry.lock</code>.</p>"},{"location":"development/release-checklist.html#the-pyprojecttoml-file","title":"The <code>pyproject.toml</code> file","text":"<p>Python packages are defined inside of <code>pyproject.toml</code>. The <code>[tool.poetry.dependencies]</code> section of this file contains a list of all the packages required by Nautobot.</p> <p>Where possible, we use tilde requirements to specify a minimal version with some ability to update, for example:</p> <pre><code># REST API framework\ndjangorestframework = \"~3.12.2\"\n</code></pre> <p>This would allow Poetry to install <code>djangorestframework</code> versions <code>&gt;=3.12.2</code> but <code>&lt;3.13.0</code>.</p>"},{"location":"development/release-checklist.html#the-poetrylock-file","title":"The <code>poetry.lock</code> file","text":"<p>The other file is <code>poetry.lock</code>, which is managed by Poetry and contains package names, versions, and other metadata.</p> <p>Each of the required packages pinned to its current stable version. When Nautobot is installed, this file is used to resolve and install all dependencies listed in <code>pyproject.toml</code>, but Poetry will use the exact versions found in <code>poetry.lock</code> to ensure that a new release of a dependency doesn't break Nautobot.</p> <p>Warning</p> <p>You must never directly edit this file. You will use <code>poetry update</code> commands to manage it.</p>"},{"location":"development/release-checklist.html#run-poetry-update","title":"Run <code>poetry update</code>","text":"<p>Every minor version release should refresh <code>poetry.lock</code>, so that it lists the most recent stable release of each package. To do this:</p> <ol> <li>Review each requirement's release notes for any breaking or otherwise noteworthy changes.</li> <li>Run <code>poetry update &lt;package&gt;</code> to update the package versions in <code>poetry.lock</code> as appropriate.</li> <li>If a required package requires updating to a new release not covered in the version constraints for a package as defined in <code>pyproject.toml</code>, (e.g. <code>Django ~3.1.7</code> would never install <code>Django &gt;=4.0.0</code>), update it manually in <code>pyproject.toml</code>.</li> <li>Run <code>poetry install</code> to install the refreshed versions of all required packages.</li> <li>Run all tests and check that the UI and API function as expected.</li> </ol> <p>Hint</p> <p>You may use <code>poetry update --dry-run</code> to have Poetry automatically tell you what package updates are available and the versions it would upgrade.</p>"},{"location":"development/release-checklist.html#update-static-libraries","title":"Update Static Libraries","text":"<p>Update the following static libraries to their most recent stable release:</p> <ul> <li>Bootstrap 3</li> <li>Material Design Icons</li> <li>Select2</li> <li>jQuery</li> <li>jQuery UI</li> </ul>"},{"location":"development/release-checklist.html#link-to-the-release-notes-page","title":"Link to the Release Notes Page","text":"<p>Add the release notes (<code>docs/release-notes/X.Y.md</code>) to the table of contents within <code>mkdocs.yml</code>, and point <code>index.md</code> to the new file.</p>"},{"location":"development/release-checklist.html#verify-and-revise-the-install-documentation","title":"Verify and Revise the Install Documentation","text":"<p>Follow the install instructions to perform a new production installation of Nautobot.</p> <p>The goal of this step is to walk through the entire install process as documented to make sure nothing there needs to be changed or updated, to catch any errors or omissions in the documentation, and to ensure that it is current with each release.</p> <p>Tip</p> <p>Fire up <code>mkdocs serve</code> in your development environment to start the documentation server! This allows you to view the documentation locally and automatically rebuilds the documents as you make changes.</p> <p>Commit any necessary changes to the documentation before proceeding with the release.</p>"},{"location":"development/release-checklist.html#close-the-release-milestone","title":"Close the Release Milestone","text":"<p>Close the release milestone on GitHub after ensuring there are no remaining open issues associated with it.</p>"},{"location":"development/release-checklist.html#all-releases","title":"All Releases","text":""},{"location":"development/release-checklist.html#verify-ci-build-status","title":"Verify CI Build Status","text":"<p>Ensure that continuous integration testing on the <code>develop</code> branch is completing successfully.</p>"},{"location":"development/release-checklist.html#bump-the-version","title":"Bump the Version","text":"<p>Update the package version using <code>poetry version</code>. This command shows the current version of the project or bumps the version of the project and writes the new version back to <code>pyproject.toml</code> if a valid bump rule is provided.</p> <p>The new version should ideally be a valid semver string or a valid bump rule: <code>patch</code>, <code>minor</code>, <code>major</code>, <code>prepatch</code>, <code>preminor</code>, <code>premajor</code>, <code>prerelease</code>. Always try to use a bump rule when you can.</p> <p>Display the current version with no arguments:</p> <pre><code>poetry version\n</code></pre> <p>Example output:</p> <pre><code>nautobot 1.0.0-beta.2\n</code></pre> <p>Bump pre-release versions using <code>prerelease</code>:</p> <pre><code>poetry version prerelease\n</code></pre> <p>Example output:</p> <pre><code>Bumping version from 1.0.0-beta.2 to 1.0.0-beta.3\n</code></pre> <p>For major versions, use <code>major</code>:</p> <pre><code>poetry version major\n</code></pre> <p>Example output:</p> <pre><code>Bumping version from 1.0.0-beta.2 to 1.0.0\n</code></pre> <p>For patch versions, use <code>minor</code>:</p> <pre><code>poetry version minor\n</code></pre> <p>Example output:</p> <pre><code>Bumping version from 1.0.0 to 1.1.0\n</code></pre> <p>And lastly, for patch versions, you guessed it, use <code>patch</code>:</p> <pre><code>poetry version patch\n</code></pre> <p>Example output:</p> <pre><code>Bumping version from 1.1.0 to 1.1.1\n</code></pre> <p>Please see the official Poetry documentation on <code>version</code> for more information.</p>"},{"location":"development/release-checklist.html#update-the-changelog","title":"Update the Changelog","text":"<p>Create a release branch off of <code>develop</code> (<code>git checkout -b release/1.4.3 develop</code>)</p> <p>Generate release notes with <code>towncrier build --version 1.4.3</code> and answer <code>yes</code> to the prompt <code>Is it okay if I remove those files? [Y/n]:</code>. This will update the release notes in <code>nautobot/docs/release-notes/version-1.4.md</code>, stage that file in git, and <code>git rm</code> all of the fragments that have now been incorporated into the release notes.</p> <p>Run <code>invoke markdownlint</code> to make sure the generated release notes pass the linter checks.</p> <p>Check the git diff to verify the changes are correct (<code>git diff --cached</code>).</p> <p>Commit and push the staged changes.</p> <p>Important</p> <p>The changelog must adhere to the Keep a Changelog style guide.</p>"},{"location":"development/release-checklist.html#submit-pull-request","title":"Submit Pull Request","text":"<p>Submit a pull request titled \"Release vX.Y.Z\" to merge your release branch into <code>main</code>. Copy the documented release notes into the pull request's body.</p> <p>Once CI has completed on the PR, merge it.</p> <p>Important</p> <p>Do not squash merge this branch into <code>main</code>. Make sure to select <code>Create a merge commit</code> when merging in GitHub.</p>"},{"location":"development/release-checklist.html#create-a-new-release","title":"Create a New Release","text":"<p>Draft a new release with the following parameters.</p> <ul> <li>Tag: Current version (e.g. <code>v1.0.0</code>)</li> <li>Target: <code>main</code></li> <li>Title: Version and date (e.g. <code>v1.0.0 - 2021-06-01</code>)</li> </ul> <p>Copy the description from the pull request to the release.</p>"},{"location":"development/release-checklist.html#publish-to-pypi","title":"Publish to PyPI","text":"<p>Now that there is a tagged release, the final step is to upload the package to the Python Package Index.</p> <p>First, you'll need to render the documentation.</p> <pre><code>poetry run mkdocs build --no-directory-urls --strict\n</code></pre> <p>Second, you'll need to build the Python package distributions (which will include the rendered documentation):</p> <pre><code>poetry build\n</code></pre> <p>Finally, publish to PyPI using the username <code>__token__</code> and the Nautobot PyPI API token as the password. The API token can be found in the Nautobot maintainers vault (if you're a maintainer, you'll have access to this vault):</p> <pre><code>poetry publish --username __token__ --password &lt;api_token&gt;\n</code></pre>"},{"location":"development/release-checklist.html#publish-docker-images","title":"Publish Docker Images","text":"<p>Build the images locally:</p> <pre><code>for ver in 3.8 3.9 3.10 3.11; do\n  export INVOKE_NAUTOBOT_PYTHON_VER=$ver\n  invoke buildx --target final --tag networktocode/nautobot-py${INVOKE_NAUTOBOT_PYTHON_VER}:local\n  invoke buildx --target final-dev --tag networktocode/nautobot-dev-py${INVOKE_NAUTOBOT_PYTHON_VER}:local\ndone\n</code></pre> <p>Test the images locally - to do this you need to set the following in your <code>invoke.yml</code>:</p> <pre><code>---\nnautobot:\ncompose_files:\n- \"docker-compose.yml\"\n- \"docker-compose.postgres.yml\"\n- \"docker-compose.final.yml\"\n</code></pre> <p>Warning</p> <p>You should not include <code>docker-compose.dev.yml</code> in this test scenario!</p> <pre><code>for ver in 3.8 3.9 3.10 3.11; do\n  export INVOKE_NAUTOBOT_PYTHON_VER=$ver\n  invoke stop\n  invoke integration-tests\ndone\n</code></pre> <p>Push the images to GitHub Container Registry and Docker Hub</p> <pre><code>docker login\ndocker login ghcr.io\nfor ver in 3.8 3.9 3.10 3.11; do\n  export INVOKE_NAUTOBOT_PYTHON_VER=$ver\n  invoke docker-push main\ndone\n</code></pre>"},{"location":"development/release-checklist.html#bump-the-development-version","title":"Bump the Development Version","text":"<p>Create a new branch off of <code>main</code> and use <code>poetry version prepatch</code> to bump the version to the next release. Then open a pull request to the <code>develop</code> branch to update the version and sync the release notes and changelog fragment updates from <code>main</code>.</p> <p>For example, if you just released <code>v1.1.0</code>:</p> <pre><code>poetry version prepatch\n</code></pre> <p>Example output:</p> <pre><code>Bumping version from 1.1.0 to 1.1.1-alpha.0\n</code></pre> <p>Important</p> <p>Do not squash merge this branch into <code>develop</code>. Make sure to select <code>Create a merge commit</code> when merging in GitHub.</p>"},{"location":"development/style-guide.html","title":"Style Guide","text":"<p>Nautobot generally follows the Django style guide, which is itself based on PEP 8. The following tools are used to enforce coding style and best practices:</p> <ul> <li>Flake8 is used to validate code style.</li> <li>Black is used to enforce code formatting conventions.</li> <li>Pylint is used for Python static code analysis.</li> <li>Hadolint is used to lint and validate Docker best practices in the Dockerfile.</li> <li>MarkdownLint-cli is used to lint and validate Markdown (documentation) files.</li> </ul> <p>Nautobot-specific configuration of these tools is maintained in the files <code>.flake8</code>, <code>.markdownlint.yml</code>, or <code>pyproject.toml</code> as appropriate to the individual tool.</p> <p>It is strongly recommended to include all of the above tools as part of your commit process before opening any pull request. A Git commit hook is provided in the source at <code>scripts/git-hooks/pre-commit</code>. Linking to this script from <code>.git/hooks/</code> will invoke these tools prior to every commit attempt and abort if the validation fails.</p> <pre><code>cd .git/hooks/\nln -s ../../scripts/git-hooks/pre-commit\n</code></pre> <p>You can also invoke these utilities manually against the development Docker containers by running:</p> <pre><code>invoke flake8\ninvoke black\ninvoke check-migrations\ninvoke hadolint\ninvoke markdownlint\ninvoke pylint\n</code></pre>"},{"location":"development/style-guide.html#introducing-new-dependencies","title":"Introducing New Dependencies","text":"<p>The introduction of a new dependency is best avoided unless it is absolutely necessary. For small features, it's generally preferable to replicate functionality within the Nautobot code base rather than to introduce reliance on an external project. This reduces both the burden of tracking new releases and our exposure to outside bugs and attacks.</p> <p>If there's a strong case for introducing a new dependency, it must meet the following criteria:</p> <ul> <li>Its complete source code must be published and freely accessible without registration.</li> <li>Its license must be conducive to inclusion in an open source project.</li> <li>It must be actively maintained, with no longer than one year between releases.</li> <li>It must be available via the Python Package Index (PyPI).</li> </ul> <p>New dependencies can be added to the project via the <code>poetry add</code> command. This will correctly add the dependency to <code>pyproject.toml</code> as well as the <code>poetry.lock</code> file. You should then update the <code>pyproject.toml</code> with a comment providing a short description of the package and/or how Nautobot is making use of it.</p>"},{"location":"development/style-guide.html#general-guidance","title":"General Guidance","text":"<ul> <li> <p>When in doubt, remain consistent: It is better to be consistently incorrect than inconsistently correct. If you notice in the course of unrelated work a pattern that should be corrected, continue to follow the pattern for now and open a bug so that the entire code base can be evaluated at a later point.</p> </li> <li> <p>Prioritize readability over concision. Python is a very flexible language that typically offers several options for expressing a given piece of logic, but some may be more friendly to the reader than others. (List comprehensions are particularly vulnerable to over-optimization.) Always remain considerate of the future reader who may need to interpret your code without the benefit of the context within which you are writing it.</p> </li> <li> <p>No easter eggs. While they can be fun, Nautobot must be considered as a business-critical tool. The potential, however minor, for introducing a bug caused by unnecessary logic is best avoided entirely.</p> </li> <li> <p>Constants (variables which generally do not change) should be declared in <code>constants.py</code> within each app. Wildcard imports from the file are acceptable.</p> </li> <li> <p>Every model should have a docstring. Every custom method should include an explanation of its function.</p> </li> <li> <p>Nested API serializers generate minimal representations of an object. These are stored separately from the primary serializers to avoid circular dependencies. Always import nested serializers from other apps directly. For example, from within the DCIM app you would write <code>from nautobot.ipam.api.nested_serializers import NestedIPAddressSerializer</code>.</p> </li> <li> <p>The combination of <code>nautobot.utilities.filters.BaseFilterSet</code>, <code>nautobot.extras.filters.CreatedUpdatedModelFilterSetMixin</code>, <code>nautobot.extras.filters.CustomFieldModelFilterSetMixin</code>, and <code>nautobot.extras.filters.RelationshipModelFilterSetMixin</code> is such a common use case throughout the code base that they have a helper class which combines all of these at <code>nautobot.extras.NautobotFilterSet</code>. Use this helper class if you need the functionality from these classes.</p> </li> <li> <p>The combination of <code>nautobot.utilities.forms.BootstrapMixin</code>, <code>nautobot.extras.forms.CustomFieldModelFormMixin</code>, <code>nautobot.extras.forms.RelationshipModelFormMixin</code> and <code>nautobot.extras.forms.NoteModelFormMixin</code> is such a common use case throughout the code base that they have a helper class which combines all of these at <code>nautobot.extras.forms.NautobotModelForm</code>. Use this helper class if you need the functionality from these classes.</p> </li> </ul> <p>Added in version 1.4.0</p> <ul> <li> <p>Similarly, for filter forms, <code>nautobot.extras.forms.NautobotFilterForm</code> combines <code>nautobot.utilities.forms.BootstrapMixin</code>, <code>nautobot.extras.forms.CustomFieldModelFilterFormMixin</code>, and <code>nautobot.extras.forms.RelationshipModelFilterFormMixin</code>, and should be used where appropriate.</p> </li> <li> <p>Similarly, for bulk-edit forms, <code>nautobot.extras.forms.NautobotBulkEditForm</code> combines <code>nautobot.utilities.forms.BulkEditForm</code> and <code>nautobot.utilities.forms.BootstrapMixin</code> with <code>nautobot.extras.forms.CustomFieldModelBulkEditFormMixin</code>, <code>nautobot.extras.forms.RelationshipModelBulkEditFormMixin</code> and <code>nautobot.extras.forms.NoteModelBulkEditFormMixin</code>, and should be used where appropriate.</p> </li> <li> <p>API serializers for most models should inherit from <code>nautobot.extras.api.serializers.NautobotModelSerializer</code> and any appropriate mixins. Only use more abstract base classes such as ValidatedModelSerializer where absolutely required.</p> </li> <li> <p><code>NautobotModelSerializer</code> will automatically add serializer fields for <code>id</code>, <code>created</code>/<code>last_updated</code> (if applicable), <code>custom_fields</code>, <code>computed_fields</code>, and <code>relationships</code>, so there's generally no need to explicitly declare these fields in <code>.Meta.fields</code> of each serializer class. Similarly, <code>TaggedModelSerializerMixin</code> and <code>StatusModelSerializerMixin</code> will automatically add the <code>tags</code> and <code>status</code> fields when included in a serializer class.</p> </li> <li> <p>API Views for most models should inherit from <code>nautobot.extras.api.views.NautobotModelViewSet</code>. Only use more abstract base classes such as <code>ModelViewSet</code> where absolutely required.</p> </li> </ul>"},{"location":"development/style-guide.html#branding","title":"Branding","text":"<ul> <li>When referring to Nautobot in writing, use the proper form \"Nautobot,\" with the letter N. The lowercase form \"nautobot\" should be used in code, filenames, etc.</li> </ul> <ul> <li>There is an SVG form of the Nautobot logo at nautobot/docs/nautobot_logo.svg. It is preferred to use this logo for all purposes as it scales to arbitrary sizes without loss of resolution. If a raster image is required, the SVG logo should be converted to a PNG image of the prescribed size.</li> </ul>"},{"location":"development/templates.html","title":"Page Templates","text":"<p>Nautobot comes with a variety of page templates that allow for a lot of flexibility while keeping the page style consistent with the rest of the application. This document presents these templates and their features.</p> <p>You can use these templates as the basis for your templates by calling <code>{% extends '&lt;template_name&gt;' %}</code> at the top of your template file.</p>"},{"location":"development/templates.html#object-detail","title":"Object Detail","text":"<p>Added in version 1.2.0</p> <p>The most customizable template is <code>generic/object_detail.html</code>, as object detail views have a wide range of specific requirements to be accommodated. It provides the following blocks:</p> <ul> <li><code>header</code>: overloading this block allows for changing the entire top row of   the page, including the title, breadcrumbs, search field, and tabs.<ul> <li><code>breadcrumbs</code>: overloading this block allows for changing the entire   breadcrumbs block.<ul> <li><code>extra_breadcrumbs</code>: this enables extending the breadcrumbs block   just before the model without having to redefine the entire block.</li> </ul> </li> <li><code>buttons</code>: overloading this block allows redefining the entire button   section on the right of the page.<ul> <li><code>extra_buttons</code>: this block enables extending the buttons block   without losing the predefined buttons. Custom buttons will appear   between the plugin buttons and clone/edit/delete actions.</li> </ul> </li> <li><code>masthead</code>: is the block that contains the title. Overloading it enables   to change anything about the title block.</li> <li><code>title</code>: is the block contained by <code>masthead</code> and wrapped in a heading   block. Overloading it makes it possible to change the heading text as   well as the page title shown in the browser.</li> <li><code>nav_tabs</code>: are the navigation tabs. If overloaded, custom tabs can be   rendered instead of the default.<ul> <li><code>extra_nav_tabs</code>: this block allows to add new tabs without having to   override the default ones.</li> </ul> </li> </ul> </li> <li><code>content</code>: is the entire content of the page below the <code>header</code>.<ul> <li><code>content_left_page</code>: is a half-width column on the left. Multiple panels   can be rendered in a single block.</li> <li><code>content_right_page</code>: is a half-width column on the right.</li> <li><code>content_full_width_page</code>: is a full-width column.</li> </ul> </li> </ul>"},{"location":"development/templates.html#object-list","title":"Object List","text":"<p>The base template for listing objects is <code>generic/object_list.html</code>, with the following blocks:</p> <ul> <li><code>buttons</code>: may provide a set of buttons at the top right of the page, to the   left of the table configuration button.</li> <li><code>bulk_buttons</code>: may be a set of buttons at the bottom of the table, to the   left of potential bulk edit or delete buttons.</li> <li><code>header_extra</code>: may provide extra information to display just above the table,   to the left.</li> </ul>"},{"location":"development/templates.html#object-edit","title":"Object Edit","text":"<p>The base template for object addition or change is <code>generic/object_edit.html</code>, with the following blocks:</p> <ul> <li><code>form</code>: is the block in which the form gets rendered. This can be overridden   to provide a custom UI or UX for form views beyond what <code>render_form</code>   provides.</li> </ul>"},{"location":"development/templates.html#object-import","title":"Object Import","text":"<p>The base template for object import is <code>generic/object_import.html</code>, with the following blocks:</p> <ul> <li><code>tabs</code>: may provide tabs at the top of the page. The default import view is   not tabbed.</li> </ul>"},{"location":"development/templates.html#object-deletion","title":"Object Deletion","text":"<p>The base template for object deletion is <code>generic/object_delete.html</code>, with the following blocks:</p> <ul> <li><code>message</code>: is the confirmation message for deletion, which can be overridden.<ul> <li><code>message_extra</code>: provides a way to add to the default message without   overriding it.</li> </ul> </li> </ul>"},{"location":"development/templates.html#bulk-edit","title":"Bulk Edit","text":"<p>The base template for bulk object change is <code>generic/object_bulk_edit.html</code>. It does not provide any blocks for customizing the user experience.</p>"},{"location":"development/templates.html#bulk-import","title":"Bulk Import","text":"<p>The base template for bulk object import is <code>generic/object_bulk_import.html</code>, with the following blocks:</p> <ul> <li><code>tabs</code>: may provide tabs at the top of the page. The default import view is   not tabbed.</li> </ul>"},{"location":"development/templates.html#bulk-deletion","title":"Bulk Deletion","text":"<p>The base template for bulk object deletion is <code>generic/object_bulk_delete.html</code>, with the following blocks:</p> <ul> <li><code>message_extra</code>: provides a way to add to the default message.</li> </ul> <p>Note: contrary to the deletion of a single object, this template does not provide a way to completely override the deletion message.</p>"},{"location":"development/templates.html#bulk-renaming","title":"Bulk Renaming","text":"<p>The base template for renaming objects in bulk is <code>generic/object_bulk_rename.html</code>. It does not provide any blocks for customizing the user experience.</p>"},{"location":"development/testing.html","title":"Testing Nautobot","text":"<p>Best practices for developing and maintaining Nautobot's automated unit/integration test suites.</p> <p>Unit tests are automated tests written and run to ensure that a section of the Nautobot application (known as the \"unit\") meets its design and behaves as intended and expected. Most commonly as a developer of or contributor to Nautobot you will be writing unit tests to exercise the code you have written. Unit tests are not meant to test how the application behaves, only the individual blocks of code, therefore use of mock data and phony connections is common in unit test code. As a guiding principle, unit tests should be fast, because they will be executed quite often.</p> <p>Integration tests are automated tests written and run to ensure that the Nautobot application behaves as expected when being used as it would be in practice. By contrast to unit tests, where individual units of code are being tested, integration tests rely upon the server code actually running, and web UI clients or API clients to make real connections to the service to exercise actual workflows, such as navigating to the login page, filling out the username/passwords fields, and clicking the \"Log In\" button.</p> <p>Integration testing is much more involved, and builds on top of the foundation laid by unit testing. As a guiding principle, integration tests should be comprehensive, because they are the last mile to asserting that Nautobot does what it is advertised to do. Without integration testing, we have to do it all manually, and that's no fun for anyone!</p>"},{"location":"development/testing.html#tagging-tests","title":"Tagging Tests","text":"<p>By Nautobot convention, unit tests must be tagged with <code>unit</code>. The base test case class <code>nautobot.utilities.testing.TestCase</code> has this tag, therefore any test cases inheriting from that class do not need to be explicitly tagged. All existing view and API test cases in the Nautobot test suite inherit from this class.</p> <p>By Nautobot convention, integration tests must be tagged with <code>integration</code>. The base test case class <code>nautobot.utilities.testing.integration.SeleniumTestCase</code> has this tag, therefore any test cases inheriting from that class do not need to be explicitly tagged. All existing integration test cases in the Nautobot test suite inherit from this class.</p> <p>The <code>invoke unittest</code> and <code>invoke integration-test</code> commands are intentionally distinct, and the correct tagging of test cases is essential to enforcing the division between these two test categories. We never want to risk running the unit tests and integration tests at the same time. The isolation from each other is critical to a clean and manageable continuous development cycle.</p>"},{"location":"development/testing.html#base-classes-and-code-location","title":"Base Classes and Code Location","text":"Test Type Base Class Code Location Unit <code>nautobot.utilities.testing.TestCase</code> <code>nautobot/APP/tests/test_*.py</code> Integration <code>nautobot.utilities.testing.integration.SeleniumTestCase</code> <code>nautobot/APP/tests/integration/test_*.py</code> <ul> <li>New unit tests must always inherit from <code>nautobot.utilities.testing.TestCase</code>. Do not use <code>django.test.TestCase</code>.</li> <li>New integration tests must always inherit from <code>nautobot.utilities.testing.integration.SeleniumTestCase</code>. Do not use any other base class for integration tests.</li> </ul>"},{"location":"development/testing.html#integration-tests","title":"Integration Tests","text":""},{"location":"development/testing.html#troubleshooting-integration-tests","title":"Troubleshooting Integration Tests","text":"<p>Because integration tests normally involve interacting with Nautobot through a browser via Selenium and the Splinter wrapper library, they can be difficult to troubleshoot directly from the Python code when a failure occurs. A common troubleshooting technique is to add a <code>breakpoint()</code> at the appropriate place in the Python test code (i.e., immediately prior to the observed failure). When the breakpoint is hit and the test pauses, you can then use a VNC viewer application (such as macOS's \"Screen Sharing\" app) to connect to the running Selenium instance (<code>localhost:15900</code> if using the Docker development environment; the default password if prompted is simply \"<code>secret</code>\"). This will allow you to interact live with the testing web browser in its current state and can often provide invaluable insight into the nature of any test failure.</p>"},{"location":"development/testing.html#factories","title":"Factories","text":"<p>Added in version 1.5.0</p> <p>Nautobot uses the <code>factory_boy</code> library as a way to generate randomized but plausible database data for use in unit and integration tests, or for convenience in populating a local development instance.</p> <p>Factories for each Nautobot app's models are defined in the corresponding <code>nautobot/APPNAME/factory.py</code> files. Helper classes and functions for certain common patterns are defined in <code>nautobot/utilities/factory.py</code>. Factories can be used directly from <code>nbshell</code> so long as you have <code>factory_boy</code> installed. Examples:</p> <pre><code>&gt;&gt;&gt; from nautobot.tenancy.factory import TenantFactory, TenantGroupFactory\n&gt;&gt;&gt; # Create a single TenantGroup instance\n&gt;&gt;&gt; TenantGroupFactory.create()\n&lt;TenantGroup: Peterson, Nunez and Miller&gt;\n&gt;&gt;&gt; # Create 5 Tenant instances\n&gt;&gt;&gt; TenantFactory.create_batch(5)\n[&lt;Tenant: Smith-Vance&gt;, &lt;Tenant: Sanchez, Brown and Davis&gt;, &lt;Tenant: Benson and Sons&gt;, &lt;Tenant: Pennington PLC&gt;, &lt;Tenant: Perez and Sons&gt;]\n&gt;&gt;&gt; # Create 5 more Tenant instances all with a specified \"group\" value\n&gt;&gt;&gt; TenantFactory.create_batch(5, group=TenantGroup.objects.first())\n[&lt;Tenant: Mercado, Wilson and Fuller&gt;, &lt;Tenant: Blackburn-Andrade&gt;, &lt;Tenant: Oliver-Ramirez&gt;, &lt;Tenant: Pugh-Clay&gt;, &lt;Tenant: Norman and Sons&gt;]\n</code></pre> <p>Warning</p> <p><code>factory_boy</code> is only a development dependency of Nautobot. You cannot use the model factories in a production deployment of Nautobot unless you directly <code>pip install factory_boy</code> into such a deployment.</p> <p>Nautobot's custom test runner class (<code>nautobot.core.tests.runner.NautobotTestRunner</code>) makes use of the various factories to pre-populate the test database with data before running any tests. This reduces the need for individual tests to define their own baseline data sets.</p> <p>Info</p> <p>Because plugins also commonly use Nautobot's test runner, the base Nautobot <code>settings.py</code> currently defaults <code>TEST_USE_FACTORIES</code> to <code>False</code> so as to not negatively impact plugin tests that may not be designed to account for the presence of pre-populated test data in the database. This configuration is overridden to <code>True</code> in <code>nautobot/core/tests/nautobot_config.py</code> for Nautobot's own tests.</p>"},{"location":"development/testing.html#performance-tests","title":"Performance Tests","text":"<p>Added in version 1.5.0</p>"},{"location":"development/testing.html#running-performance-tests","title":"Running Performance Tests","text":"<p>Nautobot uses <code>django-slowtests</code> to run performance tests. To run performance tests, you need to install the <code>django-slowtests</code> package. Once you install the package, you can do <code>invoke performance-test</code> or <code>invoke unittest --performance-test</code> to run unit tests with <code>NautobotPerformanceTestRunner</code>. The invoke commands will automatically add <code>--testrunner nautobot.core.tests.runner.NautobotPerformanceTestRunner</code> to the <code>coverage run</code> command and this flag will replace the default <code>NautobotTestRunner</code> while retaining all its functionalities with the addition of performance evaluation after test runs.</p> <p><code>NautobotPerformanceTestRunner</code> which inherits from <code>DiscoverSlowestTestsRunner</code> will only be available when <code>django-slowtests</code> is installed. The runner measures the time to run unit tests against baselines stored in a designated .yml file (defaults to <code>nautobot/core/tests/performance_baselines.yml</code>) in addition to running the unit tests themselves.</p> <p>Warning</p> <p>This functionality requires the installation of the <code>django-slowtests</code> Python package, which is present in Nautobot's own development environment, but is not an inherent dependency of the Nautobot package when installed otherwise, such as into a plugin's development environment.</p> <p>Info</p> <p><code>invoke performance-test</code> is enabled when <code>django-slowtests</code> is installed and when called, it will run and evaluate the performance of specific unit tests that are tagged with <code>performance</code> i.e. <code>@tag(\"performance\")</code>. <code>invoke unittest --performance-report</code> and <code>invoke integration-test --performance-report</code> will also be enabled and when called, they will generate a performance report for all the tests ran in the terminal. If performance baselines for tests are not available:</p> <pre><code>175 abnormally slower tests:\nPerformance baseline for test_account (nautobot.circuits.tests.test_filters.ProviderTestCase) is not available. Test took 0.0758s to run\nPerformance baseline for test_asn (nautobot.circuits.tests.test_filters.ProviderTestCase) is not available. Test took 0.0427s to run\nPerformance baseline for test_bulk_create_objects (nautobot.circuits.tests.test_api.CircuitTerminationTest) is not available. Test took 0.2900s to run\nPerformance baseline for test_bulk_create_objects (nautobot.circuits.tests.test_api.CircuitTest) is not available. Test took 0.2292s to run\nPerformance baseline for test_bulk_create_objects (nautobot.circuits.tests.test_api.CircuitTypeTest) is not available. Test took 0.1596s to run\nPerformance baseline for test_bulk_create_objects (nautobot.circuits.tests.test_api.ProviderNetworkTest) is not available. Test took 0.1897s to run\nPerformance baseline for test_bulk_create_objects (nautobot.circuits.tests.test_api.ProviderTest) is not available. Test took 0.2092s to run\nPerformance baseline for test_bulk_delete_objects (nautobot.circuits.tests.test_api.CircuitTerminationTest) is not available. Test took 0.1168s to run\nPerformance baseline for test_bulk_delete_objects (nautobot.circuits.tests.test_api.CircuitTest) is not available. Test took 0.2762s to run\nPerformance baseline for test_bulk_delete_objects (nautobot.circuits.tests.test_api.CircuitTypeTest) is not available. Test took 0.0663s to run\nPerformance baseline for test_bulk_delete_objects (nautobot.circuits.tests.test_api.ProviderNetworkTest) is not available. Test took 0.0875s to run\n...\n</code></pre> <p>Info</p> <p>If performance baselines for tests are available and the time it take to run tests are siginificantly slower than baselines:</p> <pre><code>12 abnormally slower tests:\n0.9838s test_bulk_import_objects_with_constrained_permission (nautobot.ipam.tests.test_views.VLANTestCase) is significantly slower than the baseline 0.3692s\n1.2548s test_create_multiple_objects_with_constrained_permission (nautobot.dcim.tests.test_views.ConsolePortTestCase) is significantly slower than the baseline 0.5385s\n1.4289s test_create_multiple_objects_with_constrained_permission (nautobot.dcim.tests.test_views.DeviceBayTestCase) is significantly slower than the baseline 0.5616s\n1.1551s test_create_multiple_objects_with_constrained_permission (nautobot.dcim.tests.test_views.InventoryItemTestCase) is significantly slower than the baseline 0.5822s\n1.4712s test_create_multiple_objects_with_constrained_permission (nautobot.dcim.tests.test_views.RearPortTestCase) is significantly slower than the baseline 0.5695s\n1.5958s test_create_multiple_objects_with_constrained_permission (nautobot.virtualization.tests.test_views.VMInterfaceTestCase) is significantly slower than the baseline 1.0020s\n1.0566s test_create_object_with_constrained_permission (nautobot.virtualization.tests.test_views.VirtualMachineTestCase) is significantly slower than the baseline 0.3627s\n...\n</code></pre> <p>Info</p> <p>To output the performance evaluation to a file for later use, i.e. as performance baselines for future test runs, do <code>invoke performance-test --performance-snapshot</code>. This command will collect the <code>names</code> of the test and their <code>execution_time</code> and store them in a .yml file default to <code>report.yml</code>. Subsequently, the data in that file will have to be manually added to the baseline file set at <code>TEST_PERFORMANCE_BASELINE_FILE</code> to be used as baselines in performance tests.</p> <p>Example output of <code>invoke performance-test --performance-snapshot</code>:</p> <pre><code>- tests:\n- name: test_account (nautobot.circuits.tests.test_filters.ProviderTestCase)\nexecution_time: 0.07075\n- name: test_asn (nautobot.circuits.tests.test_filters.ProviderTestCase)\nexecution_time: 0.041262\n- name: test_cabled (nautobot.circuits.tests.test_filters.CircuitTerminationTestCase)\nexecution_time: 0.268673\n- name: test_cid (nautobot.circuits.tests.test_filters.CircuitTestCase)\nexecution_time: 0.116057\n- name: test_circuit_id (nautobot.circuits.tests.test_filters.CircuitTerminationTestCase)\nexecution_time: 0.042665\n- name: test_commit_rate (nautobot.circuits.tests.test_filters.CircuitTestCase)\nexecution_time: 0.047894\n- name: test_connected (nautobot.circuits.tests.test_filters.CircuitTerminationTestCase)\nexecution_time: 0.056196\n- name: test_id (nautobot.circuits.tests.test_filters.CircuitTerminationTestCase)\nexecution_time: 0.03598\n...\n</code></pre>"},{"location":"development/testing.html#gathering-performance-test-baseline-data","title":"Gathering Performance Test Baseline Data","text":"<p><code>TEST_PERFORMANCE_BASELINE_FILE</code> specifies the file in which performance baselines are stored, defaults to <code>nautobot/core/tests/performance_baselines.yml</code>. Currently, only baselines for those unit tests tagged with <code>performance</code> are stored.</p> <p>You can add baselines for your own test to <code>nautobot/core/tests/performance_baselines.yml</code> or have your own baseline yaml file for performance testing by specifying a different file path for  <code>TEST_PERFORMANCE_BASELINE_FILE</code> in plugin's development/test <code>nautobot_config.py</code>, and store the output of <code>invoke performance-test --performance-snapshot</code> in that file. <code>--performance-snapshot</code> flag will store the results of your performance test to a new <code>report.yml</code> and all you need to do is copy/paste the results to the file set by <code>TEST_PERFORMANCE_BASELINE_FILE</code>. Now you have baselines for your own tests!</p> <p>Example output of <code>invoke performance-test --performance-snapshot</code>:</p> <pre><code>- tests:\n- name: test_account (nautobot.circuits.tests.test_filters.ProviderTestCase)\nexecution_time: 0.07075\n- name: test_asn (nautobot.circuits.tests.test_filters.ProviderTestCase)\nexecution_time: 0.041262\n- name: test_cabled (nautobot.circuits.tests.test_filters.CircuitTerminationTestCase)\nexecution_time: 0.268673\n- name: test_cid (nautobot.circuits.tests.test_filters.CircuitTestCase)\nexecution_time: 0.116057\n- name: test_circuit_id (nautobot.circuits.tests.test_filters.CircuitTerminationTestCase)\n...\n</code></pre> <p>if you decide to run <code>invoke unittest --performance-test</code> which will run tests that currently do not have their baselines present in the file, your output could look something like this:</p> <pre><code>175 abnormally slower tests:\nPerformance baseline for test_account (nautobot.circuits.tests.test_filters.ProviderTestCase) is not available. Test took 0.0758s to run\nPerformance baseline for test_asn (nautobot.circuits.tests.test_filters.ProviderTestCase) is not available. Test took 0.0427s to run\nPerformance baseline for test_bulk_create_objects (nautobot.circuits.tests.test_api.CircuitTerminationTest) is not available. Test took 0.2900s to run\nPerformance baseline for test_bulk_create_objects (nautobot.circuits.tests.test_api.CircuitTest) is not available. Test took 0.2292s to run\nPerformance baseline for test_bulk_create_objects (nautobot.circuits.tests.test_api.CircuitTypeTest) is not available. Test took 0.1596s to run\nPerformance baseline for test_bulk_create_objects (nautobot.circuits.tests.test_api.ProviderNetworkTest) is not available. Test took 0.1897s to run\nPerformance baseline for test_bulk_create_objects (nautobot.circuits.tests.test_api.ProviderTest) is not available. Test took 0.2092s to run\nPerformance baseline for test_bulk_delete_objects (nautobot.circuits.tests.test_api.CircuitTerminationTest) is not available. Test took 0.1168s to run\nPerformance baseline for test_bulk_delete_objects (nautobot.circuits.tests.test_api.CircuitTest) is not available. Test took 0.2762s to run\nPerformance baseline for test_bulk_delete_objects (nautobot.circuits.tests.test_api.CircuitTypeTest) is not available. Test took 0.0663s to run\nPerformance baseline for test_bulk_delete_objects (nautobot.circuits.tests.test_api.ProviderNetworkTest) is not available. Test took 0.0875s to run\n...\n</code></pre>"},{"location":"development/testing.html#caveats","title":"Caveats","text":"<p>Warning</p> <p><code>django-slowtests</code> is only a development dependency of Nautobot. You cannot run performance tests in a production deployment of Nautobot unless you directly <code>pip install django-slowtests</code> into such a deployment.</p> <p>Info</p> <p>Because plugins also commonly use Nautobot's default test runner <code>NautobotTestRunner</code>, in order to use <code>NautobotPerformanceTestRunner</code> you need to add <code>django-slowtests</code> as a part of your plugin dev dependencies.</p>"},{"location":"development/testing.html#test-code-style","title":"Test Code Style","text":"<ul> <li>Use more specific/feature-rich test assertion methods where available (e.g. <code>self.assertInHTML(fragment, html)</code> rather than <code>self.assertTrue(re.search(fragment, html))</code> or <code>assert re.search(fragment, html) is not None</code>).</li> <li>Keep test case scope (especially in unit tests) small. Split test functions into smaller tests where possible; otherwise, use <code>self.subTest()</code> to delineate test blocks as appropriate.</li> </ul>"},{"location":"development/user-preferences.html","title":"User Preferences","text":"<p>The <code>users.User</code> model holds individual preferences for each user in the form of JSON data in the <code>config_data</code> field. This page serves as a manifest of all recognized user preferences in Nautobot.</p>"},{"location":"development/user-preferences.html#available-preferences","title":"Available Preferences","text":"Name Description <code>extras.configcontext.format</code> Preferred format when rendering config context data (JSON or YAML) <code>pagination.per_page</code> The number of items to display per page of a paginated table <code>tables.TABLE_NAME.columns</code> The ordered list of columns to display when viewing the table"},{"location":"docker/index.html","title":"Nautobot Docker Images","text":"<p>Nautobot is packaged as a Docker image for use in a production environment. The published image is based on the <code>python:3.8-slim</code> image to maintain the most compatibility with Nautobot deployments. The Docker image and deployment strategies are being actively developed, check back here or join the #nautobot channel on Network to Code's Slack community for the most up to date information.</p> <p>Changed in version 1.6.0</p> <p>The base image was changed from <code>python:3.7-slim</code> to <code>python-3.8-slim</code> due to the end-of-life of Python 3.7.</p>"},{"location":"docker/index.html#platforms","title":"Platforms","text":"<p>Nautobot docker images are currently provided for both <code>linux/amd64</code> and <code>linux/arm64</code> architectures. Please note ARM64 support is untested by our automated tests and should be considered in an alpha state.</p>"},{"location":"docker/index.html#tags","title":"Tags","text":"<p>A set of Docker images are built for each Nautobot release and published to both Docker Hub and the GitHub Container Registry.</p> <p>Additionally, GitHub Actions are used to automatically build images corresponding to each commit to the <code>develop</code> and <code>next</code> branches; these images are only published to the GitHub Container Registry.</p> <p>To get a specific tagged image from Docker Hub or the GitHub Container Registry run:</p> <pre><code>docker image pull networktocode/nautobot:${TAG}\n</code></pre> <p>or</p> <pre><code>docker pull ghcr.io/nautobot/nautobot:${TAG}\n</code></pre> <p>The following tags are available on both Docker Hub and the GitHub Container Registry:</p> Tag Nautobot Version Python Version Example <code>${NAUTOBOT_VER}</code> As specified 3.8 <code>1.6.0</code> <code>${NAUTOBOT_VER}-py${PYTHON_VER}</code> As specified As specified <code>1.6.0-py3.8</code> <code>${NAUTOBOT_MAJOR_VER}.${NAUTOBOT_MINOR_VER}</code> As specified 3.8 <code>1.6</code> <code>${NAUTOBOT_MAJOR_VER}.${NAUTOBOT_MINOR_VER}-py${PYTHON_VER}</code> As specified As specified <code>1.6-py3.8</code> <code>stable</code> Latest stable release 3.8 <code>stable</code> <code>stable-py${PYTHON_VER}</code> Latest stable release As specified <code>stable-py3.8</code> <p>The following additional tags are only available from the GitHub Container Registry:</p> Tag Nautobot Branch Python Version <code>latest</code> <code>develop</code>, the latest commit 3.8 <code>latest-py${PYTHON_VER}</code> <code>develop</code>, the latest commit As specified <code>develop</code> <code>develop</code>, the latest commit 3.8 <code>develop-py${PYTHON_VER}</code> <code>develop</code>, the latest commit As specified <code>develop-${GIT_SHA:0:7}-$(date +%s)</code> <code>develop</code>, a specific commit 3.8 <code>develop-${GIT_SHA:0:7}-$(date +%s)-py${PYTHON_VER}</code> <code>develop</code>, a specific commit As specified <code>next</code> <code>next</code>, the latest commit 3.8 <code>next-py${PYTHON_VER}</code> <code>next</code>, the latest commit As specified <code>next-${GIT_SHA:0:7}-$(date +%s)</code> <code>next</code>, a specific commit 3.8 <code>next-${GIT_SHA:0:7}-$(date +%s)-py${PYTHON_VER}</code> <code>next</code>, a specific commit As specified <p>Currently images are pushed for the following python versions:</p> <ul> <li>3.8</li> <li>3.9</li> <li>3.10</li> <li>3.11</li> </ul> <p>Info</p> <p>Developer images <code>networktocode/nautobot-dev:${TAG}</code> and <code>ghcr.io/nautobot/nautobot-dev:${TAG}</code> are also provided with the same tags as above. These images provide the development dependencies needed to build Nautobot; they can be used as a base for development to develop your own Nautobot apps but should NOT be used in production.</p>"},{"location":"docker/index.html#getting-started","title":"Getting Started","text":"<p>Nautobot requires a MySQL or PostgreSQL database and Redis instance before it will start. Because of this the quickest and easiest way to get Nautobot running is with <code>docker-compose</code>, which will install and configure PostgreSQL and Redis containers for you automatically.</p>"},{"location":"docker/index.html#configuration","title":"Configuration","text":"<p>Most configuration parameters are available via environment variables which can be passed to the container. If you desire you can inject your own <code>nautobot_config.py</code> by overriding <code>/opt/nautobot/nautobot_config.py</code> using docker volumes by adding <code>-v /local/path/to/custom/nautobot_config.py:/opt/nautobot/nautobot_config.py</code> to your docker run command, for example:</p> <pre><code>docker run --name nautobot -v /local/path/to/custom/nautobot_config.py:/opt/nautobot/nautobot_config.py networktocode/nautobot\n</code></pre> <p>Or if you are using docker-compose:</p> <pre><code>services:\nnautobot:\nimage: \"networktocode/nautobot\"\nvolumes:\n- /local/path/to/custom/nautobot_config.py:/opt/nautobot/nautobot_config.py:ro\n</code></pre>"},{"location":"docker/index.html#docker-only-configuration","title":"Docker only configuration","text":"<p>The entry point for the Docker container has some additional features that can be configured via additional environment variables. The following are all optional variables:</p>"},{"location":"docker/index.html#nautobot_create_superuser","title":"<code>NAUTOBOT_CREATE_SUPERUSER</code>","text":"<p>Default: unset</p> <p>Enables creation of a super user specified by <code>NAUTOBOT_SUPERUSER_NAME</code>, <code>NAUTOBOT_SUPERUSER_EMAIL</code>, <code>NAUTOBOT_SUPERUSER_PASSWORD</code>, and <code>NAUTOBOT_SUPERUSER_API_TOKEN</code>.</p>"},{"location":"docker/index.html#nautobot_docker_skip_init","title":"<code>NAUTOBOT_DOCKER_SKIP_INIT</code>","text":"<p>Default: unset</p> <p>When starting, the container attempts to connect to the database and run database migrations and upgrade steps necessary when upgrading versions. In normal operation this is harmless to run on every startup and validates the database is operating correctly. However, in certain circumstances such as database maintenance when the database is in a read-only mode it may make sense to start Nautobot but skip these steps. Setting this variable to <code>true</code> will start Nautobot without running these initial steps.</p> <p>Note</p> <p>Setting this value to anything other than \"false\" (case-insensitive) will prevent migrations from occurring.</p>"},{"location":"docker/index.html#nautobot_superuser_api_token","title":"<code>NAUTOBOT_SUPERUSER_API_TOKEN</code>","text":"<p>Default: unset</p> <p>If <code>NAUTOBOT_CREATE_SUPERUSER</code> is true, <code>NAUTOBOT_SUPERUSER_API_TOKEN</code> specifies the API token of the super user to be created; alternatively the <code>/run/secrets/superuser_api_token</code> file contents are read for the token. Either the variable or the file is required if <code>NAUTOBOT_CREATE_SUPERUSER</code> is true.</p>"},{"location":"docker/index.html#nautobot_superuser_email","title":"<code>NAUTOBOT_SUPERUSER_EMAIL</code>","text":"<p>Default: <code>admin@example.com</code></p> <p>If <code>NAUTOBOT_CREATE_SUPERUSER</code> is true, <code>NAUTOBOT_SUPERUSER_EMAIL</code> specifies the email address of the super user to be created.</p>"},{"location":"docker/index.html#nautobot_superuser_name","title":"<code>NAUTOBOT_SUPERUSER_NAME</code>","text":"<p>Default: <code>admin</code></p> <p>If <code>NAUTOBOT_CREATE_SUPERUSER</code> is true, <code>NAUTOBOT_SUPERUSER_NAME</code> specifies the username of the super user to be created.</p>"},{"location":"docker/index.html#nautobot_superuser_password","title":"<code>NAUTOBOT_SUPERUSER_PASSWORD</code>","text":"<p>Default: unset</p> <p>If <code>NAUTOBOT_CREATE_SUPERUSER</code> is true, <code>NAUTOBOT_SUPERUSER_PASSWORD</code> specifies the password of the super user to be created; alternatively the <code>/run/secrets/superuser_password</code> file contents are read for the password. Either the variable or the file is required if <code>NAUTOBOT_CREATE_SUPERUSER</code> is true.</p>"},{"location":"docker/index.html#uwsgi","title":"uWSGI","text":"<p>The docker container uses uWSGI to serve Nautobot. A default configuration is provided, and can be overridden by injecting a new <code>uwsgi.ini</code> file at <code>/opt/nautobot/uwsgi.ini</code>. There are a couple of environment variables provided to override some uWSGI defaults:</p>"},{"location":"docker/index.html#nautobot_uwsgi_buffer_size","title":"<code>NAUTOBOT_UWSGI_BUFFER_SIZE</code>","text":"<p>Added in version 1.3.9</p> <p>Default: <code>4096</code></p> <p>Max: <code>65535</code></p> <p>The max size of non-body request payload, roughly the size of request headers for uWSGI. Request headers that might contain lengthy query parameters, for example GraphQL or Relationship filtered lookups, might go well over the default limit. Increasing this limit will have an impact on running memory usage. Please see the uWSGI documentation for more information.</p> <p>This can also be overridden by appending <code>-b DESIRED_BUFFER_SIZE</code>, ex: <code>-b 8192</code>, to the entry command in all Nautobot containers running uWSGI if you are on a release before <code>1.3.9</code>.</p>"},{"location":"docker/index.html#nautobot_uwsgi_listen","title":"<code>NAUTOBOT_UWSGI_LISTEN</code>","text":"<p>Default: <code>128</code></p> <p>The socket listen queue size of uWSGI. In production environments it is recommended to increase this value to 1024 or higher, however depending on your platform, this may require additional kernel parameter settings, please see the uWSGI documentation for more information.</p> <p>Please see the official uWSGI documentation on <code>listen</code> for more information.</p>"},{"location":"docker/index.html#nautobot_uwsgi_processes","title":"<code>NAUTOBOT_UWSGI_PROCESSES</code>","text":"<p>Default: <code>3</code></p> <p>The number of worker processes uWSGI will spawn.</p> <p>Please see the official uWSGI documentation on <code>processes</code> for more information.</p>"},{"location":"docker/index.html#ssl","title":"SSL","text":"<p>Self signed SSL certificates are included by default with the container. For a production deployment you should utilize your own signed certificates, these can be injected into the container at runtime using docker volumes. The public certificate should be placed at <code>/opt/nautobot/nautobot.crt</code> and the private key should be at <code>/opt/nautobot/nautobot.key</code>. Using a <code>docker run</code> these can be injected using the <code>-v</code> parameter:</p> <pre><code>docker run --name nautobot -v /local/path/to/custom/nautobot.crt:/opt/nautobot/nautobot.crt -v /local/path/to/custom/nautobot.key:/opt/nautobot/nautobot.key networktocode/nautobot\n</code></pre> <p>Or if you are using <code>docker-compose</code>:</p> <pre><code>services:\nnautobot:\nimage: \"networktocode/nautobot\"\nvolumes:\n- /local/path/to/custom/nautobot.crt:/opt/nautobot/nautobot.crt:ro\n- /local/path/to/custom/nautobot.key:/opt/nautobot/nautobot.key:ro\n</code></pre>"},{"location":"docker/index.html#nautobot-plugins","title":"Nautobot Plugins","text":"<p>At this time adding Nautobot plugins to the existing Docker image is not supported, however, you can use the Nautobot image as the base within your <code>Dockerfile</code> to install your own plugins, here is an example dockerfile:</p> <pre><code>FROM networktocode/nautobot\nRUN pip install nautobot-chatops\n\nCOPY nautobot_config.py /opt/nautobot/nautobot_config.py\n</code></pre>"},{"location":"docker/index.html#building-the-image","title":"Building the Image","text":"<p>If you have a development environment you can use <code>invoke</code> to build the Docker image. By default <code>invoke build</code> will build the <code>dev</code> image:</p> <pre><code>invoke build\n</code></pre> <p>After some output and a prompt is returned:</p> <pre><code>docker images\n</code></pre> <p>Example output:</p> <pre><code>REPOSITORY                                       TAG                              IMAGE ID       CREATED          SIZE\nlocal/nautobot-dev                               local-py3.8                      0d93eec7dfea   5 minutes ago    1.31GB\n</code></pre> <p>If you need to build or test the <code>final</code> image, you must set your <code>invoke.yml</code> to use <code>docker-compose.final.yml</code> in place of <code>docker-compose.dev.yml</code>:</p> <pre><code>---\nnautobot:\ncompose_files:\n- \"docker-compose.yml\"\n- \"docker-compose.postgres.yml\"\n- \"docker-compose.final.yml\"\n</code></pre> <p>Then you can re-run the <code>invoke build</code> command:</p> <pre><code>invoke build\n</code></pre> <p>Example output:</p> <pre><code>...\n</code></pre> <pre><code>docker images\n</code></pre> <p>Example output:</p> <pre><code>REPOSITORY                                       TAG                              IMAGE ID       CREATED          SIZE\nlocal/nautobot-final                             local-py3.8                      e03e752fcc6b   27 minutes ago   629MB\n</code></pre> <p>Similarly, you can use <code>docker-compose.final-dev.yml</code> if you wish to build and test the <code>final-dev</code> image.</p>"},{"location":"docker/index.html#docker-compose","title":"Docker Compose","text":"<p>An example library for using Docker Compose to build out all of the components for Nautobot can be found within the Nautobot community. Please see https://github.com/nautobot/nautobot-docker-compose/ for examples on the base application, LDAP integration, and using plugins.</p>"},{"location":"installation/index.html","title":"Installation","text":"<p>This set of documents will help you get Nautobot up and running.  As an alternative, you can also run Nautobot in Docker.</p>"},{"location":"installation/index.html#about-dependencies","title":"About Dependencies","text":"<p>This section describes the system dependencies required for Nautobot. They can be all installed on a single system, or distributed across your environment. That will be up to you. Our install instructions assume a single system install, and that is good for most use cases. More advanced configurations are also possible, but are not covered here.</p> <p>The installation instructions below will guide you through a fresh installation.</p>"},{"location":"installation/index.html#mandatory-dependencies","title":"Mandatory dependencies","text":"<p>The following minimum versions are required for Nautobot to operate:</p> Dependency Role Minimum Version Python Application 3.8 PostgreSQL Database 9.6 MySQL Database 8.0 Redis Cache, Queue 4.0 Git Additional 2.0 <p>Note</p> <p>Either PostgreSQL or MySQL must be selected, but not both.</p> <p>Added in version 1.1.0</p> <p>MySQL support was added.</p> <p>Added in version 1.3.0</p> <p>Python 3.10 support was added.</p> <p>Removed in version 1.3.0</p> <p>Python 3.6 support was removed.</p> <p>Changed in version 1.6.0</p> <p>Python 3.11 support was added and Python 3.7 support was removed.</p> <p>Nautobot will not work without these dependencies.</p>"},{"location":"installation/index.html#python","title":"Python","text":"<p>Nautobot is written in the Python programming language. The official Python package installer is called Pip, and you will see the <code>pip</code> command referenced often to install or update Python packages.</p> <p>All Nautobot plugins and library dependencies will be written using Python.</p>"},{"location":"installation/index.html#database","title":"Database","text":"<p>Nautobot uses a relational database to store its data. Both MySQL and PostgreSQL are officially supported.</p>"},{"location":"installation/index.html#mysql","title":"MySQL","text":"<p>MySQL is an open-source relational database management system that\u2019s relatively easy to set up and manage, fast, reliable, and well-understood.</p>"},{"location":"installation/index.html#postgresql","title":"PostgreSQL","text":"<p>PostgreSQL is a powerful, feature-rich open source relational database server that can handle complex queries and massive databases.</p>"},{"location":"installation/index.html#redis","title":"Redis","text":"<p>Redis is an open source, in-memory data store which Nautobot employs for caching and queuing.</p>"},{"location":"installation/index.html#optional-dependencies","title":"Optional dependencies","text":"<p>Nautobot will still operate without these optional dependencies, but would likely not be ready for use in a production environment without them. The installation and configuration of these dependencies are covered in the detailed guides which follow.</p> <p>For production deployment we recommend the following:</p> <ul> <li>uWSGI WSGI server</li> <li>NGINX HTTP server</li> <li>External authentication service for SSO such as SAML, OAuth2, or LDAP, or an authenticating proxy</li> </ul> <p>For additional features:</p> <ul> <li>NAPALM support for retrieving operational data from network devices</li> <li>Prometheus metrics for exporting application performance and telemetry data</li> </ul>"},{"location":"installation/index.html#installing-nautobot-dependencies","title":"Installing Nautobot Dependencies","text":"<p>Nautobot was designed to be a cross-platform application that can run on nearly any system that is able to run the required dependencies. Only the operating system platforms listed below are officially supported at this time.</p> <p>Nautobot has been tested and confirmed to work on the following platforms. Detailed install and deployment instructions can be found by following the link to each.</p>"},{"location":"installation/index.html#installing-nautobot-dependencies-on-centosrhel","title":"Installing Nautobot Dependencies on CentOS/RHEL","text":"<p>Red Hat flavors of Linux including CentOS 8.2+ or Red Hat Enterprise Linux (RHEL) 8.2+ are supported. The same installation instructions can be used on either.</p> <ul> <li>Installing Nautobot Dependencies on CentOS/RHEL</li> </ul>"},{"location":"installation/index.html#installing-nautobot-dependencies-on-ubuntu","title":"Installing Nautobot Dependencies on Ubuntu","text":"<p>Ubuntu 20.04 or later is supported.</p> <ul> <li>Installing Nautobot Dependencies on Ubuntu</li> </ul>"},{"location":"installation/index.html#installing-on-other-systems","title":"Installing on Other Systems","text":"<p>Nautobot should work on any POSIX-compliant system including practically any flavor of Linux, BSD, or even macOS, but those are not officially supported at this time.</p>"},{"location":"installation/index.html#running-nautobot-in-docker","title":"Running Nautobot in Docker","text":"<p>Nautobot docker images are available for use in a containerized deployment for an easier installation, see the Docker overview for more information.</p>"},{"location":"installation/index.html#upgrading","title":"Upgrading","text":"<p>If you are upgrading from an existing installation, please consult the upgrading guide.</p>"},{"location":"installation/centos.html","title":"Installing Nautobot Dependencies on CentOS/RHEL","text":"<p>This installation guide assumes that you are running CentOS or RHEL version 8.2+ on your system.</p>"},{"location":"installation/centos.html#install-system-packages","title":"Install System Packages","text":"<p>Install the prerequisite system libraries and utilities.</p> <p>This will install:</p> <ul> <li>Git</li> <li>Python 3</li> <li>Pip</li> <li>Redis server and client</li> </ul> <pre><code>sudo dnf check-update\nsudo dnf install -y git python38 python38-devel python38-pip redis\n</code></pre>"},{"location":"installation/centos.html#database-setup","title":"Database Setup","text":"<p>In this step you'll set up your database server, create a database and database user for use by Nautobot, and verify your connection to the database.</p> <p>You must select either MySQL or PostgreSQL. PostgreSQL is used by default with Nautobot, so if you just want to get started or don't have a preference, please stick with PostgreSQL.</p> <p>Please follow the steps for your selected database backend below.</p>"},{"location":"installation/centos.html#postgresql-setup","title":"PostgreSQL Setup","text":""},{"location":"installation/centos.html#install-postgresql","title":"Install PostgreSQL","text":"<p>This will install the PostgreSQL database server and client.</p> <pre><code>sudo dnf install -y postgresql-server\n</code></pre>"},{"location":"installation/centos.html#initialize-postgresql","title":"Initialize PostgreSQL","text":"<p>CentOS/RHEL requires a manual step to generate the initial configurations required by PostgreSQL.</p> <pre><code>sudo postgresql-setup --initdb\n</code></pre>"},{"location":"installation/centos.html#configure-authentication","title":"Configure Authentication","text":"<p>CentOS/RHEL configures PostgreSQL to use <code>ident</code> host-based authentication by default. Because Nautobot will need to authenticate using a username and password, we must update <code>pg_hba.conf</code> to support <code>md5</code> password authentication.</p> <p>As root, edit <code>/var/lib/pgsql/data/pg_hba.conf</code> and change <code>ident</code> to <code>md5</code> for the lines below.</p> <p>Before:</p> <pre><code># IPv4 local connections:\nhost    all             all             127.0.0.1/32            ident\n# IPv6 local connections:\nhost    all             all             ::1/128                 ident\n</code></pre> <p>After:</p> <pre><code># IPv4 local connections:\nhost    all             all             127.0.0.1/32            md5\n# IPv6 local connections:\nhost    all             all             ::1/128                 md5\n</code></pre>"},{"location":"installation/centos.html#start-postgresql","title":"Start PostgreSQL","text":"<p>Start the service and enable it to run at system startup:</p> <pre><code>sudo systemctl enable --now postgresql\n</code></pre>"},{"location":"installation/centos.html#create-a-postgresql-database","title":"Create a PostgreSQL Database","text":"<p>At a minimum, we need to create a database for Nautobot and assign it a username and password for authentication. This is done with the following commands.</p> <p>Danger</p> <p>Do not use the password from the example. Choose a strong, random password to ensure secure database authentication for your Nautobot installation.</p> <pre><code>sudo -u postgres psql\n</code></pre> <p>Example output:</p> <pre><code>psql (10.15)\nType \"help\" for help.\n</code></pre> <pre><code>postgres=# CREATE DATABASE nautobot;\nCREATE DATABASE\npostgres=# CREATE USER nautobot WITH PASSWORD 'insecure_password';\nCREATE ROLE\npostgres=# GRANT ALL PRIVILEGES ON DATABASE nautobot TO nautobot;\nGRANT\npostgres=# \\q\n</code></pre>"},{"location":"installation/centos.html#verify-postgresql-service-status","title":"Verify PostgreSQL Service Status","text":"<p>You can verify that authentication works issuing the following command and providing the configured password. (Replace <code>localhost</code> with your database server if using a remote database.)</p> <p>If successful, you will enter a <code>nautobot</code> prompt. Type <code>\\conninfo</code> to confirm your connection, or type <code>\\q</code> to exit.</p> <pre><code>psql --username nautobot --password --host localhost nautobot\n</code></pre> <p>Example output:</p> <pre><code>Password for user nautobot:\npsql (10.15)\nType \"help\" for help.\n\nnautobot=&gt; \\conninfo\nYou are connected to database \"nautobot\" as user \"nautobot\" on host \"localhost\" (address \"127.0.0.1\") at port \"5432\".\nnautobot=&gt; \\q\n</code></pre>"},{"location":"installation/centos.html#mysql-setup","title":"MySQL Setup","text":""},{"location":"installation/centos.html#install-mysql","title":"Install MySQL","text":"<p>This will install the MySQL database server and client. Additionally, MySQL requires that <code>gcc</code> and the MySQL development libraries are installed so that we may compile the Python <code>mysqlclient</code> library during the Nautobot installation steps.</p> <pre><code>sudo dnf install -y gcc mysql-server mysql-devel\n</code></pre>"},{"location":"installation/centos.html#start-mysql","title":"Start MySQL","text":"<p>Start the service and enable it to run at system startup:</p> <pre><code>sudo systemctl enable --now mysql\n</code></pre>"},{"location":"installation/centos.html#create-a-mysql-database","title":"Create a MySQL Database","text":"<p>At a minimum, we need to create a database for Nautobot and assign it a username and password for authentication. This is done with the following commands.</p> <p>Note</p> <p>Replace <code>localhost</code> below with your database server if using a remote database.</p> <p>Danger</p> <p>Do not use the password from the example. Choose a strong, random password to ensure secure database authentication for your Nautobot installation.</p> <pre><code>sudo -u root mysql\n</code></pre> <p>Example output:</p> <pre><code>Welcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 8\nServer version: 8.0.21 Source distribution\n\nCopyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt; CREATE DATABASE nautobot;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; CREATE USER 'nautobot'@'localhost' IDENTIFIED BY 'insecure_password';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; GRANT ALL ON nautobot.* TO 'nautobot'@'localhost';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; \\q\nBye\n</code></pre>"},{"location":"installation/centos.html#verify-mysql-service-status","title":"Verify MySQL Service Status","text":"<p>You can verify that authentication works issuing the following command and providing the configured password.</p> <p>If successful, you will enter a <code>mysql&gt;</code> prompt. Type <code>status</code> to confirm your connection, or type <code>\\q</code> to exit.</p> <p>Note</p> <p>Replace <code>localhost</code> below with your database server if using a remote database.</p> <pre><code>mysql --user nautobot --password --host localhost nautobot\n</code></pre> <p>Example output:</p> <pre><code>Enter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 10\nServer version: 8.0.21 Source distribution\n\nCopyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt; status\n--------------\nmysql  Ver 8.0.21 for Linux on x86_64 (Source distribution)\n\nConnection id:          10\nCurrent database:       nautobot\nCurrent user:           nautobot@localhost\nSSL:                    Not in use\nCurrent pager:          stdout\nUsing outfile:          ''\nUsing delimiter:        ;\nServer version:         8.0.21 Source distribution\nProtocol version:       10\nConnection:             Localhost via UNIX socket\nServer characterset:    utf8mb4\nDb     characterset:    utf8mb4\nClient characterset:    utf8mb4\nConn.  characterset:    utf8mb4\nUNIX socket:            /var/lib/mysql/mysql.sock\nBinary data as:         Hexadecimal\nUptime:                 4 min 12 sec\n\nThreads: 2  Questions: 12  Slow queries: 0  Opens: 151  Flush tables: 3  Open tables: 69  Queries per second avg: 0.047\n--------------\n\nmysql&gt; \\q\nBye\n</code></pre>"},{"location":"installation/centos.html#redis-setup","title":"Redis Setup","text":""},{"location":"installation/centos.html#start-redis","title":"Start Redis","text":"<p>Start the service and enable it to run at system startup:</p> <pre><code>sudo systemctl enable --now redis\n</code></pre>"},{"location":"installation/centos.html#verify-redis-service-status","title":"Verify Redis Service Status","text":"<p>Use the <code>redis-cli</code> utility to ensure the Redis service is functional:</p> <pre><code>redis-cli ping\n</code></pre> <p>Example output:</p> <pre><code>PONG\n</code></pre>"},{"location":"installation/centos.html#deploy-nautobot","title":"Deploy Nautobot","text":"<p>Now that Nautobot dependencies are installed and configured, you're ready to Install Nautobot!</p>"},{"location":"installation/external-authentication.html","title":"External Authentication","text":"<p>This guide explains how to implement authentication using an external server. User authentication will fall back to built-in Django users in the event of a failure.</p>"},{"location":"installation/external-authentication.html#supported-external-authentication-backends","title":"Supported External Authentication Backends","text":"<ul> <li>LDAP Authentication</li> <li>Remote User Authentication</li> <li>SSO Authentication</li> </ul>"},{"location":"installation/http-server.html","title":"Configuring an HTTP Server","text":"<p>This documentation provides example configurations for NGINX though any HTTP server which supports WSGI should be compatible.</p>"},{"location":"installation/http-server.html#obtain-an-ssl-certificate","title":"Obtain an SSL Certificate","text":"<p>To enable HTTPS access to Nautobot, you'll need a valid SSL certificate. You can purchase one from a trusted commercial provider, obtain one for free from Let's Encrypt, or generate your own (although self-signed certificates are generally untrusted). Both the public certificate and private key files need to be installed on your Nautobot server in a secure location that is readable only by the <code>root</code> user.</p> <p>Warning</p> <p>The command below can be used to generate a self-signed certificate for testing purposes, however it is strongly recommended to use a certificate from a trusted authority in production.</p> <p>Two files will be created: the public certificate (<code>nautobot.crt</code>) and the private key (<code>nautobot.key</code>). The certificate is published to the world, whereas the private key must be kept secret at all times.</p> <p>Info</p> <p>Some Linux installations, including CentOS, have changed the location for SSL certificates from <code>/etc/ssl/</code> to <code>/etc/pki/tls/</code>. The command below may need to be changed to reflect the certificate location.</p> <p>The following command will prompt you for additional details of the certificate; all of which are optional.</p> <pre><code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n  -keyout /etc/ssl/private/nautobot.key \\\n  -out /etc/ssl/certs/nautobot.crt\n</code></pre>"},{"location":"installation/http-server.html#http-server-installation","title":"HTTP Server Installation","text":"<p>Any HTTP server of your choosing is supported. For your convenience, setup instructions for NGINX are provided here.</p> <p>Warning</p> <p>The following steps must be performed with root permissions.</p>"},{"location":"installation/http-server.html#nginx","title":"NGINX","text":"<p>NGINX is a free, open source, high-performance HTTP server and reverse proxy and is by far the most popular choice.</p>"},{"location":"installation/http-server.html#install-nginx","title":"Install NGINX","text":"<p>Begin by installing NGINX:</p> <p>On Ubuntu:</p> <pre><code>sudo apt install -y nginx\n</code></pre> <p>On CentOS/RHEL:</p> <pre><code>sudo dnf install -y nginx\n</code></pre>"},{"location":"installation/http-server.html#configure-nginx","title":"Configure NGINX","text":"<p>Once NGINX is installed, copy and paste the following NGINX configuration into <code>/etc/nginx/sites-available/nautobot.conf</code> for Ubuntu or <code>/etc/nginx/conf.d/nautobot.conf</code> for CentOS/RHEL:</p> <p>Note</p> <p>If the file location of SSL certificates had to be changed in the Obtain an SSL Certificate step above, then the location will need to be changed in the NGINX configuration below.</p> <pre><code>server {\n    listen 443 ssl http2 default_server;\n    listen [::]:443 ssl http2 default_server;\n\n    server_name _;\n\n    ssl_certificate /etc/ssl/certs/nautobot.crt;\n    ssl_certificate_key /etc/ssl/private/nautobot.key;\n\n    client_max_body_size 25m;\n\n    location /static/ {\n        alias /opt/nautobot/static/;\n    }\n\n    # For subdirectory hosting, you'll want to toggle this (e.g. `/nautobot/`).\n    # Don't forget to set `FORCE_SCRIPT_NAME` in your `nautobot_config.py` to match.\n    # location /nautobot/ {\n    location / {\n        include uwsgi_params;\n        uwsgi_pass  127.0.0.1:8001;\n        uwsgi_param Host $host;\n        uwsgi_param X-Real-IP $remote_addr;\n        uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;\n        uwsgi_param X-Forwarded-Proto $http_x_forwarded_proto;\n\n        # If you want subdirectory hosting, uncomment this. The path must match\n        # the path of this location block (e.g. `/nautobot`). For NGINX the path\n        # MUST NOT end with a trailing \"/\".\n        # uwsgi_param SCRIPT_NAME /nautobot;\n    }\n\n}\n\nserver {\n    # Redirect HTTP traffic to HTTPS\n    listen 80 default_server;\n    listen [::]:80 default_server;\n    server_name _;\n    return 301 https://$host$request_uri;\n}\n</code></pre>"},{"location":"installation/http-server.html#enable-nautobot","title":"Enable Nautobot","text":"<p>On Ubuntu:</p> <p>To enable the Nautobot site, you'll need to delete <code>/etc/nginx/sites-enabled/default</code> and create a symbolic link in the <code>sites-enabled</code> directory to the configuration file you just created:</p> <pre><code>sudo rm -f /etc/nginx/sites-enabled/default\nsudo ln -s /etc/nginx/sites-available/nautobot.conf /etc/nginx/sites-enabled/nautobot.conf\n</code></pre> <p>On CentOS:</p> <p>Run the following command to disable the default site that comes with the <code>nginx</code> package:</p> <pre><code>sudo sed -i 's@ default_server@@' /etc/nginx/nginx.conf\n</code></pre>"},{"location":"installation/http-server.html#restart-nginx","title":"Restart NGINX","text":"<p>Finally, restart the <code>nginx</code> service to use the new configuration.</p> <pre><code>sudo systemctl restart nginx\n</code></pre> <p>Info</p> <p>If the restart fails, and you changed the default key location, check to make sure the <code>nautobot.conf</code> file you pasted has the updated key location. For example, CentOS requires keys to be in <code>/etc/pki/tls/</code> instead of <code>/etc/ssl/</code>.</p>"},{"location":"installation/http-server.html#confirm-permissions-for-nautobot_root","title":"Confirm Permissions for NAUTOBOT_ROOT","text":"<p>Ensure that the <code>NAUTOBOT_ROOT</code> permissions are set to <code>755</code>. If permissions need to be changed, as the <code>nautobot</code> user run:</p> <pre><code>chmod 755 $NAUTOBOT_ROOT\n</code></pre>"},{"location":"installation/http-server.html#confirm-connectivity","title":"Confirm Connectivity","text":"<p>At this point, you should be able to connect to the HTTPS service at the server name or IP address you provided. If you used a self-signed certificate, you will likely need to explicitly allow connectivity in your browser.</p> <p>Info</p> <p>Please keep in mind that the configurations provided here are bare minimums required to get Nautobot up and running. You may want to make adjustments to better suit your production environment.</p> <p>Warning</p> <p>Certain components of Nautobot (such as the display of rack elevation diagrams) rely on the use of embedded objects. Ensure that your HTTP server configuration does not override the <code>X-Frame-Options</code> response header set by Nautobot.</p>"},{"location":"installation/http-server.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/http-server.html#unable-to-connect","title":"Unable to Connect","text":"<p>If you are unable to connect to the HTTP server, check that:</p> <ul> <li>NGINX is running and configured to listen on the correct port.</li> <li>Access is not being blocked by a firewall somewhere along the path. (Try connecting locally from the server itself.)</li> </ul>"},{"location":"installation/http-server.html#static-media-failure","title":"Static Media Failure","text":"<p>If you get a Static Media Failure; The following static media file failed to load: css/base.css, verify the permissions on the <code>$NAUTOBOT_ROOT</code> directory are <code>755</code>.</p> <p>Example of correct permissions (at the <code>[root@localhost ~]#</code> prompt)</p> <pre><code>ls -l /opt/\n</code></pre> <p>Example output:</p> <pre><code>total 4\ndrwxr-xr-x. 11 nautobot nautobot 4096 Apr  5 11:24 nautobot\n[root@localhost ~]#\n</code></pre> <p>If the permissions are not correct, modify them accordingly.</p> <p>Example of modifying the permissions:</p> <pre><code>ls -l /opt/\n</code></pre> <p>Example output:</p> <pre><code>total 4\ndrwx------. 11 nautobot nautobot 4096 Apr  5 10:00 nautobot\n</code></pre> <p>At the prompt <code>[nautobot@localhost ~]$</code> execute:</p> <pre><code>chmod 755 $NAUTOBOT\n</code></pre> <p>Then to verify that the user has the permissions to the directory execute at the <code>[nautobot@localhost ~]$</code> prompt:</p> <pre><code>ls -l /opt/\n</code></pre> <p>Example output shows that the user and group are both <code>nautobot</code> below:</p> <pre><code>total 4\ndrwxr-xr-x. 11 nautobot nautobot 4096 Apr  5 11:24 nautobot\n</code></pre>"},{"location":"installation/http-server.html#502-bad-gateway","title":"502 Bad Gateway","text":"<p>If you are able to connect but receive a 502 (bad gateway) error, check the following:</p> <ul> <li>The uWSGI worker processes are running (<code>systemctl status nautobot</code> should show a status of <code>active (running)</code>)</li> <li>NGINX is configured to connect to the port on which uWSGI is listening (default is <code>8001</code>).</li> <li>SELinux may be preventing the reverse proxy connection. You may need to allow HTTP network connections with the   command <code>setsebool -P httpd_can_network_connect 1</code>. For further information, view the SELinux   troubleshooting guide.</li> </ul>"},{"location":"installation/migrating-from-netbox.html","title":"Migrating to Nautobot from NetBox","text":""},{"location":"installation/migrating-from-netbox.html#review-the-release-notes","title":"Review the Release Notes","text":"<p>Be sure to carefully review all release notes that have been published. In particular, the Nautobot 1.0 release notes include an overview of key changes between NetBox 2.10 and Nautobot 1.0, while later release notes highlight incremental changes between Nautobot versions.</p>"},{"location":"installation/migrating-from-netbox.html#install-nautobot","title":"Install Nautobot","text":"<p>Install Nautobot as described in the documentation.</p>"},{"location":"installation/migrating-from-netbox.html#configure-nautobot","title":"Configure Nautobot","text":"<p>Although Nautobot will run perfectly well with a default configuration (such as generated by <code>nautobot-server init</code>, you may want to replicate aspects of your previous NetBox configuration to Nautobot. Refer to the configuration documentation for details on the available options.</p>"},{"location":"installation/migrating-from-netbox.html#migrate-database-contents-using-nautobot-netbox-importer","title":"Migrate Database Contents Using <code>nautobot-netbox-importer</code>","text":"<p>Due to a number of significant infrastructural changes between the applications, you cannot simply point Nautobot at your existing NetBox PostgreSQL database and have it automatically load your data. Fortunately, Network to Code (NTC) and collaborators have developed a Nautobot plugin, <code>nautobot-netbox-importer</code>, that can be used to import a NetBox database dump file into Nautobot. For full details, refer to the plugin's own documentation, but here is a brief overview:</p> <ol> <li>Export your NetBox database to a JSON file.</li> <li>Install the importer plugin.</li> <li>Enable the importer plugin.</li> <li>Run the plugin's import command to import the data.</li> <li>Connect to Nautobot and verify that your data has been successfully imported.</li> </ol>"},{"location":"installation/migrating-from-netbox.html#migrate-files-from-netbox-to-nautobot","title":"Migrate Files from NetBox to Nautobot","text":"<p>Uploaded media (device images, etc.) are stored on the filesystem rather than in the database and hence need to be migrated separately. The same is true for custom scripts and reports that you may wish to import.</p>"},{"location":"installation/migrating-from-netbox.html#copy-uploaded-media","title":"Copy Uploaded Media","text":"<p>The exact command will depend on where your <code>MEDIA_ROOT</code> is configured in NetBox as well as where it's configured in Nautobot, but in general it will be:</p> <pre><code>cp -pr $NETBOX_MEDIA_ROOT/* $NAUTOBOT_MEDIA_ROOT/*\n</code></pre>"},{"location":"installation/migrating-from-netbox.html#copy-custom-scripts-and-reports","title":"Copy Custom Scripts and Reports","text":"<p>Similarly, the exact commands depend on your <code>SCRIPTS_ROOT</code> and <code>REPORTS_ROOT</code> settings in NetBox and your <code>JOBS_ROOT</code> in Nautobot, but in general they will be:</p> <pre><code>cp -pr $NETBOX_SCRIPTS_ROOT/* $NAUTOBOT_JOBS_ROOT/\ncp -pr $NETBOX_REPORTS_ROOT/* $NAUTOBOT_JOBS_ROOT/\n</code></pre>"},{"location":"installation/migrating-from-netbox.html#update-scripts-reports-and-plugins-for-nautobot-compatibility","title":"Update Scripts, Reports, and Plugins for Nautobot compatibility","text":"<p>Depending on the complexity of your scripts, reports, or plugins, and how tightly integrated with NetBox they were, it may be simple or complex to port them to be compatible with Nautobot, and we cannot possibly provide a generalized step-by-step guide that would cover all possibilities. One change that you will certainly have to make to even begin this process, however, is updating the Python module names for any modules that were being imported from NetBox:</p> <ul> <li><code>circuits.* -&gt; nautobot.circuits.*</code></li> <li><code>dcim.* -&gt; nautobot.dcim.*</code></li> <li><code>extras.* -&gt; nautobot.extras.*</code></li> <li><code>ipam.* -&gt; nautobot.ipam.*</code></li> <li><code>netbox.* -&gt; nautobot.core.*</code></li> <li><code>tenancy.* -&gt; nautobot.tenancy.*</code></li> <li><code>utilities.* -&gt; nautobot.utilities.*</code></li> <li><code>virtualization.* -&gt; nautobot.virtualization.*</code></li> </ul>"},{"location":"installation/migrating-from-netbox.html#update-your-other-integration-code","title":"Update Your other Integration Code","text":"<p>If you have developed any custom integrations or plugins you may need to update some of your calls. Please see the data model changes below for guidance.</p>"},{"location":"installation/migrating-from-netbox.html#data-model-changes","title":"Data Model Changes","text":"<p>The following backwards-incompatible changes have been made to the data model in Nautobot.</p>"},{"location":"installation/migrating-from-netbox.html#status-fields","title":"Status Fields","text":"<p>Tip</p> <p>Status names are now lower-cased when setting the <code>status</code> field on CSV imports. The <code>slug</code> value is used for create/update of objects and for filtering in the API.</p> <p>A new <code>Status</code> model has been added to represent the <code>status</code> field for many models. Each status has a human-readable <code>name</code> field (e.g. <code>Active</code>), and a <code>slug</code> field (e.g. <code>active</code>).</p>"},{"location":"installation/migrating-from-netbox.html#display-name","title":"Display name","text":"<p>Several models such as device type and VLAN exposed a <code>display_name</code> property, which has now been renamed to <code>display</code>. In fact, there are several other instances, especially in the REST API, where the <code>display_name</code> field was used and as such, all instances have been renamed to <code>display</code>.</p>"},{"location":"installation/migrating-from-netbox.html#csv-imports","title":"CSV Imports","text":"<p>When using CSV import to define a <code>status</code> field on imported objects, such as when importing Devices or Prefixes, the <code>Status.slug</code> field is used.</p> <p>For example, the built-in Active status has a slug of <code>active</code>, so the <code>active</code> value would be used for import.</p>"},{"location":"installation/migrating-from-netbox.html#default-choices","title":"Default Choices","text":"<p>Because <code>status</code> fields are now stored in the database, they cannot have a default value, just like other similar objects like Device Roles or Device Types. In cases where <code>status</code> was not required to be set because it would use the default value, you must now provide a <code>status</code> yourself.  </p> <p>Note</p> <p>For consistency in the API, the <code>slug</code> value of a <code>status</code> is used when creating or updating an object.</p>"},{"location":"installation/migrating-from-netbox.html#choices-in-code","title":"Choices in Code","text":"<p>All <code>*StatusChoices</code> enums used for populated <code>status</code> field choices (such as <code>nautobot.dcim.choices.DeviceStatusChoices</code>) are deprecated. Any code you have that is leveraging these will now result in an error when performing lookups on objects with <code>status</code> fields.</p> <p>Anywhere you have code like this:</p> <pre><code>from dcim.choices import DeviceStatusChoices\nfrom dcim.models import Device\nDevice.objects.filter(status=DeviceStatusChoices.STATUS_PLANNED)\n</code></pre> <p>Update it to this:</p> <pre><code>from nautobot.extras.models import Status\nfrom nautobot.dcim.models import Device\nDevice.objects.filter(status=Status.objects.get(slug=\"planned\"))\n</code></pre>"},{"location":"installation/migrating-from-netbox.html#uuid-primary-database-keys","title":"UUID Primary Database Keys","text":"<p>Tip</p> <p>Primary key (aka ID) fields are no longer auto-incrementing integers and are now randomly-generated UUIDs.</p> <p>Database keys are now defined as randomly-generated Universally Unique Identifiers (UUIDs) instead of integers, protecting against certain classes of data-traversal attacks.</p>"},{"location":"installation/migrating-from-netbox.html#merge-of-userconfig-data-into-user-model","title":"Merge of UserConfig data into User model","text":"<p>There is no longer a distinct <code>UserConfig</code> model; instead, user configuration and preferences are stored directly on the <code>User</code> model under the key <code>config_data</code>.</p>"},{"location":"installation/migrating-from-netbox.html#custom-fields","title":"Custom Fields","text":"<p>Tip</p> <p>You can no longer rename or change the type of a custom field.</p> <p>Custom Fields have been overhauled for asserting data integrity and improving user experience.</p> <ul> <li>Custom Fields can no longer be renamed or have their type changed after they have been created.</li> <li>Choices for Custom Fields are now stored as discrete <code>CustomFieldChoice</code> database objects. Choices that are in active use cannot be deleted.</li> </ul>"},{"location":"installation/migrating-from-netbox.html#ipam-network-field-types","title":"IPAM Network Field Types","text":"<p>Tip</p> <p>Nautobot 1.2 and later supports most of the same filter-based network membership queries as NetBox. See below and the filtering documentation for more details. (Prior to Nautobot 1.2, IPAM network objects only supported model-manager-based methods for network membership filtering.)</p> <p>All IPAM objects with network field types (<code>ipam.Aggregate</code>, <code>ipam.IPAddress</code>, and <code>ipam.Prefix</code>) are no longer hard-coded to use PostgreSQL-only <code>inet</code> or <code>cidr</code> field types and are now using a custom implementation leveraging SQL-standard <code>varbinary</code> field types.</p>"},{"location":"installation/migrating-from-netbox.html#technical-details","title":"Technical Details","text":"<p>Below is a summary of the underlying technical changes to network fields. These will be explained in more detail in the following sections.</p> <ul> <li>For <code>IPAddress</code>, the <code>address</code> field was exploded out to <code>host</code>, <code>broadcast</code>, and <code>prefix_length</code> fields; <code>address</code> was converted into a computed field.</li> <li>For <code>Aggregate</code> and <code>Prefix</code> objects, the <code>prefix</code> field was exploded out to <code>network</code>, <code>broadcast</code>, and <code>prefix_length</code> fields; <code>prefix</code> was converted into a computed field.</li> <li>The <code>host</code>, <code>network</code>, and <code>broadcast</code> fields are now of a <code>varbinary</code> database type, which is represented as a packed binary integer (for example, the host <code>1.1.1.1</code> is packed as <code>b\"\\x01\\x01\\x01\\x01\"</code>)</li> <li>Network membership queries are accomplished by triangulating the \"position\" of an address using the IP, broadcast, and prefix length of the source and target addresses.</li> </ul> <p>Note</p> <p>You should never have to worry about the binary nature of how the network fields are stored in the database! The Django database ORM takes care of it all!</p>"},{"location":"installation/migrating-from-netbox.html#changes-to-ipaddress","title":"Changes to <code>IPAddress</code>","text":"<p>The following fields have changed when working with <code>ipam.IPAddress</code> objects:</p>"},{"location":"installation/migrating-from-netbox.html#address-is-now-a-computed-field","title":"<code>address</code> is now a computed field","text":"<p>This field is computed from <code>{host}/{prefix_length}</code> and is represented as a <code>netaddr.IPNetwork</code> object.</p> <pre><code>&gt;&gt;&gt; ip = IPAddress(address=\"1.1.1.1/30\")\n&gt;&gt;&gt; ip.address\nIPNetwork('1.1.1.1/30')\n</code></pre> <p>While this field is now a virtual field, it can still be used in many ways.</p> <p>It can be used to create objects:</p> <pre><code>&gt;&gt;&gt; ip = IPAddress.objects.create(address=\"1.1.1.1/30\")\n</code></pre> <p>It can be used in <code>.get()</code> and <code>.filter()</code> lookups where <code>address</code> is the primary argument:</p> <pre><code>&gt;&gt;&gt; IPAddress.objects.get(address=\"1.1.1.1/30\")\nIPNetwork('1.1.1.1/30')\n&gt;&gt;&gt; IPAddress.objects.filter(address=\"1.1.1.1/30\")\n&lt;IPAddressQuerySet [&lt;IPAddress: 1.1.1.1/30&gt;]&gt;\n</code></pre> <p>Note</p> <p>If you use a <code>prefix_length</code> other than <code>/32</code> (IPv4) or <code>/128</code> (IPv6) it must be included in your lookups</p> <p>This field cannot be used in nested filter expressions:</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(primary_ip4__address=\"1.1.1.1\")\ndjango.core.exceptions.FieldError: Related Field got invalid lookup: address\n</code></pre>"},{"location":"installation/migrating-from-netbox.html#host-contains-the-ip-address","title":"<code>host</code> contains the IP address","text":"<p>The IP (host) component of the address is now stored in the <code>host</code> field.</p> <pre><code>&gt;&gt;&gt; ip.host\n'1.1.1.1'\n</code></pre> <p>This field can be used in nested filter expressions, for example:</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(primary_ip4__host=\"1.1.1.1\")\n</code></pre>"},{"location":"installation/migrating-from-netbox.html#ipaddress-prefix_length-contains-the-prefix-length","title":"IPAddress <code>prefix_length</code> contains the prefix length","text":"<p>This is an integer, such as <code>30</code> for <code>/30</code>.</p> <pre><code>&gt;&gt;&gt; ip.prefix_length\n30\n</code></pre> <p>For IP addresses with a prefix length other than a host prefix, you will need to filter using <code>host</code> and <code>prefix_length</code> fields for greater accuracy.</p> <p>For example, if you have multiple <code>IPAddress</code> objects with the same <code>host</code> value but different <code>prefix_length</code>:</p> <pre><code>&gt;&gt;&gt; IPAddress.objects.create(address=\"1.1.1.1/32\")\n&lt;IPAddress: 1.1.1.1/32&gt;\n&gt;&gt;&gt; IPAddress.objects.filter(host=\"1.1.1.1\")\n&lt;IPAddressQuerySet [&lt;IPAddress: 1.1.1.1/30&gt;, &lt;IPAddress: 1.1.1.1/32&gt;]&gt;\n&gt;&gt;&gt; IPAddress.objects.filter(host=\"1.1.1.1\", prefix_length=30)\n&lt;IPAddressQuerySet [&lt;IPAddress: 1.1.1.1/30&gt;]&gt;\n</code></pre>"},{"location":"installation/migrating-from-netbox.html#ipaddress-broadcast-contains-the-broadcast-address","title":"IPAddress <code>broadcast</code> contains the broadcast address","text":"<p>If the prefix length is that of a host prefix (e.g. <code>/32</code>), <code>broadcast</code> will be the same as the <code>host</code> :</p> <pre><code>&gt;&gt;&gt; IPAddress.objects.get(address=\"1.1.1.1/32\").broadcast\n'1.1.1.1'\n</code></pre> <p>If the prefix length is any larger (e.g. <code>/24</code>), <code>broadcast</code> will be that of the containing network for that prefix length (e.g. <code>1.1.1.255</code>):</p> <pre><code>&gt;&gt;&gt; IPAddress.objects.create(address=\"1.1.1.1/24\").broadcast\n'1.1.1.255'\n</code></pre> <p>Note</p> <p>This field is largely for internal use only for facilitating network membership queries and it is not recommend that you use it for filtering.</p>"},{"location":"installation/migrating-from-netbox.html#changes-to-aggregate-and-prefix","title":"Changes to <code>Aggregate</code> and <code>Prefix</code>","text":"<p>The following fields have changed when working with <code>ipam.Aggregate</code> and <code>ipam.Prefix</code> objects. These objects share the same field changes.</p> <p>For these examples we will be using <code>Prefix</code> objects, but they apply just as equally to <code>Aggregate</code> objects.</p>"},{"location":"installation/migrating-from-netbox.html#prefix-is-now-a-computed-field","title":"<code>prefix</code> is now a computed field","text":"<p>This field is computed from <code>{network}/{prefix_length}</code> and is represented as a <code>netaddr.IPNetwork</code> object.</p> <p>While this field is now a virtual field, it can still be used in many ways.</p> <p>It can be used to create objects:</p> <pre><code>&gt;&gt;&gt; net = Prefix.objects.create(prefix=\"1.1.1.0/24\")\n</code></pre> <p>It can be used in <code>.get()</code> and <code>.filter()</code> lookups where <code>prefix</code> is the primary argument:</p> <pre><code>&gt;&gt;&gt; Prefix.objects.get(prefix=\"1.1.1.0/24\")\n&lt;Prefix: 1.1.1.0/24&gt;\n&gt;&gt;&gt; Prefix.objects.filter(prefix=\"1.1.1.0/24\")\n&lt;PrefixQuerySet [&lt;Prefix: 1.1.1.0/24&gt;]&gt;\n</code></pre>"},{"location":"installation/migrating-from-netbox.html#network-contains-the-network-address","title":"<code>network</code> contains the network address","text":"<p>The network component of the address is now stored in the <code>network</code> field.</p> <pre><code>&gt;&gt;&gt; net.network\n'1.1.1.0'\n</code></pre>"},{"location":"installation/migrating-from-netbox.html#aggregateprefix-prefix_length-contains-the-prefix-length","title":"Aggregate/Prefix <code>prefix_length</code> contains the prefix length","text":"<p>This is an integer, such as <code>24</code> for <code>/24</code>.</p> <pre><code>&gt;&gt;&gt; net.prefix_length\n24\n</code></pre> <p>It's highly likely that you will have multiple objects with the same <code>network</code> address but varying prefix lengths, so you will need to filter using <code>network</code> and <code>prefix_length</code> fields for greater accuracy.</p> <p>For example, if you have multiple <code>Prefix</code> objects with the same <code>network</code> value but different <code>prefix_length</code>:</p> <pre><code>&gt;&gt;&gt; Prefix.objects.create(prefix=\"1.1.1.0/25\")\n&lt;Prefix: 1.1.1.0/25&gt;\n&gt;&gt;&gt; Prefix.objects.filter(network=\"1.1.1.0\")\n&lt;PrefixQuerySet [&lt;Prefix: 1.1.1.0/24&gt;, &lt;Prefix: 1.1.1.0/25&gt;]&gt;\n&gt;&gt;&gt; Prefix.objects.filter(network=\"1.1.1.0\", prefix_length=25)\n&lt;PrefixQuerySet [&lt;Prefix: 1.1.1.0/25&gt;]&gt;\n</code></pre>"},{"location":"installation/migrating-from-netbox.html#aggregateprefix-broadcast-contains-the-broadcast-address","title":"Aggregate/Prefix <code>broadcast</code> contains the broadcast address","text":"<p>The <code>broadcast</code> will be derived from the <code>prefix_length</code> and will be that of the last network address for that prefix length (e.g. <code>1.1.1.255</code>):</p> <pre><code>&gt;&gt;&gt; Prefix.objects.get(prefix=\"1.1.1.0/24\").broadcast\n'1.1.1.255'\n</code></pre> <p>Note</p> <p>This field is largely for internal use only for facilitating network membership queries and it is not recommend that you use it for filtering.</p>"},{"location":"installation/migrating-from-netbox.html#membership-lookups","title":"Membership Lookups","text":"<p>Nautobot 1.0.x and 1.1.x did not support the custom lookup expressions that NetBox supported for membership queries on IPAM objects (such as <code>Prefix.objects.filter(prefix__net_contained=\"10.0.0.0/24\")</code>), but instead provided an alternate approach using model manager methods (such as <code>Prefix.objects.net_contained(\"10.0.0.0/24\")</code>).</p> <p>In Nautobot 1.2.0 and later, both model manager methods and custom lookup expressions are supported for this purpose, but the latter are now preferred for most use cases and are generally equivalent to their counterparts in NetBox.</p> <p>Note</p> <p>Nautobot did not mimic the support of non-subnets for the <code>net_in</code> query to avoid mistakes and confusion caused by an IP address being mistaken for a /32 as an example.</p>"},{"location":"installation/migrating-from-netbox.html#net_mask_length","title":"net_mask_length","text":"<p>Returns target addresses matching the source address prefix length.</p> <p>Note</p> <p>The NetBox filter net_mask_length should use the <code>prefix_length</code> field for filtering.</p> <p>NetBox:</p> <pre><code>IPAddress.objects.filter(address__net_mask_length=value)\n# or\nPrefix.objects.filter(prefix__net_mask_length=value)\n</code></pre> <p>Nautobot:</p> <pre><code>IPAddress.objects.filter(prefix_length=value)\n# or\nPrefix.objects.filter(prefix_length=value)\n</code></pre>"},{"location":"installation/migrating-from-netbox.html#rest-api-changes","title":"REST API Changes","text":"<p>The following backwards-incompatible changes have been made to the REST API in Nautobot.</p>"},{"location":"installation/migrating-from-netbox.html#display-field","title":"Display field","text":"<p>In several endpoints such as device type and VLAN, a <code>display_name</code> field is used to expose a human friendly string value for the object. This field has been renamed to <code>display</code> and has been standardized across all model API endpoints.</p>"},{"location":"installation/migrating-from-netbox.html#custom-field-choices","title":"Custom Field Choices","text":"<p>Custom field choices are exposed in Nautobot at a dedicated endpoint: <code>/api/extras/custom-field-choices/</code>. This replaces the <code>choices</code> field on on the CustomField model and the subsequent endpoint: <code>/api/extras/custom-fields/</code></p>"},{"location":"installation/migrating-from-postgresql.html","title":"Migrating from PostgreSQL to MySQL","text":"<p>This document explains how to migrate the contents of an existing Nautobot PostgreSQL database to a new MySQL database.</p>"},{"location":"installation/migrating-from-postgresql.html#export-data-from-postgresql","title":"Export data from PostgreSQL","text":"<p>In your existing installation of Nautobot with PostgreSQL, run the following command to generate a JSON dump of the database contents. This may take several minutes to complete depending on the size of your database. From the Postgres host <code>(nautobot-postgres) $</code>:</p> <pre><code>nautobot-server dumpdata \\\n    --exclude auth.permission \\\n    --exclude django_rq \\\n    --format json \\\n    --indent 2 \\\n    --traceback \\\n    &gt; nautobot_dump.json\n</code></pre> <p>Changed in version 1.5.23</p> <ul> <li>We do not recommend at this time using <code>--natural-primary</code> as this can result in inconsistent or incorrect data for data models that use GenericForeignKeys, such as <code>Cable</code>, <code>Note</code>, <code>ObjectChange</code>, and <code>Tag</code>.</li> <li>We also do not recommend at this time using <code>--natural-foreign</code> as it can potentially result in errors if any data models incorrectly implement their <code>natural_key()</code> and/or <code>get_by_natural_key()</code> API methods.</li> <li><code>contenttypes</code> must not be excluded from the dump (it could be excluded previously due to the use of <code>--natural-foreign</code>).</li> </ul> <p>This will result in a file named <code>nautobot_dump.json</code>.</p>"},{"location":"installation/migrating-from-postgresql.html#create-the-mysql-database","title":"Create the MySQL database","text":"<p>Create the MySQL database for Nautobot, ensuring that it is utilizing the default character set (<code>utf8mb4</code>) and default collation (<code>utf8mb4_0900_ai_ci</code>) settings for case-insensitivity. It is required that MySQL will be case-insensitive. Because these encodings are the defaults, if your MySQL installation has not been modified, there will be nothing for you to do other than make sure.</p> <p>In very rare cases, there may problems when importing your data from the case-sensitive PostgreSQL database dump that will need to be handled on a case-by-case basis. Please refer to the instructions for CentOS/RHEL or Ubuntu as necessary if you are unsure how to set up MySQL and create the Nautobot database.</p>"},{"location":"installation/migrating-from-postgresql.html#confirming-database-encoding","title":"Confirming database encoding","text":"<p>To confirm that your MySQL database has the correct encoding, you may start up a database shell using <code>nautobot-server dbshell</code> and run the following command with the prompt <code>(nautobot-mysql) $</code></p> <pre><code>nautobot-server dbshell\nmysql&gt; SELECT @@character_set_database, @@collation_database;\n+--------------------------+----------------------+\n| @@character_set_database | @@collation_database |\n+--------------------------+----------------------+\n| utf8mb4                  | utf8mb4_0900_ai_ci   |\n+--------------------------+----------------------+\n1 row in set (0.00 sec)\n</code></pre>"},{"location":"installation/migrating-from-postgresql.html#apply-database-migrations-to-the-mysql-database","title":"Apply database migrations to the MySQL database","text":"<p>With Nautobot pointing to the MySQL database (we recommend creating a new Nautobot installation for this purpose), run <code>nautobot-server migrate</code> to create all of Nautobot's tables in the MySQL database <code>(nautobot-mysql) $</code>:</p> <pre><code>nautobot-server migrate\n</code></pre>"},{"location":"installation/migrating-from-postgresql.html#remove-auto-populated-records-from-the-mysql-database","title":"Remove auto-populated records from the MySQL database","text":"<p>A side effect of the <code>nautobot-server migrate</code> command is that it will populate the <code>ContentType</code>, <code>Job</code>, and <code>Status</code> tables with a number of predefined records. Depending on what Nautobot App(s) you have installed, the app(s) may also have auto-created database records of their own, such as <code>CustomField</code> or <code>Tag</code> records, in response to <code>nautobot-server migrate</code>. This is normally useful for getting started quickly with Nautobot, but since we're going to be importing data from our other database, these records will likely conflict with the records to be imported. Therefore we need to remove them, using the <code>nautobot-server nbshell</code> command in our MySQL instance of Nautobot (<code>(nautobot-mysql) $</code> shell prompt):</p> <pre><code>nautobot-server nbshell\n</code></pre> <p>Enter the following Python commands into the shell:</p> <pre><code>from django.apps import apps\nfor model in apps.get_models():\nif model._meta.managed and model.objects.exists():\nprint(f\"Deleting objects of {model}\")\nprint(model.objects.all().delete())\n</code></pre> <p>Example output:</p> <pre><code>### Nautobot interactive shell (1f2ecc58cf6b)\n### Python 3.11.4 | Django 3.2.20 | Nautobot 1.6.0\n### lsmodels() will show available models. Use help(&lt;model&gt;) for more info.\n&gt;&gt;&gt; from django.apps import apps\n&gt;&gt;&gt; for model in apps.get_models():\n...     if model._meta.managed and model.objects.exists():\n...         print(f\"Deleting objects of {model}\")\n...         print(model.objects.all().delete())\n...\nDeleting objects of &lt;class 'django.contrib.auth.models.Permission'&gt;\n(465, {'auth.Permission': 465})\nDeleting objects of &lt;class 'django.contrib.contenttypes.models.ContentType'&gt;\n(186, {'extras.CustomField_content_types': 1, 'extras.Status_content_types': 68, 'contenttypes.ContentType': 117})\nDeleting objects of &lt;class 'nautobot.extras.models.customfields.CustomField'&gt;\n(1, {'extras.CustomField': 1})\nDeleting objects of &lt;class 'nautobot.extras.models.statuses.Status'&gt;\n(20, {'extras.Status': 20})\nDeleting objects of &lt;class 'nautobot.extras.models.jobs.Job'&gt;\n(6, {'extras.Job': 6})\n</code></pre> <p>Press Control-D to exit the <code>nbshell</code> when you are finished.</p>"},{"location":"installation/migrating-from-postgresql.html#import-the-database-dump-into-mysql","title":"Import the database dump into MySQL","text":"<p>Use the <code>nautobot-server loaddata</code> command to import the database dump that you previously created. This may take several minutes to complete depending on the size of your database. This is from the MySQL host with the prompt (<code>(nautobot-mysql) $</code>):</p> <pre><code>nautobot-server loaddata --traceback nautobot_dump.json\n</code></pre> <p>Assuming that the command ran to completion with no errors, you should now have a fully populated clone of your original database in MySQL.</p>"},{"location":"installation/migrating-from-postgresql.html#rebuild-cached-cable-path-traces","title":"Rebuild cached cable path traces","text":"<p>Because cable path traces contain cached data which includes denormalized references to other database objects, it's possible that this cached data will be inaccurate after doing a <code>loaddata</code>. Fortunately there is a <code>nautobot-server</code> command to force rebuilding of these caches, and we recommend doing so after the import is completed:</p> <pre><code>nautobot-server trace_paths --force --no-input\n</code></pre>"},{"location":"installation/nautobot.html","title":"Installing Nautobot","text":"<p>This section of the documentation discusses installing and configuring the Nautobot application itself.</p> <p>These instructions will guide you through the following actions:</p> <ul> <li>Establish a Nautobot root directory for the application environment</li> <li>Create a <code>nautobot</code> system account</li> <li>Create a Python virtual environment (virtualenv)</li> <li>Install Nautobot and all required Python packages</li> <li>Run the database schema migrations</li> <li>Aggregate static resource files on disk</li> <li>Verify the installation using the development/test server</li> </ul> <p>Important</p> <p>Your database server and Redis must have been successfully installed before continuing with deployment steps. If you haven't done that yet, please visit the guide on Installing Nautobot Dependencies</p>"},{"location":"installation/nautobot.html#choose-your-nautobot_root","title":"Choose your <code>NAUTOBOT_ROOT</code>","text":"<p>You need to select a directory path where everything related to Nautobot will be installed. We will use this value across the documentation and it will be referred to as <code>NAUTOBOT_ROOT</code>.</p> <p>We will be using this path as the home directory of the <code>nautobot</code> user.</p> <p>Tip</p> <p>We have selected <code>/opt/nautobot</code>, but you may use any directory you choose.</p> <p>Later on, we will need to set this directory path as the <code>NAUTOBOT_ROOT</code> environment variable to tell Nautobot where to find its files and settings.</p>"},{"location":"installation/nautobot.html#create-the-nautobot-system-user","title":"Create the Nautobot System User","text":"<p>Create a system user account named <code>nautobot</code>. This user will own all of the Nautobot files, and the Nautobot web services will be configured to run under this account.</p> <p>The following command also creates the <code>/opt/nautobot</code> directory and sets it as the home directory for the user.</p> <pre><code>sudo useradd --system --shell /bin/bash --create-home --home-dir /opt/nautobot nautobot\n</code></pre>"},{"location":"installation/nautobot.html#setup-the-virtual-environment","title":"Setup the Virtual Environment","text":"<p>A Python virtual environment or virtualenv is like a container for a set of Python packages. A virtualenv allows you to build environments suited to specific projects without interfering with system packages or other projects.</p> <p>When installed per the documentation, Nautobot uses a virtual environment in production.</p> <p>In the following steps, we will have you create the virtualenv within the <code>NAUTOBOT_ROOT</code> you chose in the previous step. This is the same we had you set as the home directory as the <code>nautobot</code> user.</p> <p>Note</p> <p>Instead of deliberately requiring you to activate/deactivate the virtualenv, we are emphasizing on relying on the <code>$PATH</code> to access programs installed within it. We find this to be much more intuitive and natural when working with Nautobot in this way.</p>"},{"location":"installation/nautobot.html#create-the-virtual-environment","title":"Create the Virtual Environment","text":"<p>As root, we're going to create the virtualenv in our <code>NAUTOBOT_ROOT</code> as the <code>nautobot</code> user to populate the <code>/opt/nautobot</code> directory with a self-contained Python environment including a <code>bin</code> directory for scripts and a <code>lib</code> directory for Python libraries.</p> <pre><code>sudo -u nautobot python3 -m venv /opt/nautobot\n</code></pre>"},{"location":"installation/nautobot.html#update-the-nautobot-bashrc","title":"Update the Nautobot <code>.bashrc</code>","text":"<p>So what about the <code>NAUTOBOT_ROOT</code>? We've referenced this environment variable several times. Here is where it finally gets set.</p> <p>We need to set the <code>NAUTOBOT_ROOT</code> environment variable for the <code>nautobot</code> user and make sure that it always set without having to do it manually.</p> <p>Run this command to update <code>~/.bashrc</code> for <code>nautobot</code> so that anytime you become <code>nautobot</code>, your <code>NAUTOBOT_ROOT</code> will be set automatically.</p> <pre><code>echo \"export NAUTOBOT_ROOT=/opt/nautobot\" | sudo tee -a ~nautobot/.bashrc\n</code></pre>"},{"location":"installation/nautobot.html#sudo-to-nautobot","title":"Sudo to nautobot","text":"<p>It is critical to install Nautobot as the <code>nautobot</code> user so that we don't have to worry about fixing permissions later.</p> <pre><code>sudo -iu nautobot\n</code></pre> <p>Observe also that you can now echo the value of the <code>NAUTOBOT_ROOT</code> environment variable that is automatically set because we added to <code>.bashrc</code>:</p> <pre><code>echo $NAUTOBOT_ROOT\n</code></pre> <p>Example output:</p> <pre><code>/opt/nautobot\n</code></pre> <p>Warning</p> <p>Unless explicitly stated, all remaining steps requiring the use of <code>pip3</code> or <code>nautobot-server</code> in this document should be performed as the <code>nautobot</code> user!</p>"},{"location":"installation/nautobot.html#understanding-the-virtual-environment","title":"Understanding the Virtual Environment","text":"<p>Because the <code>nautobot</code> user was created with <code>NAUTOBOT_ROOT</code> set as its home directory and we had you set the shell to <code>/bin/bash</code>, the binary path <code>$NAUTOBOT_ROOT/bin</code> is automatically added to the beginning of the <code>$PATH</code> environment variable:</p> <p>In Ubuntu 20.04:</p> <pre><code>echo $PATH\n</code></pre> <p>Example output:</p> <pre><code>/opt/nautobot/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\n</code></pre> <p>Due to differences between OS, in CentOS <code>$PATH</code> will appear as:</p> <pre><code>echo $PATH\n</code></pre> <p>Example output:</p> <pre><code>/opt/nautobot/.local/bin:/opt/nautobot/bin:/opt/nautobot/.local/bin:/opt/nautobot/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin\n</code></pre> <p>Therefore, any commands executed by the <code>nautobot</code> user will always check <code>$NAUTOBOT_ROOT/bin</code> first.</p> <p>Since <code>NAUTOBOT_ROOT</code> also contains the Python virtualenv for Nautobot, all of the commands you will execute as the <code>nautobot</code> user, will automatically prefer the virtualenv's commands because they come first in the <code>$PATH</code>.</p> <p>As the <code>nautobot</code> user, you may use <code>which pip3</code> to confirm that you are using the correct version of <code>pip3</code>. The path should match that of <code>$NAUTOBOT_ROOT/bin</code>. For example:</p> <pre><code>which pip3\n</code></pre> <p>Example output:</p> <pre><code>/opt/nautobot/bin/pip3\n</code></pre> <p>This makes sure that the version of Python you're using, as well any dependencies that you install, remain isolated in this environment.</p>"},{"location":"installation/nautobot.html#prepare-the-virtual-environment","title":"Prepare the Virtual Environment","text":"<p>Before we install anything into the virtualenv, we want to make sure that Pip is running the latest version.</p> <p>Pip is Python's package installer and is referred interchangeably as <code>pip</code> or <code>pip3</code>. For the purpose of this document, we'll deliberately be referring to it as <code>pip3</code>. Many common issues can be solved by running the latest version of Pip. Before continuing with installing Nautobot, upgrade Pip to its latest release.</p> <p>We also want to deliberately install the <code>wheel</code> library which will tell Pip to always try to install wheel packages if they are available. A wheel is a pre-compiled Python package, which is quicker and safer to install because it does not require development libraries or <code>gcc</code> to be installed on your system just so that some more advanced Python libraries can be compiled.</p> <pre><code>pip3 install --upgrade pip wheel\n</code></pre>"},{"location":"installation/nautobot.html#install-nautobot","title":"Install Nautobot","text":"<p>Use Pip to install Nautobot:</p> <pre><code>pip3 install nautobot\n</code></pre> <p>Hint</p> <p>If you are using MySQL as your database backend, use <code>pip3 install \"nautobot[mysql]\"</code> to install Nautobot and the <code>mysqlclient</code> library together!</p>"},{"location":"installation/nautobot.html#install-mysql-client-library","title":"Install MySQL client library","text":"<p>If you are using MySQL as your database server you must install the <code>mysqlclient</code> database client for Python.</p> <p>Warning</p> <p>If you're using a MySQL database, Nautobot will not work without this client library. You cannot skip this step.</p> <pre><code>pip3 install \"nautobot[mysql]\"\n</code></pre> <p>Great! We have <code>NAUTOBOT_ROOT</code> ready for use by the <code>nautobot</code> user, so let's proceed to verifying the installation.</p>"},{"location":"installation/nautobot.html#verify-your-nautobot-installation","title":"Verify your Nautobot Installation","text":"<p>You should now have a fancy <code>nautobot-server</code> command in your environment. This will be your gateway to all things Nautobot! Run it to confirm the installed version of <code>nautobot</code>:</p> <pre><code>nautobot-server --version\n</code></pre>"},{"location":"installation/nautobot.html#configuration","title":"Configuration","text":"<p>Before you can use Nautobot, you'll need to configure it by telling it where your database and Redis servers can be found, among other things. This is done with the <code>nautobot_config.py</code> configuration file.</p>"},{"location":"installation/nautobot.html#initialize-your-configuration","title":"Initialize your configuration","text":"<p>Initialize a new configuration by running <code>nautobot-server init</code>. You may specify an alternate location and detailed instructions for this are covered in the documentation on Nautobot Configuration.</p> <p>However, because we've set the <code>NAUTOBOT_ROOT</code>, this command will automatically create a new <code>nautobot_config.py</code> at the default location based on this at <code>$NAUTOBOT_ROOT/nautobot_config.py</code>:</p> <pre><code>nautobot-server init\nConfiguration file created at '/opt/nautobot/nautobot_config.py'\n</code></pre>"},{"location":"installation/nautobot.html#required-settings","title":"Required Settings","text":"<p>Your <code>nautobot_config.py</code> provides sane defaults for all of the configuration settings. You will inevitably need to update the settings for your environment, most notably the <code>DATABASES</code> setting. If you do not wish to modify the config, by default, many of these configuration settings can also be specified by environment variables. Please see Required Settings for further details.</p> <p>Edit <code>$NAUTOBOT_ROOT/nautobot_config.py</code>, and head over to the documentation on Required Settings to tweak your required settings. At a minimum, you'll need to update the following settings:</p> <ul> <li><code>ALLOWED_HOSTS</code>: You must set this value. This can be set to <code>[\"*\"]</code> for a quick start, but this value is not suitable for production deployment.</li> <li><code>DATABASES</code>: Database connection parameters. If you installed your database server on the same system as Nautobot, you'll need to update the <code>USER</code> and <code>PASSWORD</code> fields here. If you are using MySQL, you'll also need to update the <code>ENGINE</code> field, changing the default database driver suffix from <code>django.db.backends.postgresql</code> to <code>django.db.backends.mysql</code>.</li> <li>Redis settings: Redis configuration requires multiple settings including <code>CACHEOPS_REDIS</code> and <code>RQ_QUEUES</code>, if different from the defaults. If you installed Redis on the same system as Nautobot, you do not need to change these settings.</li> </ul> <p>Important</p> <p>You absolutely must update your required settings in your <code>nautobot_config.py</code> or Nautobot will not work.</p> <p>Warning</p> <p>If you are using MySQL as your database backend, you must also update the database <code>ENGINE</code> setting to <code>django.db.backends.mysql</code>.</p> <p>Save your changes to your <code>nautobot_config.py</code> and then proceed to the next step.</p>"},{"location":"installation/nautobot.html#mysql-unicode-settings","title":"MySQL Unicode Settings","text":"<p>If you are using MySQL as your database backend, and you want to enable support for Unicode emojis, please make sure to add <code>\"OPTIONS\": {\"charset\": \"utf8mb4\"}</code> to your <code>DATABASES</code> setting. Please see the configuration guide on MySQL Unicode settings for more information.</p>"},{"location":"installation/nautobot.html#optional-settings","title":"Optional Settings","text":"<p>All Python packages required by Nautobot will be installed automatically when running <code>pip3 install nautobot</code>.</p> <p>Nautobot also supports the ability to install optional Python packages. If desired, these packages should be listed in <code>local_requirements.txt</code> within the <code>NAUTOBOT_ROOT</code> directory, such as <code>/opt/nautobot/local_requirements.txt</code>.</p> <p>If you decide to use any Nautobot plugins, they should be listed in this file.</p> <p>We will cover two examples of common optional settings below.</p>"},{"location":"installation/nautobot.html#configuring-napalm","title":"Configuring NAPALM","text":"<p>Nautobot provides built-in support for the NAPALM automation library, which allows Nautobot to fetch live data from devices and return it to a requester via its REST API. The <code>NAPALM_USERNAME</code> and <code>NAPALM_PASSWORD</code> configuration parameters define the credentials to be used when connecting to a device.</p> <p>To use NAPALM, add <code>nautobot[napalm]</code> to your <code>local_requirements.txt</code> so that it can be installed and kept up to date:</p> <pre><code>echo \"nautobot[napalm]\" &gt;&gt; $NAUTOBOT_ROOT/local_requirements.txt\n</code></pre>"},{"location":"installation/nautobot.html#remote-file-storage","title":"Remote File Storage","text":"<p>By default, Nautobot will use the local filesystem to store uploaded files. To use a remote filesystem, install the <code>django-storages</code> library and configure your desired storage backend in <code>nautobot_config.py</code>.</p> <p>To use remote file storage, add <code>nautobot[remote_storage]</code> to your <code>local_requirements.txt</code> so that it can be installed and kept up to date:</p> <pre><code>echo \"nautobot[remote_storage]\" &gt;&gt; $NAUTOBOT_ROOT/local_requirements.txt\n</code></pre> <p>An example of using django-storages with AWS S3 buckets, visit the django-storages with S3 user-guide.</p>"},{"location":"installation/nautobot.html#prepare-the-database","title":"Prepare the Database","text":"<p>Before Nautobot can run, the database migrations must be performed to prepare the database for use. This will populate the database tables and relationships:</p> <pre><code>nautobot-server migrate\n</code></pre>"},{"location":"installation/nautobot.html#create-a-superuser","title":"Create a Superuser","text":"<p>Nautobot does not come with any predefined user accounts. You'll need to create a administrative superuser account to be able to log into Nautobot for the first time. Specifying an email address for the user is not required, but be sure to use a very strong password.</p> <pre><code>nautobot-server createsuperuser\n</code></pre>"},{"location":"installation/nautobot.html#create-static-directories","title":"Create Static Directories","text":"<p>Nautobot relies upon many static files including:</p> <ul> <li><code>git</code> - For storing Git repositories</li> <li><code>jobs</code> - For storing custom Jobs</li> <li><code>media</code> - For storing uploaded images and attachments (such as device type images)</li> <li><code>static</code> - The home for CSS, JavaScript, and images used to serve the web interface</li> </ul> <p>Each of these have their own corresponding setting that defined in <code>nautobot_config.py</code>, but by default they will all be placed in <code>NAUTOBOT_ROOT</code> unless you tell Nautobot otherwise by customizing their unique variable.</p> <p>The <code>collectstatic</code> command will create these directories if they do not exist, and in the case of the <code>static</code> files directory, it will also copy the appropriate files:</p> <pre><code>nautobot-server collectstatic\n</code></pre>"},{"location":"installation/nautobot.html#install-local-requirements","title":"Install Local Requirements","text":"<p>Note</p> <p>If you did not create a <code>local_requirements.txt</code> above, please skip this step.</p> <p>This step is entirely optional. As indicated above, we mentioned that any extra local requirements should go into <code>$NAUTOBOT_ROOT/local_requirements.txt</code>.</p> <pre><code>pip3 install -r $NAUTOBOT_ROOT/local_requirements.txt\n</code></pre>"},{"location":"installation/nautobot.html#check-your-configuration","title":"Check your Configuration","text":"<p>Nautobot leverages Django's built-in system check framework to validate the configuration to detect common problems and to provide hints for how to fix them.</p> <p>Checks are ran automatically when running a development server using <code>nautobot-server runserver</code>, but not when running in production using WSGI.</p> <p>Hint</p> <p>Get into the habit of running checks before deployments!</p> <pre><code>nautobot-server check\n</code></pre>"},{"location":"installation/nautobot.html#test-the-application","title":"Test the Application","text":"<p>At this point, we should be able to run Nautobot's development server for testing. We can check by starting a development instance:</p> <pre><code>nautobot-server runserver 0.0.0.0:8080 --insecure\n</code></pre> <p>Next, connect to the name or IP of the server (as defined in <code>ALLOWED_HOSTS</code>) on port 8080; for example, http://127.0.0.1:8080/. You should be greeted with the Nautobot home page.</p> <p>Danger</p> <p>DO NOT USE THIS SERVER IN A PRODUCTION SETTING. The development server is for development and testing purposes only. It is neither performant nor secure enough for production use.</p> <p>Warning</p> <p>If the test service does not run, or you cannot reach the Nautobot home page, something has gone wrong. Do not proceed with the rest of this guide until the installation has been corrected. Some platforms (such as CentOS) have a firewall enabled by default. If you are unable to connect to the server url on port 8080, verify the firewall policy to allow the appropriate connections, or select an already permitted port.</p> <p>Important</p> <p>Certain Nautobot features (Git repository synchronization, webhooks, jobs, etc.) depend on the presence of Nautobot's background Celery worker process, which is not automatically started by the <code>runserver</code> command. To start it for testing purposes, you can run <code>nautobot-server celery worker</code> (for background tasks) or <code>nautobot-server rqworker</code> (for jobs) separately. For production use, Nautobot and the worker processes should be managed by <code>systemd</code> rather than started manually, as described in the next section of this documentation.</p> <p>Note that the initial user interface will be locked down for non-authenticated users.</p> <p></p> <p>Try logging in using the superuser account we just created. Once authenticated, you'll be able to access all areas of the UI:</p> <p></p> <p>Type <code>Ctrl-C</code> to stop the development server. Now you're ready to proceed to starting Nautobot as a system service.</p>"},{"location":"installation/selinux-troubleshooting.html","title":"SELinux Troubleshooting","text":"<p>When installing Nautobot for the first time on a Redhat-based Linux Distribution, SELinux may prevent the Nautobot stack from working properly. An example is SELinux preventing the HTTP daemon (NGINX, et al.) from communicating to the Django application stack on the backend.</p>"},{"location":"installation/selinux-troubleshooting.html#determine-if-selinux-is-the-culprit","title":"Determine if SELinux is the Culprit","text":"<p>An example of a broken application can be seen in the Nginx error logs below:</p> <pre><code>sudo tail -f /var/log/nginx/error.log\n</code></pre> <p>Example output:</p> <pre><code>2021/02/26 15:16:55 [crit] 67245#0: *494 connect() to 127.0.0.1:8080 failed (13: Permission denied) while connecting to upstream, client: 47.221.167.40, server: nautobot.example.com, request: \"GET / HTTP/1.1\", upstream: \"http://127.0.0.1:8080/\", host: \"nautobot.example.com\"\n2021/02/26 15:16:56 [crit] 67245#0: *494 connect() to 127.0.0.1:8080 failed (13: Permission denied) while connecting to upstream, client: 47.221.167.40, server: nautobot.example.com, request: \"GET /favicon.ico HTTP/1.1\", upstream: \"http://127.0.0.1:8080/favicon.ico\", host: \"nautobot.example.com\", referrer: \"https://nautobot.example.com/\"\n2021/02/26 15:16:58 [crit] 67245#0: *544 connect() to 127.0.0.1:8080 failed (13: Permission denied) while connecting to upstream, client: 47.221.167.40, server: nautobot.example.com, request: \"GET / HTTP/1.1\", upstream: \"http://127.0.0.1:8080/\", host: \"nautobot.example.com\"\n2021/02/26 15:16:58 [crit] 67245#0: *544 connect() to 127.0.0.1:8080 failed (13: Permission denied) while connecting to upstream, client: 47.221.167.40, server: nautobot.example.com, request: \"GET /favicon.ico HTTP/1.1\", upstream: \"http://127.0.0.1:8080/favicon.ico\", host: \"nautobot.example.com\", referrer: \"https://nautobot.example.com/\"\n</code></pre> <p>A quick way to verify that SELinux is preventing the application from working is to first, verify that SELinux is indeed <code>enabled</code> and operating in <code>enforcing</code> mode, and second, temporarily put SELinux in <code>permissive</code> mode. With SELinux in <code>permissive</code> mode, the application stack can be tested again. If the application starts working as expected, then SELinux is most likely the culprit.</p> <pre><code># sestatus | egrep 'SELinux status|Current mode'\nSELinux status:                 enabled\nCurrent mode:                   enforcing\n</code></pre> <p>To put SELinux in <code>permissive</code> mode, execute the <code>setenforce</code> command with the <code>0</code> flag.</p> <pre><code># setenforce 0\n\n# sestatus | egrep 'SELinux status|Current mode'\nSELinux status:                 enabled\nCurrent mode:                   permissive\n</code></pre> <p>With SELinux in <code>permissive</code> mode, test the application stack and ensure everything is working properly. If the application is working, put SELinux back into <code>enforcing</code> mode. This is done by executing the <code>setenforce</code> command with the <code>1</code> flag.</p> <pre><code># setenforce 1\n\n# sestatus | egrep 'SELinux status|Current mode'\nSELinux status:                 enabled\nCurrent mode:                   enforcing\n</code></pre>"},{"location":"installation/selinux-troubleshooting.html#troubleshoot-selinux","title":"Troubleshoot SELinux","text":"<p>Troubleshooting SELinux in most instances is straightforward. Using the <code>sealert</code> command to parse <code>/var/log/audit/audit.log</code> is the fastest way to pin-point SELinux specific issues. In many cases, <code>sealert</code> will also provide guidance as to how to resolve the issue.</p> <pre><code># sealert -a /var/log/audit/audit.log\n100% done\nfound 1 alerts in /var/log/audit/audit.log\n--------------------------------------------------------------------------------\n\nSELinux is preventing /usr/sbin/nginx from name_connect access on the tcp_socket port 8080.\n\n*****  Plugin connect_ports (85.9 confidence) suggests   *********************\n\nIf you want to allow /usr/sbin/nginx to connect to network port 8080\nThen you need to modify the port type.\nDo\n# semanage port -a -t PORT_TYPE -p tcp 8080\n    where PORT_TYPE is one of the following: dns_port_t, dnssec_port_t, kerberos_port_t, ocsp_port_t.\n\n*****  Plugin catchall_boolean (7.33 confidence) suggests   ******************\n\nIf you want to allow httpd to can network connect\nThen you must tell SELinux about this by enabling the 'httpd_can_network_connect' boolean.\n\nDo\nsetsebool -P httpd_can_network_connect 1\n\n*****  Plugin catchall_boolean (7.33 confidence) suggests   ******************\n\nIf you want to allow nis to enabled\nThen you must tell SELinux about this by enabling the 'nis_enabled' boolean.\n\nDo\nsetsebool -P nis_enabled 1\n\n*****  Plugin catchall (1.35 confidence) suggests   **************************\n\nIf you believe that nginx should be allowed name_connect access on the port 8080 tcp_socket by default.\nThen you should report this as a bug.\nYou can generate a local policy module to allow this access.\nDo\nallow this access for now by executing:\n# ausearch -c 'nginx' --raw | audit2allow -M my-nginx\n# semodule -X 300 -i my-nginx.pp\n\nAdditional Information:\nSource Context                system_u:system_r:httpd_t:s0\nTarget Context                system_u:object_r:unreserved_port_t:s0\nTarget Objects                port 8080 [ tcp_socket ]\nSource                        nginx\nSource Path                   /usr/sbin/nginx\nPort                          8080\nHost                          &lt;Unknown&gt;\nSource RPM Packages           nginx-1.14.1-9.module_el8.0.0+184+e34fea82.x86_64\nTarget RPM Packages\nSELinux Policy RPM            selinux-policy-targeted-3.14.3-54.el8_3.2.noarch\nLocal Policy RPM              selinux-policy-targeted-3.14.3-54.el8_3.2.noarch\nSelinux Enabled               True\nPolicy Type                   targeted\nEnforcing Mode                Enforcing\nHost Name                     nautobot.example.com\nPlatform                      Linux nautobot.example.com\n                              4.18.0-240.1.1.el8_3.x86_64 #1 SMP Thu Nov 19\n                              17:20:08 UTC 2020 x86_64 x86_64\nAlert Count                   5\nFirst Seen                    2021-02-26 15:16:55 UTC\nLast Seen                     2021-02-26 15:23:12 UTC\nLocal ID                      b83bb817-85f6-4f5c-b6e0-eee3acc85504\n\nRaw Audit Messages\ntype=AVC msg=audit(1614352992.209:585): avc:  denied  { name_connect } for  pid=67245 comm=\"nginx\" dest=8080 scontext=system_u:system_r:httpd_t:s0 tcontext=system_u:object_r:unreserved_port_t:s0 tclass=tcp_socket permissive=0\n\ntype=SYSCALL msg=audit(1614352992.209:585): arch=x86_64 syscall=connect success=no exit=EACCES a0=12 a1=55d061477358 a2=10 a3=7ffc0c62296c items=0 ppid=67243 pid=67245 auid=4294967295 uid=988 gid=985 euid=988 suid=988 fsuid=988 egid=985 sgid=985 fsgid=985 tty=(none) ses=4294967295 comm=nginx exe=/usr/sbin/nginx subj=system_u:system_r:httpd_t:s0 key=(null)ARCH=x86_64 SYSCALL=connect AUID=unset UID=nginx GID=nginx EUID=nginx SUID=nginx FSUID=nginx EGID=nginx SGID=nginx FSGID=nginx\n\nHash: nginx,httpd_t,unreserved_port_t,tcp_socket,name_connect\n</code></pre> <p>In the first few lines of the audit, <code>sealert</code> details what SELinux is blocking and provides some options to remedy the issue. Since Nginx is communicating with the Nautobot application via HTTP, the second option is the best option.</p> <pre><code>SELinux is preventing /usr/sbin/nginx from name_connect access on the tcp_socket port 8080.\n\n*****  Plugin connect_ports (85.9 confidence) suggests   *********************\n\nIf you want to allow /usr/sbin/nginx to connect to network port 8080\nThen you need to modify the port type.\nDo\n# semanage port -a -t PORT_TYPE -p tcp 8080\n    where PORT_TYPE is one of the following: dns_port_t, dnssec_port_t, kerberos_port_t, ocsp_port_t.\n\n*****  Plugin catchall_boolean (7.33 confidence) suggests   ******************\n\nIf you want to allow httpd to can network connect\nThen you must tell SELinux about this by enabling the 'httpd_can_network_connect' boolean.\n\nDo\nsetsebool -P httpd_can_network_connect 1\n</code></pre> <p>Executing <code>setsebool -P httpd_can_network_connect 1</code> should remedy the issue. Verify this by executing the <code>setsebool</code> command, verify that SELinux is enabled and in <code>enforcing</code> mode via the <code>sestatus</code> command, and test the application stack for functionality.</p> <p>The first curl command demonstrates the failure. Nginx responds with a HTTP response code of 502, indicating that it is unable to communicate with the Nautobot application. After executing the <code>setsebool</code> command, curl is used again to verify that Nginx is able to communicate with the Nautobot application. This is verified with the HTTP response code of 200.</p> <pre><code># curl -ik https://nautobot.example.com\nHTTP/1.1 502 Bad Gateway\nServer: nginx/1.14.1\nDate: Fri, 26 Feb 2021 15:41:22 GMT\nContent-Type: text/html\nContent-Length: 173\nConnection: keep-alive\n\n# sestatus\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   enforcing\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      32\n\n# setsebool -P httpd_can_network_connect 1\n\n# curl -ik https://nautobot.example.com\nHTTP/1.1 200 OK\nServer: nginx/1.14.1\nDate: Fri, 26 Feb 2021 15:41:49 GMT\nContent-Type: text/html; charset=utf-8\nContent-Length: 18698\nConnection: keep-alive\nX-Content-Type-Options: nosniff\nReferrer-Policy: same-origin\nX-Frame-Options: DENY\nVary: Cookie, Origin\n</code></pre>"},{"location":"installation/services.html","title":"Deploying Nautobot: Web Service and Workers","text":""},{"location":"installation/services.html#services-overview","title":"Services Overview","text":"<p>Like most Django applications, Nautobot runs as a WSGI application behind an HTTP server.</p> <p>Nautobot comes preinstalled with uWSGI to use as the WSGI server, however other WSGI servers are available and should work similarly well. Gunicorn is a popular alternative.</p> <p>Additionally, certain Nautobot features (including Git repository synchronization, Webhooks, Jobs, etc.) depend on the presence of Nautobot's Celery background worker process, which is not automatically started with Nautobot and is run as a separate service.</p> <p>This document will guide you through setting up uWSGI and establishing Nautobot web and Celery worker services to run on system startup.</p>"},{"location":"installation/services.html#web-service","title":"Web Service","text":"<p>Nautobot includes a <code>nautobot-server start</code> management command that directly invokes uWSGI. This command behaves exactly as uWSGI does, but allows us to maintain a single entrypoint into the Nautobot application.</p> <pre><code>nautobot-server start --help\n</code></pre>"},{"location":"installation/services.html#worker-service","title":"Worker Service","text":"<p>Nautobot requires at least one worker to consume background tasks required for advanced background features. A <code>nautobot-server celery</code> command is included that directly invokes Celery. This command behaves exactly as the Celery command-line utility does, but launches it through Nautobot's environment to share Redis and database connection settings transparently.</p> <pre><code>nautobot-server celery --help\n</code></pre> <p>Changed in version 1.1.0</p> <p>Prior to version 1.1.0, Nautobot utilized RQ as the primary background task worker. As of Nautobot 1.1.0, RQ is now deprecated. RQ and the <code>@job</code> decorator for custom tasks are still supported for now, but users should migrate the primary worker to Celery and then, only if still required, run RQ concurrently with the Celery worker. RQ and the <code>@job</code> decorator will no longer be documented, and support for RQ will be removed in a future release.</p>"},{"location":"installation/services.html#advanced-task-queue-configuration","title":"Advanced Task Queue Configuration","text":"<p>You may want to deploy multiple workers and/or multiple queues. For more information see the task queues documentation.</p>"},{"location":"installation/services.html#configuration","title":"Configuration","text":"<p>As the <code>nautobot</code> user, copy and paste the following into <code>$NAUTOBOT_ROOT/uwsgi.ini</code>:</p> <pre><code>[uwsgi]\n; The IP address (typically localhost) and port that the WSGI process should listen on\nsocket = 127.0.0.1:8001\n; Fail to start if any parameter in the configuration file isn\u2019t explicitly understood by uWSGI\nstrict = true\n; Enable master process to gracefully re-spawn and pre-fork workers\nmaster = true\n; Allow Python app-generated threads to run\nenable-threads = true\n;Try to remove all of the generated file/sockets during shutdown\nvacuum = true\n; Do not use multiple interpreters, allowing only Nautobot to run\nsingle-interpreter = true\n; Shutdown when receiving SIGTERM (default is respawn)\ndie-on-term = true\n; Prevents uWSGI from starting if it is unable load Nautobot (usually due to errors)\nneed-app = true\n; By default, uWSGI has rather verbose logging that can be noisy\ndisable-logging = true\n; Assert that critical 4xx and 5xx errors are still logged\nlog-4xx = true\nlog-5xx = true\n; Enable HTTP 1.1 keepalive support\nhttp-keepalive = 1\n;\n; Advanced settings (disabled by default)\n; Customize these for your environment if and only if you need them.\n; Ref: https://uwsgi-docs.readthedocs.io/en/latest/Options.html\n;\n; Number of uWSGI workers to spawn. This should typically be 2n+1, where n is the number of CPU cores present.\n; processes = 5\n; If using subdirectory hosting e.g. example.com/nautobot, you must uncomment this line. Otherwise you'll get double paths e.g. example.com/nautobot/nautobot/.\n; Ref: https://uwsgi-docs.readthedocs.io/en/latest/Changelog-2.0.11.html#fixpathinfo-routing-action\n; route-run = fixpathinfo:\n; If hosted behind a load balancer uncomment these lines, the harakiri timeout should be greater than your load balancer timeout.\n; Ref: https://uwsgi-docs.readthedocs.io/en/latest/HTTP.html?highlight=keepalive#http-keep-alive\n; harakiri = 65\n; add-header = Connection: Keep-Alive\n; http-keepalive = 1\n</code></pre> <p>This configuration should suffice for most initial installations, you may wish to edit this file to change the bound IP address and/or port number, or to make performance-related adjustments. See uWSGI documentation for the available configuration parameters.</p> <p>Note</p> <p>If you are deploying uWSGI behind a load balancer be sure to configure the harakiri timeout and keep alive appropriately.</p>"},{"location":"installation/services.html#setup-systemd","title":"Setup systemd","text":"<p>We'll use <code>systemd</code> to control both uWSGI and Nautobot's background worker processes.</p> <p>Warning</p> <p>The following steps must be performed with root permissions.</p>"},{"location":"installation/services.html#nautobot-service","title":"Nautobot Service","text":"<p>First, we'll establish the <code>systemd</code> unit file for the Nautobot web service. Copy and paste the following into <code>/etc/systemd/system/nautobot.service</code>:</p> <pre><code>[Unit]\nDescription=Nautobot WSGI Service\nDocumentation=https://docs.nautobot.com/projects/core/en/stable/\nAfter=network-online.target\nWants=network-online.target\n[Service]\nType=simple\nEnvironment=\"NAUTOBOT_ROOT=/opt/nautobot\"\nUser=nautobot\nGroup=nautobot\nPIDFile=/var/tmp/nautobot.pid\nWorkingDirectory=/opt/nautobot\nExecStart=/opt/nautobot/bin/nautobot-server start --pidfile /var/tmp/nautobot.pid --ini /opt/nautobot/uwsgi.ini\nExecStop=/opt/nautobot/bin/nautobot-server start --stop /var/tmp/nautobot.pid\nExecReload=/opt/nautobot/bin/nautobot-server start --reload /var/tmp/nautobot.pid\nRestart=on-failure\nRestartSec=30\nPrivateTmp=true\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"installation/services.html#nautobot-background-services","title":"Nautobot Background Services","text":"<p>Changed in version 1.1.0</p> <p>Prior to version 1.1.0, Nautobot utilized RQ as the primary background task worker. As of Nautobot 1.1.0, RQ is now deprecated and has been replaced with Celery. RQ can still be used by plugins for now, but will be removed in a future release. Please migrate your deployment to utilize Celery as documented below.</p> <p>Next, we will setup the <code>systemd</code> units for the Celery worker and Celery Beat scheduler.</p>"},{"location":"installation/services.html#celery-worker","title":"Celery Worker","text":"<p>Added in version 1.1.0</p> <p>The Celery worker service consumes tasks from background task queues and is required for taking advantage of advanced Nautobot features including Jobs, Custom Fields, and Git Repositories, among others.</p> <p>To establish the <code>systemd</code> unit file for the Celery worker, copy and paste the following into <code>/etc/systemd/system/nautobot-worker.service</code>:</p> <pre><code>[Unit]\nDescription=Nautobot Celery Worker\nDocumentation=https://docs.nautobot.com/projects/core/en/stable/\nAfter=network-online.target\nWants=network-online.target\n[Service]\nType=exec\nEnvironment=\"NAUTOBOT_ROOT=/opt/nautobot\"\nUser=nautobot\nGroup=nautobot\nPIDFile=/var/tmp/nautobot-worker.pid\nWorkingDirectory=/opt/nautobot\nExecStart=/opt/nautobot/bin/nautobot-server celery worker --loglevel INFO --pidfile /var/tmp/nautobot-worker.pid\nRestart=always\nRestartSec=30\nPrivateTmp=true\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"installation/services.html#celery-beat-scheduler","title":"Celery Beat Scheduler","text":"<p>Added in version 1.2.0</p> <p>The Celery Beat scheduler enables the periodic execution of and scheduling of background tasks. It is required to take advantage of the job scheduling and approval features.</p> <p>To establish the <code>systemd</code> unit file for the Celery Beat scheduler, copy and paste the following into <code>/etc/systemd/system/nautobot-scheduler.service</code>:</p> <pre><code>[Unit]\nDescription=Nautobot Celery Beat Scheduler\nDocumentation=https://docs.nautobot.com/projects/core/en/stable/\nAfter=network-online.target\nWants=network-online.target\n[Service]\nType=exec\nEnvironment=\"NAUTOBOT_ROOT=/opt/nautobot\"\nUser=nautobot\nGroup=nautobot\nPIDFile=/var/tmp/nautobot-scheduler.pid\nWorkingDirectory=/opt/nautobot\nExecStart=/opt/nautobot/bin/nautobot-server celery beat --loglevel INFO --pidfile /var/tmp/nautobot-scheduler.pid\nRestart=always\nRestartSec=30\nPrivateTmp=true\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"installation/services.html#migrating-to-celery-from-rq","title":"Migrating to Celery from RQ","text":"<p>Prior to migrating, you need to determine whether you have any plugins installed that run custom background tasks that still rely on the RQ worker. There are a few ways to do this. Two of them are:</p> <ul> <li>Ask your developer or administrator if there are any plugins running background tasks still using the RQ worker</li> <li>If you are savvy with code, search your code for the <code>@job</code> decorator or for <code>from django_rq import job</code></li> </ul> <p>If you're upgrading from Nautobot version 1.0.x and are NOT running plugins that use the RQ worker, all you really need to do are two things.</p> <p>First, you must replace the contents of <code>/etc/systemd/system/nautobot-worker.service</code> with the <code>systemd</code> unit file provided just above.</p> <p>Next, you must update any custom background tasks that you may have written. If you do not have any custom background tasks, then you may continue on to the next section to reload your worker service to use Celery.</p> <p>To update your custom tasks, you'll need to do the following.</p> <ul> <li>Replace each import <code>from django_rq import job</code> with <code>from nautobot.core.celery import nautobot_task</code></li> <li>Replace each decorator of <code>@job</code> with <code>@nautobot_task</code></li> </ul> <p>For example:</p> <pre><code>diff --git a/task_example.py b/task_example.py\nindex f84073fb5..52baf6096 100644\n--- a/task_example.py\n+++ b/task_example.py\n@@ -1,6 +1,6 @@\n-from django_rq import job\n+from nautobot.core.celery import nautobot_task\n-@job(\"default\")\n+@nautobot_task\ndef example_task(*args, **kwargs):\n     return \"examples are cool!\"\n(END)\n</code></pre> <p>If you are using plugins that use custom background tasks but have not yet made the change described above, you must run the RQ worker concurrently with the Celery worker until the plugin can be updated.</p> <p>Warning</p> <p>Failure to account for the Celery-to-RQ migration may break your custom background tasks</p>"},{"location":"installation/services.html#concurrent-celery-and-rq-nautobot-workers","title":"Concurrent Celery and RQ Nautobot Workers","text":"<p>If you must run the Celery and RQ workers concurrently, you must also configure the (deprecated) RQ worker.</p> <p>Copy and paste the following into <code>/etc/systemd/system/nautobot-rq-worker.service</code>:</p> <pre><code>[Unit]\nDescription=Nautobot Request Queue Worker\nDocumentation=https://docs.nautobot.com/projects/core/en/stable/\nAfter=network-online.target\nWants=network-online.target\n[Service]\nType=simple\nEnvironment=\"NAUTOBOT_ROOT=/opt/nautobot\"\nUser=nautobot\nGroup=nautobot\nWorkingDirectory=/opt/nautobot\nExecStart=/opt/nautobot/bin/nautobot-server rqworker\nRestart=on-failure\nRestartSec=30\nPrivateTmp=true\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"installation/services.html#configure-systemd","title":"Configure systemd","text":"<p>Because we just added new service files, you'll need to reload the systemd daemon:</p> <pre><code>sudo systemctl daemon-reload\n</code></pre> <p>Then, start the <code>nautobot</code>, <code>nautobot-worker</code>, and <code>nautobot-scheduler</code> services and enable them to initiate at boot time:</p> <pre><code>sudo systemctl enable --now nautobot nautobot-worker nautobot-scheduler\n</code></pre> <p>If you are also running the RQ worker, repeat the above command for the RQ service:</p> <pre><code>sudo systemctl enable --now nautobot-rq-worker\n</code></pre> <p>Tip</p> <p>If you are running the concurrent RQ worker, you must remember to enable/check/restart the <code>nautobot-rq-worker</code> process as needed, oftentimes in addition to the <code>nautobot-worker</code> process.</p>"},{"location":"installation/services.html#verify-the-service","title":"Verify the service","text":"<p>You can use the command <code>systemctl status nautobot.service</code> to verify that the WSGI service is running:</p> <pre><code>\u25cf nautobot.service - Nautobot WSGI Service\n     Loaded: loaded (/etc/systemd/system/nautobot.service; enabled; vendor preset: enabled)\n     Active: active (running) since Fri 2021-03-05 22:23:33 UTC; 35min ago\n       Docs: https://docs.nautobot.com/projects/core/en/stable/\n   Main PID: 6992 (nautobot-server)\n      Tasks: 16 (limit: 9513)\n     Memory: 221.1M\n     CGroup: /system.slice/nautobot.service\n             \u251c\u25006992 /opt/nautobot/bin/python3 /opt/nautobot/bin/nautobot-server start /&gt;\n             \u251c\u25007007 /opt/nautobot/bin/python3 /opt/nautobot/bin/nautobot-server start /&gt;\n             \u251c\u25007010 /opt/nautobot/bin/python3 /opt/nautobot/bin/nautobot-server start /&gt;\n             \u251c\u25007013 /opt/nautobot/bin/python3 /opt/nautobot/bin/nautobot-server start /&gt;\n             \u251c\u25007016 /opt/nautobot/bin/python3 /opt/nautobot/bin/nautobot-server start /&gt;\n             \u2514\u25007019 /opt/nautobot/bin/python3 /opt/nautobot/bin/nautobot-server start /&gt;\n</code></pre> <p>Note</p> <p>If the Nautobot service fails to start, issue the command <code>journalctl -eu nautobot.service</code> to check for log messages that may indicate the problem.</p> <p>Once you've verified that the WSGI service and worker are up and running, move on to HTTP server setup.</p>"},{"location":"installation/services.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/services.html#operational-error-incorrect-string-value","title":"Operational Error: Incorrect string value","text":"<p>When using MySQL as a database backend, if you encounter a server error along the lines of <code>Incorrect string value: '\\\\xF0\\\\x9F\\\\x92\\\\x80' for column</code>, it is because you are running afoul of the legacy implementation of Unicode (aka <code>utf8</code>) encoding in MySQL. This often occurs when using modern Unicode glyphs like the famous poop emoji.</p> <p>Please see the configuration guide on MySQL Unicode settings for instructions on how to address this.</p> <p>Please see Computed fields with fallback value that is unicode results in OperationalError (#645) for more details.</p>"},{"location":"installation/services.html#svg-images-not-rendered","title":"SVG images not rendered","text":"<p>When serving Nautobot directly from uWSGI on RedHat or CentOS there may be a problem rendering .svg images to include the Nautobot logo. On the RedHat based operating systems there is no file <code>/etc/mime.types</code> by default, unfortunately, uWSGI looks for this file to serve static files (see Serving static files with uWSGI). To work around this copy the file <code>/etc/mime.types</code> from a known good system for example an Ubuntu/Debian system or even the Nautobot container to /opt/nautobot/mime.types. Then add the following line to your <code>uwsgi.ini</code> file and restart the Nautobot services:</p> <pre><code>mime-file = /opt/nautobot/mime.types\n</code></pre> <p>Alternatively, host Nautobot behind Nginx as instructed in HTTP server setup.</p>"},{"location":"installation/services.html#test-redis-connectivity","title":"Test Redis Connectivity","text":"<p>From a nautobot shell (<code>nautobot-server shell_plus</code>) use the following Python commands to test connectivity to your Redis server. If successful, python should not return any exceptions.</p> <pre><code>import os\nimport redis\nfrom nautobot.core.settings_funcs import parse_redis_connection\nconnection = parse_redis_connection(0)\nclient = redis.from_url(connection)\nclient.ping() # test basic connectivity\nclient.keys() # retrieve a list of keys in the redis database\nclient.auth(password=os.getenv(\"NAUTOBOT_REDIS_PASSWORD\")) # test password authentication\n</code></pre>"},{"location":"installation/ubuntu.html","title":"Installing Nautobot Dependencies on Ubuntu","text":"<p>This installation guide assumes that you are running Ubuntu version 20.04 on your system.</p>"},{"location":"installation/ubuntu.html#install-system-packages","title":"Install System Packages","text":"<p>Install the prerequisite system libraries and utilities.</p> <p>This will install:</p> <ul> <li>Git</li> <li>Python 3</li> <li>Pip</li> <li>Redis server and client</li> </ul> <pre><code>sudo apt update -y\nsudo apt install -y git python3 python3-pip python3-venv python3-dev redis-server\n</code></pre>"},{"location":"installation/ubuntu.html#database-setup","title":"Database Setup","text":"<p>In this step you'll set up your database server, create a database and database user for use by Nautobot, and verify your connection to the database.</p> <p>You must select either MySQL or PostgreSQL. PostgreSQL is used by default with Nautobot, so if you just want to get started or don't have a preference, please stick with PostgreSQL.</p> <p>Please follow the steps for your selected database backend below.</p>"},{"location":"installation/ubuntu.html#postgresql-setup","title":"PostgreSQL Setup","text":""},{"location":"installation/ubuntu.html#install-postgresql","title":"Install PostgreSQL","text":"<p>This will install the PostgreSQL database server and client.</p> <pre><code>sudo apt install -y postgresql\n</code></pre>"},{"location":"installation/ubuntu.html#create-a-postgresql-database","title":"Create a PostgreSQL Database","text":"<p>At a minimum, we need to create a database for Nautobot and assign it a username and password for authentication. This is done with the following commands.</p> <p>Danger</p> <p>Do not use the password from the example. Choose a strong, random password to ensure secure database authentication for your Nautobot installation.</p> <pre><code>sudo -u postgres psql\n</code></pre> <p>Example output:</p> <pre><code>psql (12.5 (Ubuntu 12.5-0ubuntu0.20.04.1))\nType \"help\" for help.\n\npostgres=# CREATE DATABASE nautobot;\nCREATE DATABASE\npostgres=# CREATE USER nautobot WITH PASSWORD 'insecure_password';\nCREATE ROLE\npostgres=# GRANT ALL PRIVILEGES ON DATABASE nautobot TO nautobot;\nGRANT\npostgres=# \\q\n</code></pre>"},{"location":"installation/ubuntu.html#verify-postgresql-service-status","title":"Verify PostgreSQL Service Status","text":"<p>You can verify that authentication works issuing the following command and providing the configured password. (Replace <code>localhost</code> with your database server if using a remote database.)</p> <p>If successful, you will enter a <code>nautobot</code> prompt. Type <code>\\conninfo</code> to confirm your connection, or type <code>\\q</code> to exit.</p> <pre><code>psql --username nautobot --password --host localhost nautobot\n</code></pre> <p>Example output:</p> <pre><code>Password for user nautobot:\npsql (12.5 (Ubuntu 12.5-0ubuntu0.20.04.1))\nSSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)\nType \"help\" for help.\n\nnautobot=&gt; \\conninfo\nYou are connected to database \"nautobot\" as user \"nautobot\" on host \"localhost\" (address \"127.0.0.1\") at port \"5432\".\nSSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)\nnautobot=&gt; \\q\n</code></pre>"},{"location":"installation/ubuntu.html#mysql-setup","title":"MySQL Setup","text":""},{"location":"installation/ubuntu.html#install-mysql","title":"Install MySQL","text":"<p>This will install the MySQL database server and client. Additionally, MySQL requires that the MySQL development libraries are installed so that we may compile the Python <code>mysqlclient</code> library during the Nautobot installation steps.</p> <pre><code>sudo apt install -y libmysqlclient-dev mysql-server\n</code></pre>"},{"location":"installation/ubuntu.html#create-a-mysql-database","title":"Create a MySQL Database","text":"<p>At a minimum, we need to create a database for Nautobot and assign it a username and password for authentication. This is done with the following commands.</p> <p>Note</p> <p>Replace <code>localhost</code> below with your database server if using a remote database.</p> <p>Danger</p> <p>Do not use the password from the example. Choose a strong, random password to ensure secure database authentication for your Nautobot installation.</p> <pre><code>sudo -u root mysql\n</code></pre> <p>Example output:</p> <pre><code>Welcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 11\nServer version: 8.0.25-0ubuntu0.20.04.1 (Ubuntu)\n\nCopyright (c) 2000, 2021, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt; CREATE DATABASE nautobot;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; CREATE USER 'nautobot'@'localhost' IDENTIFIED BY 'insecure_password';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; GRANT ALL ON nautobot.* TO 'nautobot'@'localhost';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; \\q\nBye\n</code></pre>"},{"location":"installation/ubuntu.html#verify-mysql-service-status","title":"Verify MySQL Service Status","text":"<p>You can verify that authentication works issuing the following command and providing the configured password.</p> <p>If successful, you will enter a <code>mysql&gt;</code> prompt. Type <code>status</code> to confirm your connection, or type <code>\\q</code> to exit.</p> <p>Note</p> <p>Replace <code>localhost</code> below with your database server if using a remote database.</p> <pre><code>mysql --user nautobot --password --host localhost nautobot\n</code></pre> <p>Example output:</p> <pre><code>Enter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 13\nServer version: 8.0.25-0ubuntu0.20.04.1 (Ubuntu)\n\nCopyright (c) 2000, 2021, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt; status\n--------------\nmysql  Ver 8.0.25-0ubuntu0.20.04.1 for Linux on x86_64 ((Ubuntu))\n\nConnection id:          13\nCurrent database:       nautobot\nCurrent user:           nautobot@localhost\nSSL:                    Not in use\nCurrent pager:          stdout\nUsing outfile:          ''\nUsing delimiter:        ;\nServer version:         8.0.25-0ubuntu0.20.04.1 (Ubuntu)\nProtocol version:       10\nConnection:             Localhost via UNIX socket\nServer characterset:    utf8mb4\nDb     characterset:    utf8mb4\nClient characterset:    utf8mb4\nConn.  characterset:    utf8mb4\nUNIX socket:            /var/run/mysqld/mysqld.sock\nBinary data as:         Hexadecimal\nUptime:                 26 min 31 sec\n\nThreads: 2  Questions: 29  Slow queries: 0  Opens: 193  Flush tables: 3  Open tables: 112  Queries per second avg: 0.018\n--------------\n\nmysql&gt; \\q\nBye\n</code></pre>"},{"location":"installation/ubuntu.html#redis-setup","title":"Redis Setup","text":"<p>Since Redis was already installed, let's just verify that it's working using <code>redis-cli</code>:</p> <pre><code>redis-cli ping\n</code></pre> <p>Example output:</p> <pre><code>PONG\n</code></pre>"},{"location":"installation/ubuntu.html#deploy-nautobot","title":"Deploy Nautobot","text":"<p>Now that Nautobot dependencies are installed and configured, you're ready to Install Nautobot!</p>"},{"location":"installation/upgrading.html","title":"Upgrading to a New Nautobot Release","text":""},{"location":"installation/upgrading.html#review-the-release-notes","title":"Review the Release Notes","text":"<p>Prior to upgrading your Nautobot instance, be sure to carefully review all release notes that have been published since your current version was released. Although the upgrade process typically does not involve additional work, certain releases may introduce breaking or backward-incompatible changes. These are called out in the release notes under the release in which the change went into effect.</p> <p>The below sub-sections describe some key changes that deployers should be aware of, but are not intended to be a replacement for reading the release notes carefully and in depth.</p>"},{"location":"installation/upgrading.html#updating-from-nautobot-10x-to-11x","title":"Updating from Nautobot 1.0.x to 1.1.x","text":""},{"location":"installation/upgrading.html#migration-from-rq-to-celery","title":"Migration from RQ to Celery","text":"<p>Prior to version 1.1.0, Nautobot utilized RQ as the primary background task worker. As of Nautobot 1.1.0, RQ is now deprecated, as Celery has been introduced to eventually replace RQ for executing background tasks within Nautobot. All Nautobot core usage of RQ has been migrated to use Celery.</p> <p>RQ support for custom tasks was not removed in order to give plugin authors time to migrate, however, to continue to utilize advanced Nautobot features such as Git repository synchronization, webhooks, jobs, etc. you must migrate your <code>nautobot-worker</code> deployment from RQ to Celery.</p> <p>Please see the section on migrating to Celery from RQ for more information on how to easily migrate your deployment.</p>"},{"location":"installation/upgrading.html#updating-from-nautobot-11x-to-12x","title":"Updating from Nautobot 1.1.x to 1.2.x","text":""},{"location":"installation/upgrading.html#introduction-of-celery-beat-scheduler","title":"Introduction of Celery Beat Scheduler","text":"<p>As of Nautobot v1.2.0, Nautobot supports deferring (\"scheduling\") Jobs. To facilitate this, a new service called <code>celery-scheduler</code> is now required. Please review the service installation documentation to find out how to set it up.</p>"},{"location":"installation/upgrading.html#updating-from-nautobot-12x-to-13x","title":"Updating from Nautobot 1.2.x to 1.3.x","text":""},{"location":"installation/upgrading.html#revision-of-recommended-mysql-utf-8-encoding","title":"Revision of Recommended MySQL UTF-8 Encoding","text":"<p>The recommended database encoding settings have been revised to rely upon the default UTF-8 encoding provided by MySQL for collation of data in the database. Previously we were recommending in our documentation that the collation encoding be set explicitly to <code>utf8mb4_bin</code>. We are now recommending <code>utf8mb4_0900_ai_ci</code> which is configured by default on unmodified MySQL database server deployments.</p> <p>The collation encoding is used to inform MySQL how characters are sorted in the database. This is important when it comes to retrieving data that has special characters or special byte-encoding such as accents or ligatures, and also including emojis. In some cases, with the <code>utf8mb4_bin</code> encoding we were previously recommending, case-insensitive searching may return inconsistent or incorrect results.</p> <p>Danger</p> <p>It is strongly recommended that you backup your database before executing this query and that you perform this in a non-production environment to identify any potential issues prior to updating your production environment.</p> <p>If you have an existing MySQL database, you may update your database to use the recommended encoding by using <code>nautobot-server dbshell</code> to launch a database shell and executing the following command:</p> <pre><code>nautobot-server dbshell\n</code></pre> <p>Example output:</p> <pre><code>mysql&gt; ALTER DATABASE nautobot COLLATE utf8mb4_0900_ai_ci;\nQuery OK, 1 row affected (0.07 sec)\n</code></pre> <p>Please see the official MySQL documentation on migrating collation encoding settings for more information on troubleshooting any issues you may encounter.</p>"},{"location":"installation/upgrading.html#update-prerequisites-to-required-versions","title":"Update Prerequisites to Required Versions","text":"<p>Nautobot v1.6.0 and later requires the following:</p> Dependency Minimum Version Python 3.8 PostgreSQL 9.6 Redis 4.0 <p>Removed in version 1.6.0</p> <p>Support for Python 3.7 was removed.</p> <p>Nautobot v1.1.0 and later can optionally support the following:</p> <p>Nautobot v1.1.0 added support for MySQL 8.0 as a database backend as an alternative to PostgreSQL.</p> Dependency Minimum Version MySQL 8.0 <p>Tip</p> <p>If you wish to migrate from PostgreSQL to MySQL, we recommend creating a new Nautobot installation based on MySQL and then migrating the database contents to the new installation, rather than attempting an in-place upgrade or migration.</p>"},{"location":"installation/upgrading.html#install-the-latest-release","title":"Install the Latest Release","text":"<p>As with the initial installation, you can upgrade Nautobot by installing the Python package directly from the Python Package Index (PyPI).</p> <p>Warning</p> <p>Unless explicitly stated, all steps requiring the use of <code>pip3</code> or <code>nautobot-server</code> in this document should be performed as the <code>nautobot</code> user!</p> <p>Upgrade Nautobot using <code>pip3</code>:</p> <pre><code>pip3 install --upgrade nautobot\n</code></pre>"},{"location":"installation/upgrading.html#upgrade-your-optional-dependencies","title":"Upgrade your Optional Dependencies","text":"<p>If you do not have any optional dependencies, you may skip this step.</p> <p>Once the new code is in place, verify that any optional Python packages required by your deployment (e.g. <code>napalm</code> or <code>django-auth-ldap</code>) are listed in <code>local_requirements.txt</code>.</p> <p>Then, upgrade your dependencies using <code>pip3</code>:</p> <pre><code>pip3 install --upgrade -r $NAUTOBOT_ROOT/local_requirements.txt\n</code></pre>"},{"location":"installation/upgrading.html#run-the-post-upgrade-operations","title":"Run the Post Upgrade Operations","text":"<p>Finally, run Nautobot's <code>post_upgrade</code> management command:</p> <pre><code>nautobot-server post_upgrade\n</code></pre> <p>This command performs the following actions:</p> <ul> <li>Applies any database migrations that were included in the release</li> <li>Generates any missing cable paths among all cable termination objects in the database</li> <li>Collects all static files to be served by the HTTP service</li> <li>Deletes stale content types from the database</li> <li>Deletes all expired user sessions from the database</li> <li>Clears all cached data to prevent conflicts with the new release</li> </ul>"},{"location":"installation/upgrading.html#restart-the-nautobot-services","title":"Restart the Nautobot Services","text":"<p>Finally, with root permissions, restart the web and background services:</p> <pre><code>sudo systemctl restart nautobot nautobot-worker nautobot-scheduler\n</code></pre>"},{"location":"models/circuits/circuit.html","title":"Circuits","text":"<p>A communications circuit represents a single physical link connecting exactly two endpoints, commonly referred to as its A and Z terminations. A circuit in Nautobot may have zero, one, or two terminations defined. It is common to have only one termination defined when you don't necessarily care about the details of the provider side of the circuit, e.g. for Internet access circuits. Both terminations would likely be modeled for circuits which connect one customer site to another.</p> <p>Each circuit is associated with a provider and a user-defined type. For example, you might have Internet access circuits delivered to each site by one provider, and private MPLS circuits delivered by another. Each circuit must be assigned a circuit ID, each of which must be unique per provider.</p> <p>Each circuit must be assigned to a <code>status</code>. The following statuses are available by default:</p> <ul> <li>Planned</li> <li>Provisioning</li> <li>Active</li> <li>Offline</li> <li>Deprovisioning</li> <li>Decommissioned</li> </ul> <p>Circuits also have optional fields for annotating their installation date and commit rate, and may be assigned to Nautobot tenants.</p> <p>Note</p> <p>Nautobot currently models only physical circuits: those which have exactly two endpoints. It is common to layer virtualized constructs (virtual circuits) such as MPLS or EVPN tunnels on top of these, however Nautobot does not yet support virtual circuit modeling.</p>"},{"location":"models/circuits/circuittermination.html","title":"Circuit Terminations","text":"<p>The association of a circuit with a particular site, location, and/or device is modeled separately as a circuit termination. A circuit may have up to two terminations, labeled A and Z. A single-termination circuit can be used when you don't know (or care) about the far end of a circuit (for example, an Internet access circuit which connects to a transit provider). A dual-termination circuit is useful for tracking circuits which connect two sites.</p> <p>Each circuit termination is attached to either a site (and optionally also a location within the site) or a provider network. Site terminations may optionally be connected via a cable to a specific device interface or port within that site. Each termination must be assigned a port speed, and can optionally be assigned an upstream speed if it differs from the downstream speed (a common scenario with e.g. DOCSIS cable modems). Fields are also available to track cross-connect and patch panel details.</p> <p>In adherence with Nautobot's philosophy of closely modeling the real world, a circuit may be connected only to a physical interface. For example, circuits may not terminate to LAG interfaces, which are virtual in nature. In such cases, a separate physical circuit is associated with each LAG member interface and each needs to be modeled discretely.</p> <p>Note</p> <p>A circuit in Nautobot represents a physical link, and cannot have more than two endpoints. When modeling a multi-point topology, each leg of the topology must be defined as a discrete circuit, with one end terminating within the provider's infrastructure. The provider network model is ideal for representing these networks.</p>"},{"location":"models/circuits/circuittype.html","title":"Circuit Types","text":"<p>Circuits are classified by functional type. These types are completely customizable, and are typically used to convey the type of service being delivered over a circuit. For example, you might define circuit types for:</p> <ul> <li>Internet transit</li> <li>Out-of-band connectivity</li> <li>Peering</li> <li>Private backhaul</li> </ul>"},{"location":"models/circuits/provider.html","title":"Providers","text":"<p>A circuit provider is any entity which provides some form of connectivity of among sites or organizations within a site. While this obviously includes carriers which offer Internet and private transit service, it might also include Internet exchange (IX) points and even organizations with whom you peer directly. Each circuit within Nautobot must be assigned a provider and a circuit ID which is unique to that provider.</p> <p>Each provider may be assigned an autonomous system number (ASN), an account number, and contact information.</p>"},{"location":"models/circuits/providernetwork.html","title":"Provider Network","text":"<p>Added in version 1.3.0</p> <p>A provider network represents an abstract portion of network topology, just like in a topology diagram. For example, a provider network may be used to represent a provider's MPLS network.</p> <p>Each provider network must be assigned to a provider. A circuit may terminate to either a provider network or to a site.</p>"},{"location":"models/dcim/cable.html","title":"Cables","text":"<p>All connections between device components in Nautobot are represented using cables. A cable represents a direct physical connection between two termination points, such as between a console port and a patch panel port, or between two network interfaces.</p> <p>Each cable must have two endpoints defined. These endpoints are sometimes referenced as A and B for clarity, however cables are direction-agnostic and the order in which terminations are made has no meaning. Cables may be connected to the following objects:</p> <ul> <li>Circuit terminations</li> <li>Console ports</li> <li>Console server ports</li> <li>Interfaces</li> <li>Pass-through ports (front and rear)</li> <li>Power feeds</li> <li>Power outlets</li> <li>Power ports</li> </ul> <p>Each cable may be assigned a type, label, length, and color. Each cable must also assigned to an operational <code>status</code>. The following statuses are available by default:</p> <ul> <li>Active</li> <li>Planned</li> <li>Decommissioning</li> </ul>"},{"location":"models/dcim/cable.html#tracing-cables","title":"Tracing Cables","text":"<p>A cable may be traced from either of its endpoints by clicking the \"trace\" button. (A REST API endpoint also provides this functionality.) Nautobot will follow the path of connected cables from this termination across the directly connected cable to the far-end termination. If the cable connects to a pass-through port, and the peer port has another cable connected, Nautobot will continue following the cable path until it encounters a non-pass-through or unconnected termination point. The entire path will be displayed to the user.</p> <p>In the example below, three individual cables comprise a path between devices A and D:</p> <p></p> <p>Traced from Interface 1 on Device A, Nautobot will show the following path:</p> <ul> <li>Cable 1: Interface 1 to Front Port 1</li> <li>Cable 2: Rear Port 1 to Rear Port 2</li> <li>Cable 3: Front Port 2 to Interface 2</li> </ul> <p>A cable can also be traced through a circuit.</p> <p></p> <p>Traced from Interface 1 on Device A, Nautobot will show the following path:</p> <ul> <li>Cable 1: Interface 1 to Side A</li> <li>Cable 2: Side Z to Interface 2</li> </ul>"},{"location":"models/dcim/consoleport.html","title":"Console Ports","text":"<p>A console port provides connectivity to the physical console of a device. These are typically used for temporary access by someone who is physically near the device, or for remote out-of-band access provided via a networked console server. Each console port may be assigned a physical type.</p> <p>Cables can connect console ports to console server ports or pass-through ports.</p>"},{"location":"models/dcim/consoleporttemplate.html","title":"Console Port Templates","text":"<p>A template for a console port that will be created on all instantiations of the parent device type. Each console port can be assigned a physical type.</p>"},{"location":"models/dcim/consoleserverport.html","title":"Console Server Ports","text":"<p>A console server is a device which provides remote access to the local consoles of connected devices. They are typically used to provide remote out-of-band access to network devices. Each console server port may be assigned a physical type.</p> <p>Cables can connect console server ports to console ports or pass-through ports.</p>"},{"location":"models/dcim/consoleserverporttemplate.html","title":"Console Server Port Templates","text":"<p>A template for a console server port that will be created on all instantiations of the parent device type. Each console server port can be assigned a physical type.</p>"},{"location":"models/dcim/device.html","title":"Devices","text":"<p>Every piece of hardware which is installed within a site or rack exists in Nautobot as a device. Devices are measured in rack units (U) and can be half depth or full depth. A device may have a height of 0U: These devices do not consume vertical rack space and cannot be assigned to a particular rack unit. A common example of a 0U device is a vertically-mounted PDU.</p> <p>When assigning a multi-U device to a rack, it is considered to be mounted in the lowest-numbered rack unit which it occupies. For example, a 3U device which occupies U8 through U10 is said to be mounted in U8. This logic applies to racks with both ascending and descending unit numbering.</p> <p>A device is said to be full-depth if its installation on one rack face prevents the installation of any other device on the opposite face within the same rack unit(s). This could be either because the device is physically too deep to allow a device behind it, or because the installation of an opposing device would impede airflow.</p> <p>Each device must be instantiated from a pre-created device type, and its default components (console ports, power ports, interfaces, etc.) will be created automatically. (The device type associated with a device may be changed after its creation, however its components will not be updated retroactively.)</p> <p>Each device must be assigned a site, device role, and operational <code>status</code>, and may optionally be assigned to a specific location and/or rack within a site. A platform, serial number, and asset tag may optionally be assigned to each device.</p> <p>Device names must be unique within a site, unless the device has been assigned to a tenant. Devices may also be unnamed.</p> <p>When a device has one or more interfaces with IP addresses assigned, a primary IP for the device can be designated, for both IPv4 and IPv6.</p> <p>For Devices forming a group (Failover, Load-Sharing, Redundacy or similar) refer to Device Redundancy Groups model documentation.</p>"},{"location":"models/dcim/device.html#developer-api","title":"Developer API","text":"<p>The <code>Device</code> Django model class supports a method called <code>create_components()</code>. This method is normally called during <code>device_instance.save()</code>, which is called whenever you save create a Device via the GUI or the REST API, but if you are working directly in the ORM and encounter one of the two following scenarios, <code>device_instance.save()</code> is not called:</p> <ul> <li>Usage of <code>device_instance.objects.bulk_create()</code> to perform a bulk creation of Device objects</li> <li>Usage of <code>device_instance.save()</code> during handling of the <code>nautobot_database_ready</code> signal (which uses historical models)</li> </ul> <p>In these cases you will have to manually run <code>device_instance.create_components()</code> in order to instantiate the device type's component templates (interfaces, power ports, etc.).</p>"},{"location":"models/dcim/devicebay.html","title":"Device Bays","text":"<p>Device bays represent a space or slot within a parent device in which a child device may be installed. For example, a 2U parent chassis might house four individual blade servers. The chassis would appear in the rack elevation as a 2U device with four device bays, and each server within it would be defined as a 0U device installed in one of the device bays. Child devices do not appear within rack elevations or count as consuming rack units.</p> <p>Child devices are first-class Devices in their own right: That is, they are fully independent managed entities which don't share any control plane with the parent.  Just like normal devices, child devices have their own platform (OS), role, tags, and components.  LAG interfaces may not group interfaces belonging to different child devices.</p> <p>Note</p> <p>Device bays are not suitable for modeling line cards (such as those commonly found in chassis-based routers and switches), as these components depend on the control plane of the parent device to operate. Instead, line cards and similarly non-autonomous hardware should be modeled as inventory items within a device, with any associated interfaces or other components assigned directly to the device.</p>"},{"location":"models/dcim/devicebaytemplate.html","title":"Device Bay Templates","text":"<p>A template for a device bay that will be created on all instantiations of the parent device type.</p>"},{"location":"models/dcim/deviceredundancygroup.html","title":"Device Redundancy Groups","text":"<p>Added in version 1.5.0</p> <p>Device Redundancy Groups represent logical relationships between multiple devices. Typically, a redundancy group could represent a failover pair, failover group, or a load sharing cluster. Device Redundancy Groups are created first, before the devices are assigned to the group.</p> <p>A failover strategy represents intended operation mode of the group. Supported failover strategy are: Active/Active and Active/Standby.</p> <p>Secrets groups could be used to inform store secret information used by failover or a cluster of devices.</p> <p>Device Redundancy Group Priority is a Device attribute defined during assigning a Device to a Device Redundancy Group. This field represents the priority the device has in the device redundancy group.</p>"},{"location":"models/dcim/deviceredundancygroup.html#example-use-of-device-redundancy-groups-cisco-asa-5500-series-activestandby-failover","title":"Example use of Device Redundancy Groups - Cisco ASA 5500 Series Active/Standby Failover","text":"<p>This document provides an example of generating a Cisco ASA device's desired failover configuration based on data stored in Nautobot Device Redundancy Groups. A GraphQL query is used to retrieve the relevant data, which is then rendered through a Jinja2 template to produce the desired configuration.</p> <p>As one of the use cases for Device Redundacy Groups, introduced in Nautobot 1.5 release, is to model failover pairs, we will use the ASA 5500 Series in this example with details as follows:</p> <ul> <li>Firewall failover pair is composed of two devices named \"nyc-fw-primary\" and \"nyc-fw-secondary\"</li> <li>Each firewall device forming a failover cluster has a virtual interface dedicated for failover usage (named \"failover-link\") and addressed in 172.27.48.0/31 network</li> <li>Virtual failover interface has a physical parent interface assigned (\"gigabitethernet0/3\")</li> <li>Following redundancy group priorities are assigned in a failover pair:<ul> <li>Priority 100 for a Primary Failover unit</li> <li>Priority 50 for a Secondary Failover unit</li> </ul> </li> </ul>"},{"location":"models/dcim/deviceredundancygroup.html#querying-for-the-data","title":"Querying for the data","text":"<p>To retrieve information about devices forming an ASA Failover pair, we will use a GraphQL query and the <code>get_gql_failover_details</code> Python method. This method takes a <code>device_name</code> as an argument.</p> <pre><code>import json\nimport pynautobot\nquery = \"\"\"\nquery ($device_name: [String]) {\n    devices(name__ie: $device_name) {\n        name\n        device_redundancy_group {\n            name\n            members {\n                name\n                device_redundancy_group_priority\n                interfaces(name__ie: \"failover-link\") {\n                    type\n                    name\n                    ip_addresses {\n                        host\n                        prefix_length\n                    }\n                    parent_interface {\n                        name\n                        type\n                    }\n                }\n            }\n        }\n    }\n}\n\"\"\"\ndef get_gql_failover_details(device_name):\nvariables = {\"device_name\": device_name}\nnb = pynautobot.api(\nurl=\"http://localhost:8080\",\ntoken=\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n)\nreturn nb.graphql.query(query=query, variables=variables)\n</code></pre>"},{"location":"models/dcim/deviceredundancygroup.html#retrieving-the-data-primary-failover-unit-nyc-fw-primary","title":"Retrieving the data - Primary Failover Unit (\"nyc-fw-primary\")","text":"<p>We will demonstrate how to execute the command for Primary Unit only, however you could repeat the process for a secondary unit. An example data returned from Nautobot is presented below.</p> <pre><code>&gt;&gt;&gt; hostname = \"nyc-fw-primary\"\n&gt;&gt;&gt; gql_data = get_gql_failover_details(hostname).json\n</code></pre> <pre><code>{\n\"data\": {\n\"devices\": [\n{\n\"name\": \"nyc-fw-primary\",\n\"device_redundancy_group\": {\n\"name\": \"nyc-firewalls\",\n\"members\": [\n{\n\"name\": \"nyc-fw-primary\",\n\"device_redundancy_group_priority\": 100,\n\"interfaces\": [\n{\n\"type\": \"VIRTUAL\",\n\"name\": \"failover-link\",\n\"ip_addresses\": [\n{\n\"host\": \"172.27.48.0\",\n\"prefix_length\": 31\n}\n],\n\"parent_interface\": {\n\"name\": \"gigabitethernet0/3\",\n\"type\": \"A_1000BASE_T\"\n}\n}\n]\n},\n{\n\"name\": \"nyc-fw-secondary\",\n\"device_redundancy_group_priority\": 50,\n\"interfaces\": [\n{\n\"type\": \"VIRTUAL\",\n\"name\": \"failover-link\",\n\"ip_addresses\": [\n{\n\"host\": \"172.27.48.1\",\n\"prefix_length\": 31\n}\n],\n\"parent_interface\": {\n\"name\": \"gigabitethernet0/3\",\n\"type\": \"A_1000BASE_T\"\n}\n}\n]\n}\n]\n}\n}\n]\n}\n}\n</code></pre>"},{"location":"models/dcim/deviceredundancygroup.html#creating-cisco-asa-configuration-template-common-for-primary-and-secondary-units","title":"Creating Cisco ASA Configuration Template - Common for Primary and Secondary Units","text":"<p>The following snippet represents an example Cisco ASA failover configuration template:</p> <pre><code># Configuration Template for Cisco ASA\ntemplate_code = \"\"\"\n{% set redundancy_members = gql_data['data']['devices'][0]['device_redundancy_group']['members'] %}\n{% set failover_device_local = redundancy_members[0] if redundancy_members[0].name == device else redundancy_members[1] %}\n{% set failover_device_peer = redundancy_members[0] if redundancy_members[0].name != device else redundancy_members[1] %}\n{% set failover_local_vif = failover_device_local.interfaces | first %}\n{% set failover_peer_vif = failover_device_peer.interfaces | first %}\n!\nhostname {{ device.name }}\n!\nfailover lan unit {{ priority_mapping[failover_device_local.device_redundancy_group_priority] }}\nfailover lan interface {{ failover_local_vif.name }} {{ failover_local_vif.parent_interface.name }} \n!\nfailover interface ip {{ failover_local_vif.name }} {{ failover_local_vif.ip_addresses[0].host }}/{{ failover_local_vif.ip_addresses[0].prefix_length }} standby {{ failover_peer_vif.ip_addresses[0].host }}\ninterface {{ failover_local_vif.parent_interface.name }} \n  no shutdown\n!\nfailover link {{ failover_local_vif.name }} {{ failover_local_vif.parent_interface.name }} \n!\n!failover ipsec pre-shared-key !Nautobot Secrets\n!\nfailover\n!\n\"\"\"\n</code></pre>"},{"location":"models/dcim/deviceredundancygroup.html#rendering-cisco-asa-configuration-template-with-the-data-retrieved-from-graphql","title":"Rendering Cisco ASA Configuration Template with the data retrieved from GraphQL","text":"<p>Following snippet represents an example Cisco ASA Failover rendered configuration:</p> <pre><code>from nautobot.utilities.utils import render_jinja2\ncontext = dict(\ndevice=hostname,\ngql_data=gql_data,\npriority_mapping={50: 'secondary', 100: 'primary'}\n)\nnyc_fw_primary_config = render_jinja2(template_code=template_code, context=context)\nprint(nyc_fw_primary_config)\n</code></pre> <pre><code>!\nhostname nyc-fw-primary\n!\nfailover lan unit\nfailover lan interface failover-link gigabitethernet0/3\n!\nfailover interface ip failover-link 172.27.48.0/31 standby 172.27.48.1\ninterface gigabitethernet0/3\n  no shutdown\n!\nfailover link failover-link gigabitethernet0/3\n!\n!failover ipsec pre-shared-key !Nautobot Secrets\n!\nfailover\n!\n</code></pre>"},{"location":"models/dcim/deviceredundancygroup.html#example-use-of-device-redundancy-groups-spine-redundancy-in-a-leaf-and-spine-clos-topology","title":"Example use of Device Redundancy Groups - Spine Redundancy in a Leaf and Spine (Clos) Topology","text":"<p>Another example for the redundancy group use case could be a spine redundancy in the Leaf and Spine topology. Spine redundancy is important while performing the Day-2 operations, such as OS-updates.</p> <p>In this scenario, no more than 1 device participating in a Device Redundancy Group should be updated and rebooted at the same time. In order to track this, we will create a new Device custom field  named <code>upgrade_operational_state</code> and assign it one of the statues: <code>pre_upgrade</code>, <code>in_reboot</code>, <code>post_upgrade</code>. If a device with a spine role assigned is in state <code>in_reboot</code>, no other redundancy group members should be OS-upgraded at the same time.</p>"},{"location":"models/dcim/deviceredundancygroup.html#querying-for-the-data-spine-redundancy-in-a-leaf-and-spine-clos-topology","title":"Querying for the data - Spine Redundancy in a Leaf and Spine (Clos) Topology","text":"<p>To retrieve the data about devices forming a Spine redundancy group, we will use the following GraphQL query:</p> <pre><code>query {\n    device_redundancy_groups(name__ie: \"nyc-spines\") {\n        name\n        members {\n          name\n          device_role {\n            slug\n          }\n          cf_upgrade_operational_state\n        }\n    }\n}\n</code></pre>"},{"location":"models/dcim/deviceredundancygroup.html#retrieving-the-data-spine-redundancy-in-a-leaf-and-spine-clos-topology","title":"Retrieving the data - Spine Redundancy in a Leaf and Spine (Clos) Topology","text":"<p>An example data returned from Nautobot is presented below.</p> <pre><code>{\n\"data\": {\n\"device_redundancy_groups\": [\n{\n\"name\": \"nyc-spines\",\n\"members\": [\n{\n\"name\": \"spine-1\",\n\"device_role\": {\n\"slug\": \"spine\"\n},\n\"cf_upgrade_operational_state\": \"in_reboot\"\n},\n{\n\"name\": \"spine-2\",\n\"device_role\": {\n\"slug\": \"spine\"\n},\n\"cf_upgrade_operational_state\": null\n},\n{\n\"name\": \"spine-3\",\n\"device_role\": {\n\"slug\": \"spine\"\n},\n\"cf_upgrade_operational_state\": null\n},\n{\n\"name\": \"spine-4\",\n\"device_role\": {\n\"slug\": \"spine\"\n},\n\"cf_upgrade_operational_state\": null\n}\n]\n}\n]\n}\n}\n</code></pre> <p>Based on the output, <code>spine-1</code> device is being rebooted at the moment of the GraphQL query response. This could be used by an automation system to prevent OS upgrades on <code>spine-2</code>, <code>spine-3</code>, <code>spine-4</code>.</p>"},{"location":"models/dcim/devicerole.html","title":"Device Roles","text":"<p>Devices can be organized by functional roles, which are fully customizable by the user. For example, you might create roles for core switches, distribution switches, and access switches within your network.</p>"},{"location":"models/dcim/devicetype.html","title":"Device Types","text":"<p>A device type represents a particular make and model of hardware that exists in the real world. Device types define the physical attributes of a device (rack height and depth) and its individual components (console, power, network interfaces, and so on).</p> <p>Device types are instantiated as devices installed within sites and/or equipment racks. For example, you might define a device type to represent a Juniper EX4300-48T network switch with 48 Ethernet interfaces. You can then create multiple instances of this type named \"switch1,\" \"switch2,\" and so on. Each device will automatically inherit the components (such as interfaces) of its device type at the time of creation. However, changes made to a device type will not apply to instances of that device type retroactively.</p> <p>Some devices house child devices which share physical resources, like space and power, but which functional independently from one another. A common example of this is blade server chassis. Each device type is designated as one of the following:</p> <ul> <li>A parent device (which has device bays)</li> <li>A child device (which must be installed within a device bay)</li> <li>Neither</li> </ul> <p>Note</p> <p>This parent/child relationship is not suitable for modeling chassis-based devices, wherein child members share a common control plane. Instead, line cards and similarly non-autonomous hardware should be modeled as inventory items within a device, with any associated interfaces or other components assigned directly to the device.</p>"},{"location":"models/dcim/frontport.html","title":"Front Ports","text":"<p>Front ports are pass-through ports used to represent physical cable connections that comprise part of a longer path. For example, the ports on the front face of a UTP patch panel would be modeled in Nautobot as front ports. Each port is assigned a physical type, and must be mapped to a specific rear port on the same device. A single rear port may be mapped to multiple rear ports, using numeric positions to annotate the specific alignment of each.</p>"},{"location":"models/dcim/frontporttemplate.html","title":"Front Port Templates","text":"<p>A template for a front-facing pass-through port that will be created on all instantiations of the parent device type. Front ports may have a physical type assigned, and must be associated with a corresponding rear port and position. This association will be automatically replicated when the device type is instantiated.</p>"},{"location":"models/dcim/interface.html","title":"Interfaces","text":"<p>Interfaces in Nautobot represent network interfaces used to exchange data with connected devices. On modern networks, these are most commonly Ethernet, but other types are supported as well. Each interface must be assigned a type, an operational <code>status</code> and may optionally be assigned a MAC address, MTU, and IEEE 802.1Q mode (tagged or access). Each interface can also be enabled or disabled, and optionally designated as management-only (for out-of-band management).</p> <p>The following operational statuses are available by default:</p> <ul> <li>Planned</li> <li>Maintenance</li> <li>Active</li> <li>Decommissioning</li> <li>Failed</li> </ul> <p>Added in version 1.4.0</p> <ul> <li>Added <code>bridge</code> field.</li> <li>Added <code>parent_interface</code> field.</li> <li>Added <code>status</code> field.</li> </ul> <p>Interfaces may be physical or virtual in nature, but only physical interfaces may be connected via cables. Cables can connect interfaces to pass-through ports, circuit terminations, or other interfaces.</p> <p>Physical interfaces may be arranged into a link aggregation group (LAG) and associated with a parent LAG (virtual) interface. LAG interfaces can be recursively nested to model bonding of trunk groups. Like all virtual interfaces, LAG interfaces cannot be connected physically.</p> <p>IP addresses can be assigned to interfaces. VLANs can also be assigned to each interface as either tagged or untagged. (An interface may have only one untagged VLAN.)</p> <p>Note</p> <p>Although devices and virtual machines both can have interfaces, a separate model is used for each. Thus, device interfaces have some properties that are not present on virtual machine interfaces and vice versa.</p>"},{"location":"models/dcim/interfacetemplate.html","title":"Interface Templates","text":"<p>A template for a network interface that will be created on all instantiations of the parent device type. Each interface may be assigned a physical or virtual type, and may be designated as \"management-only.\"</p>"},{"location":"models/dcim/inventoryitem.html","title":"Inventory Items","text":"<p>Inventory items represent hardware components installed within a device, such as a power supply or CPU or line card. Inventory items are distinct from other device components in that they cannot be templatized on a device type, and cannot be connected by cables. They are intended to be used primarily for inventory purposes.</p> <p>Each inventory item can be assigned a manufacturer, part ID, serial number, and asset tag (all optional). A boolean toggle is also provided to indicate whether each item was entered manually or discovered automatically (by some process outside of Nautobot).</p> <p>Inventory items are hierarchical in nature, such that any individual item may be designated as the parent for other items. For example, an inventory item might be created to represent a line card which houses several SFP optics, each of which exists as a child item within the device.</p>"},{"location":"models/dcim/location.html","title":"Locations","text":"<p>Added in version 1.4.0</p> <p>To locate network information more precisely than a Site defines, you can define a hierarchy of Locations within each Site. Data objects such as devices, prefixes, VLAN groups, etc. can thus be mapped or assigned to a specific building, wing, floor, room, etc. as appropriate to your needs.</p> <p>Once you have defined the hierarchy of Location Types that you wish to use, you can then define Locations. Any \"top-level\" Locations (those whose Location Type has no parent) belong directly to a Site, while \"child\" Locations belong to their immediate parent Location, rather than to the Site as a whole.</p> <p>Info</p> <p>At present, Locations fill the conceptual space between the more abstract Region and Site models and the more concrete Rack Group model. In a future Nautobot release, some or all of these other models may be collapsed into Locations. That is to say, in the future you might not deal with Regions and Sites as distinct models, but instead your Location Type hierarchy might include these higher-level categories, becoming something like Country \u2190 City \u2190 Site \u2190 Building \u2190 Floor \u2190 Room.</p> <p>Much like Sites, each Location must be assigned a name and operational <code>status</code>. The same default operational statuses are defined for Locations as for Sites, but as always, you can customize these to suit your needs. Locations can also be assigned to a tenant.</p>"},{"location":"models/dcim/locationtype.html","title":"Location Types","text":"<p>Added in version 1.4.0</p> <p>Before defining individual Locations, you must first define the hierarchy of Location Types that you wish to use for the organization of your network. An example hierarchy might be <code>Building \u2190 Floor \u2190 Room</code>, but you might have more or fewer distinct types depending on your specific organizational requirements.</p> <p>Each Location Type can define a set of \"content types\" that are permitted to associate to Locations of this type. For example, you might permit assigning Prefixes and VLAN Groups to an entire Building or Floor, but only allow Devices and Racks to be assigned to Rooms, never to a more abstract location. Doing so can help ensure consistency of your data.</p> <p>Added in version 1.5.0</p> <p>Location Types can now be marked as <code>nestable</code>. When this flag is set, Locations of this type may nest within one another, allowing for variable-depth hierarchies of Locations and reducing the number of distinct Location Types you may need to define. For example, with two Location Types, \"Building Group\" and \"Building\", by flagging \"Building Group\" as nestable, you could model the following hierarchy of Locations:</p> <ul> <li>Main Campus (Building Group)<ul> <li>West Campus (Building Group)<ul> <li>Building A (Building)</li> <li>Building B (Building)</li> </ul> </li> <li>East Campus (Building Group)<ul> <li>Building C (Building)</li> <li>Building D (Building)</li> </ul> </li> <li>South Campus (Building Group)<ul> <li>Western South Campus (Building Group)<ul> <li>Building G (Building)</li> </ul> </li> <li>Eastern South Campus (Building Group)<ul> <li>Building H (Building)</li> </ul> </li> </ul> </li> </ul> </li> <li>Satellite Campus (Building Group)<ul> <li>Building Z (Building)</li> </ul> </li> </ul> <p>Tip</p> <p>Although it is possible to define a \"tree\" of Location Types with multiple \"branches\", in the majority of cases doing so adds more unnecessary complexity than it's worth. Consider the following hypothetical Location Type tree:</p> <pre><code>Branch Office\n  \u21b3 Branch Floor\n      \u21b3 Branch Floor Room\n  \u21b3 Branch Basement\n      \u21b3 Branch Basement Room\nHeadquarters\n  \u21b3 Headquarters Floor\n      \u21b3 Headquarters Floor Room\n  \u21b3 Headquarters Basement\n      \u21b3 Headquarters Basement Room\n</code></pre> <p>This would complicate your life significantly when constructing queries, filters, and so forth to actually work with your data - for example, if you wanted a list of all Prefixes that are mapped to floors rather than individual rooms, you would now need to construct a query for Prefixes that are mapped to (a <code>Branch Floor</code> OR a <code>Headquarters Floor</code> OR a <code>Branch Basement</code> OR a <code>Headquarters Basement</code>). In most cases you would be better served with a far simpler \"linear\" sequence of Location Types, such as <code>Building \u2190 Floor \u2190 Room</code>; you could then use tags or custom fields to distinguish whether a given Building is a Branch Office or a Headquarters, if that distinction is even important to your network model.</p>"},{"location":"models/dcim/manufacturer.html","title":"Manufacturers","text":"<p>A manufacturer represents the \"make\" of a device; e.g. Cisco or Dell. Each device type must be assigned to a manufacturer. (Inventory items and platforms may also be associated with manufacturers.) Each manufacturer must have a unique name and may have a description assigned to it.</p>"},{"location":"models/dcim/platform.html","title":"Platforms","text":"<p>A platform defines the type of software running on a device or virtual machine. This can be helpful to model when it is necessary to distinguish between different versions or feature sets. Note that two devices of the same type may be assigned different platforms: For example, one Juniper MX240 might run Junos 14 while another runs Junos 15.</p> <p>Platforms may optionally be limited by manufacturer: If a platform is assigned to a particular manufacturer, it can only be assigned to devices with a type belonging to that manufacturer.</p> <p>The platform model can be used to indicate which \"network driver\" Nautobot (and Jobs, Apps, etc.) should use when connecting to a remote device running this platform. This is a generic string corresponding loosely to a Netmiko driver name. As there are many different libraries and applications for connecting to a device, rather than having a separate model field for each such connection type, Nautobot uses netutils to translate the generic network driver string into a variety of library-specific driver strings (Ansible \"collection name\", PyATS \"OS\" value, Scrapli \"platform\", etc.) which can be accessed via the UI, REST API, and GraphQL as needed. An administrator can extend or override the default translations provided by netutils by configuring the <code>NETWORK_DRIVERS</code> dictionary appropriately. (If your extensions are generally applicable, please consider making a pull request against netutils to update the package!)</p> <p>Added in version 1.6.0</p> <p>The <code>network_driver</code> database field and the <code>network_driver_mappings</code> derived property were added to the Platform data model. Support for the <code>NETWORK_DRIVERS</code> setting was added.</p> <p>For historical reasons, the NAPALM driver (<code>napalm_driver</code> field) and any associated arguments (<code>napalm_args</code> field) Nautobot should use when connecting to a remote device via NAPALM can (and must) be configured directly rather than being derived from the network driver. The name of the NAPALM driver along with optional parameters are stored with the platform.</p> <p>Apps and Jobs should transition to using the <code>network_driver_mappings[\"napalm\"]</code> property when connecting to a device via NAPALM. Nautobot may deprecate the use of the <code>napalm_driver</code> and <code>napalm_args</code> fields in a future release.</p> <p>The assignment of platforms to devices is an optional feature, and may be disregarded if not desired.</p>"},{"location":"models/dcim/powerfeed.html","title":"Power Feed","text":"<p>A power feed represents the distribution of power from a power panel to a particular device, typically a power distribution unit (PDU). The power port (inlet) on a device can be connected via a cable to a power feed. A power feed may optionally be assigned to a rack to allow more easily tracking the distribution of power among racks.</p> <p>Each power feed is assigned an operational type (primary or redundant) and a <code>status</code>. The following statuses are available by default:</p> <ul> <li>Offline</li> <li>Active</li> <li>Planned</li> <li>Failed</li> </ul> <p>Each power feed also defines the electrical characteristics of the circuit which it represents. These include the following:</p> <ul> <li>Supply type (AC or DC)</li> <li>Phase (single or three-phase)</li> <li>Voltage</li> <li>Amperage</li> <li>Maximum utilization (percentage)</li> </ul>"},{"location":"models/dcim/poweroutlet.html","title":"Power Outlets","text":"<p>Power outlets represent the outlets on a power distribution unit (PDU) or other device that supply power to dependent devices. Each power port may be assigned a physical type, and may be associated with a specific feed leg (where three-phase power is used) and/or a specific upstream power port. This association can be used to model the distribution of power within a device.</p> <p>For example, imagine a PDU with one power port which draws from a three-phase feed and 48 power outlets arranged into three banks of 16 outlets each. Outlets 1-16 would be associated with leg A on the port, and outlets 17-32 and 33-48 would be associated with legs B and C, respectively.</p> <p>Cables can connect power outlets only to downstream power ports. (Pass-through ports cannot be used to model power distribution.)</p>"},{"location":"models/dcim/poweroutlettemplate.html","title":"Power Outlet Templates","text":"<p>A template for a power outlet that will be created on all instantiations of the parent device type. Each power outlet can be assigned a physical type, and its power source may be mapped to a specific feed leg and power port template. This association will be automatically replicated when the device type is instantiated.</p>"},{"location":"models/dcim/powerpanel.html","title":"Power Panel","text":"<p>A power panel represents the origin point in Nautobot for electrical power being disseminated by one or more power feeds. In a data center environment, one power panel often serves a group of racks, with an individual power feed extending to each rack, though this is not always the case. It is common to have two sets of panels and feeds arranged in parallel to provide redundant power to each rack.</p> <p>Each power panel must be assigned to a site, and may optionally be assigned to a particular location and/or rack group.</p> <p>Note</p> <p>Nautobot does not model the mechanism by which power is delivered to a power panel. Power panels define the root level of the power distribution hierarchy in Nautobot.</p>"},{"location":"models/dcim/powerport.html","title":"Power Ports","text":"<p>A power port represents the inlet of a device where it draws its power, i.e. the connection port(s) on a device's power supply. Each power port may be assigned a physical type, as well as allocated and maximum draw values (in watts). These values can be used to calculate the overall utilization of an upstream power feed.</p> <p>Info</p> <p>When creating a power port on a device which supplies power to downstream devices, the allocated and maximum draw numbers should be left blank. Utilization will be calculated by taking the sum of all power ports of devices connected downstream.</p> <p>Cables can connect power ports only to power outlets or power feeds. (Pass-through ports cannot be used to model power distribution.)</p>"},{"location":"models/dcim/powerporttemplate.html","title":"Power Port Templates","text":"<p>A template for a power port that will be created on all instantiations of the parent device type. Each power port can be assigned a physical type, as well as a maximum and allocated draw in watts.</p>"},{"location":"models/dcim/rack.html","title":"Racks","text":"<p>The rack model represents a physical two- or four-post equipment rack in which devices can be installed. Each rack must be assigned to a site, and may optionally be assigned to a location, rack group, and/or tenant. Racks can also be organized by user-defined functional roles.</p> <p>Rack height is measured in rack units (U); racks are commonly between 42U and 48U tall, but Nautobot allows you to define racks of arbitrary height. A toggle is provided to indicate whether rack units are in ascending (from the ground up) or descending order.</p> <p>Each rack is assigned a name and (optionally) a separate facility ID. This is helpful when leasing space in a data center your organization does not own: The facility will often assign a seemingly arbitrary ID to a rack (for example, \"M204.313\") whereas internally you refer to is simply as \"R113.\" A unique serial number and asset tag may also be associated with each rack.</p> <p>A rack must be designated as one of the following types:</p> <ul> <li>2-post frame</li> <li>4-post frame</li> <li>4-post cabinet</li> <li>Wall-mounted frame</li> <li>Wall-mounted cabinet</li> </ul> <p>Similarly, each rack must be assigned an operational <code>status</code>. The following statuses are available by default:</p> <ul> <li>Reserved</li> <li>Available</li> <li>Planned</li> <li>Active</li> <li>Deprecated</li> </ul> <p>Each rack has two faces (front and rear) on which devices can be mounted. Rail-to-rail width may be 10, 19, 21, or 23 inches. The outer width and depth of a rack or cabinet can also be annotated in millimeters or inches.</p>"},{"location":"models/dcim/rackgroup.html","title":"Rack Groups","text":"<p>Racks can be organized into groups, which can be nested into themselves similar to regions. As with sites, how you choose to designate rack groups will depend on the nature of your organization.</p> <p>Each rack group must be assigned to a parent site (and optionally also a more specific location within that site). Rack groups may optionally be nested within one another to model a multi-level hierarchy.</p> <p>The name and facility ID of each rack within a group must be unique. (Racks not assigned to the same rack group may have identical names and/or facility IDs.)</p>"},{"location":"models/dcim/rackreservation.html","title":"Rack Reservations","text":"<p>Users can reserve specific units within a rack for future use. An arbitrary set of units within a rack can be associated with a single reservation, but reservations cannot span multiple racks. A description is required for each reservation, reservations may optionally be associated with a specific tenant.</p>"},{"location":"models/dcim/rackrole.html","title":"Rack Roles","text":"<p>Each rack can optionally be assigned a user-defined functional role. For example, you might designate a rack for compute or storage resources, or to house co-located customer devices. Rack roles are fully customizable and may be color-coded.</p>"},{"location":"models/dcim/rearport.html","title":"Rear Ports","text":"<p>Like front ports, rear ports are pass-through ports which represent the continuation of a path from one cable to the next. Each rear port is defined with its physical type and a number of positions: Rear ports with more than one position can be mapped to multiple front ports. This can be useful for modeling instances where multiple paths share a common cable (for example, six discrete two-strand fiber connections sharing a 12-strand MPO cable).</p> <p>Note</p> <p>Front and rear ports need not necessarily reside on the actual front or rear device face. This terminology is used primarily to distinguish between the two components in a pass-through port pairing.</p>"},{"location":"models/dcim/rearporttemplate.html","title":"Rear Port Templates","text":"<p>A template for a rear-facing pass-through port that will be created on all instantiations of the parent device type. Each rear port may have a physical type and one or more front port templates assigned to it. The number of positions associated with a rear port determines how many front ports can be assigned to it (the maximum is 1024).</p>"},{"location":"models/dcim/region.html","title":"Regions","text":"<p>Sites can be arranged geographically using regions. A region might represent a continent, country, city, campus, or other area depending on your use case. Regions can be nested recursively to construct a hierarchy. For example, you might define several country regions, and within each of those several state or city regions to which sites are assigned.</p> <p>Info</p> <p>In a future Nautobot release, regions may become another Location Type, and the Region model may be collapsed into the Location model.</p>"},{"location":"models/dcim/site.html","title":"Sites","text":"<p>How you choose to employ sites when modeling your network may vary depending on the nature of your organization, but generally a site will equate to a building or campus. For example, a chain of banks might create a site to represent each of its branches, a site for its corporate headquarters, and two additional sites for its presence in two co-location facilities.</p> <p>Each site must be assigned a unique name and operational <code>status</code> and may optionally be assigned to a region and/or tenant. The following operational statuses are available by default:</p> <ul> <li>Planned</li> <li>Staging</li> <li>Active</li> <li>Decommissioning</li> <li>Retired</li> </ul> <p>The site model also provides a facility ID field which can be used to annotate a facility ID (such as a data center name) associated with the site. Each site may also have an autonomous system (AS) number and time zone associated with it. (Time zones are provided by the pytz package.)</p> <p>The site model also includes several fields for storing contact and address information as well as geo-location data (GPS coordinates).</p> <p>Info</p> <p>In a future Nautobot release, sites may become just another Location Type, and the Site model may be collapsed into the Location model.</p>"},{"location":"models/dcim/virtualchassis.html","title":"Virtual Chassis","text":"<p>A virtual chassis represents a set of devices which share a common control plane. A common example of this is a stack of switches which are connected and configured to operate as a single device. A virtual chassis must be assigned a name and may be assigned a domain.</p> <p>Each device in the virtual chassis is referred to as a VC member, and assigned a position and (optionally) a priority. VC member devices commonly reside within the same rack, though this is not a requirement. One of the devices may be designated as the VC master: This device will typically be assigned a name, services, and other attributes related to managing the VC.</p> <p>Note</p> <p>It's important to recognize the distinction between a virtual chassis and a chassis-based device. A virtual chassis is not suitable for modeling a chassis-based switch with removable line cards (such as the Juniper EX9208), as its line cards are not physically autonomous devices.</p>"},{"location":"models/extras/computedfield.html","title":"Computed Fields","text":"<p>Added in version 1.1.0</p> <p>Computed fields are very similar in design and implementation to custom fields. See the overview of Custom Fields. As the name suggests, computed fields serve the need for a custom field where the value is generated using data that Nautobot stores in its database and merging it into a Jinja2 template and associated filters.</p> <p>As an example, within your automation system, you may want to be able to have an automatically generated field on the Device model that combines the name of the device and the site name in uppercase. To do that, you would define a Jinja2 template for this field that looks like such:</p> <pre><code>{{ obj.name }}_{{ obj.site.name | upper }}\n</code></pre> <p>Important</p> <p>Every time an object with this computed field is loaded, the template gets re-rendered with the currently available data. These rendered values are not stored in the database; only the Jinja2 template is stored.</p>"},{"location":"models/extras/computedfield.html#creating-computed-fields","title":"Creating Computed Fields","text":"<p>Computed fields can be created through the Nautobot UI under Extensibility &gt; Computed Fields.</p> <p>Each computed field must have a slug and a label.</p> <ul> <li>Slug must be a simple, database-friendly string, e.g. <code>device_with_site</code></li> <li>Label is used as the human-friendly display name for this field in the UI, for example, <code>Device With Site</code>.</li> </ul> <p>Tip</p> <p>Because computed field data can be included in the REST API and in GraphQL, we strongly recommend that when defining a computed field, you provide a slug that contains underscores rather than dashes (<code>my_field_slug</code>, not <code>my-field-slug</code>), as some features may not work optimally if dashes are included in the slug.</p> <p>Similar to custom fields, the weight value is used to order computed fields within a form. A description can also be provided, and will appear beneath the field in a form.</p> <p>Computed fields must define a template from which to render their values. The template field must contain a valid Jinja2 template string.</p> <p>A computed field must be assigned to an object type, or model, in Nautobot. Once created, a computed field will automatically appear as part of this model's display. See notes about viewing computed fields via the REST API below.</p> <p>When creating a computed field, if \"Move to Advanced tab\" is checked, this computed field won't appear on the object's main detail tab in the UI, but will appear in the \"Advanced\" tab. This is useful when the requirement is to hide this field from the main detail tab when, for instance, it is only required for machine-to-machine communication and not user consumption.</p>"},{"location":"models/extras/computedfield.html#computed-field-template-context","title":"Computed Field Template Context","text":"<p>Computed field templates can utilize the context of the object the field is being rendered on. This context is available for use in templates via the <code>obj</code> keyword. As an example, for a computed field being rendered on a Device object, the name of the site that this Device belongs to can be accessed like this:</p> <pre><code>{{ obj.site.name }}\n</code></pre> <p>Note</p> <p>To access custom fields of an object within a template, use the <code>cf</code> attribute. For example, <code>{{ obj.cf.color }}</code> will return the value (if any) for a custom field named <code>color</code> on <code>obj</code>.</p>"},{"location":"models/extras/computedfield.html#computed-field-template-filters","title":"Computed Field Template Filters","text":"<p>Computed field templates can also utilize built-in Jinja2 filters or custom ones that have been registered via plugins. These filters can be used by providing the name of the filter function. As an example:</p> <pre><code>{{ obj.site.name | leet_speak }}\n</code></pre> <p>See the documentation on built-in filters or registering custom Jinja2 filters in plugins.</p>"},{"location":"models/extras/computedfield.html#computed-fields-and-the-rest-api","title":"Computed Fields and the REST API","text":"<p>When retrieving an object via the REST API, computed field data is not included by default in order to prevent potentially computationally expensive rendering operations that degrade the user experience. In order to retrieve computed field data, you must use the <code>include</code> query parameter.</p> <p>Take a look at an example URL that includes computed field data:</p> <pre><code>http://localhost:8080/api/dcim/sites?include=computed_fields\n</code></pre> <p>When explicitly requested as such, computed field data will be included in the <code>computed_fields</code> attribute. For example, below is the partial output of a site with one computed field defined:</p> <pre><code>{\n\"id\": 123,\n\"url\": \"http://localhost:8080/api/dcim/sites/123/\",\n\"name\": \"Raleigh 42\",\n...\n\"computed_fields\": {\n\"site_name_uppercase\": \"RALEIGH\"\n},\n...\n</code></pre> <p>Note</p> <p>The <code>slug</code> value of each computed field is used as the key name for items in the <code>computed_fields</code> attribute.</p>"},{"location":"models/extras/configcontext.html","title":"Configuration Contexts","text":"<p>Sometimes it is desirable to associate additional data with a group of devices or virtual machines to aid in automated configuration. For example, you might want to associate a set of syslog servers for all devices within a particular region. Context data enables the association of extra user-defined data with devices and virtual machines grouped by one or more of the following assignments:</p> <ul> <li>Region</li> <li>Site</li> <li>Role</li> <li>Device type</li> <li>Platform</li> <li>Cluster group</li> <li>Cluster</li> <li>Tenant group</li> <li>Tenant</li> <li>Tag</li> </ul> <p>Added in version 1.5.0</p> <ul> <li>Device redundancy group</li> </ul> <p>Added in version 1.5.12</p> <ul> <li>Dynamic group - Need to set <code>settings.CONFIG_CONTEXT_DYNAMIC_GROUPS_ENABLED</code> to <code>True</code>. See notes here</li> </ul> <p>Context data not specifically assigned to one or more of the above groups is by default associated with all devices and virtual machines.</p> <p>Configuration contexts may be managed within Nautobot via the UI and/or API; they may also be managed externally to Nautobot in a Git repository if desired.</p>"},{"location":"models/extras/configcontext.html#hierarchical-rendering","title":"Hierarchical Rendering","text":"<p>Context data is arranged hierarchically, so that data with a higher weight can be entered to override lower-weight data. Multiple instances of data are automatically merged by Nautobot to present a single dictionary for each object.</p> <p>For example, suppose we want to specify a set of syslog and NTP servers for all devices within a region. We could create a config context instance with a weight of 1000 assigned to the region, with the following JSON data:</p> <pre><code>{\n\"ntp-servers\": [\n\"172.16.10.22\",\n\"172.16.10.33\"\n],\n\"syslog-servers\": [\n\"172.16.9.100\",\n\"172.16.9.101\"\n]\n}\n</code></pre> <p>But suppose there's a problem at one particular site within this region preventing traffic from reaching the regional syslog server. Devices there need to use a local syslog server instead of the two defined above. We'll create a second config context assigned only to that site with a weight of 2000 and the following data:</p> <pre><code>{\n\"syslog-servers\": [\n\"192.168.43.107\"\n]\n}\n</code></pre> <p>When the context data for a device at this site is rendered, the second, higher-weight data overwrite the first, resulting in the following:</p> <pre><code>{\n\"ntp-servers\": [\n\"172.16.10.22\",\n\"172.16.10.33\"\n],\n\"syslog-servers\": [\n\"192.168.43.107\"\n]\n}\n</code></pre> <p>Data from the higher-weight context overwrites conflicting data from the lower-weight context, while the non-conflicting portion of the lower-weight context (the list of NTP servers) is preserved.</p>"},{"location":"models/extras/configcontext.html#local-context-data","title":"Local Context Data","text":"<p>Devices and virtual machines may also have a local config context defined. This local context will always take precedence over any separate config context objects which apply to the device/VM. This is useful in situations where we need to call out a specific deviation in the data for a particular object.</p> <p>Warning</p> <p>If you find that you're routinely defining local context data for many individual devices or virtual machines, custom fields may offer a more effective solution.</p>"},{"location":"models/extras/configcontextschema.html","title":"Config Context Schemas","text":"<p>Added in version 1.1.0</p> <p>While config contexts allow for arbitrary data structures to be stored within Nautobot, at scale it is desirable to apply validation constraints to that data to ensure its consistency and to avoid data entry errors. To service this need, Nautobot supports optionally backing config contexts with JSON Schemas for validation. These schema are managed via the config context schema model and are optionally linked to config context instances, in addition to devices and virtual machines for the purpose of validating their local context data.</p> <p>A JSON Schema is capable of validating the structure, format, and type of your data, and acts as a form of documentation useful in a number of automation use cases.</p> <p>A config context is linked to a single schema object and thus they are meant to model individual units of the overall context. In this way, they validate each config context object, not the fully rendered context as viewed on a particular device or virtual machine.</p> <p>When a config context schema is employed on a config or local context, the data therein is validated when the object in question is saved. Should validation against the schema fail, a relevant error message is returned to the user and they are prevented from saving the data until the validation issue has been resolved.</p> <p>Here is an example JSON Schema which can be used to validate an NTP server config context:</p> <pre><code>{\n\"type\": \"object\",\n\"properties\": {\n\"ntp-servers\": {\n\"type\": \"array\",\n\"minItems\": 2,\n\"maxItems\": 2,\n\"items\": {\n\"type\": \"string\",\n\"format\": \"ipv4\"\n}\n}\n},\n\"additionalProperties\": false\n}\n</code></pre> <p>This schema would allow a config context with this data to pass:</p> <pre><code>{\n\"ntp-servers\": [\n\"172.16.10.22\",\n\"172.16.10.33\"\n]\n}\n</code></pre> <p>However it would not allow any of these examples to be saved:</p> <pre><code>{\n\"ntp-servers\": [\n\"172.16.10.22\"\n]\n}\n</code></pre> <pre><code>{\n\"ntp\": \"172.16.10.22,172.16.10.22\"\n}\n</code></pre> <pre><code>{\n\"ntp-servers\": [\n\"172.16.10.22\",\n\"172.16.10.33\",\n\"5.5.4\"\n]\n}\n</code></pre> <p>For more information on JSON Schemas and specifically type formats for specialized objects like IP addresses, hostnames, and more see the JSON Schema docs.</p> <p>Note</p> <p>Config Context Schemas currently support the JSON Schema draft 7 specification.</p>"},{"location":"models/extras/customfield.html","title":"Custom Fields","text":"<p>Each model in Nautobot is represented in the database as a discrete table, and each attribute of a model exists as a column within its table. For example, sites are stored in the <code>dcim_site</code> table, which has columns named <code>name</code>, <code>facility</code>, <code>physical_address</code>, and so on. As new attributes are added to objects throughout the development of Nautobot, tables are expanded to include new columns.</p> <p>However, some users might want to store additional object attributes that are somewhat esoteric in nature, and that would not make sense to include in the core Nautobot database schema. For instance, suppose your organization needs to associate each device with a ticket number correlating it with an internal support system record. This is certainly a legitimate use for Nautobot, but it's not a common enough need to warrant including a field for every Nautobot installation. Instead, you can create a custom field to hold this data.</p> <p>Within the database, custom fields are stored as JSON data directly alongside each object. This alleviates the need for complex queries when retrieving objects.</p>"},{"location":"models/extras/customfield.html#creating-custom-fields","title":"Creating Custom Fields","text":"<p>Custom fields can be created through the UI under Extensibility &gt; Miscellaneous &gt; Custom Fields or through the REST API.</p> <p>Nautobot supports these custom field types:</p> <ul> <li>Text: Free-form text (up to 255 characters)</li> <li>Integer: A whole number (positive or negative)</li> <li>Boolean: True or false</li> <li>Date: A date in ISO 8601 format (YYYY-MM-DD)</li> <li>URL: This will be presented as a link in the web UI</li> <li>JSON: Arbitrary JSON data</li> <li>Selection: A selection of one of several pre-defined custom choices</li> <li>Multiple selection: A selection field which supports the assignment of multiple values</li> </ul> <p>Added in version 1.3.0</p> <p>Support for JSON-type custom fields was added.</p> <p>Each custom field must have a name and slug; this should be a simple database-friendly string, e.g. <code>tps_report</code>. You may also assign a corresponding human-friendly label (e.g. \"TPS report\"); the label will be displayed on web forms. A weight is also required: Higher-weight fields will be ordered lower within a form. (The default weight is 100.) If a description is provided, it will appear beneath the field in a form.</p> <p>Changed in version 1.4.0</p> <p>Custom fields now have both a <code>name</code> and a <code>slug</code>; in older versions there was no <code>slug</code> field. When migrating existing data to Nautobot 1.4.0 or later, the <code>label</code> and <code>slug</code> will be automatically populated for existing custom fields if necessary.</p> <p>Warning</p> <p>In all Nautobot 1.x versions, the custom field <code>name</code> is used as the key to store and retrieve custom field data via the database and GraphQL. In a future major release, the <code>name</code> field will be removed and custom field data will be accessible via the <code>slug</code> instead. See below for REST API versioning behavior in this area.</p> <p>Tip</p> <p>Because custom field data is included in the database, in the REST API and in GraphQL, we strongly recommend that when defining a custom field, you provide a <code>slug</code> that contains underscores rather than dashes (<code>my_field_slug</code>, not <code>my-field-slug</code>), as some features may not work optimally if dashes are included in the slug. Similarly, the provided <code>name</code> should also contain only alphanumeric characters and underscores, as it is currently treated in some cases like a slug.</p> <p>Note</p> <p>The name, slug, and type of a custom field cannot be modified once created, so take care in defining these fields. This helps to reduce the possibility of inconsistent data and enforces the importance of thinking about the data model when defining a new custom field.</p> <p>Marking a field as required will force the user to provide a value for the field when creating a new object or when saving an existing object. A default value for the field may also be provided. Use \"true\" or \"false\" for boolean fields, or the exact value of a choice for selection fields.</p> <p>The filter logic controls how values are matched when filtering objects by the custom field. Loose filtering (the default) matches on a partial value, whereas exact matching requires a complete match of the given string to a field's value. For example, exact filtering with the string \"red\" will only match the exact value \"red\", whereas loose filtering will match on the values \"red\", \"red-orange\", or \"bored\". Setting the filter logic to \"disabled\" disables filtering by the field entirely.</p> <p>Changed in version 1.4.0</p> <p>Custom field extended filtering introduced extended lookup expression filters for <code>exact</code> and <code>icontains</code>, duplicating the functionality of both the <code>Strict</code> and <code>Loose</code> settings.</p> <p>A custom field must be assigned to one or more object types, or models, in Nautobot. Once created, custom fields will automatically appear as part of these models in the web UI and REST API.</p> <p>When creating a custom field, if \"Move to Advanced tab\" is checked, this custom field won't appear on the object's main detail tab in the UI, but will appear in the \"Advanced\" tab. This is useful when the requirement is to hide this field from the main detail tab when, for instance, it is only required for machine-to-machine communication and not user consumption.</p>"},{"location":"models/extras/customfield.html#custom-field-validation","title":"Custom Field Validation","text":"<p>Nautobot supports limited custom validation for custom field values. Following are the types of validation enforced for each field type:</p> <ul> <li>Text: Regular expression (optional)</li> <li>URL: Regular expression (optional)</li> <li>Integer: Minimum and/or maximum value (optional)</li> <li>JSON: If not empty, this field must contain valid JSON data</li> <li>Selection: Must exactly match one of the prescribed choices<ul> <li>Selection Fields: Regular expression (optional)</li> </ul> </li> </ul>"},{"location":"models/extras/customfield.html#custom-selection-fields","title":"Custom Selection Fields","text":"<p>Choices are stored as independent values and are assigned a numeric weight which affects their ordering in selection lists and dropdowns. Note that choice values are saved exactly as they appear, so it's best to avoid superfluous punctuation or symbols where possible.</p> <p>A regular expression can optionally be defined on custom selection choices to validate the defined field choices in the user interface and the API.</p> <p>If a default value is specified for a selection field, it must exactly match one of the provided choices. Note that the default value can only be set on the custom field after its corresponding choice has been added.</p> <p>The value of a multiple selection field will always return a list, even if only one value is selected.</p>"},{"location":"models/extras/customfield.html#filtering-on-custom-fields","title":"Filtering on Custom Fields","text":"<p>There are a number of available built-in filters for custom fields.</p> <p>Filtering on an object's list view follows the same pattern as custom field filtering on the API.</p> <p>When using the ORM, you can filter on custom fields using <code>_custom_field_data__&lt;field name&gt;</code> (note the underscore before <code>custom_field_data</code> and the double-underscore before the field name). For example, if a custom field of string type with a <code>name</code> of  <code>\"site_code\"</code> was created for Site objects, you could filter as follows:</p> <pre><code>from nautobot.dcim.models import Site\nall_sites = Site.objects.all()  # -&gt; ['Raleigh', 'Charlotte', 'Greensboro']\nfiltered_sites_1 = Site.objects.filter(_custom_field_data__site_code=\"US-NC-RAL42\")  # -&gt; ['Raleigh']\nfiltered_sites_2 = Site.objects.filter(_custom_field_data__site_code__in=[\"US-NC-RAL42\", \"US-NC-CLT22\"])  # -&gt; ['Raleigh', 'Charlotte']\n</code></pre> <p>For further ORM interaction with custom fields check out the custom fields user guide.</p>"},{"location":"models/extras/customfield.html#custom-fields-and-the-rest-api","title":"Custom Fields and the REST API","text":"<p>When retrieving an object via the REST API, all of its custom field data will be included within the <code>custom_fields</code> attribute. For example, below is the partial output of a site with two custom fields defined:</p> <pre><code>{\n\"id\": 123,\n\"url\": \"http://localhost:8080/api/dcim/sites/123/\",\n\"name\": \"Raleigh 42\",\n...\n\"custom_fields\": {\n\"deployed\": \"2018-06-19\",\n\"site_code\": \"US-NC-RAL42\"\n},\n...\n</code></pre> <p>Changed in API version 1.4</p> <p>In REST API versions 1.3 and earlier, each custom field's <code>name</code> is used as the key under <code>custom_fields</code> in the REST API. As part of the planned future transition to removing the <code>name</code> attribute entirely from custom fields, when REST API version 1.4 or later is requested, the <code>custom_fields</code> data in the REST API is instead indexed by custom field <code>slug</code>.</p> <p>Refer to the documentation on REST API versioning for more information about REST API versioning and how to request a specific version of the REST API.</p> <p>To set or change custom field values, simply include nested JSON data in your REST API POST, PATCH, or PUT request. Unchanged fields may be omitted from the data. For example, the below would set a value for the <code>deployed</code> custom field but would leave the <code>site_code</code> value unchanged:</p> <pre><code>{\n\"name\": \"New Site\",\n\"slug\": \"new-site\",\n\"custom_fields\": {\n\"deployed\": \"2019-03-24\"\n}\n}\n</code></pre>"},{"location":"models/extras/customfield.html#custom-fields-user-guide","title":"Custom Fields User Guide","text":"<p>More in depth documentation on how to use custom fields can be found in the custom fields user guide.</p>"},{"location":"models/extras/customlink.html","title":"Custom Links","text":"<p>Custom links allow users to display arbitrary hyperlinks to external content within Nautobot object views. These are helpful for cross-referencing related records in systems outside of Nautobot. For example, you might create a custom link on the device view which links to the current device in a network monitoring system.</p> <p>Custom links can be created under the admin UI or web UI located in the navbar under Extensibility &gt; Miscellaneous &gt; Custom Links. Each link is associated with a particular Nautobot object type (site, device, prefix, etc.) and will be displayed on relevant views. Each link is assigned text and a URL, both of which support Jinja2 templating. The text and URL are rendered with the context variable <code>obj</code> representing the current object.</p> <p>For example, you might define a link like this:</p> <ul> <li>Text: <code>View NMS</code></li> <li>URL: <code>https://nms.example.com/nodes/?name={{ obj.name }}</code></li> </ul> <p>When viewing a device named Router4, this link would render as:</p> <pre><code>&lt;a href=\"https://nms.example.com/nodes/?name=Router4\"&gt;View NMS&lt;/a&gt;\n</code></pre> <p>Custom links appear as buttons at the top right corner of the page. Numeric weighting can be used to influence the ordering of links.</p>"},{"location":"models/extras/customlink.html#context-data","title":"Context Data","text":"<p>The following context data is available within the template when rendering a custom link's text or URL.</p> Variable Description <code>obj</code> The Nautobot object being displayed <code>debug</code> A boolean indicating whether debugging is enabled <code>request</code> The current WSGI request <code>user</code> The current user (if authenticated) <code>perms</code> The permissions assigned to the user <p>All built-in Jinja2 filters are available and it's also possible to develop and register a custom Jinja2 filters.</p>"},{"location":"models/extras/customlink.html#conditional-rendering","title":"Conditional Rendering","text":"<p>Only links which render with non-empty text are included on the page. You can employ conditional Jinja2 logic to control the conditions under which a link gets rendered.</p> <p>For example, if you only want to display a link for active devices, you could set the link text to</p> <pre><code>{% if obj.status.slug == 'active' %}View NMS{% endif %}\n</code></pre> <p>The link will not appear when viewing a device with any status other than \"active.\"</p> <p>As another example, if you wanted to show only devices belonging to a certain manufacturer, you could do something like this:</p> <pre><code>{% if obj.device_type.manufacturer.name == 'Cisco' %}View NMS{% endif %}\n</code></pre> <p>The link will only appear when viewing a device with a manufacturer name of \"Cisco.\"</p> <p>Note</p> <p>To access custom fields of an object within a template, use the <code>cf</code> attribute. For example, <code>{{ obj.cf.color }}</code> will return the value (if any) for a custom field named <code>color</code> on <code>obj</code>.</p>"},{"location":"models/extras/customlink.html#link-groups","title":"Link Groups","text":"<p>Group names can be specified to organize links into groups. Links with the same group name will render as a dropdown menu beneath a single button bearing the name of the group.</p>"},{"location":"models/extras/dynamicgroup.html","title":"Dynamic Groups","text":"<p>Added in version 1.3.0</p> <p>Dynamic Groups provide a way to organize objects of the same Content Type by matching filters. A Dynamic Group can be used to create unique groups of objects matching a given filter, such as Devices for a specific site location or set of locations. As indicated by the name, Dynamic Groups update in real time as potential member objects are created, updated, or deleted.</p> <p>When creating a Dynamic Group, one must select a Content Type to which it is associated, for example <code>dcim.device</code>. The filtering parameters saved to the group behave as a bi-directional search query that is used to identify members of that group, and can also be used to determine from an individual object the list of Dynamic Groups to which an individual object belongs.</p> <p>Once created the Content Type for a Dynamic Group may not be modified as this relationship is tightly-coupled to the available filtering parameters. All other fields may be updated at any time.</p>"},{"location":"models/extras/dynamicgroup.html#introduction","title":"Introduction","text":""},{"location":"models/extras/dynamicgroup.html#creating-dynamic-groups","title":"Creating Dynamic Groups","text":"<p>Dynamic Groups can be created through the UI under Organization &gt; Dynamic Groups and clicking the \"Add\" button, or through the REST API.</p> <p>Each Dynamic Group must have a human-readable Name string, e.g. <code>devices-site-ams01</code> and a Slug, which should be a simple database-friendly string. By default, the slug will be automatically generated from the name, however you may customize it if you like. You must select a Content Type for the group that determines the kind of objects that can be members of the group and the corresponding filtering parameters available. Finally, you may also assign an optional human-friendly Description (e.g. \"Devices in site AMS01\").</p> <p>Once a new Dynamic Group is created, the group can be configured by clicking the \"Edit\" button to specify Filter Fields or Child Groups to use to narrow down the group's member objects. More on this below.</p> <p>Warning</p> <p>The content type of a Dynamic Group cannot be modified once created, so take care in selecting this initially. This is intended to prevent the possibility of inconsistent data and enforces the importance of thinking about the data model when defining a new Dynamic Group.</p>"},{"location":"models/extras/dynamicgroup.html#working-with-dynamic-groups","title":"Working with Dynamic Groups","text":"<p>Once created and configured, Dynamic Groups can be accessed from the primary Dynamic Groups landing page in the web interface under the Organization &gt; Dynamic Groups menu. From there you may view the list of available groups, search or filter the list, view or edit an individual group, or bulk delete groups. Additionally if a group's filter has matching members, the number of members may be clicked to take you to the list of members for that dynamic group containing those objects.</p> <p>Dynamic Groups cannot be imported nor can they be updated in bulk, as these operations would be complex and do not make sense in most cases.</p> <p>From an individual object's detail page, if it is a member of any groups, a \"Dynamic Groups\" tab will display in the navigation tabs. Clicking that tab will display all Dynamic Groups of which this object is a member.</p>"},{"location":"models/extras/dynamicgroup.html#filtering","title":"Filtering","text":"<p>Dynamic Group filtering is powered by FilterSet objects underneath the hood. Basic filtering is performed using the <code>filter</code> that is defined on a given Dynamic Group. Advanced filtering is performed by aggregating filters from multiple nested Dynamic Groups to form a combined parent Dynamic Group, which will be explained later in this document.</p> <p>An object is considered to be a member of a Dynamic Group if it is of the same Content Type and it is not excluded by way of any of the filter criteria specified for that group. By default, a freshly created group has an empty filter (<code>{}</code>), which will include all objects of the matching Content Type, just as a default list view of those objects would display prior to any filter fields being filled in the web UI.</p> <p>For example, for a Dynamic Group with Content Type of <code>dcim.device</code> and an empty filter, the list of members would be equivalent to the default Device list view, which in turn is equivalent to the queryset for <code>Device.objects.all()</code> from the database ORM.</p> <p>Changed in version 1.4.0</p> <p>In Nautobot v1.3.0 the default for a Dynamic Group with an empty filter was to \"fail closed\" and have zero members.</p> <p>As of v1.4.0, this behavior has been inverted to default to include all objects matching the Content Type, instead of matching no objects as was previously the case. This was necessary to implement the progressive layering of child filters similarly to how we use filters to reduce desired objects from basic list view filters. This will be described in more detail below.</p>"},{"location":"models/extras/dynamicgroup.html#basic-filtering","title":"Basic Filtering","text":"<p>When editing a Dynamic Group, under the Filter Options section, you will find a Filter Fields tab that allows one to specify filter criteria. The filter fields available for a given Content Type are backed and validated by underlying filterset classes (for example <code>nautobot.dcim.filters.DeviceFilterSet</code>) and are represented in the web interface as a dynamically-generated filter form that corresponds to each eligible filter field.</p>"},{"location":"models/extras/dynamicgroup.html#advanced-filtering","title":"Advanced Filtering","text":"<p>Added in version 1.4.0</p> <p>Advanced filtering is performed using nested Dynamic Group memberships.</p> <p>An object is considered a member of an advanced Dynamic Group if it matches the aggregated filter criteria across all descendant groups.</p> <p>When editing a Dynamic Group, under the Filter Options section, you will find a Child Groups tab that allows one to make other Dynamic Groups of the same Content Type children of the parent group.</p> <p></p>"},{"location":"models/extras/dynamicgroup.html#example-workflow","title":"Example Workflow","text":"<p>Dynamic Groups are a complex topic and are perhaps best understood through a series of worked examples.</p>"},{"location":"models/extras/dynamicgroup.html#basic-filtering-with-a-single-dynamic-group","title":"Basic Filtering with a single Dynamic Group","text":"<p>Let's say you want to create a Dynamic Group that contains all production Devices at your first two Sites. You can create a Dynamic Group called \"Devices at Sites A and B\" for Content Type <code>dcim | device</code>, then edit it and set the Filter Fields to match:</p> <ol> <li>a Site of either \"AMS01\" or \"BKK01\"</li> <li>a Status of \"Active\" or \"Offline\"</li> </ol> <p></p> <p>After clicking \"Update\", you will be returned to the detail view for this Dynamic Group, where you can verify the filter logic that results, and click the \"Members\" tab to see the set of Devices that it contains.</p> <p></p> <p></p> <p>A key to understand here is that generally, within a single Dynamic Group, additional values specified for the same filter field (here, \"Site\") will broaden the group to include additional objects that match those additional values, while specifying values for additional filter fields (here, \"Status\") will narrow the group to match only the objects that match this additional filter. This is expressed in the \"Filter Query Logic\" panel by the use of <code>OR</code> and <code>AND</code> operators - the logic for this Dynamic Group is:</p> <pre><code>(\n  (\n    site__slug='ams01' OR site__slug='bkk01'\n  ) AND (\n    status__slug='active' OR status__slug='offline'\n  )\n)\n</code></pre>"},{"location":"models/extras/dynamicgroup.html#advanced-filtering-combining-two-dynamic-groups-into-a-third","title":"Advanced Filtering - Combining Two Dynamic Groups into a Third","text":"<p>Added in version 1.4.0</p> <p>Now, let's say that you add a third site to your network. This site is currently being built out, and you don't care about Devices from this site that are Offline status at present. What you want for your \"Devices of Interest\" Dynamic Group is logic similar to:</p> <pre><code>(\n  (\n    (\n      site__slug='ams01' OR site__slug='bkk01'\n    ) AND (\n      status__slug='active' OR status__slug='offline'\n    )\n  ) OR (\n    site__slug='can01' AND status__slug='active'\n  )\n)\n</code></pre> <p>This logic is too complex to express directly via a single Dynamic Group, but fear not! This is what combining Dynamic Groups allows you to do.</p> <p>First, you can create a new \"Devices of Interest\" group. Edit this group, and instead of specifying Filter Fields, switch to the Child Groups tab of the editor, select the operator \"Include (OR)\" and the group \"Devices at Sites A and B\", and update the group.</p> <p></p> <p>In the new group's detail view, you can see that it now contains one child group, \"Devices at Sites A and B\", and its members are exactly the same as those of that group. But we're not done yet!</p> <p></p> <p>Next, you'll create another group to represent the other part of your desired logic. Call this group \"Site C So Far\", and set its Filter Fields to match Site \"CAN01\" and Status \"Active\". Verify that it contains the expected set of Devices from Site C.</p> <p></p> <p>Now, we'll add this group into the \"Devices of Interest\" parent group. Navigate back to the Dynamic Groups list view, and edit this group. Under the Child Groups tab, add another \"Include (OR)\" operator and select group \"Site C So Far\":</p> <p></p> <p>Now things are getting interesting!</p> <p></p> <p>The \"Devices of Interest\" Dynamic Group now contains the filtered Devices from both of its child groups, and the \"Filter Query Logic\" matches our intent as we stated it earlier:</p> <pre><code>(\n  (\n    (\n      site__slug='ams01' OR site__slug='bkk01'\n    ) AND (\n      status__slug='active' OR status__slug='offline'\n    )\n  ) OR (\n    site__slug='can01' AND status__slug='active'\n  )\n)\n</code></pre>"},{"location":"models/extras/dynamicgroup.html#advanced-filtering-nested-groups-and-negation","title":"Advanced Filtering: Nested Groups and Negation","text":"<p>Added in version 1.4.0</p> <p>Next, let's say you add a fourth site to your network. This site is in bad shape, and has Devices in a wide range of statuses. You want your \"Devices of Interest\" group to include all Devices from this site, except for those in Decommissioning status. To express this logic and add these devices to our parent group, we will need to use a combination of groups and the \"Exclude (NOT)\" operator.</p> <p>First, you will create an \"Site D All Devices\" group. This will simply match Devices at Site \"DEL01\", regardless of their status.</p> <p></p> <p>Then create a \"Site D Decommissioning Devices\" group, which matches Site \"DEL01\" and Status \"Decommissioning\".</p> <p></p> <p>Next create a \"Site D Devices of Interest\" group, and set its Child Groups to:</p> <ol> <li>Operator \"Include (OR)\", group \"Site D All Devices\"</li> <li>Operator \"Exclude (NOT)\", group \"Site D Decommissioning Devices\"</li> </ol> <p></p> <p>Warning</p> <p>In general, but especially when using the AND and NOT operators, you must pay close attention to the order of the child groups. In this example, if you were to reverse the order of these two child groups, you would not get the desired final result!</p> <p>You can check this group and confirm that it contains the expected restricted subset of Devices.</p> <p></p> <p>Finally, you can edit the parent \"Devices of Interest\" group and add a third Child Groups entry, \"Include (OR)\" on \"Site D Devices of Interest\". The final result is a Dynamic Group that contains the desired set of Devices across all four of your Sites.</p> <p></p> <p>You can see the filter logic that this combination of groups results in:</p> <pre><code>(\n  (\n    (\n      site__slug='ams01' OR site__slug='bkk01'\n    ) AND (\n      status__slug='active' OR status__slug='offline'\n    )\n  ) OR (\n    site__slug='can01' AND status__slug='active'\n  ) OR (\n    site__slug='del01' AND (\n      NOT (site__slug='del01' AND status__slug='decommissioning')\n    )\n  )\n)\n</code></pre> <p>You can also see the hierarchy of nested groups that are being used to derive the \"Devices of Interest\" group:</p> <p></p> <p>Most importantly, you now have a Dynamic Group that contains exactly the set of Devices you need!</p> <p></p>"},{"location":"models/extras/dynamicgroup.html#technical-details","title":"Technical Details","text":""},{"location":"models/extras/dynamicgroup.html#filter-generation","title":"Filter Generation","text":"<p>Filters are always processed hiearchically from the top down starting from the parent group and descending recursively to the last nested child group in order by the <code>weight</code> value assigned to that group when it was associated to its parent.</p> <p>Note</p> <p>For the purpose illustration, we will use \"left to right\" terminology since when verbally describing precedence in English, we read from left to right, so that following it will be more intuitive.</p> <p>The nesting of Dynamic Groups is performed using two advanced patterns: Sets and graphs. Rules for each child group are processed using a set <code>operator</code>, and groups are sorted hierarchically as a directed acyclic graph (DAG), where the <code>weight</code> is used for sorting child groups topologically.</p> <p>In both cases, the ordering of the tree of descendants from a parent group to its nested children is significant and critically important to how each subsequent filter or group of filters are processed to result in a final set of member objects.</p> <p>Consider an example where there is a graph from the parent group to three direct child groups, the third of which has its own nested child group:</p> <pre><code>parent\n- first-child\n- second-child\n- third-child\n  - nested-child\n</code></pre> <p>The filter generation would walk the graph: starting from the base (match-all) filter of <code>parent</code>, the filter of <code>first-child</code> would be applied, then <code>second-child</code>, as ordered by their <code>weight</code>. In the case of <code>third-child</code>, all of its children (only <code>nested-child</code> in this case) would be processed in order in the same way and the resultant filter from all of the child groups for <code>third-child</code> would be applied to the filter resulting from <code>first-child</code> and <code>second-child</code>, resulting in the final filter for <code>parent</code>.</p>"},{"location":"models/extras/dynamicgroup.html#weights","title":"Weights","text":"<p>Weights are used to define the order in which a parent group's child group filters are processed. Because this ordering is significant, care must be taken when constructing nested Dynamic Groups to result in filter parameters that have the desired outcome.</p> <p>Note</p> <p>Unique weights are only considered for directly-related child groups. In other words, the weights for each child group of a parent group are unique to that parent and only affect the sorting of the children for that parent.</p> <p>In practice, weights are automatically assigned in increments of <code>10</code> when associating child groups in the web UI, and child groups may be dragged and dropped to re-order them and re-assign their weights accordingly. When using the REST API, the weights must be explicitly provided as a part of your request payload.</p> <p>Using the example group hierarchy above, the weights would be as follows:</p> <pre><code>parent\n- first-child {weight: 10}\n- second-child {weight: 20}\n- third-child {weight: 30}\n  - nested-child {weight: 10}\n</code></pre>"},{"location":"models/extras/dynamicgroup.html#operators","title":"Operators","text":"<p>Set theory is applied when a new group is added as a child group. Three key concepts are at play: Intersections, Unions, and Differences.</p> <p>We have attempted to simplify working with these operators by giving them both human-readable and Boolean name mappings. They are as follows:</p> <ul> <li>Restrict (Boolean <code>AND</code>) - The Restrict operator performs a set intersection on the queryset, and is equivalent to a Boolean <code>AND</code>. The preceding filter is restricted (aka intersected) by the objects matching the child filter. All filter criteria must match between the filters for a member object to be included in the resultant filter.</li> <li>Include (Boolean <code>OR</code>) - The Include operator performs a set union on the queryset, and is equivalent to a Boolean <code>OR</code>. The preceding filter is extended to include (aka unioned with) any objects matching the child filter. Any filter criteria may match between the filters for member objects to be included in the resultant filter.</li> <li>Exclude (Boolean <code>NOT</code>) - The Exclude operator performs a set difference on the queryset, and is equivalent to a Boolean <code>NOT</code>. The preceding filter excludes (aka differences) any objects matching the child filter. Any matching objects from the child filter will be negated from the members of the resultant filter.</li> </ul> <p>The following table maps the Nautobot operator to the corresponding set operations:</p> Operator Set Operation Boolean Description Restrict Intersection AND Objects must match this child filter to be included in the parent group Include Union OR Objects may match the child filter to be included in the parent group Exclude Difference NOT Objects must not match this child filter to be included in the parent group <p>Any filters provided by the child groups are used to filter the members from the parent group using one of the three operators: Restrict (AND), Include (OR), or Exclude (NOT).</p> <p>Using the example group hierarchy from above, let's apply operators and explain how it would work:</p> <pre><code>parent {filter: None}\n- first-child {weight: 10, operator: intersection (AND), filter: site=ams01}\n- second-child {weight: 20, operator: union (OR), filter: site=ang01}\n- third-child {weight: 30, operator: difference (NOT), filter: None}\n  - nested-child {weight: 10, operator: intersectio (AND), filter: status=active}\n</code></pre> <p>Logically, the filter will be expressed like so using the hierarchy above:</p> <pre><code>((first-child OR second-child) AND (NOT nested-child))\n</code></pre> <p>Which in turn would map to the object filter:</p> <pre><code>((site=ams01 OR site=ang01) AND (NOT status=active))\n</code></pre>"},{"location":"models/extras/dynamicgroup.html#how-does-this-work","title":"How does this work?","text":"<p>First, the filters for direct children for a group will always be included in a parenthetical grouping, separated by the operator. Parent groups always start from their base filter containing \"all objects\" (equivalent to an empty filter or <code>{}</code>). Therefore the filter of <code>parent</code> and the filter of <code>third-child</code> are not directly used for generating the filter and are instead passed through from <code>parent</code> left to right as the \"base\" filter.</p> <p>Similarly, by the time we get to <code>third-child</code>, the filter at that node in the graph will have already had the filter from <code>first-child</code> and <code>second-child</code> applied, and will merely be passed through to the filter generated from the children of <code>third-child</code>.</p> <p>Because <code>first-child</code> and <code>second-child</code> are \"included\" by way of the <code>union</code> set operator (Boolean <code>OR</code>), but because the filter for <code>third-child</code> is empty as explained above, its filter condition is not directly included, resulting in <code>(first-child OR second-child)</code> as the first group, representing all direct filters for the group <code>parent</code>.</p> <p>Note</p> <p>But what about the <code>AND</code> coming from the association of <code>first-child</code>, you might be asking?</p> <p>Well, that <code>AND</code> is also passed through because the default behavior when performing queryset filtering is to join all filter statements together with <code>AND</code>. For example, consider when you perform this from the Django ORM <code>Device.objects.filter(site__slug=\"ams01\")</code> the outcome is in fact equivalent to <code>AND site__slug=\"ams01\"</code>. Therefore, for the first child group (literally <code>first-child</code> in this case), initial <code>AND</code> will be omitted.</p> <p>Continuing on to the children of <code>third-child</code>, the same iteration rules apply. The filter from <code>nested-child</code> gets applied to the filter being passed through from its parent, <code>third-child</code>, except that the \"exclude\" (boolean <code>NOT</code>) operator is still applied from the association of <code>third-child</code> to parent resulting in <code>(NOT nested-child</code>).</p> <p>Note</p> <p>You'll see <code>NOT</code> emitted as an <code>AND NOT</code> because <code>NOT</code> is actually just shorthand for this. They are in fact interchangeable as Boolean operators. While it's technically possible to perform an <code>OR NOT</code> query from a database perspective, it is not supported by Dynamic Groups because the <code>NOT</code> operator maps directly to the \"difference\" set operation which is distinctly an <code>AND NOT</code> Boolean operation when performing underlying SQL queries at the database.</p> <p>Piecing the rules together, we ended up with two filters and by wrapping them in their own set of parentheses we get our final generated filter:</p> <pre><code>(\n  (\n    [ALL OBJECTS]\n    AND first-child\n  )\n  OR second-child\n)\nAND NOT (\n  [ALL OBJECTS]\n  AND nested-child\n)\n</code></pre>"},{"location":"models/extras/dynamicgroup.html#dynamic-groups-and-the-rest-api","title":"Dynamic Groups and the REST API","text":"<p>Dynamic Groups are fully supported by the API. Two distinct endpoints are required, one each for managing Dynamic Groups and for assigning child groups using Dynamic Group Memberships.</p>"},{"location":"models/extras/dynamicgroup.html#specifying-filter-conditions","title":"Specifying Filter Conditions","text":"<p>Dynamic Groups are fairly straightforward however it is important to understand how the <code>filter</code> field works before digging in.</p> <p>The <code>filter</code> is a JSON field and it must be able to be used as valid query parameters for filtering objects of the corresponding Content Type.</p> <p>It is an error to provide any value other than a JSON object (<code>{}</code> or a Python dictionary) for the <code>filter</code> field.</p>"},{"location":"models/extras/dynamicgroup.html#multiple-values","title":"Multiple Values","text":"<p>Most fields within the <code>filter</code> accept multiple values and must be represented as a JSON array (Python list), for example:</p> <pre><code>{\n\"site\": [\"ams01\", \"ang01\"]\n}\n</code></pre>"},{"location":"models/extras/dynamicgroup.html#single-values","title":"Single Values","text":"<p>Certain fields take Boolean values (JSON <code>true</code>/<code>false</code>) or single numeric integers or character strings.</p> <p>For example, consider this boolean filter that requires a single <code>true</code>/<code>false</code> and would result in a Dynamic Group of devices that have interfaces:</p> <pre><code>{\n\"has_interfaces\": true\n}\n</code></pre> <p>Or this character filter that requires a single string and would result in a Dynamic Group with only one member matching this <code>name</code>:</p> <pre><code>{\n\"name\": \"ams01-edge-01\"\n}\n</code></pre>"},{"location":"models/extras/dynamicgroup.html#field-validation","title":"Field Validation","text":"<p>Any invalid field values for valid field names will also result in a <code>ValidationError</code>, for example providing an integer to the <code>name</code> filter is invalid:</p> <pre><code>{\n\"name\": -42\n}\n</code></pre> <p>Note</p> <p>Please refer to either the source code definition of the <code>{model_name}FilterSet</code> (e.g. for <code>Device</code> it would be <code>nautobot.dcim.filters.DeviceFilterSet</code>) or the API documentation for the list endpoint (e.g. <code>/api/dcim/devices/</code>) for a given model object, to view the available filter fields and their expectations.</p> <p>Changed in version 1.4.0</p> <p>Prior to v1.4.0, any invalid field names that are not eligible for filtering objects will be discarded upon validation.</p> <p>As of v1.4.0, strict filtering is enabled by default, which causes any invalid field names to result in a <code>ValidationError</code>.</p>"},{"location":"models/extras/dynamicgroup.html#managing-dynamic-groups","title":"Managing Dynamic Groups","text":""},{"location":"models/extras/dynamicgroup.html#creating-a-dynamic-group","title":"Creating a Dynamic Group","text":"<p>A Dynamic Group may be created by performing a <code>POST</code> to the Dynamic Groups list endpoint at <code>/api/extras/dynamic-groups/</code>.</p> <p>Note</p> <p>The <code>filter</code> field will default to an empty filter (<code>{}</code>) if not provided.</p> <p>Important</p> <p>It is not possible to perform a nested assignment of <code>children</code> when creating a new Dynamic Group. You must first create the new group and then use the endpoint for creating Dynamic Group Memberships as explained below under Assigning Child Groups.</p> <p>Request:</p> <pre><code>POST /api/extras/dynamic-groups/\n{\n\"name\": \"parent\",\n\"slug\": \"parent\",\n\"description\": \"I am a parent group with nested children.\",\n\"content-type\": \"dcim.device\",\n\"filter\": {},\n}\n</code></pre> <p>Response:</p> <pre><code>{\n\"id\": \"1f825078-b6dc-4b12-9463-be5a9189b03f\",\n\"display\": \"parent\",\n\"url\": \"http://localhost:6789/api/extras/dynamic-groups/1f825078-b6dc-4b12-9463-be5a9189b03f/\",\n\"name\": \"parent\",\n\"slug\": \"parent\",\n\"description\": \"I am the parent group with nested children.\",\n\"content_type\": \"dcim.device\",\n\"filter\": {},\n\"children\": [],\n\"created\": \"2022-07-06\",\n\"last_updated\": \"2022-07-06T20:17:04.305663Z\",\n\"custom_fields\": {},\n\"computed_fields\": {},\n\"relationships\": {}\n}\n</code></pre>"},{"location":"models/extras/dynamicgroup.html#updating-or-deleting-a-dynamic-group","title":"Updating or Deleting a Dynamic Group","text":"<p>Important</p> <p>It is not possible to perform a nested update of <code>children</code> when updating a new Dynamic Group. You must use the endpoint for creating Dynamic Group Memberships as explained below under Updating or Deleting Child Groups.</p> <p>Updating or deleting a Dynamic Group is done by sending a request to the detail endpoint for that object.</p> <p>A Dynamic Group may be updated using <code>PUT</code> or <code>PATCH</code> (for a partial update) requests. A <code>PUT</code> request requires the entire object to be updated in place. For example if you wanted to update the <code>name</code> and the <code>slug</code> together, leaving every other field with their current values as provided:</p> <pre><code>PUT /api/extras/dynamic-groups/{uuid}/\n{\n\"name\": \"I am the best parent group\",\n\"slug\": \"best-parent\",\n\"description\": \"I am the parent group with nested children.\",\n\"filter\": {}\n}\n</code></pre> <p>Performing a partial update using a <code>PATCH</code> request can allow any single field to be updated without affecting the other fields. For example, if we wanted to update only the <code>slug</code> for a group:</p> <pre><code>PATCH /api/extras/dynamic-group-memberships/{uuid}/\n{\n\"slug\": \"best-parent\"\n}\n</code></pre> <p>To delete a Dynamic Group you would send a <code>DELETE</code> request to the detail endpoint:</p> <pre><code>DELETE /api/extras/dynamic-group-memberships/{uuid}/\n</code></pre>"},{"location":"models/extras/dynamicgroup.html#managing-child-groups","title":"Managing Child Groups","text":"<p>Dynamic Groups may be nested to a parent group by creating a new Dynamic Group Membership. The act of assigning a Dynamic Group as a child to a parent group creates a Dynamic Group Membership.</p> <p>This can be done at the list endpoint found at <code>/api/extras/dynamic-group-memberships/</code>.</p>"},{"location":"models/extras/dynamicgroup.html#assigning-child-groups","title":"Assigning Child Groups","text":"<p>Dynamic Group Membership objects may be created, updated, or deleted just like any other object and are represented as <code>children</code> on the parent group.</p> <p>Note</p> <p>When interacting with the REST API, the <code>operator</code> must be provided using the string representation that is stored in the database. The human-readable operator names (such as \"Exclude (AND)\" for \"intersection\") are not accepted.</p> <p>Request:</p> <pre><code>POST /api/extras/dynamic-group-memberships/\n{\n\"group\": {\"slug\": \"first-child\"},\n\"parent_group\": {\"slug\": \"parent\"},\n\"operator\": \"intersection\",\n\"weight\": 10\n}\n</code></pre> <p>Response:</p> <pre><code>{\n\"id\": \"4c8296de-42bc-49a6-8fed-fc1b1f6b93ca\",\n\"display\": \"parent &gt; intersection (10) &gt; first-child\",\n\"url\": \"http://localhost:6789/api/extras/dynamic-group-memberships/4c8296de-42bc-49a6-8fed-fc1b1f6b93ca/\",\n\"group\": {\n\"display\": \"first-child\",\n\"id\": \"97188a74-eddd-46d8-be41-909c1ece1d43\",\n\"url\": \"http://localhost:6789/api/extras/dynamic-groups/97188a74-eddd-46d8-be41-909c1ece1d43/\",\n\"name\": \"first-child\",\n\"slug\": \"first-child\",\n\"content_type\": \"dcim.device\"\n},\n\"parent_group\": {\n\"display\": \"parent\",\n\"id\": \"1f825078-b6dc-4b12-9463-be5a9189b03f\",\n\"url\": \"http://localhost:6789/api/extras/dynamic-groups/1f825078-b6dc-4b12-9463-be5a9189b03f/\",\n\"name\": \"parent\",\n\"slug\": \"parent\",\n\"content_type\": \"dcim.device\"\n},\n\"operator\": \"intersection\",\n\"weight\": 10\n}\n</code></pre> <p>Observe that after adding this new membership object, the parent group now reflects this in its <code>children</code>:</p> <pre><code>GET /api/extras/dynamic-groups/1f825078-b6dc-4b12-9463-be5a9189b03f/\n{\n\"id\": \"1f825078-b6dc-4b12-9463-be5a9189b03f\",\n\"display\": \"parent\",\n\"url\": \"http://localhost:6789/api/extras/dynamic-groups/1f825078-b6dc-4b12-9463-be5a9189b03f/\",\n\"name\": \"parent\",\n\"slug\": \"parent\",\n\"description\": \"\",\n\"content_type\": \"dcim.device\",\n\"filter\": {},\n\"children\": [\n{\n\"id\": \"4c8296de-42bc-49a6-8fed-fc1b1f6b93ca\",\n\"display\": \"parent &gt; intersection (10) &gt; first-child\",\n\"url\": \"http://localhost:6789/api/extras/dynamic-group-memberships/4c8296de-42bc-49a6-8fed-fc1b1f6b93ca/\",\n\"group\": {\n\"display\": \"first-child\",\n\"id\": \"97188a74-eddd-46d8-be41-909c1ece1d43\",\n\"url\": \"http://localhost:6789/api/extras/dynamic-groups/97188a74-eddd-46d8-be41-909c1ece1d43/\",\n\"name\": \"first-child\",\n\"slug\": \"first-child\",\n\"content_type\": \"dcim.device\"\n},\n\"parent_group\": {\n\"display\": \"parent\",\n\"id\": \"1f825078-b6dc-4b12-9463-be5a9189b03f\",\n\"url\": \"http://localhost:6789/api/extras/dynamic-groups/1f825078-b6dc-4b12-9463-be5a9189b03f/\",\n\"name\": \"parent\",\n\"slug\": \"parent\",\n\"content_type\": \"dcim.device\"\n},\n\"operator\": \"intersection\",\n\"weight\": 10\n}\n],\n\"created\": \"2022-07-15\",\n\"last_updated\": \"2022-07-15T16:50:45.453965Z\",\n\"notes_url\": \"http://localhost:6789/api/extras/dynamic-groups/1f825078-b6dc-4b12-9463-be5a9189b03f/notes/\",\n\"custom_fields\": {}\n}\n</code></pre>"},{"location":"models/extras/dynamicgroup.html#updating-or-deleting-child-groups","title":"Updating or Deleting Child Groups","text":"<p>Updating or deleting Dynamic Group Membership is done by sending a request to the detail endpoint for that membership object.</p> <p>A Dynamic Group Membership may be updated using <code>PUT</code> or <code>PATCH</code> (for a partial update) requests. A <code>PUT</code> request requires the entire object to be updated in place. For example if you wanted to update the <code>operator</code> and the <code>weight</code> together,leaving every other field with their current values as provided:</p> <pre><code>PUT /api/extras/dynamic-group-memberships/{uuid}/\n{\n\"group\": {\"slug\": \"first-child\"},\n\"parent_group\": {\"slug\": \"parent\"},\n\"operator\": \"difference\",\n\"weight\": 10\n}\n</code></pre> <p>Performing a partial update using a <code>PATCH</code> request can allow any single field to be updated without affecting the other fields. For example, if we only wanted to update the <code>weight</code> for a membership:</p> <pre><code>PATCH /api/extras/dynamic-group-memberships/{uuid}/\n{\n\"weight\": 15\n}\n</code></pre> <p>To delete a Dynamic Group Membership you would send a <code>DELETE</code> request to the detail endpoint:</p> <pre><code>DELETE /api/extras/dynamic-group-memberships/{uuid}/\n</code></pre>"},{"location":"models/extras/dynamicgroup.html#membership-and-caching","title":"Membership and Caching","text":"<p>Since looking up the members of a Dynamic Group can be a very expensive operation, Nautobot caches the results of these lookups for a configurable amount of time. By default this cache is disabled. You can change this default value by changing the <code>DYNAMIC_GROUPS_MEMBER_CACHE_TIMEOUT</code> in the administration panel. This value is in seconds.</p> <p>Creating, updating, or deleting a Dynamic Group will automatically invalidate the cache for that group. This means that the next time the group is evaluated, the cache will be refreshed with the new membership information.</p> <p>This greatly speeds up the reverse association of any object to any Dynamic Group(s) to which it may be associated.</p> <p>A Dynamic Group object in the ORM exposes two (2) properties for retrieving the members of that group:</p> <ul> <li><code>members</code> - The evaluated QuerySet defined by the Dynamic Group and it's potential child groups. This will always perform database queries.</li> <li><code>members_cached</code> - A cached instance of <code>members.all()</code>. This will only perform database queries if the cache is expired. You can continue to perform <code>.filter()</code> and other QuerySet operations but this will incur additional database queries.</li> </ul> <p>Additionally, a Dynamic Group has the following methods for working with group membership and caching:</p> <ul> <li><code>update_cached_members</code> - A way of forcing an update to the cached members of a Dynamic Group. This will always perform database queries. It will also return the updated <code>members_cached</code> property.</li> <li><code>has_member</code> - A way of checking if an object is a member of a Dynamic Group. The arguments are:<ul> <li><code>obj</code> - An instance of an object to check if it is a member of the given group.</li> <li><code>use_cache</code> - A boolean value to choose whether to use the cached member list (<code>use_cache=True</code>) or force the database query (<code>use_cache=False</code>, the default). This is a handy way to have Nautobot perform the ideal membership check.<ul> <li><code>DynamicGroup.members_cached.filter(pk=obj.pk).exists()</code> will re-perform a database query, where <code>DynamicGroup.has_member(obj, use_cache=False)</code> will perform <code>obj in list(DyamicGroup.members_cached)</code>, performing no additional database queries.</li> <li>In contrast <code>DynamicGroup.members.filter(pk=obj.pk).exists()</code> will always a database query but a much faster one as opposed to<code>obj in list(DyamicGroup.members)</code>.</li> </ul> </li> </ul> </li> </ul> <p>A model instance that supports Dynamic Groups will expose the following properties:</p> <ul> <li><code>dynamic_groups</code> - A QuerySet of <code>DynamicGroup</code> objects; performs the most database queries.<ul> <li>Iterates over all Dynamic Groups that are applicable to the instance's content type, resulting in a list (what is available as <code>dynamic_groups_list</code>) of applicable Dynamic Groups.</li> <li>A final query (<code>DynamicGroup.objects.filter(pk__in=dynamic_groups_list)</code>) is necessary to retrieve a QuerySet of <code>DynamicGroup</code> objects.</li> <li>Always performs <code>N+1</code> queries where <code>N</code> is the number of Dynamic Groups that are applicable to the instance's content type</li> <li>Evaluation of <code>instance_1.dynamic_groups</code> adds no benefit to <code>instance_2.dynamic_groups</code>: each instance will perform <code>N+1</code> queries.</li> </ul> </li> <li><code>dynamic_groups_cached</code> - A QuerySet of <code>DynamicGroup</code> objects; uses cached member list if available. Ideal for most use cases.<ul> <li>Uses cached member lists for each Dynamic Group that is applicable to the instance's content type. Membership check returns a list (what is available as <code>dynamic_groups_list_cached</code>) of applicable Dynamic Groups.</li> <li>A query (<code>DynamicGroup.objects.filter(pk__in=dynamic_groups_list_cached)</code>) is necessary to retrieve a QuerySet of <code>DynamicGroup</code> objects.</li> <li>Ideal for most use cases, performing only <code>1</code> query if membership lists are cached.</li> <li>Evaluation of <code>instance_1.dynamic_groups_cached</code> benefits <code>instance_2.dynamic_groups_cached</code> as all dynamic group membership lists are cached: <code>instance_1.dynamic_groups_cached</code> may perform <code>N+1</code> queries, but <code>instance_2.dynamic_groups_cached</code> will perform <code>1</code> query.</li> </ul> </li> <li><code>dynamic_groups_list</code> - List of membership to <code>DynamicGroup</code> objects; performs one less database query than <code>dynamic_groups</code>.<ul> <li>The internal list used by <code>dynamic_groups</code> to retrieve a QuerySet of <code>DynamicGroup</code> objects, but saves the final query.</li> <li>Beneficial if you don't need QuerySet instance of <code>DynamicGroup</code> objects, but want to use uncached membership lists on a large amount of objects.</li> <li>Always performs <code>N</code> queries where <code>N</code> is the number of Dynamic Groups that are applicable to the instance's content type</li> </ul> </li> <li><code>dynamic_groups_list_cached</code> - List of membership to <code>DynamicGroup</code> objects; uses cached member list if available. Performs no database queries in optimal conditions.<ul> <li>The internal list used by <code>dynamic_groups_cached</code> to retrieve a QuerySet of <code>DynamicGroup</code> objects, but saves the final query.</li> <li>The most optimal way to retrieve a list of <code>DynamicGroup</code> objects for an instance: Worst case <code>instance_1.dynamic_groups_list_cached</code> will perform <code>N</code> queries, but <code>instance_2.dynamic_groups_list_cached</code> will perform <code>0</code> queries.</li> </ul> </li> </ul>"},{"location":"models/extras/dynamicgroup.html#invalidatingrefreshing-the-cache","title":"Invalidating/Refreshing the Cache","text":"<p>If you need to invalidate the membership cache for a Dynamic Group, you can do so by running the management command: <code>nautobot-server refresh_dynamic_group_member_caches</code>. This will invalidate the cache for all Dynamic Groups.</p> <p>You can also create a <code>Job</code> to run periodically to refresh the cache for particular Dynamic Groups and running on a schedule:</p> <pre><code>from nautobot.extras.jobs import Job, ObjectVar\nfrom nautobot.extras.models import DynamicGroup\nclass ExampleDynamicGroupMemberCacheRefresh(Job):\ndynamic_group = ObjectVar(\nmodel=DynamicGroup\n)\nclass Meta:\nname = \"Update Dynamic Group Member Cache\"\ndef run(self, data, commit):\nDynamicGroup.objects.get(pk=data['dynamic_group']).update_cached_members()\n</code></pre>"},{"location":"models/extras/exporttemplate.html","title":"Export Templates","text":"<p>Nautobot allows users to define custom templates that can be used when exporting objects. To create an export template, navigate to Extensibility &gt; Automation &gt; Export Templates under the navigation bar. Export templates can also be managed within an external Git repository if desired.</p> <p>Each export template is associated with a certain type of object. For instance, if you create an export template for VLANs, your custom template will appear under the \"Export\" button on the VLANs list.</p> <p>Export templates must be written in Jinja2.</p> <p>The list of objects returned from the database when rendering an export template is stored in the <code>queryset</code> variable, which you'll typically want to iterate through using a <code>for</code> loop. Object properties can be access by name. For example:</p> <pre><code>{% for rack in queryset %}\nRack: {{ rack.name }}\nSite: {{ rack.site.name }}\nHeight: {{ rack.u_height }}U\n{% endfor %}\n</code></pre> <p>Note</p> <p>To access custom fields of an object within a template, use the <code>cf</code> attribute. For example, <code>{{ obj.cf.color }}</code> will return the value (if any) for a custom field named <code>color</code> on <code>obj</code>.</p> <p>A MIME type and file extension can optionally be defined for each export template. The default MIME type is <code>text/plain</code>.</p>"},{"location":"models/extras/exporttemplate.html#example","title":"Example","text":"<p>Here's an example device export template that will generate a simple Nagios configuration from a list of devices.</p> <pre><code>{% for device in queryset %}{% if device.status and device.primary_ip %}define host{\n        use                     generic-switch\n        host_name               {{ device.name }}\n        address                 {{ device.primary_ip.address.ip }}\n}\n{% endif %}{% endfor %}\n</code></pre> <p>The generated output will look something like this:</p> <pre><code>define host{\n        use                     generic-switch\n        host_name               switch1\n        address                 192.0.2.1\n}\ndefine host{\n        use                     generic-switch\n        host_name               switch2\n        address                 192.0.2.2\n}\ndefine host{\n        use                     generic-switch\n        host_name               switch3\n        address                 192.0.2.3\n}\n</code></pre>"},{"location":"models/extras/gitrepository.html","title":"Git Repositories","text":"<p>Some text-based content is more conveniently stored in a separate Git repository rather than internally in the Nautobot database. Such a repository may currently include any or all of the following for Nautobot to consume:</p> <ul> <li>Job source files and associated data files,</li> <li>Configuration context data</li> <li>Export templates</li> <li>Additional data types as registered by any installed plugins</li> </ul> <p>Important</p> <p>Nautobot's Git integration depends on the availability of the <code>git</code> program. If <code>git</code> is not installed, Nautobot will be unable to pull data from Git repositories.</p>"},{"location":"models/extras/gitrepository.html#repository-configuration","title":"Repository Configuration","text":"<p>When defining a Git repository for Nautobot to consume, the <code>name</code>, <code>remote URL</code>, and <code>branch</code> parameters are mandatory - the name acts as a unique identifier, and the remote URL and branch are needed for Nautobot to be able to locate and access the specified repository. Additionally, if the repository is private you may specify a <code>token</code> and any associated <code>username</code> that can be used to grant access to the repository.</p> <p>Note</p> <p>Nautobot currently only supports repositories that can be cloned using the standard git command line, <code>git clone</code>. This means App-style integrations like GitHub Apps are not currently supported, as their workflow of managing files leverages a REST API.</p> <p>Warning</p> <p>Beginning in Nautobot 1.2, there are two ways to define a <code>token</code> and/or <code>username</code> for a Git repository -- either by directly configuring them into the repository definition, or by associating the repository with a secrets group record (this latter approach is new in Nautobot 1.2). The direct-configuration approach should be considered as deprecated, as it is less secure and poses a number of maintainability issues. If at all possible, you should use a secrets group instead. The direct-configuration approach may be removed altogether as an option in a future release of Nautobot.</p> <p>The token implementation can vary from Git provider to Git provider, the following providers have been confirmed to work. In theory, additional providers using the same pattern will work, but there is currently no specific support for all providers.</p> <ul> <li>GitHub's <code>token</code> does not require a <code>username</code>.</li> <li>GitLab's <code>token</code> requires a <code>username</code>, conventions are to use the username \"oauth2\". In addition, GitLab's deploy tokens are also supported.</li> <li>For Bitbucket, there are two options: personal access tokens or OAuth2 depending on the product.</li> </ul> <p>Note</p> <p>When defining a secrets group for a Git repository, the group must contain assigned secret(s) with an access type of <code>HTTP(S)</code> and secret type(s) of <code>Token</code> (and <code>Username</code>, if required by the provider).</p> <p>Whenever a Git repository record is created, updated, or deleted, Nautobot automatically enqueues a background task that will asynchronously execute to clone, fetch, or delete a local copy of the Git repository on the filesystem (located under <code>GIT_ROOT</code>) and then create, update, and/or delete any database records managed by this repository. The progress and eventual outcome of this background task are recorded as a <code>JobResult</code> record that may be viewed from the Git repository user interface.</p> <p>Important</p> <p>The repository branch must exist and have a commit against it. At this time, Nautobot will not initialize an empty repository.</p> <p>Note</p> <p>If you are using a self-signed Git repository, you will need to set the environment variable <code>GIT_SSL_NO_VERIFY=\"1\"</code> in order for the repository to sync.</p>"},{"location":"models/extras/gitrepository.html#repository-structure","title":"Repository Structure","text":""},{"location":"models/extras/gitrepository.html#jobs","title":"Jobs","text":"<p>Jobs defined in Python files located in a <code>/jobs/</code> directory at the root of a Git repository will automatically be discovered by Nautobot and made available to be run as a job, just as they would be if manually installed to the <code>JOBS_ROOT</code> directory.</p> <p>Note</p> <p>There must be an <code>__init__.py</code> file in the <code>/jobs/</code> directory.</p> <p>Note</p> <p>Just as with jobs manually installed in <code>JOBS_ROOT</code>, jobs provided by a Git repository do not support inter-module relative Python imports (i.e., you cannot package Python \"libraries\" into a Git repository and then import them from Jobs in that repository). If you need to import libraries from Jobs, the libraries either must be installed as a standard Python packaging dependency or as a Nautobot plugin.</p> <p>When syncing or re-syncing a Git repository, the Nautobot database records corresponding to any provided jobs will automatically be refreshed. If a job is removed as a result of the sync, the corresponding database record will not be automatically deleted, but will be marked as <code>installed = False</code> and will no longer be runnable. A user with appropriate access permissions can delete leftover <code>Job</code> database records if desired, but note that this will result in any existing <code>JobResult</code> records no longer having a direct reference back to the <code>Job</code> that they originated from.</p>"},{"location":"models/extras/gitrepository.html#configuration-contexts","title":"Configuration Contexts","text":"<p>Config contexts may be provided as JSON or YAML files located in <code>/config_contexts/</code>. There are three different types of config context scopes; explicit, implicit, and local.</p> <ul> <li>Explicit: Defined as JSON or YAML files at the root of the <code>/config_contexts/</code> folder. Multiple config contexts can be specified within the each file. The metadata regarding the naming and scoping of the config context is determined by the <code>_metadata</code> key for each list element.</li> <li>Implicit: They're defined using a specific folder and file structure to apply the config context to a specific scope.</li> <li>Local: Defined at the device/virtual machine level and only being applied to the specific device/virtual machine.</li> </ul> <p>Added in version 1.5.6</p> <p>Config contexts provided in a Git repository can now be filtered by <code>locations</code> in addition to all previously supported filters.</p>"},{"location":"models/extras/gitrepository.html#metadata","title":"Metadata","text":"<p>The metadata used to create the config context has the following options and is specified by the <code>_metadata</code> key.</p> Key Required Default Description name True N/A The name that will be assigned to the Config Context weight False 1000 The weight that will be assigned to the Config Context that determines precedence description False N/A The description applied to the Config Context is_active False True Whether or not the Config Context is active schema False N/A Config Context Schema that it should be validated against <p>There are several other keys that can be defined that match the scope of what the Config Context will be assigned to.</p> <p>Here is an example <code>_metadata</code> key defined:</p> <pre><code>{\n\"_metadata\": {\n\"name\": \"Region NYC servers\",\n\"weight\": 1000,\n\"description\": \"NTP and Syslog servers for region NYC\",\n\"is_active\": true,\n\"regions\": [{\"slug\": \"nyc\"}],\n\"schema\": \"Config Context Schema 1\"\n},\n\"acl\": {\n\"definitions\": {\n\"named \": {\n\"PERMIT_ROUTES\": [\n\"10 permit ip any any\"\n]\n}\n}\n},\n\"route-maps\": {\n\"PERMIT_CONN_ROUTES\": {\n\"seq\": 10,\n\"statements\": [\n\"match ip address PERMIT_ROUTES\"\n],\n\"type\": \"permit\"\n}\n}\n}\n</code></pre> <p>Important</p> <p>The only config context scope that does not require any metadata defined is the local configuration context</p>"},{"location":"models/extras/gitrepository.html#explicit-config-contexts","title":"Explicit Config Contexts","text":"<p>As stated above, these explicit files live at the root of <code>/config_contexts</code>. These files will be imported as described below, with no special meaning attributed to their filenames (the name of the constructed config context will be taken from the <code>_metadata</code> key within the file, not the filename). To provide a visual, the <code>context_1.json</code> and <code>context_2.yml</code> are explicit config context scopes.</p> <pre><code>config_contexts/\n  context_1.json   # JSON data will be imported as-is, with scoping explicit from its contents\ncontext_2.yaml   # YAML data will be imported as-is, with scoping explicit from its contents\n</code></pre> <p>For files in the root of the <code>/config_contexts/</code> directory, a single file may define a single config context as above, or alternatively it may contain a list of config context data definitions, as in the following example:</p> <pre><code>---\n- _metadata:\nname: \"Router hostname pattern\"\nroles:\n- slug: \"router\"\nhostname_pattern_string: \"rtr-.+\"\n- _metadata:\nname: \"Console Server hostname pattern\"\nroles:\n- slug: \"console-server\"\nhostname_pattern_string: \"cs-.+\"\n- _metadata:\nname: \"Switches hostname pattern\"\nroles:\n- slug: \"aggr-switch\"\n- slug: \"services-switch\"\nhostname_pattern_string: \"switch-.+\"\n- _metadata:\nname: \"Appliance hostname pattern\"\nroles:\n- slug: \"security-appliance\"\nhostname_pattern_string: \"fw-.+\"\n...\n</code></pre> <p>The <code>_metadata</code> key will map to the attributes required when creating a config context via the UI or API such as name and the scope of the config context. If we take a look at the first element, the name assigned to the config context will be <code>\"Router hostname pattern\"</code> and be scoped to <code>roles</code> with a slug of <code>router</code>.</p> <p>Any key/value pair defined at the same level as <code>_metadata</code> will be converted to the config context data. Keeping with the first element, it will have a key set as <code>hostname_pattern_string</code> with a value of <code>rtr-.+</code>.</p>"},{"location":"models/extras/gitrepository.html#implicit-config-contexts","title":"Implicit Config Contexts","text":"<p>Implicit config context files will have the following folder/file structure <code>/config_contexts/&lt;filter&gt;/&lt;slug&gt;.[json|yaml]</code>, in which case their path and filename will be taken as an implicit scope for the context. For example:</p> <pre><code>config_contexts/\n  regions/\n    nyc.yaml       # YAML data, with implicit scoping to the Region with slug \"nyc\"\nsites/\n    nyc-01.json    # JSON data, with implicit scoping to the Site with slug \"nyc-01\"\n</code></pre> <p>The implicit config contexts will be defined using dictionaries for both <code>_metadata</code> and any context data for the config context.</p>"},{"location":"models/extras/gitrepository.html#json","title":"JSON","text":"<pre><code>{\n\"_metadata\": {\n\"name\": \"Region NYC servers\",\n\"weight\": 1000,\n\"description\": \"NTP and Syslog servers for region NYC\",\n\"is_active\": true,\n\"schema\": \"Config Context Schema 1\"\n},\n\"ntp-servers\": [\n\"172.16.10.22\",\n\"172.16.10.33\"\n],\n\"syslog-servers\": [\n\"172.16.9.100\",\n\"172.16.9.101\"\n]\n}\n</code></pre>"},{"location":"models/extras/gitrepository.html#yaml","title":"YAML","text":"<pre><code>_metadata\":\nname: \"Region NYC servers\"\nweight: 1000\ndescription: \"NTP and Syslog servers for region NYC\"\nis_active: true\nschema: \"Config Context Schema 1\"\nntp-servers:\n- 172.16.10.22\n- 172.16.10.33\nsyslog-servers:\n- 172.16.9.100\n- 172.16.9.101\n</code></pre> <p>This will create a config context with two keys: <code>ntp-servers</code> and <code>syslog-servers</code>.</p>"},{"location":"models/extras/gitrepository.html#local-configuration-contexts","title":"Local Configuration Contexts","text":"<p>Files in a <code>config_contexts/devices/</code> and/or <code>config_contexts/virtual_machines/</code> directory will be used to populate \"local\" config context data for individual devices or virtual machines. For these files, the device/VM name will always be taken from the filename, and the data in the file will be used precisely as-is (there is no need, or support, for a <code>_metadata</code> key in these files).</p> <pre><code>config_contexts/\n  devices/\n    rtr-01.yaml    # YAML data, local to the Device named \"rtr-01\"\nvirtual_machines/\n    vm001.json     # JSON data, local to the VirtualMachine named \"vm001\"\n</code></pre> <p>Note</p> <p>While virtual machines are always uniquely identified by their name, it is possible for devices associated with different sites and/or tenants to share an identical name. Currently, Nautobot is unable to automatically apply local config context via Git to devices that have a non-globally-unique name (or no name at all).</p>"},{"location":"models/extras/gitrepository.html#configuration-context-schemas","title":"Configuration Context Schemas","text":"<p>Config context schemas may be provided as JSON or YAML files located in <code>/config_context_schemas/</code>.</p> <p>Files in the root of the <code>/config_context_schemas/</code> directory will be imported as described below, with no special meaning attributed to their filenames (the name of the constructed config context schema will be taken from the <code>_metadata</code> within the file, not the filename). Similar to config context definitions, a single file may define a single config context schema or a list of such schemas - see examples below.</p> <pre><code>config_context_schemas/\n  context_schema_1.json\n  context_schema_2.yaml\n</code></pre> <p>When loading the schema, the key <code>_metadata</code> will be extracted from the loaded data and used to define the config context schema's metadata, while the actual config context data schema will be based on the key <code>data_schema</code>.</p> <p>JSON single example:</p> <pre><code>{\n\"_metadata\": {\n\"name\": \"Config Context Schema 1\",\n\"description\": \"Schema for defining first names.\"\n},\n\"data_schema\": {\n\"title\": \"Person\",\n\"properties\": {\n\"firstName\": {\n\"type\": \"string\",\n\"description\": \"The person's first name.\"\n}\n}\n}\n}\n</code></pre> <p>JSON list example:</p> <pre><code>[\n{\n\"_metadata\": {\n\"name\": \"Config Context Schema 1\",\n\"description\": \"Schema for defining first names.\"\n},\n\"data_schema\": {\n\"title\": \"Person\",\n\"properties\": {\n\"firstName\": {\n\"type\": \"string\",\n\"description\": \"The person's first name.\"\n},\n}\n}\n},\n{\n\"_metadata\": {\n\"name\": \"Config Context Schema 2\",\n\"description\": \"Schema for defining last names.\"\n},\n\"data_schema\": {\n\"title\": \"Person\",\n\"properties\": {\n\"lastName\": {\n\"type\": \"string\",\n\"description\": \"The person's last name.\"\n},\n}\n}\n},\n]\n</code></pre> <p>YAML single example:</p> <pre><code>---\n_metadata:\nname: \"Config Context Schema 1\"\ndescription: \"Schema for defining first names.\"\ndata_schema:\ntitle: \"Person\"\nproperties:\nfirstName:\ntype: \"string\"\ndescription: \"The person's first name\"\n</code></pre> <p>YAML list example:</p> <pre><code>---\n- _metadata:\nname: \"Config Context Schema 1\"\ndescription: \"Schema for defining first names.\"\ndata_schema:\ntitle: \"Person\"\nproperties:\nfirstName:\ntype: \"string\"\ndescription: \"The person's first name\"\n- _metadata:\nname: \"Config Context Schema 2\"\ndescription: \"Schema for defining last names.\"\ndata_schema:\ntitle: \"Person\"\nproperties:\nlastName:\ntype: \"string\"\ndescription: \"The person's last name\"\n</code></pre>"},{"location":"models/extras/gitrepository.html#export-templates","title":"Export Templates","text":"<p>Export templates may be provided as files located in <code>/export_templates/&lt;grouping&gt;/&lt;model&gt;/&lt;template_file&gt;</code>; for example, a JSON export template for Device records might be <code>/export_templates/dcim/device/mytemplate.json</code>.</p> <ul> <li>The name of a discovered export template will be presented in Nautobot as <code>&lt;repository name&gt;: &lt;filename&gt;</code>.</li> <li>The MIME type of a file rendered from a discovered export template will try to match the extension to <code>IANA's list</code>. If not detected, it will default to <code>text/plain</code>.</li> <li>The file extension of a file rendered from a discovered export template will match that of the template itself (so, in the above example, the extension would be <code>.json</code>)</li> </ul>"},{"location":"models/extras/graphqlquery.html","title":"GraphQL Queries","text":"<p>Nautobot provides the ability to store GraphQL queries in the database for simple maintaining and re-running.</p>"},{"location":"models/extras/graphqlquery.html#saved-query-views","title":"Saved Query Views","text":"<p>Navigate to Extensibility &gt; Data Management &gt; GraphQL Queries under the navigation bar. Located here are the views to manage saved query objects in the database.</p> <p>When queries get saved to the database from the form, the query is first loaded into GraphQL to ensure that syntax is correct. If there is an issue with the query, an error message is displayed below the textarea.</p>"},{"location":"models/extras/graphqlquery.html#graphiql-interface","title":"GraphiQL Interface","text":"<p>Modifications have been made to the GraphiQL page to allow the running, editing and saving of this model.</p> <p>A dropdown button called \"Queries\" has been added to the GraphiQL toolbar. This lists all saved queries in the database allowing the user to open them into GraphiQL.</p> <p>If a saved query has been opened, a button will appear next to the name inside the \"Queries\" dropdown called \"Save Changes\". This allows the user to save any changes to the model object.</p> <p>If the user wants to create a new query, at the bottom of the \"Queries\" tab there is an option called \"Save Current Query As...\". This will open a modal form to input data, such as the name of the query, and then save the query to the database.</p>"},{"location":"models/extras/graphqlquery.html#api-endpoint","title":"API Endpoint","text":"<p>An API endpoint has be created to allow running of saved queries through a simple POST request.</p> <ul> <li>Request: <code>POST</code></li> <li>URL: <code>{server_address}/api/extras/graphql-queries/{slug}/run/</code></li> <li>Content-type: <code>application/json</code></li> <li>Body: JSON of query variables <code>{\"variable_1\": \"value_1\", \"variable_2\": \"value_2\"}</code></li> </ul>"},{"location":"models/extras/imageattachment.html","title":"Image Attachments","text":"<p>Certain objects in Nautobot support the attachment of uploaded images. These will be saved to the Nautobot server and made available whenever the object is viewed.</p> <p>The location of where image attachments are stored can be customized using the <code>MEDIA_ROOT</code> setting in your <code>nautobot_config.py</code>.</p> <p>Currently, the following types of image attachments can be stored in Nautobot:</p> <ul> <li>Device type images are stored at <code>$MEDIA_ROOT/devicetype-images</code></li> <li>Generic image attachments are stored at <code>$MEDIA_ROOT/image-attachments</code></li> </ul>"},{"location":"models/extras/job.html","title":"Jobs","text":"<p>Added in version 1.3.0</p> <p>The Job data model provides a database representation of metadata describing a specific installed Job. It also serves as an anchor point for other data models (JobResult and ScheduledJob in particular) to link against.</p> <p>For any given Job record, most of its fields are populated initially from data defined in the source code of the corresponding job class. These fields may be explicitly overridden by editing the Job record via the Nautobot UI or REST API if desired. This is generally accomplished by setting a value for the desired field (e.g. <code>grouping</code>) and also setting the corresponding <code>override</code> flag (e.g. <code>grouping_override</code>) to <code>True</code>. If the <code>override</code> flag for a field is cleared (set back to <code>False</code>) then the corresponding flag will automatically revert to the original value defined by the Job class source code when the record is saved.</p> <p>Note</p> <p>For metadata fields that are not explicitly overridden, changes in the job source code will be detected and reflected in the corresponding database records when <code>nautobot-server migrate</code> or <code>nautobot-server post_upgrade</code> is next run; changes are not detected \"live\" while the server is running.</p> <p>For jobs stored in Git repositories, re-syncing the Git repository will also refresh the Job records corresponding to this repository.</p> <p>Records of this type store the following data as read-only (not modifiable via the UI or REST API):</p> <ul> <li>The source of the job (local installation, Git repository, plugin)</li> <li>The name of the module containing the Job</li> <li>The name of the Job class</li> <li>Whether the job is installed presently</li> <li>Whether the job is a Job Hook Receiver</li> <li>Whether the job is a Job Button Receiver</li> </ul> <p>Note</p> <p>As presently implemented, after a job is uninstalled, when the database is next refreshed, the corresponding Job database record will not be deleted - only its <code>installed</code> flag will be set to False. This allows existing <code>JobResult</code> and <code>ScheduledJob</code> records to continue to reference the Job that they originated from.</p> <p>An administrator or sufficiently privileged user can manually delete uninstalled Job records if desired, though this will result in the foreign-key from the corresponding <code>JobResult</code> and <code>ScheduledJob</code> records (if any exist) becoming null. In any case, for tracking and auditing purposes, deleting a Job does not automatically delete its related <code>JobResult</code> and <code>ScheduledJob</code> records.</p> <p>For any Job that is loaded into Nautobot, the Job must be enabled to run. See Enabling Jobs for Running for more details.</p>"},{"location":"models/extras/jobbutton.html","title":"Job Buttons","text":"<p>Added in version 1.5.14</p> <p>Job Buttons are predefined buttons that allow users to run jobs directly from within Nautobot object views. It uses the object where the button was pressed as the only input to the job. These are helpful when you want to start a job that requires minimal or no input without having to use the standard job form. For example, you may have a job that only requires a user to select a device. Instead, they can now go to that device in the web UI and click the associated Job Button instead.</p> <p>Job Buttons can be created in web UI located in the navbar under Jobs &gt; Job Buttons. Each button can be associated with multiple Nautobot object types (site, device, prefix, etc.) and will be displayed on all of the associated object detail views. The text displayed on the button supports Jinja2 templating which allows for using context data to dynamically update or even be hidden under certain conditions.</p> <p>The buttons appear at the top right corner of an object's individual detail page for each object type they are associated to. They can be either individual buttons or grouped together in a dropdown for better organization. Buttons will be sorted from left to right based on their <code>weight</code> with the lowest <code>weight</code> button on the left. Any groups of buttons will be displayed to the right of all ungrouped buttons. Group dropdown buttons will inherit the button class from the button with the lowest <code>weight</code> in the group and will be sorted from top to bottom with the lowest <code>weight</code> button on top.</p>"},{"location":"models/extras/jobbutton.html#configuration","title":"Configuration","text":"<ul> <li>Name - A unique name for the Job Button.</li> <li>Object type(s) - The type or types of Nautobot object that the button will be associated to.</li> <li>Text - The text that will be displayed on the button.</li> <li>Job - The Job Button Receiver that this button will run.</li> <li>Weight - The number used for determining the order the buttons will appear.</li> <li>Group - The name of the dropdown group to add this button into (optional).</li> <li>Button Class - The button CSS class, which dictates the color.</li> <li>Confirmation - Should the button pop up a confirmation dialog before running.</li> </ul> <p>Warning</p> <p>As you can see, there is no <code>commit</code> option for a Job Button like there is for a normal Job. All Job Buttons will run with <code>commit=True</code> implicitly.</p> <p></p> <p>For any Job that is loaded into Nautobot, the Job must be enabled to run. See Enabling Jobs for Running for more details.</p>"},{"location":"models/extras/jobbutton.html#required-permissions","title":"Required Permissions","text":"<p>Note</p> <p>In order to run any job via a Job Button, a user must be assigned the <code>extras.run_job</code> as well as the <code>extras.run_jobbutton</code> permissions. This is achieved by assigning the user (or group) a permission on the <code>extras &gt; job</code> and <code>extras &gt; jobbutton</code> objects and specifying the <code>run</code> action in the Additional actions section. Any user lacking these permissions may still see the button on the respective page(s) - if not using conditional rendering - but they will be disabled.</p>"},{"location":"models/extras/jobbutton.html#context-data","title":"Context Data","text":"<p>The following context data is available within the template when rendering a Job Button's text.</p> Variable Description <code>obj</code> The Nautobot object being displayed <code>debug</code> A boolean indicating whether debugging is enabled <code>request</code> The current WSGI request <code>user</code> The current user (if authenticated) <code>perms</code> The permissions assigned to the user <p>All built-in Jinja2 filters are available and it's also possible to develop and register custom Jinja2 filters.</p>"},{"location":"models/extras/jobbutton.html#conditional-rendering","title":"Conditional Rendering","text":"<p>Only buttons which render with non-empty text are included on the page. You can employ conditional Jinja2 logic to control the conditions under which a button gets rendered.</p> <p>For example, if you only want to display a button for active devices, you could set the button text to</p> <pre><code>{% if obj.status.slug == 'active' %}Provision{% endif %}\n</code></pre> <p>The button will not appear when viewing a device with any status other than <code>Active</code>.</p> <p>As another example, if you wanted to show only devices belonging to a certain manufacturer, you could do something like this:</p> <pre><code>{% if obj.device_type.manufacturer.name == 'Cisco' %}Provision{% endif %}\n</code></pre> <p>The button will only appear when viewing a device with a manufacturer name of <code>Cisco</code>.</p> <p>As a last example, you can hide the button for users that lack the proper permissions to run a job like this:</p> <pre><code>{% if perms.extras.run_job %}Provision{% endif %}\n</code></pre> <p>The button will only appear if they have the permission to run jobs.</p> <p></p> <p>Note</p> <p>To access custom fields of an object within a template, use the <code>cf</code> attribute. For example, <code>{{ obj.cf.color }}</code> will return the value (if any) for a custom field named <code>color</code> on <code>obj</code>.</p>"},{"location":"models/extras/jobbutton.html#job-button-receivers","title":"Job Button Receivers","text":"<p>Job Buttons are only able to initiate a specific type of job called a Job Button Receiver. These are jobs that subclass the <code>nautobot.extras.jobs.JobButtonReceiver</code> class. Job Button Receivers are similar to normal jobs except they are hard coded to accept only <code>object_pk</code> and <code>object_model_name</code> variables. Job Button Receivers are hidden from the jobs listing UI by default but otherwise function similarly to other jobs. The <code>JobButtonReceiver</code> class only implements one method called <code>receive_job_button</code>.</p> <p>Note</p> <p>Job Button Receivers still need to be enabled through the web UI before they can be used just like other Jobs.</p>"},{"location":"models/extras/jobbutton.html#the-receive_job_button-method","title":"The <code>receive_job_button()</code> Method","text":"<p>All <code>JobButtonReceiver</code> subclasses must implement a <code>receive_job_button()</code> method. This method accepts only one argument:</p> <ol> <li><code>obj</code> - An instance of the object where the button was pressed</li> </ol>"},{"location":"models/extras/jobbutton.html#example-job-button-receiver","title":"Example Job Button Receiver","text":"<pre><code>from nautobot.extras.jobs import JobButtonReceiver\nclass ExampleSimpleJobButtonReceiver(JobButtonReceiver):\nclass Meta:\nname = \"Example Simple Job Button Receiver\"\ndef receive_job_button(self, obj):\nself.log_info(obj=obj, message=\"Running Job Button Receiver.\")\n# Add job logic here\n</code></pre>"},{"location":"models/extras/jobbutton.html#job-buttons-for-multiple-types","title":"Job Buttons for Multiple Types","text":"<p>Since Job Buttons can be associated to multiple object types, it would be trivial to create a Job that can change what it runs based on the object type.</p> <pre><code>from nautobot.dcim.models import Device, Site\nfrom nautobot.extras.jobs import JobButtonReceiver\nclass ExampleComplexJobButtonReceiver(JobButtonReceiver):\nclass Meta:\nname = \"Example Complex Job Button Receiver\"\ndef _run_site_job(self, obj):\nself.log_info(obj=obj, message=\"Running Site Job Button Receiver.\")\n# Run Site Job function\ndef _run_device_job(self, obj):\nself.log_info(obj=obj, message=\"Running Device Job Button Receiver.\")\n# Run Device Job function\ndef receive_job_button(self, obj):\nuser = self.request.user\nif isinstance(obj, Site):\nif not user.has_perm(\"dcim.add_site\"):\nself.log_failure(obj=obj, message=f\"User '{user}' does not have permission to add a Site.\")\nelse:\nself._run_site_job(obj)\nif isinstance(obj, Device):\nif not user.has_perm(\"dcim.add_device\"):\nself.log_failure(obj=obj, message=f\"User '{user}' does not have permission to add a Device.\")\nelse:\nself._run_device_job(obj)\nself.log_failure(obj=obj, message=f\"Unable to run Job Button for type {type(obj).__name__}.\")\n</code></pre>"},{"location":"models/extras/jobhook.html","title":"Job Hooks","text":"<p>Added in version 1.4.0</p> <p>A Job Hook is a mechanism for automatically starting a job when an object is changed. Job Hooks are similar to webhooks except that an object change event initiates a <code>JobHookReceiver</code> job instead of a web request. Job hooks are configured in the web UI under Jobs &gt; Job Hooks.</p>"},{"location":"models/extras/jobhook.html#configuration","title":"Configuration","text":"<ul> <li>Name - A unique name for the job hook.</li> <li>Content type(s) - The type or types of Nautobot object that will trigger the job hook.</li> <li>Job - The job hook receiver that this job hook will run.</li> <li>Enabled - If unchecked, the job hook will be inactive.</li> <li>Events - A job hook may trigger on any combination of create, update, and delete events. At least one event type must be selected.</li> </ul> <p>For any Job that is loaded into Nautobot, the Job must be enabled to run. See Enabling Jobs for Running for more details.</p>"},{"location":"models/extras/jobhook.html#job-hook-receivers","title":"Job Hook Receivers","text":"<p>Job Hooks are only able to initiate a specific type of job called a Job Hook Receiver. These are jobs that subclass the <code>nautobot.extras.jobs.JobHookReceiver</code> class. Job hook receivers are similar to normal jobs except they are hard coded to accept only an <code>object_change</code> variable. Job Hook Receivers are hidden from the jobs listing UI by default but otherwise function similarly to other jobs. The <code>JobHookReceiver</code> class only implements one method called <code>receive_job_hook</code>.</p> <p>Warning</p> <p>Requiring approval for execution of Job Hooks by setting the <code>Meta.approval_required</code> attribute to <code>True</code> on your <code>JobHookReceiver</code> subclass is not supported. The value of this attribute will be ignored. Support for requiring approval of Job Hooks will be added in a future release.</p> <p>Important</p> <p>To prevent negatively impacting system performance through an infinite loop, a change that was made by a <code>JobHookReceiver</code> job will not trigger another <code>JobHookReceiver</code> job to run.</p>"},{"location":"models/extras/jobhook.html#example-job-hook-receiver","title":"Example Job Hook Receiver","text":"<pre><code>from nautobot.extras.choices import ObjectChangeActionChoices\nfrom nautobot.extras.jobs import JobHookReceiver\nclass ExampleJobHookReceiver(JobHookReceiver):\ndef receive_job_hook(self, change, action, changed_object):\n# return on delete action\nif action == ObjectChangeActionChoices.ACTION_DELETE:\nreturn\n# log diff output\nsnapshots = change.get_snapshots()\nself.log_info(f\"DIFF: {snapshots['differences']}\")\n# validate changes to serial field\nif \"serial\" in snapshots[\"differences\"][\"added\"]:\nold_serial = snapshots[\"differences\"][\"removed\"][\"serial\"]\nnew_serial = snapshots[\"differences\"][\"added\"][\"serial\"]\nself.log_info(f\"{changed_object} serial has been changed from {old_serial} to {new_serial}\")\n# Check the new serial is valid and revert if necessary\nif not self.validate_serial(new_serial):\nchanged_object.serial = old_serial\nchanged_object.save()\nself.log_info(f\"{changed_object} serial {new_serial} was not valid. Reverted to {old_serial}\")\nself.log_success(message=f\"Serial validation completed for {changed_object}\")\ndef validate_serial(self, serial):\n# add business logic to validate serial\nreturn False\n</code></pre>"},{"location":"models/extras/jobhook.html#the-receive_job_hook-method","title":"The <code>receive_job_hook()</code> Method","text":"<p>All <code>JobHookReceiver</code> subclasses must implement a <code>receive_job_hook()</code> method. This method accepts three arguments:</p> <ol> <li><code>change</code> - An instance of <code>nautobot.extras.models.ObjectChange</code></li> <li><code>action</code> - A string with the action performed on the changed object (\"create\", \"update\" or \"delete\")</li> <li><code>changed_object</code> - An instance of the object that was changed, or <code>None</code> if the object has been deleted</li> </ol>"},{"location":"models/extras/joblogentry.html","title":"Job Log Entry","text":"<p>Added in version 1.2.0</p> <p>Log messages from Jobs are stored in as <code>JobLogEntry</code> objects. This allows more performant querying of log messages and even allows viewing of logs while the job is still running.</p> <p>Records of this type store the following data:</p> <ul> <li>A reference to the <code>JobResult</code> object that created the log.</li> <li>Timestamps indicating when the log message was created.</li> <li>The logging level of the log message.</li> <li>The log message.</li> <li>If provided, the string format of the logged object and it's absolute url.</li> </ul> <p>Added in version 1.2.2</p> <p>REST API and GraphQL support for querying <code>JobLogEntry</code> records were added.</p>"},{"location":"models/extras/jobresult.html","title":"Job Results","text":"<p>Nautobot provides a generic data model for storing and reporting the results of background tasks, such as the execution of custom jobs or the synchronization of data from a Git repository.</p> <p>Records of this type store the following data:</p> <ul> <li>A reference to the type and name of the object or feature that the task was associated with</li> <li>A reference to the user who initiated the task</li> <li>The arguments that were passed to the task (allowing for later queuing of the task for re-execution if desired)</li> <li>Timestamps indicating when the task was created and when it completed</li> <li>An overall status such as \"pending\", \"running\", \"errored\", or \"completed\".</li> <li>A block of structured data (often rendered as JSON); Any return values from the <code>.run()</code> and any <code>test</code> methods go to the key <code>output</code>. In addition any Job or plugin using the <code>JobResult</code> model can store arbitrary structured data here if needed. (Note that prior to Nautobot 1.2, job log records were stored in this field; they are now stored as distinct <code>JobLogEntry</code> records instead.)</li> </ul>"},{"location":"models/extras/note.html","title":"Note","text":"<p>Added in version 1.4.0</p> <p>Notes provide a place for you to store notes or general information on an object, such as a Device, that may not require a specific field for. This could be a note on a recent upgrade, a warning about a problematic device, or the reason the Rack was marked with the Status <code>Retired</code>.</p> <p>The note field supports Markdown Basic Syntax.</p>"},{"location":"models/extras/relationship.html","title":"Relationships","text":"<p>Sometimes it is desirable to create a new kind of relationship between one (or more) objects in your source of truth to reflect business logic or other relationships that may be useful to you but that haven't been defined. This is where the Relationships feature comes in: like defining custom fields to hold attributes specific to your use cases, relationships define specific links between objects that might be specific to your network or data.</p> <p>To create a relationship, from the top-level navigation menu select Extensibility &gt; Data Management &gt; Relationships</p> <p>Tip</p> <p>Because relationship information can be included in the REST API and in GraphQL, we strongly recommend that when defining a relationship, you provide a slug that contains underscores rather than dashes (<code>my_relationship_slug</code>, not <code>my-relationship-slug</code>), as some features may not work optimally if dashes are included in the slug.</p>"},{"location":"models/extras/relationship.html#relationship-types","title":"Relationship Types","text":"<ul> <li>Many-to-many - where both sides of the relationship connection can be connected to multiple objects. For example, VLANs can be connected to multiple devices and devices will have multiple VLANs.</li> <li>One-to-many - where one side of the connection can only have one object. For example, where a controller has many supplicants like FEX and parent switch. A FEX can be uplinked to one parent switch (in most cases), but the parent switch can have many FEX.</li> <li>One-to-one - where there can be only one object on either side of the relationship. For example, an IP address serving as a router-id for a device. Each device has at most one router-id, and each IP address can be a router-id for at most one device.</li> </ul> <p>Added in version 1.2.0</p> <p>Additionally, there are two symmetric relationship types that can be used when defining a relationship between objects of the same type. These relationship types treat the two sides of a relationship as interchangeable (much like the A/Z sides of a circuit, or the endpoints of a cable) rather than distinguishing between the source and destination of a relationship as the non-symmetric relationship types above do.</p> <ul> <li>Symmetric Many-to-many - as in Many-to-many, but acting more as an undirected graph of similar objects. For example, this could be used to define a set of devices participating in a routing topology, where each device has some number of peers and there's no distinction between source and destination peers.</li> <li>Symmetric One-to-one - as in One-to-one, but defining a relationship between exactly two objects of the same type. For example, a HSRP/VRRP pair of redundant devices, where each device has exactly one peer device.</li> </ul> <p>Note</p> <p>A symmetric many-to-many relationship can be, but is not necessarily, a complete graph or full mesh. For example, in the routing topology example above, if Device A and Device B are peers, and Device B and Device C are peers, this does not automatically imply a relationship between Devices A and C -- they might or might not also be peers, depending on how you define and populate the specific associations for this relationship.</p>"},{"location":"models/extras/relationship.html#required-relationships","title":"Required Relationships","text":"<p>Added in version 1.5.0</p> <p>Relationships can be marked as being required. By default, relationships are not marked as being required.</p> <p>To mark a relationship as being required, select \"Source objects MUST implement this relationship\" or conversely \"Destination objects MUST implement this relationship\" from the \"Required on\" field when editing or creating a relationship:</p> <ul> <li>If \"Destination objects MUST implement this relationship\" is selected, objects of the type selected in \"Destination Type\" will enforce this relationship when they are created or edited.</li> <li>If \"Source objects MUST implement this relationship\" is selected, objects of the type selected in \"Source Type\" will enforce this relationship when they are created or edited.</li> </ul> <p>Required relationships are enforced in the following scenarios:</p> <ul> <li>Creating or editing an object via the API or the UI</li> <li>Bulk creating objects via the API</li> <li>Bulk editing objects via the API or the UI</li> </ul>"},{"location":"models/extras/relationship.html#relationship-filters","title":"Relationship Filters","text":"<p>Filters can be defined to restrict the type or selection of objects for either side of the connection.</p> <p>An important note is that the filters have to be defined in FilterSet rather than QuerySet format. In practice this means that you can use any of the filters that are valid in the REST API for a given object type, but cannot necessarily use complex nested attribute lookups (such as <code>interfaces__ip_addresses__prefix_length</code> on a Device, for example).</p> <p>As an example, let's create a relationship between Circuits and Devices. In our situation we only would terminate Circuits on Devices with the Device Role of <code>edge</code>.</p> <p>To prevent the Circuit Relationship from showing up on any other Device, use a JSON filter to limit the Relationship to only Devices with Device Role whose slug is <code>edge</code>:</p> <pre><code>{\n\"role\": [\n\"edge\"\n]\n}\n</code></pre> <p>Note</p> <p>There are a few ways to tell what attributes are available to filter on for a given object. In the case of the Device object used in the example, the user could:</p> <ul> <li>look at the code <code>nautobot/dcim/filters.py</code> -&gt; <code>DeviceFilterSet</code> class (available options there include <code>manufacturer_id</code>, <code>manufacturer</code>, etc)</li> <li>check the filter options available in the REST API: <code>https://&lt;server-name&gt;/api/docs</code>, and in this case checking the <code>dcim_devices_list</code> API endpoint for the parameter names</li> </ul> <p>For context, here is an image of the entire Relationship:</p> <p></p> <p>Now, the Circuit Relationship field will show up on a Device with an <code>edge</code> role:</p> <p></p> <p>The Circuit Relationship field will not show up on a Device with a role <code>leaf</code>:</p> <p></p>"},{"location":"models/extras/relationship.html#relationship-labels","title":"Relationship Labels","text":"<p>Relationship connections can be labeled with a friendly name so that when they are displayed in the GUI, they will have a more descriptive or friendly name. From the Devices/Circuits example above, you might label the relationship so that on the Device side the connection appears as 'Terminated Circuits' and on the Circuit side the connection appears as 'Terminating Devices'.</p>"},{"location":"models/extras/relationship.html#options","title":"Options","text":"<p>It's also possible to hide the relationship from either side of the connection.</p>"},{"location":"models/extras/relationship.html#creating-new-relationships","title":"Creating New Relationships","text":"<p>Relationships can be added through the UI under Extensibility &gt; Relationships</p> <p>Each relationship must have a Name, Slug, Type, Source Object(s), and Destination Object(s). Optionally, Source Labels, Source Filters, Destination Labels, and Destination Filters may be configured.</p> <p>Once a new relationship is added, the Relationship configuration section will appear under that device in the UI edit screen. Once a specific instance relationship has been configured for the object, that new relationship will appear under the Relationship section heading when viewing the object.</p> <p>When creating a relationship, if \"Move to Advanced tab\" is checked, this relationship won't appear on the object's main detail tab in the UI, but will appear in the \"Advanced\" tab. This is useful when the requirement is to hide this relationship from the main detail tab when, for instance, it is only required for machine-to-machine communication and not user consumption.</p>"},{"location":"models/extras/relationship.html#rest-api","title":"REST API","text":"<p>Relationships are fully supported by the API.</p>"},{"location":"models/extras/relationship.html#adding-a-new-type-of-relationship","title":"Adding a new type of Relationship","text":"<p>The API endpoint for relationship creation is <code>/extras/relationships/</code></p> <p>From our many to many example above, we would use the following data to create the relationship.</p> <pre><code>{\n\"name\": \"Device VLANs\",\n\"slug\": \"device-vlans\",\n\"type\": \"many-to-many\",\n\"source_type\": \"ipam.vlan\",\n\"destination_type\": \"dcim.device\"\n}\n</code></pre>"},{"location":"models/extras/relationship.html#configuring-the-relationship-between-objects","title":"Configuring the Relationship between Objects","text":""},{"location":"models/extras/relationship.html#via-object-endpoints","title":"Via Object Endpoints","text":"<p>Added in version 1.4.0</p> <p>To get object relationships and associations from the REST API, you can query any object endpoint with the <code>?include=relationships</code> query parameter included, for example <code>GET /api/dcim/devices/f472bb77-7f56-4e79-ac25-2dc73eb63924/?include=relationships</code>. The API response will include a nested dictionary of relationships and associations applicable to the object(s) retrieved.</p> <p>Similarly, you can update the relationship associations for a given object via an HTTP <code>POST</code> or <code>PATCH</code> request, generally by including the nested key <code>[\"relationships\"][&lt;relationship-slug&gt;][\"source\"|\"destination\"|\"peer\"][\"objects\"]</code> with a list of objects to associate.</p> <p>For more details on this feature, refer to the REST API documentation.</p>"},{"location":"models/extras/relationship.html#via-relationship-associations-endpoint","title":"Via Relationship-Associations Endpoint","text":"<p>Alternatively, relationship associations may be configured by sending a request to <code>/extras/relationship-associations/</code> like the following:</p> <p>Here we specify the IDs of each object. We specify the UUID of each object in their respective fields.</p> <pre><code>{\n\"relationship\": \"bff38197-26ed-4bbd-b637-3e688acf361c\",\n\"source_type\": \"ipam.vlan\",\n\"source_id\": \"89588629-2d70-45ce-9e20-f6b159b41b0c\",\n\"destination_type\": \"dcim.device\",\n\"destination_id\": \"6e8e72da-ce6e-468d-90f9-b4473d449db7\"\n}\n</code></pre> <p>In the relationship field, you may specify a dictionary of object attributes instead:</p> <pre><code>{\n\"relationship\": {\n\"slug\": \"device-vlans\"\n},\n\"source_type\": \"ipam.vlan\",\n\"source_id\": \"89588629-2d70-45ce-9e20-f6b159b41b0c\",\n\"destination_type\": \"dcim.device\",\n\"destination_id\": \"6e8e72da-ce6e-468d-90f9-b4473d449db7\"\n}\n</code></pre>"},{"location":"models/extras/secret.html","title":"Secrets","text":"<p>Added in version 1.2.0</p> <p>For security reasons, Nautobot generally does not store sensitive secrets (device access credentials, systems-integration API tokens, etc.) in its own database. There are other approaches and systems better suited to this purpose, ranging from simple solutions such as process-specific environment variables or restricted-access files on disk, all the way through to dedicated systems such as Hashicorp Vault or AWS Secrets Manager.</p> <p>However, any number of Nautobot features (including, but not limited to, device access via NAPALM, Git repository access, custom Jobs, and various plugins seeking to integrate with third-party systems) do need the ability to retrieve and make use of such secrets. Towards that end, Nautobot provides a <code>Secret</code> database model. This model does not store the secret value itself, but instead defines how Nautobot can retrieve the secret value as and when it is needed. By using this model as an abstraction of the underlying secrets storage implementation, this makes it possible for any Nautobot feature to make use of secret values without needing to know or care where or how the secret is actually stored.</p> <p>Secrets can be grouped and assigned a specific purpose as members of a Secrets Group, which can then be attached to a Git repository, device, or other data model as needed for a given purpose.</p>"},{"location":"models/extras/secret.html#secrets-providers","title":"Secrets Providers","text":"<p>Each Secret is associated with a secrets provider (not to be confused with a circuit provider), which provides the functionality needed to retrieve a specific value from a particular source of secrets. Each secrets provider also defines the set of parameters that a given Secret must specify in order to retrieve a secret value from this provider. Nautobot includes the following built-in secrets providers:</p> <ul> <li>Environment Variable - for retrieving a secret value defined in an environment variable; Secrets using this provider must specify the <code>variable</code> name to retrieve.</li> <li>Text File - for retrieving a secret value stored in a text file; Secrets using this provider must specify the absolute <code>path</code> of the file to retrieve.</li> </ul> <p>Changed in version 1.4.3</p> <p>When using the Text File secrets provider, any leading and trailing whitespace or newlines will be stripped.</p> <p>When defining a new Secret, you will need to select the desired secrets provider and then fill in the specific parameters required by that provider in order to have a completely specified, usable Secret record.</p> <p>Tip</p> <p>Nautobot plugins can also implement and register additional secrets providers as desired to support other sources such as Hashicorp Vault or AWS Secrets Manager.</p>"},{"location":"models/extras/secret.html#templated-secret-parameters","title":"Templated Secret Parameters","text":"<p>In some cases you may have a collection of closely related secrets values that all follow a similar retrieval pattern. For example you might have a directory of text files each containing the unique password for a specific device, or have defined a set of environment variables providing authentication tokens for each different Git repository. In this case, to reduce the need for repeated data entry, Nautobot provides an option to use Jinja2 templates to dynamically alter the provider parameters of a given Secret based on the requesting object. The relevant object is passed to Jinja2 as <code>obj</code>. Thus, for example:</p> <ul> <li>A \"Device Password\" secret could use the Text File provider and specify the file <code>path</code> as <code>\"/opt/nautobot/device_passwords/{{ obj.site.slug }}/{{ obj.name }}.txt\"</code>, so that a device <code>csr1</code> at site <code>nyc</code> would be able to retrieve its password value from <code>/opt/nautobot/device_passwords/nyc/csr1.txt</code>.</li> <li>A \"Git Token\" secret could use the Environment Variable provider and specify the <code>variable</code> name as <code>\"GIT_TOKEN_{{ obj.slug | replace('-', '_') | upper }}\"</code>, so that a Git repository <code>golden-config</code> would be able to retrieve its token value from <code>$GIT_TOKEN_GOLDEN_CONFIG</code>.</li> </ul> <p>Note</p> <p>To access custom fields of an object within a template, use the <code>cf</code> attribute. For example, <code>{{ obj.cf.color }}</code> will return the value (if any) for a custom field named <code>color</code> on <code>obj</code>.</p>"},{"location":"models/extras/secretsgroup.html","title":"Secrets Groups","text":"<p>Added in version 1.2.0</p> <p>A Secrets Group provides a way to collect and assign a purpose to one or more Secrets. The Secrets Group can then be attached to any object that needs to reference and make use of these Secrets, such as a Git repository needing a username/token to authenticate to a private GitHub repository, or a device using a group of Secrets to drive its NAPALM integration.</p> <p>When creating or editing a Secrets Group, you can assign any number of defined Secrets to this group, assigning each secret an access type and a secret type that are unique within the context of this group. Some examples of how a Secrets Group might be populated for use by a given feature:</p> Feature Access Type Secrets Type(s) Git private repository <code>HTTP(S)</code> <code>Token</code>, possibly also <code>Username</code> Device NAPALM integration <code>Generic</code> <code>Username</code>, <code>Password</code>, possibly an enable <code>Secret</code> <p>A Secrets Group is not limited to containing secrets of a single access type either - for example, a plugin that supports both NETCONF and gNMI protocols to interact with a device could be able to make use of a Secrets Group containing distinct secrets for each protocol.</p>"},{"location":"models/extras/status.html","title":"Statuses","text":"<p>Nautobot provides the ability for custom statuses to be defined within an organization to be used on various objects to facilitate business workflows around object statuses.</p>"},{"location":"models/extras/status.html#status-basics","title":"Status Basics","text":"<p>The value of a <code>status</code> field on a model (such as <code>Device.status</code>) will be represented as a <code>nautobot.extras.models.Status</code> object.</p> <p>When created, a <code>Status</code> can be associated to one or more model content-types using a many-to-many relationship. The relationship to each model is referenced across all user interfaces using the <code>{app_label}.{model}</code> naming convention (e.g. <code>dcim.device</code>).</p> <p>Statuses may be managed by navigating to Organization &gt; Statuses in the navigation menu.</p>"},{"location":"models/extras/status.html#importing-objects-with-a-status-field","title":"Importing Objects with a <code>status</code> Field","text":"<p>When using CSV import to reference a <code>status</code> field on an object, the <code>Status.slug</code> field is used.</p> <p>For example, the default Active status has a slug of <code>active</code>, so the <code>active</code> value would be used for import.</p>"},{"location":"models/extras/status.html#customizing-statuses","title":"Customizing Statuses","text":"<p>With Status as a model, statuses can be customized. This can be as simple as removing the option to configure an existing status with a particular model or to remove that status entirely.</p> <p>The real benefit of custom status is adding your own organization status and process names directly to Nautobot. An example of custom statuses would be including End of Life information for your devices. A simple End of Life status could be EOx for a device hitting any end of life milestone; more specific statuses like EOSS (End of Software Support), EOS (End of Sale), and Pre-EOS (for 1 year prior to EOS) to be more specific. Once the end of life information is tracked as a status, developing a report for Devices that have reached EOSS is trivial.</p> <p>Another example for sites is tracking the nature of a specific site's installation status. A site that is under construction could received a status like 'Pre Production'.</p> <p>For Virtual Machines, if utilizing OpenStack, statuses in Nautobot could be customized to reflect the specific Nova virtual machine states.</p>"},{"location":"models/extras/status.html#status-internals","title":"Status Internals","text":"<p>Warning</p> <p>The section below is largely intended for developers who may need to create data models of their own that implement a <code>status</code> field. Proceed at your own risk!</p> <p>Any model that is intended to have a <code>status</code> field must inherit from <code>nautobot.extras.models.statuses.StatusModel</code>. This abstract model will add an <code>nautobot.extras.models.statuses.StatusField</code> to the model. The abstract base will automatically assign a <code>related_name</code> for the reverse relationship back to the inheriting model's name (e.g. <code>devices</code>).</p>"},{"location":"models/extras/status.html#statusfield-model-field","title":"<code>StatusField</code> model field","text":"<p>The <code>StatusField</code> field type subclass of a <code>django.db.models.ForeignKey</code> with extra extensions to have it behave like field with choices. Because this pattern is replacing hard-coded <code>ChoiceSets</code> (such as <code>dcim.choices.DeviceStatusChoices</code>) with database objects, it is not possible to use the <code>choices=</code> argument on a foreign key.</p> <p>Because of this, <code>StatusField</code> implements a <code>.contribute_to_class()</code> method which will automatically bind <code>.get_status_display()</code> and <code>.get_status_color()</code> methods to any model that implements this field, so that these do not need to be manually defined on each model.</p> <p>This model field also emits its own form field to eliminate the requirement for a form field to be explicitly added to model forms.</p>"},{"location":"models/extras/status.html#statusfilter-filter-field","title":"<code>StatusFilter</code> filter field","text":"<p>Any filter that is intended to have a <code>status</code> field must inherit from <code>nautobot.extras.filters.StatusModelFilterSetMixin</code>. This will add a <code>nautobot.extras.filters.StatusFilter</code> to the filter, which allows filtering by the <code>name</code> of the status.</p>"},{"location":"models/extras/status.html#form-fields","title":"Form fields","text":"<p>Any model form that is intended to have a <code>status</code> field must inherit from one of three mixins, depending on the use-case:</p> <ul> <li><code>nautobot.extras.forms.StatusModelFilterFormMixin</code> should be used to add a non-required, multiple-choice <code>status</code> filter field to UI filter forms. This multiple-choice field allows for multiple status values to be selected for filtering objects in list views in the web UI.</li> <li><code>nautobot.extras.forms.StatusModelBulkEditFormMixin</code> should be used to add a non-required <code>status</code> form field to a an object's model form. This field constrains status choices eligible to the object type being edited.</li> </ul> <p>Changed in version 1.4.0</p> <p>In prior Nautobot versions these mixins were named <code>StatusFilterFormMixin</code> and <code>StatusBulkEditFormMixin</code>; the old names are still available as aliases but will be removed in a future major release.</p> <ul> <li>FIXME: CSV import forms</li> </ul>"},{"location":"models/extras/status.html#statusserializerfield-serializer-field","title":"<code>StatusSerializerField</code> serializer field","text":"<p>Any serializer that is intended to have a <code>status</code> field must inherit from <code>nautobot.extras.api.serializers.StatusModelSerializerMixin</code>. This adds an <code>nautobot.extras.api.fields.StatusSerializerField</code> to the serializer.</p> <p>The <code>StatusSerializerField</code> is a writable slug-related choice field that allows writing to the field using the <code>name</code> value of the status (e.g. <code>\"active\"</code>). Writing to this field is normalized to always be converted to lowercase.</p>"},{"location":"models/extras/status.html#table-field","title":"Table field","text":"<p>If you wish for a table to include a <code>status</code> field, your table must inherit from <code>nautobot.extras.tables.StatusTableMixin</code>. This includes a <code>ColorColumn</code> on the table.</p>"},{"location":"models/extras/status.html#status-object-integrations","title":"Status object integrations","text":"<p>To fully integrate a model to include a <code>status</code> field, assert the following:</p>"},{"location":"models/extras/status.html#model","title":"Model","text":"<ul> <li>The model must inherit from <code>nautobot.extras.models.statuses.StatusModel</code></li> <li>Decorate the model class with <code>@extras_features('statuses')</code> (<code>from nautobot.extras.utils import extras_features</code>)</li> </ul>"},{"location":"models/extras/status.html#forms","title":"Forms","text":"<ul> <li>Generic model forms will automatically include a <code>StatusField</code></li> <li>CSV model import forms must inherit from <code>nautobot.extras.forms.StatusModelCSVFormMixin</code></li> <li>Bulk edit model forms must inherit from <code>nautobot.extras.forms.StatusModelBulkEditFormMixin</code></li> <li>Filter forms must inherit from <code>nautobot.extras.forms.StatusModelFilterFormMixin</code></li> </ul> <p>Changed in version 1.4.0</p> <p>In prior Nautobot releases the latter two mixins were named <code>StatusBulkEditFormMixin</code> and <code>StatusFilterFormMixin</code> respectively; the old names are still available as aliases but will be removed in a future major release.</p>"},{"location":"models/extras/status.html#filters","title":"Filters","text":"<ul> <li>Filtersets for your model must inherit from <code>nautobot.extras.filters.StatusModelFilterSetMixin</code></li> </ul>"},{"location":"models/extras/status.html#serializers","title":"Serializers","text":"<ul> <li>Serializers for your model must inherit from <code>nautobot.extras.api.serializers.StatusModelSerializerMixin</code></li> </ul>"},{"location":"models/extras/status.html#tables","title":"Tables","text":"<ul> <li>The table class for your model must inherit from <code>nautobot.extras.tables.StatusTableMixin</code></li> </ul>"},{"location":"models/extras/tag.html","title":"Tags","text":"<p>Tags are user-defined labels which can be applied to a variety of objects within Nautobot. They can be used to establish dimensions of organization beyond the relationships built into Nautobot. For example, you might create a tag to identify a particular ownership or condition across several types of objects.</p> <p>Added in version 1.3.0</p> <p>When created, a <code>Tag</code> can be associated to one or more model content-types using a many-to-many relationship. The tag will then apply only to models belonging to those associated content-types.</p> <p>Each tag has a name, label, color, content-types and a URL-friendly slug. For example, the slug for a tag named \"Dunder Mifflin, Inc.\" would be <code>dunder-mifflin-inc</code>. The slug is generated automatically and makes tags easier to work with as URL parameters. Each tag can also be assigned a description indicating its purpose.</p> <p>Objects can be filtered by the tags they have applied. For example, the following API request will retrieve all devices tagged as \"monitored\":</p> <pre><code>GET /api/dcim/devices/?tag=monitored\n</code></pre> <p>The <code>tag</code> filter can be specified multiple times to match only objects which have all of the specified tags assigned:</p> <pre><code>GET /api/dcim/devices/?tag=monitored&amp;tag=deprecated\n</code></pre> <p>Tags can also be created in the ORM or REST API of Nautobot. The following HEX color values in the table below correspond to the dropdown selection when building tags using the UI. Any HEX color value can be used with the ORM or REST API, but a non-standard color will cause some inconsistency when editing the tag via the UI.</p> Color HEX value Dark Red aa1409 Red f44336 Pink e91e63 Rose ffe4e1 Fuchsia ff66ff Purple 9c27b0 Dark Purple 673ab7 Indigo 3f51b5 Blue 2196f3 Light blue 03a9f4 Cyan 00bcd4 Teal 009688 Aqua 00ffff Dark green 2f6a31 Green 4caf50 Light green 8bc34a Lime cddc39 Yellow ffeb3b Amber ffc107 Orange ff9800 Dark orange ff5722 Brown 795548 Light grey c0c0c0 Grey 9e9e9e Dark grey 607d8b Black 111111 White ffffff <p>Example of ORM creation:</p> <pre><code>Tag.objects.get_or_create(\nname=\"Cisco-3650CX\",\nslug=\"cisco-3650cx\",\ndescription=\"Device tag for Cisco 3650CX series\",\ncolor=\"2196f3\"\n)\n</code></pre>"},{"location":"models/extras/webhook.html","title":"Webhooks","text":"<p>A webhook is a mechanism for conveying to some external system a change that took place in Nautobot. For example, you may want to notify a monitoring system whenever the status of a device is updated in Nautobot. This can be done by creating a webhook for the device model in Nautobot and identifying the webhook receiver. When Nautobot detects a change to a device, an HTTP request containing the details of the change and who made it be sent to the specified receiver. Webhooks are configured in the web UI under Extensibility &gt; Webhooks.</p>"},{"location":"models/extras/webhook.html#configuration","title":"Configuration","text":"<ul> <li>Name - A unique name for the webhook. The name is not included with outbound messages.</li> <li>Object type(s) - The type or types of Nautobot object that will trigger the webhook.</li> <li>Enabled - If unchecked, the webhook will be inactive.</li> <li>Events - A webhook may trigger on any combination of create, update, and delete events. At least one event type must be selected.</li> <li>HTTP method - The type of HTTP request to send. Options include <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code>, and <code>DELETE</code>.</li> <li>URL - The fuly-qualified URL of the request to be sent. This may specify a destination port number if needed.</li> <li>HTTP content type - The value of the request's <code>Content-Type</code> header. (Defaults to <code>application/json</code>)</li> <li>Additional headers - Any additional headers to include with the request (optional). Add one header per line in the format <code>Name: Value</code>. Jinja2 templating is supported for this field (see below).</li> <li>Body template - The content of the request being sent (optional). Jinja2 templating is supported for this field (see below). If blank, Nautobot will populate the request body with a raw dump of the webhook context. (If the HTTP content-type is set to <code>application/json</code>, this will be formatted as a JSON object.)</li> <li>Secret - A secret string used to prove authenticity of the request (optional). This will append a <code>X-Hook-Signature</code> header to the request, consisting of a HMAC (SHA-512) hex digest of the request body using the secret as the key.</li> <li>SSL verification - Uncheck this option to disable validation of the receiver's SSL certificate. (Disable with caution!)</li> <li>CA file path - The file path to a particular certificate authority (CA) file to use when validating the receiver's SSL certificate (optional).</li> </ul>"},{"location":"models/extras/webhook.html#jinja2-template-support","title":"Jinja2 Template Support","text":"<p>Jinja2 templating is supported for the <code>additional_headers</code> and <code>body_template</code> fields. This enables the user to convey object data in the request headers as well as to craft a customized request body. Request content can be crafted to enable the direct interaction with external systems by ensuring the outgoing message is in a format the receiver expects and understands.</p> <p>For example, you might create a Nautobot webhook to trigger a Slack message any time an IP address is created. You can accomplish this using the following configuration:</p> <ul> <li>Object type: IPAM &gt; IP address</li> <li>HTTP method: <code>POST</code></li> <li>URL: Slack incoming webhook URL</li> <li>HTTP content type: <code>application/json</code></li> <li>Body template: <code>{\"text\": \"IP address {{ data['address'] }} was created by {{ username }}!\"}</code></li> </ul>"},{"location":"models/extras/webhook.html#available-context","title":"Available Context","text":"<p>The following data is available as context for Jinja2 templates:</p> <ul> <li><code>event</code> - The type of event which triggered the webhook: created, updated, or deleted.</li> <li><code>model</code> - The Nautobot model which triggered the change.</li> <li><code>timestamp</code> - The time at which the event occurred (in ISO 8601 format).</li> <li><code>username</code> - The name of the user account associated with the change.</li> <li><code>request_id</code> - The unique request ID. This may be used to correlate multiple changes associated with a single request.</li> <li><code>data</code> - A serialized representation of the object after the change was made. This is typically equivalent to the model's representation in Nautobot's REST API.</li> </ul> <p>Added in version 1.3.0</p> <ul> <li><code>snapshots</code> - snapshots of the serialized object state both before and after the change was made; provided as a dictionary with keys named <code>prechange</code>, <code>postchange</code> and <code>differences</code>.</li> </ul>"},{"location":"models/extras/webhook.html#default-request-body","title":"Default Request Body","text":"<p>If no body template is specified, the request body will be populated with a JSON object containing the context data. For example, a newly created site might appear as follows:</p> <pre><code>{\n    \"event\": \"created\",\n    \"timestamp\": \"2020-02-25 15:10:26.010582+00:00\",\n    \"model\": \"site\",\n    \"username\": \"jstretch\",\n    \"request_id\": \"fdbca812-3142-4783-b364-2e2bd5c16c6a\",\n    \"data\": {\n        \"id\": 19,\n        \"name\": \"Site 1\",\n        \"slug\": \"site-1\",\n        \"status\":\n            \"value\": \"active\",\n            \"label\": \"Active\",\n            \"id\": 1\n        },\n        \"region\": null,\n        ...\n    },\n    \"snapshots\": {\n        \"prechange\": null,\n        \"postchange\": {\n            \"created\": \"2020-02-25\",\n            \"last_updated\": \"2020-02-25 15:10:26.010582+00:00\",\n            \"name\": \"Site 1\",\n            \"slug\": \"site-1\",\n            ...\n        },\n        \"differences\": {\n            \"removed\": null,\n            \"added\": {\n                \"created\": \"2020-02-25\",\n                \"last_updated\": \"2020-02-25 15:10:26.010582+00:00\",\n                \"name\": \"Site 1\",\n                \"slug\": \"site-1\",\n                ...\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"models/extras/webhook.html#webhook-processing","title":"Webhook Processing","text":"<p>When a change is detected, any resulting webhooks are placed into a Redis queue for processing. This allows the user's request to complete without needing to wait for the outgoing webhook(s) to be processed. The webhooks are then extracted from the queue by the <code>rqworker</code> process and HTTP requests are sent to their respective destinations. The current webhook queue and any failed webhooks can be inspected in the admin UI under Django RQ &gt; Queues.</p> <p>A request is considered successful if the response has a 2XX status code; otherwise, the request is marked as having failed. Failed requests may be retried manually via the admin UI.</p>"},{"location":"models/extras/webhook.html#troubleshooting","title":"Troubleshooting","text":"<p>To assist with verifying that the content of outgoing webhooks is rendered correctly, Nautobot provides a simple HTTP listener that can be run locally to receive and display webhook requests. First, modify the target URL of the desired webhook to <code>http://localhost:9000/</code>. This will instruct Nautobot to send the request to the local server on TCP port 9000. Then, start the webhook receiver service from the Nautobot root directory:</p> <pre><code>nautobot-server webhook_receiver\n</code></pre> <p>Example output:</p> <pre><code>Listening on port http://localhost:9000. Stop with CONTROL-C.\n</code></pre> <p>You can test the receiver itself by sending any HTTP request to it. For example:</p> <pre><code>curl -X POST http://localhost:9000 --data '{\"foo\": \"bar\"}'\n</code></pre> <p>The server will print output similar to the following:</p> <pre><code>[1] Tue, 07 Apr 2020 17:44:02 GMT 127.0.0.1 \"POST / HTTP/1.1\" 200 -\nHost: localhost:9000\nUser-Agent: curl/7.58.0\nAccept: */*\nContent-Length: 14\nContent-Type: application/x-www-form-urlencoded\n\n{\"foo\": \"bar\"}\n------------\n</code></pre> <p>Note that <code>webhook_receiver</code> does not actually do anything with the information received: It merely prints the request headers and body for inspection.</p> <p>Now, when the Nautobot webhook is triggered and processed, you should see its headers and content appear in the terminal where the webhook receiver is listening. If you don't, check that the <code>rqworker</code> process is running and that webhook events are being placed into the queue (visible under the Nautobot admin UI).</p>"},{"location":"models/ipam/aggregate.html","title":"Aggregates","text":"<p>IP addressing is by nature hierarchical. The first few levels of the IPv4 hierarchy, for example, look like this:</p> <ul> <li>0.0.0.0/0<ul> <li>0.0.0.0/1<ul> <li>0.0.0.0/2</li> <li>64.0.0.0/2</li> </ul> </li> <li>128.0.0.0/1<ul> <li>128.0.0.0/2</li> <li>192.0.0.0/2</li> </ul> </li> </ul> </li> </ul> <p>This hierarchy comprises 33 tiers of addressing, from /0 all the way down to individual /32 address (and much, much further to /128 for IPv6). Of course, most organizations are concerned with only relatively small portions of the total IP space, so tracking the uppermost of these tiers isn't necessary.</p> <p>Nautobot allows us to specify the portions of IP space that are interesting to us by defining aggregates. Typically, an aggregate will correspond to either an allocation of public (globally routable) IP space granted by a regional authority, or a private (internally-routable) designation. Common private designations include:</p> <ul> <li>10.0.0.0/8 (RFC 1918)</li> <li>100.64.0.0/10 (RFC 6598)</li> <li>172.16.0.0/12 (RFC 1918)</li> <li>192.168.0.0/16 (RFC 1918)</li> <li>One or more /48s within fd00::/8 (IPv6 unique local addressing)</li> </ul> <p>Each aggregate is assigned to a RIR. For \"public\" aggregates, this will be the real-world authority which has granted your organization permission to use the specified IP space on the public Internet. For \"private\" aggregates, this will be a statutory authority, such as RFC 1918. Each aggregate can also annotate that date on which it was allocated, where applicable.</p> <p>Prefixes are automatically arranged beneath their parent aggregates in Nautobot. Typically you'll want to create aggregates only for the prefixes and IP addresses that your organization actually manages: There is no need to define aggregates for provider-assigned space which is only used on Internet circuits, for example.</p> <p>Note</p> <p>Because aggregates represent swaths of the global IP space, they cannot overlap with one another: They can only exist side-by-side. For instance, you cannot define both 10.0.0.0/8 and 10.16.0.0/16 as aggregates, because they overlap. 10.16.0.0/16 in this example would be created as a container prefix and automatically grouped under the 10.0.0.0/8 aggregate. Remember, the purpose of aggregates is to establish the root of your IP addressing hierarchy.</p>"},{"location":"models/ipam/ipaddress.html","title":"IP Addresses","text":"<p>An IP address comprises a single host address (either IPv4 or IPv6) and its subnet mask. Its mask should match exactly how the IP address is configured on an interface in the real world.</p> <p>Like a prefix, an IP address can optionally be assigned to a VRF (otherwise, it will appear in the \"global\" table). IP addresses are automatically arranged under parent prefixes within their respective VRFs according to the IP hierarchy.</p> <p>Each IP address can also be assigned an operational <code>status</code> and a functional role.  The following statuses are available by default:</p> <ul> <li>Active</li> <li>Reserved</li> <li>Deprecated</li> <li>DHCP</li> <li>SLAAC (IPv6 Stateless Address Autoconfiguration)</li> </ul> <p>Roles are used to indicate some special attribute of an IP address; for example, use as a loopback or as the the virtual IP for a VRRP group. (Note that functional roles are conceptual in nature, and thus cannot be customized by the user.) Available roles include:</p> <ul> <li>Loopback</li> <li>Secondary</li> <li>Anycast</li> <li>VIP</li> <li>VRRP</li> <li>HSRP</li> <li>GLBP</li> </ul> <p>An IP address can be assigned to any device or virtual machine interface, and an interface may have multiple IP addresses assigned to it. Further, each device and virtual machine may have one of its interface IPs designated as its primary IP per address family (one for IPv4 and one for IPv6).</p> <p>Note</p> <p>When primary IPs are set for both IPv4 and IPv6, Nautobot will prefer IPv6. This can be changed by setting the <code>PREFER_IPV4</code> configuration parameter.</p>"},{"location":"models/ipam/ipaddress.html#network-address-translation-nat","title":"Network Address Translation (NAT)","text":"<p>An IP address can be designated as the network address translation (NAT) inside IP address for one or more other IP addresses. This is useful primarily to denote a translation between public and private IP addresses. This relationship is followed in both directions: For example, if 10.0.0.1 is assigned as the inside IP for 192.0.2.1, 192.0.2.1 will be displayed as the outside IP for 10.0.0.1.</p> <p>Added in version 1.3.0</p> <p>Support for multiple outside NAT IP addresses was added.</p>"},{"location":"models/ipam/prefix.html","title":"Prefixes","text":"<p>A prefix is an IPv4 or IPv6 network and mask expressed in CIDR notation (e.g. 192.0.2.0/24). A prefix entails only the \"network portion\" of an IP address: All bits in the address not covered by the mask must be zero. (In other words, a prefix cannot be a specific IP address.)</p> <p>Prefixes are automatically organized by their parent aggregates. Additionally, each prefix can be assigned to a particular site (optionally also to a location within the site) and a virtual routing and forwarding instance (VRF). Each VRF represents a separate IP space or routing table. All prefixes not assigned to a VRF are considered to be in the \"global\" table.</p> <p>Each prefix must be assigned a <code>status</code> and can optionally be assigned a role. These terms are often used interchangeably so it's important to recognize the difference between them. The status defines a prefix's operational state. The following statuses are provided by default:</p> <ul> <li>Container - A summary of child prefixes</li> <li>Active - Provisioned and in use</li> <li>Reserved - Designated for future use</li> <li>Deprecated - No longer in use</li> </ul> <p>On the other hand, a prefix's role defines its function. Role assignment is optional and roles are fully customizable. For example, you might create roles to differentiate between production and development infrastructure.</p> <p>A prefix may also be assigned to a VLAN. This association is helpful for associating address space with layer two domains. A VLAN may have multiple prefixes assigned to it.</p> <p>The prefix model include an \"is pool\" flag. If enabled, Nautobot will treat this prefix as a range (such as a NAT pool) wherein every IP address is valid and assignable. This logic is used when identifying available IP addresses within a prefix. If this flag is disabled, Nautobot will assume that the first and last (broadcast) address within an IPv4 prefix are unusable.</p>"},{"location":"models/ipam/rir.html","title":"Regional Internet Registries (RIRs)","text":"<p>Regional Internet registries are responsible for the allocation of globally-routable address space. The five RIRs are ARIN, RIPE, APNIC, LACNIC, and AFRINIC. However, some address space has been set aside for internal use, such as defined in RFCs 1918 and 6598. Nautobot considers these RFCs as a sort of RIR as well; that is, an authority which \"owns\" certain address space. There also exist lower-tier registries which serve particular geographic areas.</p> <p>Users can create whatever RIRs they like, but each aggregate must be assigned to one RIR. The RIR model includes a boolean flag which indicates whether the RIR allocates only private IP space.</p> <p>For example, suppose your organization has been allocated 104.131.0.0/16 by ARIN. It also makes use of RFC 1918 addressing internally. You would first create RIRs named \"ARIN\" and \"RFC 1918,\" then create an aggregate for each of these top-level prefixes, assigning it to its respective RIR.</p>"},{"location":"models/ipam/role.html","title":"Prefix/VLAN Roles","text":"<p>A role indicates the function of a prefix or VLAN. For example, you might define Data, Voice, and Security roles. Generally, a prefix will be assigned the same functional role as the VLAN to which it is assigned (if any).</p>"},{"location":"models/ipam/routetarget.html","title":"Route Targets","text":"<p>A route target is a particular type of extended BGP community used to control the redistribution of routes among VRF tables in a network. Route targets can be assigned to individual VRFs in Nautobot as import or export targets (or both) to model this exchange in an L3VPN. Each route target must be given a unique name, which should be in a format prescribed by RFC 4364, similar to a VR route distinguisher.</p> <p>Each route target can optionally be assigned to a tenant, and may have tags assigned to it.</p>"},{"location":"models/ipam/service.html","title":"Services","text":"<p>A service represents a layer four TCP or UDP service available on a device or virtual machine. For example, you might want to document that an HTTP service is running on a device. Each service includes a name, protocol, and port number; for example, \"SSH (TCP/22)\" or \"DNS (UDP/53).\"</p> <p>A service may optionally be bound to one or more specific IP addresses belonging to its parent device or VM. (If no IP addresses are bound, the service is assumed to be reachable via any assigned IP address.)</p>"},{"location":"models/ipam/vlan.html","title":"VLANs","text":"<p>A VLAN represents an isolated layer two domain, identified by a name and a numeric ID (1-4094) as defined in IEEE 802.1Q. Each VLAN may be assigned to a site, location, tenant, and/or VLAN group.</p> <p>Each VLAN must be assigned a <code>status</code>. The following statuses are available by default:</p> <ul> <li>Active</li> <li>Reserved</li> <li>Deprecated</li> </ul> <p>As with prefixes, each VLAN may also be assigned a functional role. Prefixes and VLANs share the same set of customizable roles.</p> <p>Changed in version 1.5.9</p> <p>The maximum <code>name</code> length was increased from 64 characters to 255 characters.</p>"},{"location":"models/ipam/vlangroup.html","title":"VLAN Groups","text":"<p>VLAN groups can be used to organize VLANs within Nautobot. Each group may optionally be assigned to a specific site or a location within a site, but a group cannot belong to multiple sites.</p> <p>Groups can also be used to enforce uniqueness: Each VLAN within a group must have a unique ID and name. VLANs which are not assigned to a group may have overlapping names and IDs (including VLANs which belong to a common site). For example, you can create two VLANs with ID 123, but they cannot both be assigned to the same group.</p>"},{"location":"models/ipam/vrf.html","title":"Virtual Routing and Forwarding (VRF)","text":"<p>A VRF object in Nautobot represents a virtual routing and forwarding (VRF) domain. Each VRF is essentially a separate routing table. VRFs are commonly used to isolate customers or organizations from one another within a network, or to route overlapping address space (e.g. multiple instances of the 10.0.0.0/8 space). Each VRF may be assigned to a specific tenant to aid in organizing the available IP space by customer or internal user.</p> <p>Each VRF is assigned a unique name and an optional route distinguisher (RD). The RD is expected to take one of the forms prescribed in RFC 4364, however its formatting is not strictly enforced.</p> <p>Each prefix and IP address may be assigned to one (and only one) VRF. If you have a prefix or IP address which exists in multiple VRFs, you will need to create a separate instance of it in Nautobot for each VRF. Any prefix or IP address not assigned to a VRF is said to belong to the \"global\" table.</p> <p>By default, Nautobot will allow duplicate prefixes to be assigned to a VRF. This behavior can be toggled by setting the \"enforce unique\" flag on the VRF model.</p> <p>Note</p> <p>Enforcement of unique IP space can be toggled for global table (non-VRF prefixes) using the <code>ENFORCE_GLOBAL_UNIQUE</code> configuration setting.</p> <p>Each VRF may have one or more import and/or export route targets applied to it. Route targets are used to control the exchange of routes (prefixes) among VRFs in L3VPNs.</p>"},{"location":"models/tenancy/tenant.html","title":"Tenants","text":"<p>A tenant represents a discrete grouping of resources used for administrative purposes. Typically, tenants are used to represent individual customers or internal departments within an organization. The following objects can be assigned to tenants:</p> <ul> <li>Sites</li> <li>Racks</li> <li>Rack reservations</li> <li>Devices</li> <li>VRFs</li> <li>Prefixes</li> <li>IP addresses</li> <li>VLANs</li> <li>Circuits</li> <li>Clusters</li> <li>Virtual machines</li> </ul> <p>Tenant assignment is used to signify the ownership of an object in Nautobot. As such, each object may only be owned by a single tenant. For example, if you have a firewall dedicated to a particular customer, you would assign it to the tenant which represents that customer. However, if the firewall serves multiple customers, it doesn't belong to any particular customer, so tenant assignment would not be appropriate.</p>"},{"location":"models/tenancy/tenantgroup.html","title":"Tenant Groups","text":"<p>Tenants can be organized by custom groups. For instance, you might create one group called \"Customers\" and one called \"Departments.\" The assignment of a tenant to a group is optional.</p> <p>Tenant groups may be nested recursively to achieve a multi-level hierarchy. For example, you might have a group called \"Customers\" containing subgroups of individual tenants grouped by product or account team.</p>"},{"location":"models/users/objectpermission.html","title":"Object Permissions","text":"<p>A permission in Nautobot represents a relationship shared by several components:</p> <ul> <li>Object type(s) - One or more types of object in Nautobot</li> <li>User(s)/Group(s) - One or more users or groups of users</li> <li>Action(s) - The action(s) that can be performed on an object</li> <li>Constraints - An arbitrary filter used to limit the granted action(s) to a specific subset of objects</li> </ul> <p>At a minimum, a permission assignment must specify one object type, one user or group, and one action. The specification of constraints is optional: A permission without any constraints specified will apply to all instances of the selected model(s).</p>"},{"location":"models/users/objectpermission.html#actions","title":"Actions","text":"<p>There are four core actions that can be permitted for each type of object within Nautobot, roughly analogous to the CRUD convention (create, read, update, and delete):</p> <ul> <li>View - Retrieve an object from the database</li> <li>Add - Create a new object</li> <li>Change - Modify an existing object</li> <li>Delete - Delete an existing object</li> </ul> <p>In addition to these, permissions can also grant custom actions that may be required by a specific model or plugin. For example, the <code>napalm_read</code> permission on the device model allows a user to execute NAPALM queries on a device via Nautobot's REST API. These can be specified when granting a permission in the \"additional actions\" field.</p> <p>Note</p> <p>Internally, all actions granted by a permission (both built-in and custom) are stored as strings in an array field named <code>actions</code>.</p>"},{"location":"models/users/objectpermission.html#constraints","title":"Constraints","text":"<p>Constraints are expressed as a JSON object or list representing a Django query filter. This is the same syntax that you would pass to the QuerySet <code>filter()</code> method when performing a query using the Django ORM. As with query filters, double underscores can be used to traverse related objects or invoke lookup expressions. Some example queries and their corresponding definitions are shown below.</p> <p>All attributes defined within a single JSON object are applied with a logical AND. For example, suppose you assign a permission for the site model with the following constraints.</p> <pre><code>{\n\"status__name\": \"Active\",\n\"region__name\": \"Americas\"\n}\n</code></pre> <p>The permission will grant access only to sites which have a status of \"Active\" and which are assigned to the \"Americas\" region.</p> <p>To achieve a logical OR with a different set of constraints, define multiple objects within a list. For example, if you want to constrain the permission to VLANs with an ID between 100 and 199 or a status of \"reserved,\" do the following:</p> <pre><code>[\n{\n\"vid__gte\": 100,\n\"vid__lt\": 200\n},\n{\n\"status__name\": \"Reserved\"\n}\n]\n</code></pre> <p>Additionally, where multiple permissions have been assigned for an object type, their collective constraints will be merged using a logical \"OR\" operation.</p>"},{"location":"models/users/token.html","title":"Tokens","text":"<p>A token is a unique identifier mapped to a Nautobot user account. Each user may have one or more tokens which he or she can use for authentication when making REST API requests. To create a token, navigate to the API tokens page under your user profile.</p> <ol> <li>Sign into Nautobot</li> <li>On the upper right hand corner, select your username, then Profile</li> <li>On the left hand side, under User Profile, select API Tokens</li> <li>Select +Add a token</li> <li>Leave Key blank to automatically create a token, or fill one in for yourself</li> <li>Check or uncheck \"Write enabled\", as desired</li> <li>(Optional) Set an expiration date for this token</li> <li>(Optional) Add a description</li> </ol> <p>Note</p> <p>The creation and modification of API tokens can be restricted per user by an administrator. If you don't see an option to create an API token, ask an administrator to grant you access.</p> <p>Each token contains a 160-bit key represented as 40 hexadecimal characters. When creating a token, you'll typically leave the key field blank so that a random key will be automatically generated. However, Nautobot allows you to specify a key in case you need to restore a previously deleted token to operation.</p> <p>By default, a token can be used to perform all actions via the API that a user would be permitted to do via the web UI. Deselecting the \"write enabled\" option will restrict API requests made with the token to read operations (e.g. GET) only.</p> <p>Additionally, a token can be set to expire at a specific time. This can be useful if an external client needs to be granted temporary access to Nautobot.</p>"},{"location":"models/virtualization/cluster.html","title":"Clusters","text":"<p>A cluster is a logical grouping of physical resources within which virtual machines run. A cluster must be assigned a type (technological classification), and may optionally be assigned to a cluster group, site, location, and/or tenant.</p> <p>Physical devices may be associated with clusters as hosts. This allows users to track on which host(s) a particular virtual machine may reside. However, Nautobot does not support pinning a specific VM within a cluster to a particular host device.</p>"},{"location":"models/virtualization/clustergroup.html","title":"Cluster Groups","text":"<p>Cluster groups may be created for the purpose of organizing clusters. The arrangement of clusters into groups is optional.</p>"},{"location":"models/virtualization/clustertype.html","title":"Cluster Types","text":"<p>A cluster type represents a technology or mechanism by which a cluster is formed. For example, you might create a cluster type named \"VMware vSphere\" for a locally hosted cluster or \"DigitalOcean NYC3\" for one hosted by a cloud provider.</p>"},{"location":"models/virtualization/virtualmachine.html","title":"Virtual Machines","text":"<p>A virtual machine represents a virtual compute instance hosted within a cluster. Each VM must be assigned to exactly one cluster.</p> <p>Like devices, each VM can be assigned a platform and/or functional role, and an operational <code>status</code>. The following statuses are available by default:</p> <ul> <li>Active</li> <li>Offline</li> <li>Planned</li> <li>Staged</li> <li>Failed</li> <li>Decommissioning</li> </ul> <p>Additional fields are available for annotating the vCPU count, memory (GB), and disk (GB) allocated to each VM. Each VM may optionally be assigned to a tenant. Virtual machines may have virtual interfaces assigned to them, but do not support any physical component.</p>"},{"location":"models/virtualization/vminterface.html","title":"Interfaces","text":"<p>Virtual machine interfaces behave similarly to device interfaces, and can be assigned IP addresses, VLANs, an operational <code>status</code> and services. However, given their virtual nature, they lack properties pertaining to physical attributes. For example, VM interfaces do not have a physical type and cannot have cables attached to them.</p> <p>The following operational statuses are available by default:</p> <ul> <li>Planned</li> <li>Maintenance</li> <li>Active</li> <li>Decommissioning</li> <li>Failed</li> </ul> <p>Added in version 1.4.0</p> <ul> <li>Added <code>bridge</code> field.</li> <li>Added <code>parent_interface</code> field.</li> <li>Added <code>status</code> field.</li> </ul>"},{"location":"plugins/index.html","title":"Installing and Using Plugins","text":"<p>Plugins are packaged Django apps that can be installed alongside Nautobot to provide custom functionality not present in the core application. Plugins can introduce their own models and views, but cannot interfere with existing components. A Nautobot user may opt to install plugins provided by the community or build his or her own.</p>"},{"location":"plugins/index.html#capabilities","title":"Capabilities","text":"<p>The Nautobot plugin architecture allows for plugins to do any or all of the following:</p>"},{"location":"plugins/index.html#extend-the-existing-nautobot-ui","title":"Extend the existing Nautobot UI","text":"<ul> <li>Add navigation menu items. A plugin can extend the navigation menus with new links and buttons or even entirely new menus.</li> <li>Add home page content. A plugin can add custom items or custom panels to the Nautobot home page.</li> <li>Add content to existing model detail views. A plugin can inject custom HTML content within the view of a core Nautobot model. This content can appear in the left column, right column, or full width of the page, and can also include custom buttons at the top of the page.</li> </ul> <p>Added in version 1.2.0</p> <ul> <li>Add a banner. A plugin can add a custom banner to the top of any appropriate views.</li> </ul> <p>Added in version 1.4.0</p> <ul> <li>Add extra tabs to existing model detail views. A plugin can inject additional tabs which will appear at the end of the object detail tabs list.</li> </ul>"},{"location":"plugins/index.html#extend-and-customize-existing-nautobot-functionality","title":"Extend and customize existing Nautobot functionality","text":"<ul> <li>Add custom validation logic to existing data models. A plugin can provide additional logic to customize the rules for validating created/updated data records.</li> <li>Provide Jobs. A plugin can serve as a convenient way to package and install Jobs.</li> <li>Add additional Git data types. A plugin can add support for processing additional types of data stored in a Git repository.</li> </ul> <p>Added in version 1.1.0</p> <ul> <li>Register additional Jinja2 filters. A plugin can define custom Jinja2 filters to be used in computed fields, webhooks, custom links, and export templates.</li> </ul> <p>Added in version 1.2.0</p> <ul> <li> <p>Populate extensibility features in the database. A plugin can add content to the Nautobot database when installed, such as automatically creating new custom fields, relationships, and so forth.</p> </li> <li> <p>Add additional secrets providers. A plugin can add support for retrieving Secret values from additional sources or external systems.</p> </li> </ul> <p>Added in version 1.4.0</p> <ul> <li>Override already-defined views. A plugin can define a view which can be set to override a view from the core set of views or another plugin's view.</li> </ul>"},{"location":"plugins/index.html#add-entirely-new-features","title":"Add entirely new features","text":"<ul> <li>Add new data models. A plugin can introduce one or more models to hold data. (A model is essentially a table in the SQL database.) These models can be integrated with core implementations of GraphQL, webhooks, logging, custom relationships, custom fields, and tags.</li> <li>Add new URLs and views. A plugin can register URLs under the <code>/plugins/</code> root path to provide browseable views (pages) for users.</li> <li>Add new REST API endpoints. A plugin can register URLs under the <code>/api/plugins/</code> root path to provide new REST API views.</li> <li>Add custom middleware. A plugin can provide and register custom Django middleware.</li> </ul>"},{"location":"plugins/index.html#declare-dependencies-and-requirements","title":"Declare dependencies and requirements","text":"<ul> <li>Declare configuration parameters. A plugin can define required, optional, and default configuration parameters within its unique namespace. Plugin configuration parameters are configurable under <code>PLUGINS_CONFIG</code> in <code>nautobot_config.py</code>.</li> <li>Limit installation by Nautobot version. A plugin can specify a minimum and/or maximum Nautobot version with which it is compatible.</li> <li>Add additional Django dependencies. A plugin can define additional Django application dependencies to require when the plugin is enabled.</li> </ul> <p>Details on how to implement any of these features are described in the plugin development documentation.</p>"},{"location":"plugins/index.html#limitations","title":"Limitations","text":"<p>Either by policy or by technical limitation, the interaction of plugins with Nautobot core is restricted in certain ways. A plugin may not:</p> <ul> <li>Modify core models. Plugins may not alter, remove, or override core Nautobot models in any way. This rule is in place to ensure the integrity of the core data model.</li> <li>Register URLs outside the <code>/plugins</code> root. All plugin URLs are restricted to this path to prevent path collisions with core or other plugins.</li> <li>Override core templates. Plugins can inject additional content where supported, but may not manipulate or remove core content.</li> <li>Modify core settings. A configuration registry is provided for plugins, however they cannot alter or delete the core configuration.</li> <li>Disable core components. Plugins are not permitted to disable or hide core Nautobot components.</li> </ul>"},{"location":"plugins/index.html#installing-plugins","title":"Installing Plugins","text":"<p>The instructions below detail the process for installing and enabling a Nautobot plugin.</p> <p>You must be absolutely sure to install the plugin within Nautobot's virtual environment.</p> <p>Note</p> <p>If you installed Nautobot in a production environment, you'll want to sudo to the nautobot user first using <code>sudo -iu nautobot</code>.</p>"},{"location":"plugins/index.html#install-the-package","title":"Install the Package","text":"<p>Download and install the plugin package per its installation instructions. Plugins published via PyPI are typically installed using <code>pip3</code>.</p> <pre><code>pip3 install &lt;package&gt;\n</code></pre> <p>Alternatively, if you're or installing a plugin from from a local source copy, you may wish to install the plugin manually by running <code>python setup.py install</code>.</p> <p>If you are developing a plugin and want to install it only temporarily, run <code>python setup.py develop</code> instead.</p>"},{"location":"plugins/index.html#enable-the-plugin","title":"Enable the Plugin","text":"<p>In your <code>nautobot_config.py</code>, add the plugin's name to the <code>PLUGINS</code> list:</p> <pre><code>PLUGINS = [\n'plugin_name',\n]\n</code></pre>"},{"location":"plugins/index.html#configure-the-plugin","title":"Configure the Plugin","text":"<p>If the plugin requires any configuration, define it in <code>nautobot_config.py</code> under the <code>PLUGINS_CONFIG</code> parameter. The available configuration parameters should be detailed in the plugin's README file.</p> <pre><code>PLUGINS_CONFIG = {\n'plugin_name': {\n'foo': 'bar',\n'buzz': 'bazz'\n}\n}\n</code></pre>"},{"location":"plugins/index.html#run-nautobot-server-post_upgrade","title":"Run <code>nautobot-server post_upgrade</code>","text":"<p>After installing or upgrading a plugin, you should always run <code>nautobot-server post_upgrade</code>. This command will ensure that any necessary post-installation tasks are run, for example:</p> <ul> <li>Migrating the database to include any new or updated data models from the plugin</li> <li>Collecting any static files provided by the plugin</li> <li>Etc.</li> </ul> <pre><code># nautobot-server post_upgrade\nPerforming database migrations...\nOperations to perform:\n  Apply all migrations: admin, auth, circuits, contenttypes, db, dcim, extras, ipam,\nnautobot_plugin_example, sessions, social_django, taggit, tenancy, users, virtualization\nRunning migrations:\n  No migrations to apply.\n\nGenerating cable paths...\nFound no missing circuit termination paths; skipping\nFound no missing console port paths; skipping\nFound no missing console server port paths; skipping\nFound no missing interface paths; skipping\nFound no missing power feed paths; skipping\nFound no missing power outlet paths; skipping\nFound no missing power port paths; skipping\nFinished.\n\nCollecting static files...\n\n0 static files copied to '/opt/nautobot/static', 972 unmodified.\n\nRemoving stale content types...\n\nRemoving expired sessions...\n\nInvalidating cache...\n</code></pre>"},{"location":"plugins/index.html#restart-the-wsgi-service","title":"Restart the WSGI Service","text":"<p>Restart the WSGI service to load the new plugin:</p> <pre><code># sudo systemctl restart nautobot nautobot-worker\n</code></pre>"},{"location":"plugins/index.html#verify-that-the-plugin-is-installed","title":"Verify that the Plugin is Installed","text":"<p>In the Nautobot UI, navigate to Plugins -&gt; Installed Plugins. The newly installed plugin should appear in the displayed table if everything is configured correctly. You can also click on the plugin's name in this table to view more detailed information about this plugin.</p>"},{"location":"plugins/development.html","title":"App Development","text":"<p>This documentation covers the development of custom apps (plugins) for Nautobot. Nautobot apps are essentially self-contained Django applications which integrate with Nautobot to provide custom functionality. Since the development of Django applications is already very well-documented, this will only be covering the aspects that are specific to Nautobot.</p> <p>Apps can do a lot of different things, all of which will be covered in detail in this document. Keep in mind that each piece of functionality is entirely optional. For example, if your app merely adds a piece of middleware or an API endpoint for existing data, there's no need to define any new models.</p> <p>Changed in version 1.5.2</p> <p>The <code>nautobot.apps</code> namespace was added in Nautobot 1.5.2. If developing apps to be backwards-compatible with older versions of Nautobot, please refer to the app developer documentation of your required Nautobot version.</p> <p>Tip</p> <p>The app detail view (<code>/plugins/installed-plugins/&lt;plugin_name&gt;/</code>, accessible to superusers via Plugins -&gt; Installed Plugins in the navigation menu, then selecting a specific app) provides in-depth information about which features any installed app is implementing or making use of.</p>"},{"location":"plugins/development.html#initial-setup","title":"Initial Setup","text":"<p>Use a Development Environment, Not Production For App Development</p> <p>You should not use your production environment for app development. For information on getting started with a development environment, check out Nautobot development guide.</p>"},{"location":"plugins/development.html#app-structure","title":"App Structure","text":"<p>Although the specific structure of an app is largely left to the discretion of its authors, a Nautobot app that makes use of all available app features described in this document could potentially look something like this:</p> <pre><code>app_name/\n  - app_name/\n    - __init__.py           # required\n    - admin.py              # Django Admin Interface\n    - api/\n      - serializers.py      # REST API Model serializers\n      - urls.py             # REST API URL patterns\n      - views.py            # REST API view sets\n    - banner.py             # Banners\n    - custom_validators.py  # Custom Validators\n    - datasources.py        # Loading Data from a Git Repository\n    - filter_extensions.py  # Extending Filters\n    - filters.py            # Filtersets for UI, REST API, and GraphQL Model Filtering\n    - forms.py              # UI Forms and Filter Forms\n    - graphql/\n      - types.py            # GraphQL Type Objects\n    - homepage.py           # Home Page Content\n    - jinja_filters.py      # Jinja Filters\n    - jobs.py               # Job classes\n    - middleware.py         # Request/response middleware\n    - migrations/\n      - 0001_initial.py     # Database Models\n    - models.py             # Database Models\n    - navigation.py         # Navigation Menu Items\n    - secrets.py            # Secret Providers\n    - signals.py            # Signal Handler Functions\n    - template_content.py   # Extending Core Templates\n    - templates/\n      - app_name/\n        - *.html            # UI content templates\n    - urls.py               # UI URL Patterns\n    - views.py              # UI Views and any view override definitions\n  - pyproject.toml          # *** REQUIRED *** - Project package definition\n  - README.md\n</code></pre> <p>The top level is the project root. Immediately within the root should exist several items:</p> <ul> <li><code>pyproject.toml</code> - This is the new unified Python project settings file that replaces <code>setup.py</code>, <code>requirements.txt</code>, and various other setup files (like <code>setup.cfg</code>, <code>MANIFEST.in</code>, among others).</li> <li><code>README.md</code> - A brief introduction to your app, how to install and configure it, where to find help, and any other pertinent information. It is recommended to write README files using a markup language such as Markdown.</li> <li>The app source directory, with the same name as your app.</li> </ul> <p>The app source directory contains all of the actual Python code and other resources used by your app. Its structure is left to the author's discretion, however it is recommended to follow best practices as outlined in the Django documentation. At a minimum, this directory must contain an <code>__init__.py</code> file containing an instance of Nautobot's <code>NautobotAppConfig</code> class.</p> <p>Note</p> <p>Nautobot includes a command to help create the app directory: <code>nautobot-server startplugin [app_name]</code> Please see the Nautobot Server Guide for more information.</p>"},{"location":"plugins/development.html#create-pyprojecttoml","title":"Create pyproject.toml","text":""},{"location":"plugins/development.html#poetry-init-recommended","title":"Poetry Init (Recommended)","text":"<p>To get started with a project using Python Poetry you use the <code>poetry init</code> command. This will guide you through the prompts necessary to generate a pyproject.toml with details required for packaging.</p> <pre><code>This command will guide you through creating your pyproject.toml config.\n\nPackage name [tmp]:  nautobot-animal-sounds\nVersion [0.1.0]:\nDescription []:  An example Nautobot app\nAuthor [, n to skip]:  Bob Jones\nLicense []:  Apache 2.0\nCompatible Python versions [^3.8]:  ^3.8\n\nWould you like to define your main dependencies interactively? (yes/no) [yes] no\nWould you like to define your development dependencies interactively? (yes/no) [yes] no\nGenerated file\n\n[tool.poetry]\nname = \"nautobot-animal-sounds\"\nversion = \"0.1.0\"\ndescription = \"An example Nautobot app\"\nauthors = [\"Bob Jones\"]\nlicense = \"Apache 2.0\"\n\n[tool.poetry.dependencies]\npython = \"^3.8\"\n\n[tool.poetry.dev-dependencies]\n\n[build-system]\nrequires = [\"poetry-core&gt;=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n\nDo you confirm generation? (yes/no) [yes]\n</code></pre>"},{"location":"plugins/development.html#define-a-nautobotappconfig","title":"Define a NautobotAppConfig","text":"<p>The <code>NautobotAppConfig</code> class is a Nautobot-specific wrapper around Django's built-in <code>AppConfig</code> class. It is used to declare Nautobot app functionality within a Python package. Each app should provide its own subclass, defining its name, metadata, and default and required configuration parameters. An example is below:</p> <pre><code>from nautobot.apps import NautobotAppConfig\nclass AnimalSoundsConfig(NautobotAppConfig):\nname = 'nautobot_animal_sounds'\nverbose_name = 'Animal Sounds'\ndescription = 'An example app for development purposes'\nversion = '0.1'\nauthor = 'Bob Jones'\nauthor_email = 'bob@example.com'\nbase_url = 'animal-sounds'\nrequired_settings = []\ndefault_settings = {\n'loud': False\n}\nconfig = AnimalSoundsConfig\n</code></pre> <p>Nautobot looks for the <code>config</code> variable within an app's <code>__init__.py</code> to load its configuration. Typically, this will be set to the <code>NautobotAppConfig</code> subclass, but you may wish to dynamically generate a <code>NautobotAppConfig</code> class based on environment variables or other factors.</p>"},{"location":"plugins/development.html#required-nautobotappconfig-attributes","title":"Required NautobotAppConfig Attributes","text":"Name Description <code>author</code> Name of app's author <code>author_email</code> Author's public email address <code>description</code> Brief description of the app's purpose <code>name</code> Raw app name; same as the app's source directory <code>verbose_name</code> Human-friendly name for the app <code>version</code> Current release (semantic versioning is encouraged)"},{"location":"plugins/development.html#optional-nautobotappconfig-attributes","title":"Optional NautobotAppConfig Attributes","text":"Name Default Description <code>base_url</code> Same as specified <code>name</code> Base path to use for app URLs <code>caching_config</code> <code>{\"*\":{\"ops\":\"all\"}}</code> App-specific query caching configuration <code>config_view_name</code> <code>None</code> URL name for a \"configuration\" view defined by this app <code>default_settings</code> <code>{}</code> A dictionary of configuration parameters and their default values <code>home_view_name</code> <code>None</code> URL name for a \"home\" or \"dashboard\" view defined by this app <code>docs_view_name</code> <code>None</code> URL name for a \"documentation\" view defined by this app <code>installed_apps</code> <code>[]</code> A list of additional Django application dependencies to automatically enable when the app is activated (you must still make sure these underlying dependent libraries are installed) <code>max_version</code> <code>None</code> Maximum version of Nautobot with which the app is compatible <code>middleware</code> <code>[]</code> A list of middleware classes to append after Nautobot's built-in middleware <code>min_version</code> <code>None</code> Minimum version of Nautobot with which the app is compatible <code>required_settings</code> <code>[]</code> A list of any configuration parameters that must be defined by the user <p>Note</p> <p>All <code>required_settings</code> must be configured in <code>PLUGINS_CONFIG</code> in <code>nautobot_config.py</code> before the app can be used.</p> <p>Warning</p> <p>If a configuration parameter is listed in both <code>required_settings</code> and <code>default_settings</code>, the default setting will be ignored.</p>"},{"location":"plugins/development.html#nautobotappconfig-code-location-attributes","title":"NautobotAppConfig Code Location Attributes","text":"<p>The following <code>NautobotAppConfig</code> attributes can be configured to customize where Nautobot will look to locate various pieces of app code. In most cases you will not need to change these, but they are provided as options in case your app has a non-standard organizational structure.</p> <p>Info</p> <p>As used below, a \"dotted path\" is the combination of a Python module path within the app and the name of a variable within that module. For example, <code>\"template_content.template_extensions\"</code> refers to a variable named <code>template_extensions</code> inside a <code>template_content</code> module located at the root of the app.</p> Name Default Description <code>banner_function</code> <code>\"banner.banner\"</code> Dotted path to a function that can render a custom banner <code>custom_validators</code> <code>\"custom_validators.custom_validators\"</code> Dotted path to a list of custom validator classes <code>datasource_contents</code> <code>\"datasources.datasource_contents\"</code> Dotted path to a list of datasource (Git, etc.) content types to register <code>graphql_types</code> <code>graphql.types.graphql_types</code> Dotted path to a list of GraphQL type classes <code>homepage_layout</code> <code>\"homepage.layout\"</code> Dotted path to a list of home page items provided by the app <code>jinja_filters</code> <code>\"jinja_filters\"</code> Path to a module that contains Jinja2 filters to be registered <code>jobs</code> <code>\"jobs.jobs\"</code> Dotted path to a list of Job classes <code>menu_items</code> <code>\"navigation.menu_items\"</code> Dotted path to a list of navigation menu items provided by the app <code>secrets_providers</code> <code>\"secrets.secrets_providers\"</code> Dotted path to a list of secrets providers in the app <code>template_extensions</code> <code>\"template_content.template_extensions\"</code> Dotted path to a list of template extension classes"},{"location":"plugins/development.html#install-the-app-for-development","title":"Install the App for Development","text":"<p>The app needs to be installed into the same python environment where Nautobot is, so that we can get access to <code>nautobot-server</code> command, and also so that the nautobot-server is aware of the new app.</p> <p>If you installed Nautobot using Poetry, then go to the root directory of your clone of the Nautobot repository and run <code>poetry shell</code> there.  Afterward, return to the root directory of your app to continue development.</p> <p>Otherwise if using the pip install or Docker workflows, manually activate nautobot using <code>source /opt/nautobot/bin/activate</code>.</p> <p>To install the app for development the following steps should be taken:</p> <ul> <li>Activate the Nautobot virtual environment (as detailed above)</li> <li>Navigate to the project root, where the <code>pyproject.toml</code> file exists for the app</li> <li>Execute the command <code>poetry install</code> to install the local package into the Nautobot virtual environment</li> </ul> <p>Note</p> <p>Poetry installs the current project and its dependencies in editable mode (aka \"development mode\").</p> <p>This should be done in development environment</p> <p>You should not use your production environment for app development. For information on getting started with a development environment, check out Nautobot development guide.</p> <pre><code>poetry install\n</code></pre> <p>Once the app has been installed, add it to the configuration for Nautobot:</p> <pre><code>PLUGINS = [\"animal_sounds\"]\n</code></pre>"},{"location":"plugins/development.html#verify-that-the-app-is-installed","title":"Verify that the App is Installed","text":"<p>After restarting the Nautobot server, the newly installed app should appear in Plugins -&gt; Installed Plugins if everything is configured correctly. You can also click on the app's name in this table to view more detailed information about this app based on its NautobotAppConfig and other contents.</p>"},{"location":"plugins/development.html#extending-the-existing-nautobot-ui","title":"Extending the Existing Nautobot UI","text":""},{"location":"plugins/development.html#extending-object-detail-views","title":"Extending Object Detail Views","text":"<p>Apps can inject custom content into certain areas of the detail views of applicable models. This is accomplished by subclassing <code>TemplateExtension</code>, designating a particular Nautobot model, and defining the desired methods to render custom content. Four methods are available:</p> <ul> <li><code>left_page()</code> - Inject content on the left side of the page</li> <li><code>right_page()</code> - Inject content on the right side of the page</li> <li><code>full_width_page()</code> - Inject content across the entire bottom of the page</li> <li><code>buttons()</code> - Add buttons to the top of the page</li> <li><code>detail_tabs()</code> - Add extra tabs to the end of the list of tabs within the page tabs navigation</li> </ul> <p>Additionally, a <code>render()</code> method is available for convenience. This method accepts the name of a template to render, and any additional context data you want to pass. Its use is optional, however.</p> <p>When a TemplateExtension is instantiated, context data is assigned to <code>self.context</code>. Available data include:</p> <ul> <li><code>object</code> - The object being viewed</li> <li><code>request</code> - The current request</li> <li><code>settings</code> - Global Nautobot settings</li> <li><code>config</code> - App-specific configuration parameters</li> </ul> <p>For example, accessing <code>{{ request.user }}</code> within a template will return the current user.</p> <p>Declared subclasses should be gathered into a list or tuple for integration with Nautobot. By default, Nautobot looks for an iterable named <code>template_extensions</code> within a <code>template_content.py</code> file. (This can be overridden by setting <code>template_extensions</code> to a custom value on the app's <code>NautobotAppConfig</code>.) An example is below.</p> <pre><code># template_content.py\nfrom django.urls import reverse\nfrom nautobot.apps.ui import TemplateExtension\nfrom .models import Animal\nclass SiteAnimalCount(TemplateExtension):\n\"\"\"Template extension to display animal count on the right side of the page.\"\"\"\nmodel = 'dcim.site'\ndef right_page(self):\nreturn self.render('nautobot_animal_sounds/inc/animal_count.html', extra_context={\n'animal_count': Animal.objects.count(),\n})\nclass DeviceExtraTabs(TemplateExtension):\n\"\"\"Template extension to add extra tabs to the object detail tabs.\"\"\"\nmodel = 'dcim.device'\ndef detail_tabs(self):\n\"\"\"\n        You may define extra tabs to render on a model's detail page by utilizing this method.\n        Each tab is defined as a dict in a list of dicts.\n        For each of the tabs defined:\n        - The &lt;title&gt; key's value will become the tab link's title.\n        - The &lt;url&gt; key's value is used to render the HTML link for the tab\n        These tabs will be visible (in this instance) on the Device model's detail page as\n        set by the DeviceContent.model attribute \"dcim.device\"\n        This example demonstrates defining two tabs. The tabs will be ordered by their position in list.\n        \"\"\"\nreturn [\n{\n\"title\": \"App Tab 1\",\n\"url\": reverse(\"plugins:example_plugin:device_detail_tab_1\", kwargs={\"pk\": self.context[\"object\"].pk}),\n},\n{\n\"title\": \"App Tab 2\",\n\"url\": reverse(\"plugins:example_plugin:device_detail_tab_2\", kwargs={\"pk\": self.context[\"object\"].pk}),\n},\n]\ntemplate_extensions = [DeviceExtraTabs, SiteAnimalCount]\n</code></pre>"},{"location":"plugins/development.html#adding-extra-tabs","title":"Adding Extra Tabs","text":"<p>Added in version 1.4.0</p> <p>In order for any extra tabs to work properly, the <code>\"url\"</code> key must reference a view which inherits from the <code>nautobot.apps.views.ObjectView</code> class and the template must extend the object's detail template such as:</p> <pre><code>&lt;!-- example_plugin/tab_device_detail_1.html --&gt;\n{% extends 'dcim/device.html' %}\n\n{% block content %}\n    &lt;h2&gt;Device App Tab 1&lt;/h2&gt;\n&lt;p&gt;I am some content for the example plugin's device ({{ object.pk }}) detail tab 1.&lt;/p&gt;\n{% endblock %}\n</code></pre> <p>Here's a basic example of a tab's view</p> <pre><code># views.py\nfrom nautobot.apps.views import ObjectView\nfrom nautobot.dcim.models import Device\nclass DeviceDetailAppTabOne(ObjectView):\n\"\"\"\n    This view's template extends the device detail template,\n    making it suitable to show as a tab on the device detail page.\n    Views that are intended to be for an object detail tab's content rendering must\n    always inherit from nautobot.apps.views.ObjectView.\n    \"\"\"\nqueryset = Device.objects.all()\ntemplate_name = \"example_plugin/tab_device_detail_1.html\"\n</code></pre> <p>You must also add the view to the <code>url_patterns</code> like so (make sure to read the note after this code snippet):</p> <pre><code># urls.py\nfrom django.urls import path\nfrom example_plugin import views\nurlpatterns = [\n# ... previously defined urls\npath(\"devices/&lt;uuid:pk&gt;/example-plugin-tab-1/\", views.DeviceDetailAppTabOne.as_view(), name=\"device_detail_tab_1\"),\n]\n</code></pre> <p>Note</p> <p>For added tab views, we recommend for consistency that you follow the URL pattern established by the base model detail view and tabs (if any). For example, <code>nautobot/dcim/urls.py</code> references Device tab views with the URL pattern <code>devices/&lt;uuid:pk&gt;/TAB-NAME/</code>, so above we have followed that same pattern.</p>"},{"location":"plugins/development.html#adding-a-banner","title":"Adding a Banner","text":"<p>Added in version 1.2.0</p> <p>An app can provide a function that renders a custom banner on any number of Nautobot views. By default Nautobot looks for a function <code>banner()</code> inside of <code>banner.py</code>. (This can be overridden by setting <code>banner_function</code> to a custom value on the app's <code>NautobotAppConfig</code>.)</p> <p>This function currently receives a single argument, <code>context</code>, which is the Django request context in which the current page is being rendered. The function can return <code>None</code> if no banner is needed for a given page view, or can return a <code>Banner</code> object describing the banner contents. Here's a simple example <code>banner.py</code>:</p> <pre><code># banner.py\nfrom django.utils.html import format_html\nfrom nautobot.apps.ui import Banner, BannerClassChoices\ndef banner(context, *args, **kwargs):\n\"\"\"Greet the user, if logged in.\"\"\"\n# Request parameters can be accessed via context.request\nif not context.request.user.is_authenticated:\n# No banner if the user isn't logged in\nreturn None\nelse:\nreturn Banner(\ncontent=format_html(\"Hello, &lt;strong&gt;{}&lt;/strong&gt;! \ud83d\udc4b\", context.request.user),\nbanner_class=BannerClassChoices.CLASS_SUCCESS,\n)\n</code></pre>"},{"location":"plugins/development.html#adding-navigation-menu-items","title":"Adding Navigation Menu Items","text":"<p>Apps can extend the existing navigation bar layout. By default, Nautobot looks for a <code>menu_items</code> list inside of <code>navigation.py</code>. (This can be overridden by setting <code>menu_items</code> to a custom value on the app's <code>NautobotAppConfig</code>.)</p> <p>Using a key and weight system, a developer can integrate the app's menu additions amongst existing menu tabs, groups, items and buttons, and/or create entirely new menus as desired.</p> <p>More documentation and examples can be found in the Navigation Menu guide.</p> <p>Tip</p> <p>To reduce the amount of clutter in the navigation menu, if your app provides an \"app configuration\" view, we recommend linking it from the main \"Installed Plugins\" page rather than adding it as a separate item in the navigation menu.</p> <p>Similarly, if your app provides an \"app home\" or \"dashboard\" view, consider linking it from the \"Installed Plugins\" page, and/or adding a link from the Nautobot home page (see below), rather than adding it to the navigation menu.</p>"},{"location":"plugins/development.html#adding-home-page-content","title":"Adding Home Page Content","text":"<p>Added in version 1.2.0</p> <p>Apps can add content to the Nautobot home page. By default, Nautobot looks for a <code>layout</code> list inside of <code>homepage.py</code>. (This can be overridden by setting <code>homepage_layout</code> to a custom value on the app's <code>NautobotAppConfig</code>.)</p> <p>Using a key and weight system, a developer can integrate the app content amongst existing panels, groups, and items and/or create entirely new panels as desired.</p> <p>More documentation and examples can be found in the guide on Home Page Panels.</p>"},{"location":"plugins/development.html#adding-links-to-the-installed-apps-view","title":"Adding Links to the Installed Apps View","text":"<p>Added in version 1.2.0</p> <p>It's common for many apps to provide an \"app configuration\" view used for interactive configuration of aspects of the app that don't necessarily need to be managed by a system administrator via <code>PLUGINS_CONFIG</code>. The <code>NautobotAppConfig</code> setting of <code>config_view_name</code> lets you provide the URL pattern name defined for this view, which will then be accessible via a button on the Plugins -&gt; Installed Plugins UI view.</p> <p>For example, if the <code>animal_sounds</code> app provides a configuration view, which is set up in <code>urls.py</code> as follows:</p> <pre><code># urls.py\nfrom django.urls import path\nfrom . import views\nurlpatterns = [\npath(\"configuration/\", views.AnimalSoundsConfigView.as_view(), name=\"config\"),\n]\n</code></pre> <p>then in your <code>AnimalSoundsConfig</code> you could refer to the view by name:</p> <pre><code># __init__.py\nfrom nautobot.apps import NautobotAppConfig\nclass AnimalSoundsConfig(NautobotAppConfig):\n# ...\nconfig_view_name = \"plugins:animal_sounds:config\"\nconfig = AnimalSoundsConfig\n</code></pre> <p>and now the \"Configuration\" button that appears in the Installed Plugins table next to \"Animal Sounds\" will be a link to your configuration view.</p> <p>Similarly, if your app provides an \"app home\" or \"dashboard\" view, you can provide a link for the \"Home\" button in the Installed Plugins table by defining <code>home_view_name</code> on your <code>NautobotAppConfig</code> class. This can also be done for documentation by defining <code>docs_view_name</code> on your <code>NautobotAppConfig</code> class.</p>"},{"location":"plugins/development.html#extending-existing-functionality","title":"Extending Existing Functionality","text":""},{"location":"plugins/development.html#adding-jinja2-filters","title":"Adding Jinja2 Filters","text":"<p>Added in version 1.1.0</p> <p>Apps can define custom Jinja2 filters to be used when rendering templates defined in computed fields. Check out the official Jinja2 documentation on how to create filter functions.</p> <p>In the file that defines your filters (by default <code>jinja_filters.py</code>, but configurable in the <code>NautobotAppConfig</code> if desired), you must import the <code>library</code> module from the <code>django_jinja</code> library. Filters must then be decorated with <code>@library.filter</code>. See an example below that defines a filter called <code>leet_speak</code>.</p> <pre><code>from django_jinja import library\n@library.filter\ndef leet_speak(input_str):\ncharset = {\"a\": \"4\", \"e\": \"3\", \"l\": \"1\", \"o\": \"0\", \"s\": \"5\", \"t\": \"7\"}\noutput_str = \"\"\nfor char in input_str:\noutput_str += charset.get(char.lower(), char)\nreturn output_str\n</code></pre> <p>This filter will then be available for use in computed field templates like so:</p> <pre><code>{{ \"HELLO WORLD\" | leet_speak }}\n</code></pre> <p>The output of this template results in the string <code>\"H3110 W0R1D\"</code>.</p>"},{"location":"plugins/development.html#including-jobs","title":"Including Jobs","text":"<p>Apps can provide Jobs to take advantage of all the built-in functionality provided by that feature (user input forms, background execution, results logging and reporting, etc.).</p> <p>By default, for each app, Nautobot looks for an iterable named <code>jobs</code> within a <code>jobs.py</code> file. (This can be overridden by setting <code>jobs</code> to a custom value on the app's <code>NautobotAppConfig</code>.) A brief example is below; for more details on Job design and implementation, refer to the Jobs feature documentation.</p> <pre><code># jobs.py\nfrom nautobot.extras.jobs import Job\nclass CreateDevices(Job):\n...\nclass DeviceConnectionsReport(Job):\n...\nclass DeviceIPsReport(Job):\n...\njobs = [CreateDevices, DeviceConnectionsReport, DeviceIPsReport]\n</code></pre>"},{"location":"plugins/development.html#implementing-custom-validators","title":"Implementing Custom Validators","text":"<p>Apps can register custom validator classes which implement model validation logic to be executed during a model's <code>clean()</code> method. Like template extensions, custom validators are registered to a single model and offer a method which app authors override to implement their validation logic. This is accomplished by subclassing <code>CustomValidator</code> and implementing the <code>clean()</code> method.</p> <p>App authors must raise <code>django.core.exceptions.ValidationError</code> within the <code>clean()</code> method to trigger validation error messages which are propagated to the user and prevent saving of the model instance. A convenience method <code>validation_error()</code> may be used to simplify this process. Raising a <code>ValidationError</code> is no different than vanilla Django, and the convenience method will simply pass the provided message through to the exception.</p> <p>When a CustomValidator is instantiated, the model instance is assigned to context dictionary using the <code>object</code> key, much like TemplateExtension. E.g. <code>self.context['object']</code>.</p> <p>Declared subclasses should be gathered into a list or tuple for integration with Nautobot. By default, Nautobot looks for an iterable named <code>custom_validators</code> within a <code>custom_validators.py</code> file. (This can be overridden by setting <code>custom_validators</code> to a custom value on the app's <code>NautobotAppConfig</code>.) An example is below.</p> <pre><code># custom_validators.py\nfrom nautobot.apps.models import CustomValidator\nclass SiteValidator(CustomValidator):\n\"\"\"Custom validator for Sites to enforce that they must have a Region.\"\"\"\nmodel = 'dcim.site'\ndef clean(self):\nif self.context['object'].region is None:\n# Enforce that all sites must be assigned to a region\nself.validation_error({\n\"region\": \"All sites must be assigned to a region\"\n})\ncustom_validators = [SiteValidator]\n</code></pre>"},{"location":"plugins/development.html#loading-data-from-a-git-repository","title":"Loading Data from a Git Repository","text":"<p>It's possible for an app to register additional types of data that can be provided by a Git repository and be automatically notified when such a repository is refreshed with new data. By default, Nautobot looks for an iterable named <code>datasource_contents</code> within a <code>datasources.py</code> file. (This can be overridden by setting <code>datasource_contents</code> to a custom value on the app's <code>NautobotAppConfig</code>.) An example is below.</p> <pre><code># datasources.py\nimport yaml\nimport os\nfrom nautobot.extras.choices import LogLevelChoices\nfrom nautobot.apps.datasources import DatasourceContent\nfrom .models import Animal\ndef refresh_git_animals(repository_record, job_result, delete=False):\n\"\"\"Callback for GitRepository updates - refresh Animals managed by it.\"\"\"\nif 'nautobot_animal_sounds.Animal' not in repository_record.provided_contents or delete:\n# This repository is defined not to provide Animal records.\n# In a more complete worked example, we might want to iterate over any\n# Animals that might have been previously created by this GitRepository\n# and ensure their deletion, but for now this is a no-op.\nreturn\n# We have decided that a Git repository can provide YAML files in a\n# /animals/ directory at the repository root.\nanimal_path = os.path.join(repository_record.filesystem_path, 'animals')\nfor filename in os.listdir(animal_path):\nwith open(os.path.join(animal_path, filename)) as fd:\nanimal_data = yaml.safe_load(fd)\n# Create or update an Animal record based on the provided data\nanimal_record, created = Animal.objects.update_or_create(\nname=animal_data['name'],\ndefaults={'sound': animal_data['sound']}\n)\n# Record the outcome in the JobResult record\njob_result.log(\n\"Successfully created/updated animal\",\nobj=animal_record,\nlevel_choice=LogLevelChoices.LOG_SUCCESS,\ngrouping=\"animals\",\n)\n# Register that Animal records can be loaded from a Git repository,\n# and register the callback function used to do so\ndatasource_contents = [\n(\n'extras.gitrepository',                                  # datasource class we are registering for\nDatasourceContent(\nname='animals',                                      # human-readable name to display in the UI\ncontent_identifier='nautobot_animal_sounds.animal',  # internal slug to identify the data type\nicon='mdi-paw',                                      # Material Design Icons icon to use in UI\ncallback=refresh_git_animals,                        # callback function on GitRepository refresh\n)\n)\n]\n</code></pre> <p>With this code, once your app is installed, the Git repository creation/editing UI will now include \"Animals\" as an option for the type(s) of data that a given repository may provide. If this option is selected for a given Git repository, your <code>refresh_git_animals</code> function will be automatically called when the repository is synced.</p>"},{"location":"plugins/development.html#populating-extensibility-features","title":"Populating Extensibility Features","text":"<p>Added in version 1.2.0</p> <p>In many cases, an app may wish to make use of Nautobot's various extensibility features, such as custom fields or relationships. It can be useful for an app to automatically create a custom field definition or relationship definition as a consequence of being installed and activated, so that everyday usage of the app can rely upon these definitions to be present.</p> <p>To make this possible, Nautobot provides a custom signal, <code>nautobot_database_ready</code>, that apps can register to listen for. This signal is triggered when <code>nautobot-server migrate</code> or <code>nautobot-server post_upgrade</code> is run after installing an app, and provides an opportunity for the app to make any desired additions to the database at this time.</p> <p>For example, maybe we want our app to make use of a Relationship allowing each Site to be linked to our Animal model. We would define our callback function that makes sure this Relationship exists, by convention in a <code>signals.py</code> file:</p> <pre><code># signals.py\nfrom nautobot.extras.choices import RelationshipTypeChoices\ndef create_site_to_animal_relationship(sender, apps, **kwargs):\n\"\"\"Create a Site-to-Animal Relationship if it doesn't already exist.\"\"\"\n# Use apps.get_model to look up Nautobot core models\nContentType = apps.get_model(\"contenttypes\", \"ContentType\")\nRelationship = apps.get_model(\"extras\", \"Relationship\")\nSite = apps.get_model(\"dcim\", \"Site\")\n# Use sender.get_model to look up models from this app\nAnimal = sender.get_model(\"Animal\")\n# Ensure that the Relationship exists\nRelationship.objects.update_or_create(\nslug=\"site-favorite-animal\",\ndefaults={\n\"name\": \"Site's Favorite Animal\",\n\"type\": RelationshipTypeChoices.TYPE_ONE_TO_MANY,\n\"source_type\": ContentType.objects.get_for_model(Animal),\n\"source_label\": \"Sites that love this Animal\",\n\"destination_type\": ContentType.objects.get_for_model(Site),\n\"destination_label\": \"Favorite Animal\",\n},\n)\n</code></pre> <p>Then, in the <code>NautobotAppConfig</code> <code>ready()</code> function, we connect this callback function to the <code>nautobot_database_ready</code> signal:</p> <pre><code># __init__.py\nfrom nautobot.apps import nautobot_database_ready, NautobotAppConfig\nfrom .signals import create_site_to_animal_relationship\nclass AnimalSoundsConfig(NautobotAppConfig):\n# ...\ndef ready(self):\nsuper().ready()\nnautobot_database_ready.connect(create_site_to_animal_relationship, sender=self)\nconfig = AnimalSoundsConfig\n</code></pre> <p>After writing this code, run <code>nautobot-server migrate</code> or <code>nautobot-server post_upgrade</code>, then restart the Nautobot server, and you should see that this custom Relationship has now been automatically created.</p>"},{"location":"plugins/development.html#implementing-secrets-providers","title":"Implementing Secrets Providers","text":"<p>Added in version 1.2.0</p> <p>An app can define and register additional providers (sources) for Secrets, allowing Nautobot to retrieve secret values from additional systems or data sources. By default, Nautobot looks for an iterable named <code>secrets_providers</code> within a <code>secrets.py</code> file. (This can be overridden by setting <code>secrets_providers</code> to a custom value on the app's <code>NautobotAppConfig</code>.)</p> <p>To define a new <code>SecretsProvider</code> subclass, we must specify the following:</p> <ul> <li>A unique <code>slug</code> string identifying this provider</li> <li>A human-readable <code>name</code> string (optional; the <code>slug</code> will be used if this is not specified)</li> <li>A Django form for entering the parameters required by this provider, as an inner class named <code>ParametersForm</code></li> <li>An implementation of the <code>get_value_for_secret()</code> API to actually retrieve the value of a given secret</li> </ul> <p>For a simple (insecure!) example, we could define a \"constant-value\" provider that simply stores a constant value in Nautobot itself and returns this value on demand.</p> <p>Warning</p> <p>This is an intentionally simplistic example and should not be used in practice! Sensitive secret data should never be stored directly in Nautobot's database itself.</p> <pre><code># secrets.py\nfrom django import forms\nfrom nautobot.apps.secrets import SecretsProvider\nfrom nautobot.utilities.forms import BootstrapMixin\nclass ConstantValueSecretsProvider(SecretsProvider):\n\"\"\"\n    Example SecretsProvider - this one just returns a user-specified constant value.\n    Obviously this is insecure and not something you'd want to actually use!\n    \"\"\"\nslug = \"constant-value\"\nname = \"Constant Value\"\nclass ParametersForm(BootstrapMixin, forms.Form):\n\"\"\"\n        User-friendly form for specifying the required parameters of this provider.\n        \"\"\"\nconstant = forms.CharField(\nrequired=True,\nhelp_text=\"Constant secret value. &lt;strong&gt;DO NOT USE FOR REAL DATA&lt;/strong&gt;\"\n)\n@classmethod\ndef get_value_for_secret(cls, secret, obj=None, **kwargs):\n\"\"\"\n        Return the value defined in the Secret.parameters \"constant\" key.\n        A more realistic SecretsProvider would make calls to external APIs, etc.,\n        to retrieve a secret from another system as desired.\n        Args:\n            secret (nautobot.extras.models.Secret): The secret whose value should be retrieved.\n            obj (object): The object (Django model or similar) providing context for the secret's\n                parameters.\n        \"\"\"\nreturn secret.rendered_parameters(obj=obj).get(\"constant\")\nsecrets_providers = [ConstantValueSecretsProvider]\n</code></pre> <p>After installing and enabling your app, you should now be able to navigate to <code>Secrets &gt; Secrets</code> and create a new Secret, at which point <code>\"constant-value\"</code> should now be available as a new secrets provider to use.</p>"},{"location":"plugins/development.html#extending-filters","title":"Extending Filters","text":"<p>Added in version 1.3.0</p> <p>Apps can extend any model-based <code>FilterSet</code> and <code>FilterForm</code> classes that are provided by the Nautobot core.</p> <p>The requirements to extend a filter set or a filter form (or both) are:</p> <ul> <li>The file must be named <code>filter_extensions.py</code></li> <li>The variable <code>filter_extensions</code> must be declared in that file, and contain a list of <code>FilterExtension</code> subclasses</li> <li>The <code>model</code> attribute of each <code>FilterExtension</code> subclass must be set to a valid model name in the dotted pair format (<code>{app_label}.{model}</code>, e.g. <code>tenant.tenant</code> or <code>dcim.device</code>)</li> </ul> <p>Nautobot dynamically creates many additional filters based upon the defined filter type. Specifically, there are additional lookup expressions (referred to in code as <code>lookup_expr</code>) that are created for each filter, when there is neither a <code>lookup_expr</code> nor <code>method</code> parameter already set. These dynamically-added lookup expressions are added using a shorthand notation (e.g. <code>icontains</code> is <code>ic</code>). Nautobot will also add the negation of each, for example, so <code>icontains</code> will be added along with not <code>icontains</code> using the <code>ic</code> and <code>nic</code> expressions respectively.</p> <p>The dynamically-added lookup expressions can be found in the source code at nautobot/utilities/constants.py and the mapping logic can be found in nautobot/utilities/filters.py. Please see the documentation on filtering for more information.</p> <p>Tip</p> <p>For developers of apps that define their own model filters, note that the above are added dynamically, as long as the class inherits from <code>nautobot.apps.filters.BaseFilterSet</code>.</p> <p>However, that does not cover every possible use case, to list a few examples:</p> <ul> <li>Usage of a custom <code>method</code> argument on a filter that points to a <code>FilterSet</code> method, which would allow arbitrary filtering using custom logic. This is how the <code>q</code> field search logic is currently performed.</li> <li>Creation of a filter on a field that does not currently have filtering support</li> <li>Convenience methods for highly nested fields</li> </ul> <p>There are several conditions that must be met in order to extend a filter:</p> <ul> <li>The original FilterSet must follow the pattern: <code>f\"{model.__name__}FilterSet\"</code> e.g. <code>TenantFilterSet</code></li> <li>The <code>FilterExtension.filterset_fields</code> attribute must be a valid dict, with each key being the filter name (which must start with the plugin's <code>name</code> + <code>_</code>, e.g. <code>\"example_plugin_description\"</code>, not merely <code>\"description\"</code>) and each value being a valid django-filter filter</li> </ul> <p>Nautobot will dynamically generate the additional relevant lookup expressions of an app's defined custom FilterSet field, so no need to additionally register <code>example_plugin_description__ic</code>, etc.</p> <p>Similar to <code>FilterSet</code> fields, Nautobot provides a default filter form for each model, however that does not cover every possible use case. To list a few examples of why one may want to extend a filter form:</p> <ul> <li>The base filter form does not include a custom filter defined by the app as described above</li> <li>The base filter form does not provide a specific lookup expression to a filterable field, such as allowing regex on name</li> </ul> <p>There are several conditions that must be met in order to extend a filter:</p> <ul> <li>The original <code>FilterForm</code> must follow the pattern: <code>f\"{model.__name__}FilterForm\"</code>, e.g. <code>TenantFilterForm</code></li> <li>The <code>filterform_fields</code> attribute must be a valid dictionary of Django form fields</li> </ul> <p>Note</p> <p>An app is not required to define both <code>filterset_fields</code> and <code>filterform_fields</code>.</p> <p>You can view an example of <code>filter_extensions.py</code> by viewing the one provided with the Example Plugin.</p> <p>Tip</p> <p>The <code>method</code> parameter, if used, must be a callable (method/function). Note that because filters with a <code>method</code> do their filtering in Python code rather than at the database level, performance of <code>method</code> filters is generally much poorer than pure-database filters. The <code>method</code> parameter is not supported when using Dynamic Groups.</p>"},{"location":"plugins/development.html#adding-database-models","title":"Adding Database Models","text":"<p>If your app introduces a new type of object in Nautobot, you'll probably want to create a Django model for it. A model is essentially a Python representation of a database table, with attributes that represent individual columns. Model instances can be created, manipulated, and deleted using queries. Models must be defined within a file named <code>models.py</code>.</p> <p>It is highly recommended to have app models inherit from at least <code>nautobot.apps.models.BaseModel</code> which provides base functionality and convenience methods common to all models.</p> <p>For more advanced usage, you may want to instead inherit from one of Nautobot's \"generic\" models derived from <code>BaseModel</code> -- <code>nautobot.apps.models.OrganizationalModel</code> or <code>nautobot.apps.models.PrimaryModel</code>. The inherent capabilities provided by inheriting from these various parent models differ as follows:</p> Feature <code>django.db.models.Model</code> <code>BaseModel</code> <code>OrganizationalModel</code> <code>PrimaryModel</code> UUID primary key \u274c \u2705 \u2705 \u2705 Object permissions \u274c \u2705 \u2705 \u2705 <code>validated_save()</code> \u274c \u2705 \u2705 \u2705 Change logging \u274c \u274c \u2705 \u2705 Custom fields \u274c \u274c \u2705 \u2705 Relationships \u274c \u274c \u2705 \u2705 Note \u274c \u274c \u2705 \u2705 Tags \u274c \u274c \u274c \u2705 <p>Note</p> <p>When using <code>OrganizationalModel</code> or <code>PrimaryModel</code>, you also must use the <code>@extras_features</code> decorator to specify support for (at a minimum) the <code>\"custom_fields\"</code> and <code>\"relationships\"</code> features.</p> <p>Below is an example <code>models.py</code> file containing a basic model with two character fields:</p> <pre><code># models.py\nfrom django.db import models\nfrom nautobot.apps.models import BaseModel\nclass Animal(BaseModel):\n\"\"\"Base model for animals.\"\"\"\nname = models.CharField(max_length=50)\nsound = models.CharField(max_length=50)\ndef __str__(self):\nreturn self.name\n</code></pre> <p>Once you have defined the model(s) for your app, you'll need to create the database schema migrations. A migration file is essentially a set of instructions for manipulating the database to support your new model, or to alter existing models.</p> <p>Creating migrations can be done automatically using the <code>nautobot-server makemigrations &lt;app_name&gt;</code> management command, where <code>&lt;app_name&gt;</code> is the name of the Python package for your app (e.g. <code>animal_sounds</code>):</p> <pre><code>nautobot-server makemigrations nautobot_animal_sounds\n</code></pre> <p>Note</p> <p>An app must be installed before it can be used with Django management commands. If you skipped this step above, run <code>poetry install</code> from the app's root directory.</p> <pre><code>nautobot-server makemigrations nautobot_animal_sounds\n</code></pre> <p>Example output:</p> <pre><code>Migrations for 'nautobot_animal_sounds':\n  /home/bjones/animal_sounds/nautobot_animal_sounds/migrations/0001_initial.py\n    - Create model Animal\n</code></pre> <p>Next, apply the migration to the database with the <code>nautobot-server migrate &lt;app_name&gt;</code> command:</p> <pre><code>nautobot-server migrate nautobot_animal_sounds\n</code></pre> <p>Example output:</p> <pre><code>Operations to perform:\n  Apply all migrations: nautobot_animal_sounds\nRunning migrations:\n  Applying nautobot_animal_sounds.0001_initial... OK\n</code></pre> <p>For more background on schema migrations, see the Django documentation.</p>"},{"location":"plugins/development.html#using-the-django-admin-interface","title":"Using the Django Admin Interface","text":"<p>Apps can optionally expose their models via Django's built-in administrative interface. This can greatly improve troubleshooting ability, particularly during development. To expose a model, simply register it using Django's <code>admin.register()</code> function. An example <code>admin.py</code> file for the above model is shown below:</p> <pre><code># admin.py\nfrom django.contrib import admin\nfrom nautobot.apps.admin import NautobotModelAdmin\nfrom .models import Animal\n@admin.register(Animal)\nclass AnimalAdmin(NautobotModelAdmin):\nlist_display = ('name', 'sound')\n</code></pre> <p>This will display the app and its model in the admin UI. Staff users can create, change, and delete model instances via the admin UI without needing to create a custom view.</p> <p></p>"},{"location":"plugins/development.html#integrating-with-graphql","title":"Integrating with GraphQL","text":"<p>Apps can optionally expose their models via the GraphQL interface to allow the models to be part of the Graph and to be queried easily. There are two mutually exclusive ways to expose a model to the GraphQL interface.</p> <ul> <li>By using the <code>@extras_features</code> decorator</li> <li>By creating your own GraphQL type definition and registering it within <code>graphql/types.py</code> of your app (the decorator should not be used in this case)</li> </ul> <p>All GraphQL model types defined by your app, regardless of which method is chosen, will automatically support some built-in Nautobot features:</p> <ul> <li>Support for object permissions based on their associated <code>Model</code> class</li> <li>Include any custom fields defined for their <code>Model</code></li> <li>Include any relationships defined for their <code>Model</code></li> <li>Include tags, if the <code>Model</code> supports them</li> </ul>"},{"location":"plugins/development.html#using-the-extras_features-decorator-for-graphql","title":"Using the <code>@extras_features</code> Decorator for GraphQL","text":"<p>To expose a model via GraphQL, simply register it using the <code>@extras_features(\"graphql\")</code> decorator. Nautobot will detect this and will automatically create a GraphQL type definition based on the model. Additionally, if a <code>FilterSet</code> is available at <code>&lt;app_name&gt;.filters.&lt;ModelName&gt;FilterSet</code>, Nautobot will automatically use the filterset to generate GraphQL filtering options for this type as well.</p> <pre><code># models.py\nfrom django.db import models\nfrom nautobot.apps.models import BaseModel, extras_features\n@extras_features(\"graphql\")\nclass Animal(BaseModel):\n\"\"\"Base model for animals.\"\"\"\nname = models.CharField(max_length=50)\nsound = models.CharField(max_length=50)\ndef __str__(self):\nreturn self.name\n</code></pre>"},{"location":"plugins/development.html#creating-your-own-graphql-type-object","title":"Creating Your Own GraphQL Type Object","text":"<p>In some cases, such as when a model is using Generic Foreign Keys, or when a model has constructed fields that should also be reflected in GraphQL, the default GraphQL type definition generated by the <code>@extras_features</code> decorator may not work as the developer intends, and it will be preferable to provide custom GraphQL types.</p> <p>By default, Nautobot looks for custom GraphQL types in an iterable named <code>graphql_types</code> within a <code>graphql/types.py</code> file. (This can be overridden by setting <code>graphql_types</code> to a custom value on the app's <code>NautobotAppConfig</code>.) Each type defined in this way must be a class inheriting from <code>graphene_django.DjangoObjectType</code> or <code>graphene_django_optimizer.OptimizedDjangoObjectType</code> and must follow the standards defined by graphene-django.</p> <p>Nautobot uses a library called <code>graphene-django-optimizer</code> to decrease the time queries take to process. By inheriting from <code>graphene_django_optimizer</code> type classes are automatically optimized.</p> <p>Warning</p> <p>When defining types this way, do not use the <code>@extras_features(\"graphql\")</code> decorator on the corresponding Model class, as no auto-generated GraphQL type is desired for this model.</p> <pre><code># graphql/types.py\nimport graphene_django_optimizer as gql_optimizer\nfrom nautobot_animal_sounds.models import Animal\nclass AnimalType(gql_optimizer.OptimizedDjangoObjectType):\n\"\"\"GraphQL Type for Animal\"\"\"\nclass Meta:\nmodel = Animal\nexclude = [\"sound\"]\ngraphql_types = [AnimalType]\n</code></pre>"},{"location":"plugins/development.html#using-graphql-orm-utilities","title":"Using GraphQL ORM Utilities","text":"<p>GraphQL utility functions:</p> <ol> <li><code>execute_query()</code>: Runs string as a query against GraphQL.</li> <li><code>execute_saved_query()</code>: Execute a saved query from Nautobot database.</li> </ol> <p>Both functions have the same arguments other than <code>execute_saved_query()</code> which requires a slug to identify the saved query rather than a string holding a query.</p> <p>For authentication either a request object or user object needs to be passed in. If there is none, the function will error out.</p> <p>Arguments:</p> <ul> <li><code>execute_query()</code>:<ul> <li><code>query</code> (str): String with GraphQL query.</li> <li><code>variables</code> (dict, optional): If the query has variables they need to be passed in as a dictionary.</li> <li><code>request</code> (django.test.client.RequestFactory, optional): Used to authenticate.</li> <li><code>user</code> (django.contrib.auth.models.User, optional): Used to authenticate.</li> </ul> </li> <li><code>execute_saved_query()</code>:<ul> <li><code>saved_query_slug</code> (str): Slug of a saved GraphQL query.</li> <li><code>variables</code> (dict, optional): If the query has variables they need to be passed in as a dictionary.</li> <li><code>request</code> (django.test.client.RequestFactory, optional): Used to authenticate.</li> <li><code>user</code> (django.contrib.auth.models.User, optional): Used to authenticate.</li> </ul> </li> </ul> <p>Returned is a GraphQL object which holds the same data as returned from GraphiQL. Use <code>execute_query().to_dict()</code> to get the data back inside of a dictionary.</p>"},{"location":"plugins/development.html#adding-web-ui-views","title":"Adding Web UI Views","text":"<p>If your app needs its own page or pages in the Nautobot web UI, you'll need to define views. A view is a particular page tied to a URL within Nautobot, which renders content using a template.</p>"},{"location":"plugins/development.html#nautobotuiviewset","title":"NautobotUIViewSet","text":"<p>Added in version 1.4.0</p> <p>New in Nautobot 1.4 is the debut of <code>NautobotUIViewSet</code>: A powerful app development tool that can save app developer hundreds of lines of code compared to using legacy <code>generic.views</code>. Using it to gain access to default functionalities previous provided by <code>generic.views</code> such as <code>create()</code>, <code>bulk_create()</code>, <code>update()</code>, <code>partial_update()</code>, <code>bulk_update()</code>, <code>destroy()</code>, <code>bulk_destroy()</code>, <code>retrieve()</code> and <code>list()</code> actions.</p> <p>Note that this ViewSet is catered specifically to the UI, not the API.</p> <p>Concrete examples on how to use <code>NautobotUIViewSet</code> resides in <code>nautobot.circuits.views</code>.</p> <p>Below we provide an example on how to use <code>NautobotUIViewSet</code> on a theoretical app model.</p> <pre><code>from nautobot.apps.views import NautobotUIViewSet\nfrom yourapp import filters, forms, models, tables\nfrom yourapp.api import serializers\nclass YourAppModelUIViewSet(NautobotUIViewSet):\nbulk_create_form_class = forms.YourAppModelCSVForm\nbulk_update_form_class = forms.YourAppModelBulkEditForm\nfilterset_class = filters.YourAppModelFilterSet\nfilterset_form_class = forms.YourAppModelFilterForm\nform_class = forms.YourAppModelForm\ncreate_form_class = forms.YourAppModelCreateForm\nupdate_form_class = forms.YourAppModelUpdateForm\nqueryset = models.YourAppModel.objects.all()\nserializer_class = serializers.YourAppModelSerializer\ntable_class = tables.YourAppModelTable\n</code></pre>"},{"location":"plugins/development.html#setting-viewset-attributes","title":"Setting ViewSet Attributes","text":"<p>One caveat of using the NautobotUIViewSet is that the <code>queryset</code>, <code>serializer_class</code> and <code>table_class</code> attribute of the <code>YourAppModelUIViewSet</code> has to be set before most of the <code>NautobotUIViewSet</code> functionalities will become available.</p> <p>By default the URL patterns generated by a <code>NautobotUIViewSet</code> are based on the model's <code>slug</code> (<code>/model-name/&lt;slug&gt;/</code> for the detail view, <code>/model-name/&lt;slug&gt;/edit/</code> for the edit view, etc.). If your model lacks a <code>slug</code> field, or if you otherwise need to use a different field to look up an object, just override the default <code>lookup_field</code> in your ViewSet attributes:</p> <pre><code>from nautobot.apps.views import NautobotUIViewSet\nclass YourAppModelUIViewSet(NautobotUIViewSet):\n...\nlookup_field = \"pk\"\n...\n</code></pre> <p>Note</p> <p>Using a field other than the default <code>slug</code> or the alternative field <code>pk</code> (as shown in the example above), may result in certain pieces of the UI not displaying (for example, the edit and delete buttons on the object detail view). This is due to the URL expecting a named key of slug or pk, rather than id.</p>"},{"location":"plugins/development.html#view-template-context","title":"View Template Context","text":"<p>Templates can benefit from a very rich context passed down from the views and renderer, including forms, tables, as well as any other information that may be helpful for rendering templates. The keys it provides are as follows:</p> <ul> <li><code>content_type</code>: The ContentType object for the associated model</li> <li><code>filter_form</code>: The FilterForm object for the associated model</li> <li><code>form</code>: A Form object for the associated model if relevant (<code>None</code> for list and detail/retrieve views)</li> <li><code>object</code>: An instance of the associated mode if available (<code>None</code> for list and bulk operation views)</li> <li><code>permissions</code>: Summary of user permissions for the given model</li> <li><code>return_url</code>: The relevant return URL</li> <li><code>table</code>: A Table object for the associated model if relevant (<code>None</code> for detail/retrieve and update views)</li> <li><code>table_config_form</code>: A TableConfigForm object for the associated <code>table</code>, providing the ability to customize the table</li> <li><code>verbose_name</code>: The singular form of the model's name</li> <li><code>verbose_name_plural</code>: The plural form of the model's name</li> </ul> <p>An example from editing a Provider object:</p> <pre><code>{\n'content_type': &lt;ContentType: circuits | provider&gt;,\n'filter_form': &lt;ProviderFilterForm bound=True, valid=Unknown, fields=(region;site;location;q;asn;tag)&gt;,\n'form': &lt;ProviderForm bound=False, valid=Unknown, fields=(name;slug;asn;account;portal_url;noc_contact;admin_contact;comments;tags;object_note)&gt;,\n'object': &lt;Provider: NautobotProvider&gt;,\n'permissions': {'add': True, 'change': True, 'delete': True, 'view': True},\n'return_url': '/circuits/providers/nautobotprovider',\n'table': None,\n'table_config_form': None,\n'verbose_name': 'provider',\n'verbose_name_plural': 'providers'\n}\n</code></pre> <p>Other context keys may be available for certain views:</p> <ul> <li><code>editing</code>: Provided for create and update views to help the template determine if this is a new or existing object</li> <li><code>action_buttons</code>: Provided for the list view for the top of table buttons (such as \"Add\" and \"Export\")</li> </ul> <p>You may see other context keys as well, but any not documented above should not be relied upon as they may be removed in a future release. Some examples of those are:</p> <ul> <li><code>changelog_url</code>: This can now be retrieved from the object itself, via <code>object.get_changelog_url</code>, if the object supports change-logging</li> <li><code>obj</code>: Please use <code>object</code> instead</li> <li><code>obj_type</code>: Please use <code>verbose_name</code> instead</li> <li><code>obj_type_plural</code>: Please use <code>verbose_name_plural</code> instead</li> </ul>"},{"location":"plugins/development.html#excluding-viewmixins-from-nautobotuiviewset","title":"Excluding ViewMixins from NautobotUIViewSet","text":"<p>For app models that do not require certain views, simply inherit directly from the <code>ViewMixin</code> classes available in <code>nautobot.apps.views</code> instead of <code>NautobotUIViewSet</code>.</p> <p>Concrete examples for excluding <code>ViewMixins</code>, checkout <code>CircuitTerminationUIViewSet</code> and <code>CircuitTypeUIViewSet</code> in <code>nautobot.circuits.views</code>.</p> <pre><code>## An app model viewset that does not support bulk views and operations\nimport nautobot.apps.views\nclass YourAppModelUIViewSet(\nnautobot.apps.views.ObjectListViewMixin,\nnautobot.apps.views.ObjectDetailViewMixin,\nnautobot.apps.views.ObjectEditViewMixin,\nnautobot.apps.views.ObjectDestroyViewMixin,\n):\nfilterset_class = YourAppModelFilterSet\nfilterset_form_class = YourAppModelFilterForm\nform_class = YourAppModelForm\nqueryset = YourAppModel.objects.all()\nserializer_class = serializers.YourAppModelSerializer\ntable_class = YourAppModelTable\n# You do not need to specify attributes that are not needed.\n</code></pre> <p>Excluding unwanted urls from <code>NautobotUIViewSetRouter</code> is done for you at the ViewSet level. If you do not inherit the unwanted ViewMixins, the corresponding route from the router will not be published.</p> <pre><code># urls.py\n# All the urls correspond to BulkViewMixins will not be published when you register your ViewSet with the router.\nrouter.register(\"yourappmodel\", views.YourAppModelUIViewSet)\n</code></pre>"},{"location":"plugins/development.html#template-naming-for-nautobotuiviewset","title":"Template Naming for NautobotUIViewSet","text":"<p>Template naming is very intuitive in NautobotUIViewSet. In <code>templates/yourapp</code> folder, name your templates following the convention <code>{model_name}_{action}.html</code>.</p> ViewMixins action ObjectListViewMixin list ObjectDetailViewMixin retrieve ObjectEditViewMixin create/update ObjectDestroyViewMixin destroy ObjectBulkDestroyViewMixin bulk_destroy ObjectBulkCreateViewMixin bulk_create ObjectBulkUpdateViewMixin bulk_update <p>For example, for a DetailView template for <code>YourAppModel</code>, the template name will be <code>yourapp/yourappmodel_retrieve.html</code>, for a BulkCreateView template for <code>yourappmodel</code>, the template name will be <code>yourapp/yourappmodel_bulk_create.html</code> and etc.</p> <p>If you do not provide your own templates in the <code>yourapp/templates/yourapp</code> folder, <code>NautobotUIViewSet</code> will fall back to <code>generic/object_{self.action}.html</code>.</p> <p>Since in many cases the <code>create</code> and <code>update</code> templates for a model will be identical, you are not required to create both. If you provide a <code>{app_label}/{model_opts.model_name}_create.html</code> file but not a <code>{app_label}/{model_opts.model_name}_update.html</code> file, then when you update an object, it will fall back to <code>{app_label}/{model_opts.model_name}_create.html</code> and vice versa.</p>"},{"location":"plugins/development.html#nautobotuiviewsetrouter","title":"NautobotUIViewSetRouter","text":"<p>With <code>NautobotUIViewSet</code> as the base UI ViewSet for <code>YourAppModel</code>, it is required to register your urls with the help of <code>NautobotUIViewSetRouter</code>.</p> <p>For a concrete example on how to use <code>NautobotUIViewSetRouter</code>, see <code>nautobot.circuits.urls</code>.</p> <p>Below is a theoretical <code>urls.py</code> file for <code>YourAppModel</code>:</p> <pre><code>from django.urls import path\nfrom nautobot.apps.urls import NautobotUIViewSetRouter\nfrom your_app import views\nrouter = NautobotUIViewSetRouter()\nrouter.register(\"yourappmodel\", views.YourAppModelUIViewSet)\nurlpatterns = [\n# Extra urls that do not follow the patterns of `NautobotUIViewSetRouter` go here.\n# changelog, notes and etc.\n...\npath(\n\"yourappmodels/&lt;slug:slug&gt;/changelog/\",\nObjectChangeLogView.as_view(),\nname=\"yourappmodel_changelog\",\nkwargs={\"model\": yourappmodel},\n),\npath(\n\"yourappmodels/&lt;slug:slug&gt;/notes/\",\nObjectNotesView.as_view(),\nname=\"yourappmodel_notes\",\nkwargs={\"model\": yourappmodel},\n),\n...\n]\nurlpatterns += router.urls\n</code></pre> <p>Added in version 1.5.1</p> <p>Changelog and Notes views and URLs are now provided in the NautobotUIViewSet and NautobotUIViewSetRouter.</p>"},{"location":"plugins/development.html#adding-custom-views-to-nautobotuiviewset-nautobotuiviewsetrouter","title":"Adding Custom Views To NautobotUIViewSet &amp; NautobotUIViewSetRouter","text":"<p>Added in version 1.6.0</p> <p>Via PR #4045, notes and changelog views provided by mixins have now been moved to this pattern.</p> <p>DjangoRestFramework provides the ability to decorate a method on a ViewSet with <code>@action(detail=True)</code> to add the method as a view to the ViewSetRouter. This method must return a fully rendered HTML view.</p> <p>Below is an example of adding a custom view to the plugin ViewSet, a few considerations to keep in mind is the method name is the <code>action</code> and will be used for template lookup and URL naming. The expected template must be named <code>yourapp/yourappmodel_customview.html</code> and the reversible URL name will be <code>plugins:yourapp:yourappmodel_customview</code>.</p> <pre><code>from nautobot.apps.views import NautobotUIViewSet\nfrom rest_framework.decorators import action\nfrom rest_framework.response import Response\nfrom yourapp import filters, forms, models, tables\nfrom yourapp.api import serializers\nclass YourAppModelUIViewSet(NautobotUIViewSet):\nbulk_create_form_class = forms.YourAppModelCSVForm\nbulk_update_form_class = forms.YourAppModelBulkEditForm\nfilterset_class = filters.YourAppModelFilterSet\nfilterset_form_class = forms.YourAppModelFilterForm\nform_class = forms.YourAppModelForm\nqueryset = models.YourAppModel.objects.all()\nserializer_class = serializers.YourAppModelSerializer\ntable_class = tables.YourAppModelTable\n@action(detail=True)\ndef customview(self, request, *args, **kwargs):\n\"\"\"Context passed to template for rendering.\n        Expected URL pattern will be `/plugins/yourapp/yourappmodel/&lt;uuid&gt;/customview/`\n        \"\"\"\ncontext = {\n\"some_key\": \"some value\",\n}\nreturn Response(context)\n</code></pre>"},{"location":"plugins/development.html#utilizing-generic-django-views","title":"Utilizing Generic Django Views","text":"<p>The use of <code>generic</code> Django views can aid in app development. As an example, let's write a view which displays a random animal and the sound it makes. First, create the view in <code>views.py</code>:</p> <pre><code># views.py\nfrom django.shortcuts import render\nfrom django.views.generic import View\nfrom .models import Animal\nclass RandomAnimalView(View):\n\"\"\"Display a randomly-selected Animal.\"\"\"\ndef get(self, request):\nanimal = Animal.objects.order_by('?').first()\nreturn render(request, 'nautobot_animal_sounds/animal.html', {\n'animal': animal,\n})\n</code></pre> <p>This view retrieves a random animal from the database and and passes it as a context variable when rendering a template named <code>animal.html</code>, which doesn't exist yet. To create this template, first create a directory named <code>templates/nautobot_animal_sounds/</code> within the app source directory. (We use the app's name as a subdirectory to guard against naming collisions with other apps.) Then, create a template named <code>animal.html</code> as described below.</p>"},{"location":"plugins/development.html#utilizing-nautobot-generic-views","title":"Utilizing Nautobot Generic Views","text":"<p>Added in version 1.1.0</p> <p>Via PR #14, some <code>generic</code> views have been exposed to help aid in plugin development. These views have some requirements that must be in place in order to work. These can be used by importing them from <code>from nautobot.core.views import generic</code>.</p> <p>More documentation and examples can be found in Generic Views guide.</p>"},{"location":"plugins/development.html#extending-the-base-template","title":"Extending the Base Template","text":"<p>Nautobot provides a base template to ensure a consistent user experience, which apps can extend with their own content. This template includes four content blocks:</p> <ul> <li><code>title</code> - The page title</li> <li><code>header</code> - The upper portion of the page</li> <li><code>content</code> - The main page body</li> <li><code>javascript</code> - A section at the end of the page for including Javascript code</li> </ul> <p>For more information on how template blocks work, consult the Django documentation.</p> <pre><code>{# templates/nautobot_animal_sounds/animal.html #}\n{% extends 'base.html' %}\n\n{% block content %}\n    {% with config=settings.PLUGINS_CONFIG.nautobot_animal_sounds %}\n        &lt;h2 class=\"text-center\" style=\"margin-top: 200px\"&gt;\n            {% if animal %}\n                The {{ animal.name|lower }} says\n                {% if config.loud %}\n                    {{ animal.sound|upper }}!\n                {% else %}\n                    {{ animal.sound }}\n                {% endif %}\n            {% else %}\n                No animals have been created yet!\n            {% endif %}\n        &lt;/h2&gt;\n    {% endwith %}\n{% endblock %}\n</code></pre> <p>The first line of the template instructs Django to extend the Nautobot base template and inject our custom content within its <code>content</code> block.</p> <p>Note</p> <p>Django renders templates with its own custom template language. This template language is very similar to Jinja2, however there are some important differences to keep in mind.</p>"},{"location":"plugins/development.html#registering-url-patterns","title":"Registering URL Patterns","text":"<p>Finally, to make the view accessible to users, we need to register a URL for it. We do this in <code>urls.py</code> by defining a <code>urlpatterns</code> variable containing a list of paths.</p> <pre><code># urls.py\nfrom django.urls import path\nfrom . import views\nurlpatterns = [\npath('random/', views.RandomAnimalView.as_view(), name='random_animal'),\n]\n</code></pre> <p>A URL pattern has three components:</p> <ul> <li><code>route</code> - The unique portion of the URL dedicated to this view</li> <li><code>view</code> - The view itself</li> <li><code>name</code> - A short name used to identify the URL path internally</li> </ul> <p>This makes our view accessible at the URL <code>/plugins/animal-sounds/random/</code>. (Remember, our <code>AnimalSoundsConfig</code> class sets our app's base URL to <code>animal-sounds</code>.) Viewing this URL should show the base Nautobot template with our custom content inside it.</p> <p>Tip</p> <p>As a next step, you would typically want to add links from the Nautobot UI to this view, either from the navigation menu, the Nautobot home page, and/or the Installed Plugins view.</p>"},{"location":"plugins/development.html#adding-rest-api-endpoints","title":"Adding REST API Endpoints","text":"<p>Apps can declare custom endpoints on Nautobot's REST API to retrieve or manipulate models or other data. These behave very similarly to views, except that instead of rendering arbitrary content using a template, data is returned in JSON format using a serializer. Nautobot uses the Django REST Framework, which makes writing API serializers and views very simple.</p> <p>First, create a serializer for the <code>Animal</code> model, in <code>api/serializers.py</code>:</p> <pre><code># api/serializers.py\nfrom nautobot.apps.api import ValidatedModelSerializer\nfrom nautobot_animal_sounds.models import Animal\nclass AnimalSerializer(ValidatedModelSerializer):\n\"\"\"API serializer for interacting with Animal objects.\"\"\"\nclass Meta:\nmodel = Animal\nfields = ('id', 'name', 'sound')\n</code></pre> <p>Tip</p> <p>For more full-featured models, you should use one of the other base classes from <code>nautobot.apps.api</code> such as <code>NautobotModelSerializer</code>.</p> <p>Next, create a generic API view set that allows basic CRUD (create, read, update, and delete) operations for Animal instances. This is defined in <code>api/views.py</code>:</p> <pre><code># api/views.py\nfrom rest_framework.viewsets import ModelViewSet\nfrom nautobot_animal_sounds.models import Animal\nfrom .serializers import AnimalSerializer\nclass AnimalViewSet(ModelViewSet):\n\"\"\"API viewset for interacting with Animal objects.\"\"\"\nqueryset = Animal.objects.all()\nserializer_class = AnimalSerializer\n</code></pre> <p>Tip</p> <p>For more full-featured models, you should probably use <code>nautobot.apps.api.NautobotModelViewSet</code> as a base class.</p> <p>Finally, register a URL for our endpoint in <code>api/urls.py</code>. This file must define a variable named <code>urlpatterns</code>.</p> <pre><code># api/urls.py\nfrom rest_framework import routers\nfrom .views import AnimalViewSet\nrouter = routers.DefaultRouter()\nrouter.register('animals', AnimalViewSet)\nurlpatterns = router.urls\n</code></pre> <p>With these three components in place, we can request <code>/api/plugins/animal-sounds/animals/</code> to retrieve a list of all Animal objects defined.</p> <p></p> <p>Warning</p> <p>This example is provided as a minimal reference implementation only. It does not address authentication, performance, or the myriad of other concerns that app authors should have.</p>"},{"location":"plugins/development.html#adding-help-documentation","title":"Adding Help Documentation","text":"<p>If you are using the <code>generic.ObjectEditView</code> from Nautobot for your object, the form can automatically include a help icon with a link to that object's documentation. For this to happen, Nautobot must be able to find the documentation for this object in a specific directory tree within your app:</p> <pre><code>app_name/                   # \"nautobot_animal_sounds\"\n  - static/\n    - app_name/             # \"nautobot_animal_sounds\"\n      - docs/\n        - index.html\n        - models/\n          - object_model.html  # \"animal.html\"\n</code></pre>"},{"location":"plugins/development.html#overriding-existing-functionality","title":"Overriding Existing Functionality","text":""},{"location":"plugins/development.html#replacing-views","title":"Replacing Views","text":"<p>Added in version 1.4.0</p> <p>You may override any of the core or app views by providing an <code>override_views</code> <code>dict</code> in an app's <code>views.py</code> file.</p> <p>To override a view, you must specify the view's fully qualified name as the <code>dict</code> key which consists of the app name followed by the view's name separated by a colon, for instance <code>dcim:device</code>. The <code>dict</code> value should be the overriding view function.</p> <p>A simple example to override the device detail view:</p> <pre><code># views.py\nfrom django.shortcuts import HttpResponse\nfrom django.views import generic\nclass DeviceViewOverride(generic.View):\ndef get(self, request, *args, **kwargs):\nreturn HttpResponse((\"Hello world! I'm a view which \"\n\"overrides the device object detail view.\"))\noverride_views = {\n\"dcim:device\": DeviceViewOverride.as_view(),\n}\n</code></pre>"},{"location":"plugins/development.html#note-url-endpoint","title":"Note URL Endpoint","text":"<p>Added in version 1.4.0</p> <p>Models that inherit from <code>PrimaryModel</code> and <code>OrganizationalModel</code> can have notes associated. In order to utilize this new feature you will need to add the endpoint to <code>urls.py</code>. Here is an option to be able to support both 1.4+ and older versions of Nautobot:</p> <pre><code>urlpatterns = [\npath('random/', views.RandomAnimalView.as_view(), name='random_animal'),\n]\ntry:\nfrom nautobot.extras.views import ObjectNotesView\nurlpatterns.append(\npath(\n'random/&lt;slug:slug&gt;/notes/),\nObjectNotesView.as_view(),\nname=\"random_notes\",\nkwargs={\"model\": Random},\n)\n)\nexcept ImportError:\npass\n</code></pre>"},{"location":"plugins/development.html#prometheus-metrics","title":"Prometheus Metrics","text":"<p>Added in version 1.5.13</p> <p>It is possible for Nautobot apps to provide their own Prometheus metrics. There are two general ways to achieve this:</p> <ol> <li>Use the <code>prometheus_client</code> library directly in your app code. Depending on whether that code runs in the web server or the worker context, the metric will show up in the respective <code>/metrics</code> endpoint(s) (i.e. metrics generated in the worker context show up in the worker's endpoint and those generated in the web application's context show up in the web application's endpoint).</li> <li>If the metric cannot be generated alongside existing code, apps can implement individual metric generator functions and register them into a list called <code>metrics</code> in a file named <code>metrics.py</code> at the root of the app. Nautobot will automatically read these and expose them via its <code>/metrics</code> endpoint. The following code snippet shows an example metric defined this way:</li> </ol> <pre><code># metrics.py\nfrom prometheus_client.metrics_core import GaugeMetricFamily\nfrom nautobot_animal_sounds.models import Animal\ndef metric_animals():\ngauges = GaugeMetricFamily(\"nautobot_noisy_animals_count\", \"Nautobot Noisy Animals Count\", labels=[])\nscreaming_animal_count = Animal.objects.filter(loudness=\"noisy\").count()\ngauges.add_metric(labels=[], value=screaming_animal_count)\nyield gauges\nmetrics = [metric_example]\n</code></pre>"},{"location":"plugins/development.html#testing-apps","title":"Testing Apps","text":"<p>In general apps can be tested like other Django apps. In most cases you'll want to run your automated tests via the <code>nautobot-server test &lt;app_module&gt;</code> command or, if using the <code>coverage</code> Python library, <code>coverage run --module nautobot.core.cli test &lt;app_module&gt;</code>.</p>"},{"location":"plugins/development.html#factories","title":"Factories","text":"<p>Added in version 1.5.0</p> <p>The <code>TEST_USE_FACTORIES</code> setting defaults to <code>False</code> when testing apps, primarily for backwards-compatibility reasons. It can prove a useful way of populating a baseline of Nautobot database data for your tests and save you the trouble of creating a large amount of baseline data yourself. We recommend adding <code>factory-boy</code> to your app's development dependencies and settings <code>TEST_USE_FACTORIES = True</code> in your app's development/test <code>nautobot_config.py</code> to take advantage of this.</p>"},{"location":"plugins/development.html#performance-tests","title":"Performance Tests","text":"<p>Added in version 1.5.0</p>"},{"location":"plugins/development.html#running-performance-tests","title":"Running Performance Tests","text":"<p>You need to install <code>django-slowtests</code> as a part of your app dev dependency to run performance tests. It has a very intuitive way to measure the performance of your own tests for your app  (all you have to do is tag your tests with <code>performance</code>) and do <code>invoke performance-test</code> to get the time to run your tests with <code>NautobotPerformanceTestRunner</code>.</p> <p><code>NautobotPerformanceTestRunner</code> is used by adding the flag <code>--testrunner nautobot.core.tests.runner.NautobotPerformanceTestRunner</code> to the <code>coverage run</code> command used for unit tests. This flag will replace the default <code>NautobotTestRunner</code> while retaining all its functionalities with the addition of performance evaluation after test runs. Checkout Performance Tests for more detail.</p> <pre><code>@tag(\"performance\")\ndef test_your_app(self)\npass\n...\n</code></pre>"},{"location":"plugins/development.html#gathering-performance-test-baseline-data","title":"Gathering Performance Test Baseline Data","text":"<p>If you want to add baselines for your own test to <code>nautobot/core/tests/performance_baselines.yml</code> or have your own baseline yaml file for performance testing, specify a different file path for  <code>TEST_PERFORMANCE_BASELINE_FILE</code> in app's development/test <code>nautobot_config.py</code>, and store the output of <code>invoke performance-test --performance-snapshot</code> command in that file. <code>--performance-snapshot</code> flag will store the results of your performance test to <code>report.yml</code> and all you need to do is copy/paste the result to the file set by <code>TEST_PERFORMANCE_BASELINE_FILE</code>. Now you have baselines for your own tests! Example output of <code>invoke performance-test --performance-snapshot</code>:</p> <pre><code>tests:\n- name: &gt;-\ntest_run_job_with_sensitive_variables_and_requires_approval\n(nautobot.extras.tests.test_views.JobTestCase)\nexecution_time: 4.799533\n- name: test_run_missing_schedule (nautobot.extras.tests.test_views.JobTestCase)\nexecution_time: 4.367563\n- name: test_run_now_missing_args (nautobot.extras.tests.test_views.JobTestCase)\nexecution_time: 4.363194\n- name: &gt;-\ntest_create_object_with_constrained_permission\n(nautobot.extras.tests.test_views.GraphQLQueriesTestCase)\nexecution_time: 3.474244\n- name: &gt;-\ntest_run_now_constrained_permissions\n(nautobot.extras.tests.test_views.JobTestCase)\nexecution_time: 2.727531\n</code></pre> <p>We recommend adding <code>django-slowtests</code> to your app's development dependencies to leverage this functionality to build better performing apps.</p>"},{"location":"plugins/porting-from-netbox.html","title":"Porting NetBox Plugins to Nautobot","text":"<p>Given an existing NetBox plugin, it will range from straightforward to very complicated to create a port of this plugin that's compatible with Nautobot, though in general it should be easier than developing a comparable plugin entirely from scratch. Of course, it would be impossible to provide a generalized, step-by-step guide that would cover all possibilities, but this document at least documents some known tips and tricks for this purpose.</p>"},{"location":"plugins/porting-from-netbox.html#updating-python-module-import-paths","title":"Updating Python module import paths","text":"<p>The most likely first issue you will encounter will be a module import problem, and in most cases a simple change to the name of imported modules will suffice:</p> <ul> <li><code>circuits.* -&gt; nautobot.circuits.*</code></li> <li><code>dcim.* -&gt; nautobot.dcim.*</code></li> <li><code>extras.* -&gt; nautobot.extras.*</code></li> <li><code>ipam.* -&gt; nautobot.ipam.*</code></li> <li><code>netbox.* -&gt; nautobot.core.*</code></li> <li><code>tenancy.* -&gt; nautobot.tenancy.*</code></li> <li><code>utilities.* -&gt; nautobot.utilities.*</code></li> <li><code>virtualization.* -&gt; nautobot.virtualization.*</code></li> </ul>"},{"location":"plugins/porting-from-netbox.html#regenerating-database-migrations","title":"Regenerating database migrations","text":"<p>In general, your migrations files will not port over easily; you will probably want to delete and re-generate them (<code>nautobot-server makemigrations &lt;plugin-name&gt;</code>) instead.</p>"},{"location":"release-notes/index.html","title":"Release Notes","text":"<p>All the published release notes can be found via the navigation menu. All patch releases are included in the same minor release (e.g. <code>Version 1.5</code>) document.</p>"},{"location":"release-notes/version-1.0.html","title":"Version 1.0","text":""},{"location":"release-notes/version-1.0.html#nautobot-v10","title":"Nautobot v1.0","text":"<p>This document describes all new features and changes in Nautobot 1.0, a divergent fork of NetBox 2.10.  For the launch of Nautobot 1.0 and for the purpose of this document,  all \u201cnew\u201d features or \u201cchanges\u201d are referring to the features and changes comparing Nautobot 1.0 coming from NetBox 2.10.  All future release notes will only refer to features and changes relative to prior releases of Nautobot.</p> <p>Users migrating from NetBox to Nautobot should also refer to the \"Migrating from NetBox\" documentation as well.</p>"},{"location":"release-notes/version-1.0.html#release-overview","title":"Release Overview","text":""},{"location":"release-notes/version-1.0.html#added","title":"Added","text":""},{"location":"release-notes/version-1.0.html#configuration-context-association-to-device-types","title":"Configuration Context Association to Device Types","text":"<p>Config contexts can now be associated to (filtered by) Device Types, in addition to all other previously supported associations.</p>"},{"location":"release-notes/version-1.0.html#custom-fields-on-all-models","title":"Custom Fields on All Models","text":"<p>Custom fields allow user-defined fields, or attributes, on specific data models such as sites or devices. Historically, custom fields have been supported only on \u201cprimary\u201d models (Site, Device, Rack, Virtual Machine, etc.) but not on \u201corganizational\u201d models (Region, Device Platform, Rack Group, etc.) or on \u201cdevice component\u201d models like interfaces. As of Nautobot 1.0, custom fields are now supported on every model, including interfaces.</p> <p>Once created the name or data type of the custom field cannot be modified. Choices for custom fields are now stored as discrete database objects. Choices that are in active use cannot be deleted.</p>"},{"location":"release-notes/version-1.0.html#customizable-statuses","title":"Customizable Statuses","text":"<p>A new \"Status\" model has been added, allowing users to define additional permitted values for the \"status\" field on any or all of the models that have such a field (Cable, Circuit, Device, IPAddress, PowerFeed, Prefix, Rack, Site, VirtualMachine, VLAN). The default sets of statuses permitted for each model remain the same as in NetBox 2.10, but you are now free to define additional status values as suit your needs and workflows.</p> <p>One example application for custom statuses would be in defining additional values to apply to a Device as part of an automation workflow, with statuses such as <code>upgrading</code> or <code>rebooting</code> to reflect the progress of each device through the workflow, allowing automation to identify the appropriate next action to take for each status.</p>"},{"location":"release-notes/version-1.0.html#data-validation-plugin-api","title":"Data Validation Plugin API","text":"<p>Data quality assurance in Nautobot becomes easier with the new data validation plugin API. This makes it possible to codify organizational standards.  Using a data validation plugin, an organization can ensure all data stored in Nautobot meets its specific standards, such as enforcing device naming standards, ensuring certain prefixes are never used, asserting that VLANs always have a name, requiring interfaces to always have a description, etc. The ability to ensure a high quality of data becomes much more streamlined; error-prone, manual process becomes automated; and there is no more need to actively run reports to check data quality.</p>"},{"location":"release-notes/version-1.0.html#detail-views-for-more-models","title":"Detail Views for more Models","text":"<p>Detailed view pages are now provided for models including ClusterGroup, ClusterType, DeviceRole, Manufacturer, Platform, and RackRole.</p>"},{"location":"release-notes/version-1.0.html#docker-based-development-environment","title":"Docker-Based Development Environment","text":"<p>In addition to the previously available virtual-environment-based developer workflow, Nautobot now additionally supports a development environment based around Docker as an alternative.</p>"},{"location":"release-notes/version-1.0.html#git-integration-as-a-data-source","title":"Git Integration as a Data Source","text":"<p>Git integration offers users an option to integrate into a more traditional NetDevOps pipeline for managing Python modules, Jinja templates, and YAML/JSON data.  There are several use cases that have historically required users to either manage Python modules on the filesystem or use Jinja2 templates within the GUI. With this new feature, users can add a Git repository from the UI or REST API, the contents of which will be synchronized into Nautobot immediately and can be later refreshed on-demand. This allows users to more easily update and manage:</p> <ul> <li>Jobs - store your Python modules that define Jobs (formerly known as Custom Scripts and/or Reports) in a Git repository</li> <li>Export Templates - store your Jinja templates used to create an export template in a Git repository</li> <li>Config Contexts - store your YAML/JSON data used within a config context in a Git repository</li> <li>Arbitrary Files - usable by custom plugins and apps</li> </ul> <p>Not only does this integration and feature simplify management of these features in Nautobot, it offers users the ability to use Git workflows for the management of the jobs, templates, and data ensuring there has been proper review and approval before updating them on the system.</p>"},{"location":"release-notes/version-1.0.html#graphql-support","title":"GraphQL Support","text":"<p>Nautobot now provides an HTTP API endpoint supporting GraphQL. This feature adds a tremendous amount of flexibility in querying data from Nautobot. It offers the ability to query for specific datasets across multiple models in a single query.  Historically, if you wanted to retrieve the list of devices, all of their interfaces, and all of their neighbors, this would require numerous REST API calls.  GraphQL gives the flexibility to get all the data desired and nothing unnecessary, all in a single API call.</p> <p>For more details, please refer to the GraphQL website, as well as to the Nautobot GraphQL documentation.</p>"},{"location":"release-notes/version-1.0.html#installable-python-package","title":"Installable Python Package","text":"<p>Nautobot is now installable as a self-contained Python package via <code>pip install nautobot</code>. Packages are released to PyPI with every Nautobot update.</p>"},{"location":"release-notes/version-1.0.html#nautobot-server-command","title":"<code>nautobot-server</code> command","text":"<p>Nautobot now includes a dedicated administrative CLI command, <code>nautobot-server</code>.</p>"},{"location":"release-notes/version-1.0.html#plugin-api-enhancements","title":"Plugin API Enhancements","text":"<p>Plugins can now provide custom data validation logic.</p> <p>Plugins can now include executable Jobs (formerly known as Custom Scripts and Reports) that will automatically be added to the list of available Jobs for a user to execute.</p> <p>Additional data models defined by a plugin are automatically made available in GraphQL.</p> <p>Plugins can now define additional Django apps that they require and these dependencies will be automatically enabled when the plugin is activated.</p> <p>Nautobot now allows and encourages plugins to make use of the generic view classes and page templates provided in <code>nautobot.core.views.generic</code> and <code>nautobot/core/templates/generic/</code> respectively.</p>"},{"location":"release-notes/version-1.0.html#single-sign-on-social-authentication-support","title":"Single Sign-On / Social Authentication Support","text":"<p>Nautobot now supports single sign on as an authentication option using OAuth2, OpenID, SAML, and others, using the social-auth-app-django module. For more details please refer to the guide on SSO authentication.</p>"},{"location":"release-notes/version-1.0.html#user-defined-relationships","title":"User-Defined Relationships","text":"<p>User-Defined, or \"custom\", relationships allow users to create their own relationships between models in Nautobot to best suit the needs of their specific network design.</p> <p>For example, a VLAN is mapped to a Site by default.  After a VLAN is created today, you then assign that VLAN to an Interface on a Device. This Device should be within the initial mapped Site.  However, many networks today have different requirements and relationships for VLANs (and many other models): VLANs may be limited to racks in Layer 3 DC fabrics; VLANs may be mapped to multiple buildings in a campus; they may span sites. Relationships allow you to express these additional requirements and relationships without requiring code changes to Nautobot itself. Other use cases include circuits, ASNs, or IP addressing -- just to name a few -- allowing users to define the exact relationships required for their network.</p>"},{"location":"release-notes/version-1.0.html#changed","title":"Changed","text":""},{"location":"release-notes/version-1.0.html#code-reorganization","title":"Code Reorganization","text":"<p>All of the individual Django apps in NetBox (<code>dcim</code>, <code>extras</code>, <code>ipam</code>, etc.) have been moved into a common <code>nautobot</code> Python package namespace. The <code>netbox</code> application namespace has been moved to <code>nautobot.core</code>. This will require updates when porting NetBox custom scripts and reports to Nautobot jobs, as well as when porting NetBox plugins to Nautobot.</p>"},{"location":"release-notes/version-1.0.html#packaging-changes","title":"Packaging Changes","text":"<p>Nautobot is now packaged using Poetry and builds as an installable Python package. <code>setup.py</code> and <code>requirements.txt</code> have been replaced with <code>pyproject.toml</code>. Releases of Nautobot are now published to PyPI, the Python Package Index, and therefore can now be installed using <code>pip install nautobot</code>.</p>"},{"location":"release-notes/version-1.0.html#installation-and-startup","title":"Installation and Startup","text":"<p>Because Nautobot may be installed using <code>pip</code>, we have replaced <code>manage.py</code> with a dedicated <code>nautobot-server</code> CLI command used to adminster the server. It works exactly as <code>manage.py</code> does, but does not require you to be within the project root directory.</p>"},{"location":"release-notes/version-1.0.html#configuration-and-settings","title":"Configuration and Settings","text":"<p>Nautobot has done away with the requirement to duplicate or modify files anywhere in the source code. The <code>configuration.py</code> file has been replaced with a <code>nautobot_config.py</code> file that may be read from anywhere on your system. It is also much easier to add custom settings or overload nearly any default setting.</p> <p>To facilitate this, many automatically generated settings have been removed, and replaced with their underlying static configurations. We feel this affords a greater amount of flexibility in deployment patterns, with a tradeoff of slightly more initial configuration.</p> <p>To make things a little easier, you may generate a new configuration with sane defaults using the <code>nautobot-server init</code> command! The configuration file defaults to <code>~/.nautobot/nautobot_config.py</code> but using the <code>nautobot-server --config</code> argument, you may name or place the file anywhere you choose.</p> <p>You may also defined a <code>NAUTOBOT_CONFIG</code> variable to tell Nautobot where to find the file so that you don't need to always pass the <code>--config</code> argument.</p> <p>For details see Configuring Nautobot.</p>"},{"location":"release-notes/version-1.0.html#consolidating-custom-scripts-and-reports-into-jobs","title":"Consolidating Custom Scripts and Reports into Jobs","text":"<p>Nautobot has consolidated NetBox's \"custom scripts\" and \"reports\" into what is now called Jobs.</p> <p>The job history (results) table on the home page now shows metadata on each job such as the timestamp and the user that executed the job. Additionally, jobs can be defined and executed by the system and by plugins, and when they are, users can see their results in the history too. UI views have been added for viewing the details of a given job result, and the JobResult model now provides standard APIs for Jobs to log their status and results in a consistent way.</p> <p>Job result history is now retained indefinitely unless intentionally deleted. Historically only the most recent result for each custom script or report was retained and all older records were deleted.</p> <p>Python modules that define jobs can now be stored in Git and easily added to Nautobot via the UI as documented above in Git Integration as a Data Source.</p>"},{"location":"release-notes/version-1.0.html#custom-user-model","title":"Custom User Model","text":"<p>A new custom model has been created for <code>User</code> data. This has allowed Nautobot to use a UUID as a primary key for the <code>User</code> model, and to prepare for future use-cases not support by the default Django model.</p> <p>This has also meant <code>UserConfig</code> no longer exists as a separate model. <code>UserConfig</code> is now a property on the custom <code>User</code> class.</p>"},{"location":"release-notes/version-1.0.html#hiding-ui-elements-based-on-permissions","title":"Hiding UI Elements based on Permissions","text":"<p>Historically, a user viewing the home page and navigation menu would see a list of all model types and menu items in the system, with a \u201clock\u201d icon on items that they were not granted access to view in detail.</p> <p>As an option, administrators can now choose to instead hide un-permitted items altogether from the home page and the navigation menu, providing a simpler interface for limited-access users. The prior behavior remains as the default.</p>"},{"location":"release-notes/version-1.0.html#ipam-network-fields-to-varbinary","title":"IPAM Network Fields to VARBINARY","text":"<p>To enable future support of databases other than PostgreSQL, the network fields inside of IPAM needed to be changed. <code>cidr</code> and <code>inet</code> field types have been replaced with a database agnostic field type. For this purpose <code>varbinary</code> was chosen because it can safely and efficiently store packed binary integers.</p> <p>More details about the impact of this and other changes can be found in the Migration documentation.</p>"},{"location":"release-notes/version-1.0.html#navigation-menu-changes","title":"Navigation Menu Changes","text":"<p>The \"Other\" menu has been renamed to \"Extensibility\" and many new items have been added to this menu.</p> <p>Status records have been added to the \"Organization\" menu.</p>"},{"location":"release-notes/version-1.0.html#new-name-and-logo","title":"New Name and Logo","text":"<p>\"NetBox\" has been changed to \"Nautobot\" throughout the code, UI, and documentation, and Nautobot has a new logo and icon.</p>"},{"location":"release-notes/version-1.0.html#user-defined-custom-links","title":"User-Defined Custom Links","text":"<p>Historically the custom links feature was restricted so that only administrators could define and manage custom links to add to various built-in data views. In Nautobot the management of custom links has been moved into the main user interface, accessible to any user who has been granted appropriate access permissions.</p>"},{"location":"release-notes/version-1.0.html#user-defined-export-templates","title":"User-Defined Export Templates","text":"<p>Historically the custom data export templates feature was restricted such that only administrators could define and edit these templates. In Nautobot this has been moved into the main user interface, accessible to any user who has been granted appropriate access permissions.</p>"},{"location":"release-notes/version-1.0.html#user-defined-webhooks","title":"User-Defined Webhooks","text":"<p>Historically the webhooks feature was restricted such that only administrators could define and manage webhooks, HTTP callbacks that are triggered automatically when a specified data model(s) are created, updated, and/or deleted. In Nautobot this has been moved into the main user interface, accessible to any user who has been granted appropriate access permissions.</p>"},{"location":"release-notes/version-1.0.html#uuid-primary-database-keys","title":"UUID Primary Database Keys","text":"<p>Database keys are now defined as Universally Unique Identifiers (UUIDs) instead of integers, protecting against certain classes of data-traversal attacks.</p>"},{"location":"release-notes/version-1.0.html#uwsgi","title":"uWSGI","text":"<p>Nautobot has replaced Gunicorn with uWSGI. In most cases uWSGI is faster, more stable and easier to setup making it ideal to use over Gunicorn. Our recommendation is to use uWSGI in production.</p>"},{"location":"release-notes/version-1.0.html#removed","title":"Removed","text":""},{"location":"release-notes/version-1.0.html#secrets","title":"Secrets","text":"<p>Secrets storage and management has been removed from Nautobot.</p>"},{"location":"release-notes/version-1.0.html#related-devices","title":"Related Devices","text":"<p>The \"Related Devices\" table has been removed from the detailed Device view.</p>"},{"location":"release-notes/version-1.0.html#v103-2021-06-21","title":"v1.0.3 (2021-06-21)","text":""},{"location":"release-notes/version-1.0.html#added_1","title":"Added","text":"<ul> <li>#143 - Added \"copy\" button on hover to <code>Device</code> detail view for name, primary IP addresses, and serial number.</li> <li>#183 - Implemented a baseline integration test suite using Selenium</li> <li>#505 - Added example of Okta OAuth2 integration to the docs.</li> <li>#523 - Added instructions for using LDAP TLS Options to SSO documentation</li> <li>#576 - <code>JobResult</code> detail views now support custom links and plugin template extensions</li> </ul>"},{"location":"release-notes/version-1.0.html#changed_1","title":"Changed","text":"<ul> <li>#537 - To mitigate CVE-2021-31542, the minimum supported Django version is now 3.1.12.</li> </ul>"},{"location":"release-notes/version-1.0.html#fixed","title":"Fixed","text":"<ul> <li>#220 - Added a troubleshooting section to the development guide for issues encountered when using the multi-threaded development server</li> <li>#342 - Fixed inconsistent behavior in <code>Site.time_zone</code> to emit and accept input as a null field if not set when using API</li> <li>#389 - Fixed incorrect TaggedItem base class that caused tag issues on MySQL.</li> <li>#421 - Fixed <code>git: Reference at 'refs/heads/master' does not exist</code> by improving error-handling displaying a warning when a user tries to use an empty repo or a branch that does not exist upstream.</li> <li>#452 - Fixed <code>api/dcim/cables</code> <code>OPTIONS</code> response not including the <code>status</code> field.</li> <li>#476 - Fixed incorrect handling of /31 and /127 networks in <code>Aggregate</code>, <code>Prefix</code>, and <code>IPAddress</code> models.</li> <li>#490 - Fixed incorrect VLAN count displayed in VLANGroup detail views.</li> <li>#499 - Fixed object's changelog showing incorrect information about its tags on partial (PATCH) updates using API</li> <li>#501 - Fixed missing prepopulation of address/prefix value into the form when adding an address or prefix under a parent prefix.</li> <li>#508 - Fixed typo in <code>500.html</code> page template.</li> <li>#512 - Fixed ServerError when cloning a record with exactly one <code>Tag</code> applied to it.</li> <li>#513 - Fixed inadvertent omission of \"Search\" box from ReadTheDocs.</li> <li>#528 - Fixed an ordering issue in the <code>test_EXTERNAL_AUTH_DEFAULT_groups</code> test case.</li> <li>#530 - Fixed incorrect/confusing docstring in <code>nautobot.core.api.serializers.WritableNestedSerializer</code></li> <li>#540 - Fixed intermittent CI failures due to DockerHub rate limits.</li> <li>#542 - Fixed incorrect documentation for running <code>nautobot-server test</code> commands.</li> <li>#562 - Fixed inability to use a Git repository to define a <code>ConfigContext</code> mapped to a specific <code>DeviceType</code>.</li> <li>#564 - Fixed incorrect docstring on <code>nautobot.utilities.tables.ButtonsColumn</code>.</li> <li>#570 - Fixed inability to import <code>ExportTemplates</code> for the <code>VLAN</code> model via Git.</li> <li>#583 - Fixed incorrect rejection of various forms when explicitly selecting a <code>null</code> option. (Port of NetBox #5704)</li> </ul>"},{"location":"release-notes/version-1.0.html#security","title":"Security","text":"<ul> <li>#418 - Removed unused JQuery-UI component flagged by vulnerability scanner (CVE-2020-7729)</li> </ul>"},{"location":"release-notes/version-1.0.html#v102-2021-05-27","title":"v1.0.2 (2021-05-27)","text":""},{"location":"release-notes/version-1.0.html#added_2","title":"Added","text":"<ul> <li>#14 - Plugins are now officially permitted to use the generic view classes defined in <code>nautobot.core.views.generic</code> and corresponding base templates defined in <code>nautobot/core/templates/generic/</code>.</li> <li>#162 - Added Invoke tasks <code>dumpdata</code> and <code>loaddata</code> for database backup/restoration in the development environment.</li> <li>#430 - GraphQL <code>ip_addresses</code> now includes an <code>assigned_object</code> field</li> <li>#438 - Config contexts can now be assigned to individual DeviceTypes.</li> <li>#442 - Added warning when mixing <code>@extras_features(\"graphql\")</code> with explicitly declared GraphQL types</li> <li>#450 - GraphQL <code>ip_addresses</code> now includes <code>interface</code> and <code>vminterface</code> fields; GraphQL <code>interfaces</code> and similar models now include <code>connected_endpoint</code> and <code>path</code> fields</li> <li>#451 - Added static GraphQL type for VirtualMachine model</li> <li>#456 - Added mkdocs-include-markdown-plugin</li> <li>#465 - Added Virtual Chassis to the Home Page</li> </ul>"},{"location":"release-notes/version-1.0.html#changed_2","title":"Changed","text":"<ul> <li>#423 - Clarified reference to <code>/config_contexts/</code> folder in Git user guide</li> <li>#448 - <code>nautobot-server init</code>  no longer provides an option to overwrite the existing configuration files.</li> <li>#474 - The <code>dummy_plugin</code> has been moved to a new <code>examples</code> directory in the Git repository and now serves as an example of implementing various plugin features.</li> </ul>"},{"location":"release-notes/version-1.0.html#fixed_1","title":"Fixed","text":"<ul> <li>#309 - Fixed erroneous termination display when cables are connected to power feeds.</li> <li>#396 - Fixed <code>ValidationError</code> not being raised when Relationship filters are invalid</li> <li>#397 - Fixed Git repository sync failure when token contains special characters</li> <li>#415 - Fixed incorrect handling of Unicode in view test cases</li> <li>#417 - Fixed incorrect link to Docker docs from installation docs</li> <li>#428 - Fixed GraphQL error when handling ASNs greater than 2147483647</li> <li>#430 - Fixed missing <code>ContentType</code> foreign keys in GraphQL</li> <li>#436 - Fixed Redis Cacheops error when using newly generated <code>nautobot_config.py</code> file</li> <li>#454 - Fixed inability to create IPv6 addresses via REST API.</li> <li>#459 - Fixed issue with Job forms not respecting <code>field_order</code></li> <li>#461 - Fixed <code>NAUTOBOT_DB_TIMEOUT</code> read as string in default config</li> <li>#482 - Fixed <code>FieldError</code> from being raised when a <code>JobResult</code> references a model with no <code>name</code> field</li> <li>#486 - Fixed failing Docker builds due to do missing <code>examples</code> development dependency</li> <li>#488 - Fix migrations in MySQL by hard-coding the <code>VarbinaryIPField</code> to use <code>varbinary(16)</code></li> </ul>"},{"location":"release-notes/version-1.0.html#removed_1","title":"Removed","text":"<ul> <li>#456 - Removed markdown-include</li> </ul>"},{"location":"release-notes/version-1.0.html#v101-2021-05-06","title":"v1.0.1 (2021-05-06)","text":""},{"location":"release-notes/version-1.0.html#added_3","title":"Added","text":"<ul> <li>#242 - Added a production-ready <code>Dockerfile</code> for clustered deployment</li> <li>#356 - Added a new <code>nautobot-server startplugin</code> management command to ease plugin development</li> <li>#366 - Added GraphQL filter tests for <code>interfaces</code> queries and added missing unit tests for <code>Interface</code> filtersets</li> </ul>"},{"location":"release-notes/version-1.0.html#changed_3","title":"Changed","text":"<ul> <li>#362 - Updated sample code in plugin development guide to inherit from <code>BaseModel</code></li> </ul>"},{"location":"release-notes/version-1.0.html#fixed_2","title":"Fixed","text":"<ul> <li>#15 - Added documentation for plugins using generic models to get change logging using <code>ChangeLoggedModel</code></li> <li>#336 - Fixed <code>nautobot.utilities.api.get_serializer_for_model</code> to now support the plugins namespace</li> <li>#337 - Fixed <code>nautobot.extras.plugins.api.views.PluginsAPIRootView</code> no longer creates null entries when <code>PluginConfig</code> does not define a <code>base_url</code></li> <li>#365 - Fixed incorrect field types on GraphQL ID fields</li> <li>#382 - Fixed choices returned from <code>OPTIONS</code> requests returning mixed use of <code>display</code> and <code>display_name</code> fields.</li> <li>#393 - Fixed creating a <code>VirtualChassis</code> with a master device changes the master device's <code>vc_position</code></li> <li>#398 - Fixed <code>VirtualChassis</code> edit view to now show \"Update\" button vs. \"Create\"</li> <li>#399 - Fixed <code>nautobot.utilities.utils.get_filterset_for_model</code> to now support the plugins namespace</li> <li>#400 - Fixed the class_path format for Jobs API usage documentation not being clear enough</li> <li>#402 - Docs build requirements will now install <code>markdown-include</code> version from PyPI instead of GitHub</li> <li>#409 - Fixed misspelling: \"Datbase\" --&gt; \"Database\" in <code>nautobot_config.py.j2</code></li> </ul>"},{"location":"release-notes/version-1.0.html#v100-2021-04-26","title":"v1.0.0 (2021-04-26)","text":""},{"location":"release-notes/version-1.0.html#added_4","title":"Added","text":"<ul> <li>#290 - Added REST API endpoint for triggering a Git repository sync</li> </ul>"},{"location":"release-notes/version-1.0.html#changed_4","title":"Changed","text":"<ul> <li>#333 - Relationships now display the name of the related object type as well as the count</li> <li>#358 - Updated Python dependencies to their latest patch versions</li> </ul>"},{"location":"release-notes/version-1.0.html#fixed_3","title":"Fixed","text":"<ul> <li>#276 - Fixed 500 error when creating Rack Reservation with invalid units</li> <li>#277 - Fixed 500 error when editing/updating IPAM Services with invalid ports</li> <li>#332 - Fixed UI allowing creation of multiple <code>RelationshipAssociations</code> for \"<code>one_to_*</code>\" relationships</li> <li>#334 - Fixed missing \"Bulk Create\" option when creating an IP Address</li> <li>#357 - Fixed error when plugins attempted to use <code>ButtonsColumn</code></li> <li>#359 - Fixed incorrect GraphQL filtering of cables by <code>site</code></li> <li>#361 - Fixed duplicate \"tags\" field when creating a cable connection</li> </ul>"},{"location":"release-notes/version-1.0.html#v100b4-2021-04-19","title":"v1.0.0b4 (2021-04-19)","text":""},{"location":"release-notes/version-1.0.html#added_5","title":"Added","text":"<ul> <li>#96 - Implemented user guide documentation for GraphQL</li> <li>#97 - Implemented user guide documentation for Git as a Data Source</li> </ul>"},{"location":"release-notes/version-1.0.html#changed_5","title":"Changed","text":"<ul> <li>#150 - Revised all documentation referencing objects with status fields</li> <li>#175 - Revised plugin development guide to use Poetry</li> <li>#211 - Travis CI build improvements to simplify entry points and make tests fail faster</li> <li>#217 - Replaced JSONB aggregation with custom cross-database implementation that supports PG and MySQL</li> <li>#245 - Replaced PG-specific \"advisory locks\" with cross-database distributed Redis lock</li> <li>#252 - Revised and clarified install instructions for CentOS</li> <li>#262 - Revised Nautobot upgrade and NetBox migration guides</li> <li>#273 - Update to jQuery 3.6.0</li> <li>#289 - Updated natural unicode-aware sorting for interface/device names to support MySQL</li> </ul>"},{"location":"release-notes/version-1.0.html#fixed_4","title":"Fixed","text":"<ul> <li>#167 - Fix to enable to query <code>ip_addresses</code> by parent in GraphQL</li> <li>#212 - Allow plugins to use built-in buttons</li> <li>#232 - Fix to enable inclusion of custom fields in queries in GraphQL</li> <li>#233 - Fix to enable filtering by booleans in GraphQL</li> <li>#247 - Fix to enable filtering by custom field values in GraphQL</li> <li>#260 - Fix cable path tracing by not coercing UUID values to version 4</li> <li>#264 - Fix missing parenthesis in datasources example</li> <li>#265 - Fix 500 crash in API when posting ports as strings to IPAM services</li> <li>#269 - Fix <code>NoneType</code> error when searching for /31 prefixes</li> <li>#272 - Fix invalid f-string in <code>invoke createsuperuser</code></li> <li>#278 - Fix crash when sorting IPAM objects in list view by network address in web UI</li> <li>#285 - Refactor GraphQL filter argument generation to emit the correct types for each field</li> <li>#286 - Fix <code>NoneType</code> error when seraching for IPs without a prefix</li> <li>#287 - Fix IP addresses not showing in search results</li> <li>#288 - Fix display of parent prefixes from IPAddress detail view</li> <li>#293 - Allow <code>DynamicModel[Multiple]ChoiceField</code> to work with plugin model</li> <li>#300 - Fix <code>AttributeError</code> when assigning an IP to a device interface</li> <li>#304 - Fix for IPAM network objects <code>clean()</code> checks not working as intended</li> <li>#305 - Fix <code>Status</code> rendering to always preserve capitalization of <code>Status.name</code></li> <li>#306 - Fix custom relationship display fields for all models</li> <li>#307 - Fix the ability to CSV export power connections if connected to a PowerFeed</li> <li>#308 - Fix missing template error when viewing a PowerFeed connected to a PowerPort on a Device.</li> <li>#318 - Fix <code>TypeError</code> when creating any IPAM network object  with prefix of /0</li> <li>#320 - Fix issue causing model validation to fail on all IPAM network objects</li> <li>#324 - Fix unit test execution on MySQL by changing subquery limiting to list slicing</li> <li>#325 - Fix to allow relationship associations to be unset in the web UI</li> <li>#326 - Fix 404 error when attempting to delete a RelationshipAssociation from the list view</li> <li>#373 - Fix missing \"Bulk Add IP Addresses\" tab</li> </ul>"},{"location":"release-notes/version-1.0.html#v100b3-2021-04-05","title":"v1.0.0b3 (2021-04-05)","text":"<p>Warning</p> <p>v1.0.0b3 introduces several database changes that are not backwards-compatible with v1.0.0b2 and earlier. There is no direct upgrade path from v1.0.0b2 to v1.0.0b3 - you must create a new database when installing v1.0.0b3!</p>"},{"location":"release-notes/version-1.0.html#added_6","title":"Added","text":"<ul> <li>#100 - Added detailed documentation of the <code>nautobot-server</code> command</li> <li>#105 - Added tooltip with detailed information to utilization graph bars.</li> <li>#109 - Docker development environment build now automatically installs from any present <code>local_requirements.txt</code> file</li> <li>#121 - Added \"Data Model Changes\" section to the \"Migrating from NetBox\" documentation</li> <li>#141 - Custom Link UI now includes example usage hints</li> <li>#227 - Add QFSP+ (64GFC) FiberChannel interface type</li> <li>#236 - Add <code>post_upgrade</code> to developer docs and add <code>invoke post-upgrade</code></li> </ul>"},{"location":"release-notes/version-1.0.html#changed_6","title":"Changed","text":"<p>Major backwards-incompatible database changes were included in this beta release that are intended are to pave the way for us to support MySQL as a database backend in a future update. Of those changes, these are the most notable:</p> <ul> <li>All IPAM objects with network field types (<code>ipam.Aggregate</code>, <code>ipam.IPAddress</code>, and <code>ipam.Prefix</code>) are no longer hard-coded to use PostgreSQL-only <code>inet</code> or <code>cidr</code> field types and are now using a custom implementation leveraging SQL-standard <code>varbinary</code> field types</li> <li>The <code>users.User</code> model has been completely replaced with a custom implementation that no longer requires the use of a secondary database table for storing user configuration.</li> <li>Custom Fields have been overhauled for asserting data integrity and improving user experience<ul> <li>Custom Fields can no longer be renamed or have their type changed after they have been created.</li> <li>Choices for Custom Fields are now stored as discrete database objects. Choices that are in active use cannot be deleted.</li> </ul> </li> </ul> <p>Other changes:</p> <ul> <li>#78 - Replaced PostgreSQL-specific IP network/address fields with more generic field types</li> <li>#83 - Custom user model added; UserConfig model merged into User model</li> <li>#84 - Revised developer documentation for clarity and current workflows</li> <li>#98 - Simplify MultipleContentTypeField boilerplate</li> <li>#119 - Various documentation improvements</li> <li>#120 - Revise development release checklist document for new processes</li> <li>#128 - Overview of usage for the <code>nautobot-netbox-importer</code> plugin could be mistaken for full instructions</li> <li>#122 - Improved installation flow for creating nautobot user and virtualenv</li> <li>#131 - Replaced PostgreSQL-specific ArrayField with a more generic JSONArrayField</li> <li>#137 - Explicitly disallow Custom Field Name Changes</li> <li>#142 - Converted various config validation checks into proper Django checks</li> <li>#149 - Unify optional settings documentation for <code>REMOTE_AUTH*/SOCIAL_AUTH*</code></li> <li>#159 - Update documentation for external authentication SSO Backend to get a proper install</li> <li>#180 - Revised available Invoke tasks for simplicity and maintainability</li> <li>#208 - Custom fields model refactor</li> <li>#216 - Update install docs to address inconsistent experience w/ <code>$PATH</code></li> <li>#235 - Update restart docs to include worker</li> <li>#241 - Swap <code>contrib.postgres.fields.JSONField</code> for <code>db.models.JSONField</code></li> </ul>"},{"location":"release-notes/version-1.0.html#removed_2","title":"Removed","text":"<ul> <li>#124 - Removed incorrect statement from feature request template</li> <li>#161 - Removed leftover references in documentation to <code>RQ_DEFAULT_TIMEOUT</code></li> <li>#188 - Remove <code>CSRF_TRUSTED_ORIGINS</code> from core settings</li> <li>#189 - Remove all references to <code>settings.BASE_PATH</code></li> </ul>"},{"location":"release-notes/version-1.0.html#fixed_5","title":"Fixed","text":"<ul> <li>#26 - <code>nautobot-server runserver</code> does not work using <code>poetry run</code></li> <li>#58 - GraphQL Device Query - Role filter issue</li> <li>#76 - Cable paths could not be traced through circuits</li> <li>#95 - Plugin load errors under Gunicorn</li> <li>#127 - SSL error: decryption failed or bad record mac &amp; SSL SYSCALL error: EOF detected</li> <li>#132 - Generated <code>nautobot_config.py</code> did not include a trailing newline</li> <li>#134 - Missing venv activation step in install guide</li> <li>#135 - Custom field Selection value name change causes data inconsistency</li> <li>#147 - Login failed when BASE_PATH is set</li> <li>#153 - Editing an existing user token shows \"create\" buttons instead of \"update\"</li> <li>#154 - Some tests were failing when run in the development Docker container</li> <li>#155 - NAPALM driver string not displayed in Platform detail view</li> <li>#166 - Contrib directory is missing (including the apache.conf)</li> <li>#168 - Incorrect <code>AUTHENTICATION_BACKENDS</code> example in remote authentication documentation</li> <li>#170 - GraphQL filtering failure returned all objects instead of none</li> <li>#172 - Incorrect whitespace in some HTML template tags</li> <li>#181 - Incorrect UI reference in Webhook documentation</li> <li>#185 - Possible infinite loop in cable tracing algorithm</li> <li>#186 - Example Jobs are not updated for Nautobot</li> <li>#201 - Custom Fields cannot filter by name for content_types</li> <li>#205 - API Documentation shows numeric id instead of UUID</li> <li>#213 - Programming Error Exception Value: relation \"social_auth_usersocialauth\" does not exist</li> <li>#224 - Edit view for IPAM network objects does not emit the current network address value</li> <li>#255 - Update docs <code>edit_uri</code> to point to correct path</li> </ul>"},{"location":"release-notes/version-1.0.html#v100b2-2021-03-08","title":"v1.0.0b2 (2021-03-08)","text":""},{"location":"release-notes/version-1.0.html#added_7","title":"Added","text":"<ul> <li>#35 - Documentation for troubleshooting Nautobot's interaction with SELinux.</li> <li>#47 - Basic user documentation for Relationships feature.</li> <li>#48 - Additional unit testing and bug fixes for Relationships feature.</li> <li>#99 - Add <code>BASE_PATH</code> to <code>development/nautobot_config.py</code>.</li> <li>#101 - Complete documentation of <code>NAUTOBOT_ROOT</code></li> <li>#107 - Add <code>nautobot-server post_upgrade</code> command</li> </ul>"},{"location":"release-notes/version-1.0.html#changed_7","title":"Changed","text":"<ul> <li>#52 - Disabled Poetry's \"parallel installation\" feature for CI and development builds.</li> <li>#61 - Updated pull request template contents for clarity.</li> <li>#74 - Refactor install instructions to be more streamlined and more intuitive.<ul> <li>Renamed <code>nautobot-rq</code> service to <code>nautobot-worker</code></li> <li>Replaced <code>BASE_STORAGE_DIR</code> configuration setting with <code>NAUTOBOT_ROOT</code>; this new setting also influences the default value of <code>DEFAULT_CONFIG_PATH</code>.</li> </ul> </li> <li>#88 - Replace Gunicorn w/ uWSGI</li> <li>#89 - Development workflow improvements<ul> <li>Replace <code>pycodestyle</code> with <code>flake8</code> for linting.</li> <li>Add <code>invoke black</code> and <code>invoke tests</code> commands</li> <li>Improve speed of development Docker container rebuilds</li> <li><code>django-debug-toolbar</code> is now a development dependency rather than a production dependency for Nautobot.</li> </ul> </li> <li>#106 - Revise deployment docs to use <code>$PATH</code> instead of venv activate</li> <li>#108 - Document special workflow for development using containers on remote servers</li> </ul>"},{"location":"release-notes/version-1.0.html#removed_3","title":"Removed","text":"<ul> <li>#72 - Removed issue template for \"Documentation Change\"; use \"Bug\" or \"Feature Request\" issue templates instead.</li> </ul>"},{"location":"release-notes/version-1.0.html#fixed_6","title":"Fixed","text":"<ul> <li>#36 - Broken links to ReadTheDocs pages.</li> <li>#41 - Incorrect field name in CustomLink Admin page.</li> <li>#42 - Incorrect link to <code>nautobot-plugin-golden-config</code> GitHub repository</li> <li>#45 - Incorrect button labels when creating/editing an Interface record.</li> <li>#43 - Incorrect commands in documentation for adding optional dependencies to <code>local_requirements.txt</code></li> <li>#51 - Incorrect functioning of \"development container\" in VSCode integration.</li> <li>#57 - Incorrect <code>AUTHENTICATION_BACKENDS</code> example in <code>authentication/ldap.md</code></li> <li>#63 - Incorrect help text for \"Destination Label\" field when creating/editing Relationship records.</li> <li>#64 - Incorrect absolute link to ReadTheDocs page.</li> <li>#69 - More incorrect links to ReadTheDocs pages.</li> <li>#79 - Incorrect internal documentation link to <code>STORAGE_BACKEND</code> optional setting.</li> <li>#81 - Unable to change Device rack position after creation.</li> <li>#93 - Bug when setting <code>CACHEOPS_DEFAULTS</code> timeout value to <code>0</code>.</li> </ul>"},{"location":"release-notes/version-1.0.html#v100b1-2021-02-24","title":"v1.0.0b1 (2021-02-24)","text":"<p>Initial public beta release.</p>"},{"location":"release-notes/version-1.0.html#fixed_7","title":"Fixed","text":"<ul> <li>Fixed a bug, inherited from NetBox 2.10, in which object permissions were not filtered correctly in the admin interface.</li> <li>Fixed a bug, inherited from NetBox 2.10, in which the UI would report an exception if the database contains ChangeLog entries that reference a nonexistent ContentType.</li> </ul>"},{"location":"release-notes/version-1.1.html","title":"Version 1.1","text":""},{"location":"release-notes/version-1.1.html#nautobot-v11","title":"Nautobot v1.1","text":"<p>This document describes all new features and changes in Nautobot 1.1.</p> <p>If you are a user migrating from NetBox to Nautobot, please refer to the \"Migrating from NetBox\" documentation.</p>"},{"location":"release-notes/version-1.1.html#release-overview","title":"Release Overview","text":""},{"location":"release-notes/version-1.1.html#added","title":"Added","text":""},{"location":"release-notes/version-1.1.html#computed-fields-4","title":"Computed Fields (#4)","text":"<p>Computed fields offers users the ability to create read-only custom fields using existing data already stored in the database. Users define Jinja2 templates that populate the value of these fields. Computed fields are available on all data models that currently support custom fields.</p>"},{"location":"release-notes/version-1.1.html#config-context-json-schemas-274","title":"Config Context JSON Schemas (#274)","text":"<p>While config contexts allow for arbitrary data structures to be stored within Nautobot, at scale it is desirable to apply validation constraints to that data to ensure its consistency and to avoid data entry errors. To service this need, Nautobot supports optionally backing config contexts with JSON Schemas for validation. These schema are managed via the config context schema model and are optionally linked to config context instances, in addition to devices and virtual machines for the purpose of validating their local context data. Please see the docs for more details.</p> <p>Just like config contexts, config context JSON schemas can optionally be managed via a Git repository.</p>"},{"location":"release-notes/version-1.1.html#dynamic-navigation-menus-12","title":"Dynamic Navigation Menus (#12)","text":"<p>Applications and plugins can now define tabs, groups, items and buttons in the navigation menu. Using navigation objects a developer can add items to any section of the navigation using key names and weight values. Please see Application Registry for more details.</p>"},{"location":"release-notes/version-1.1.html#mysql-database-support-17","title":"MySQL Database Support (#17)","text":"<p>MySQL 8.x is now fully supported as a database backend!</p> <p>The installation and configuration guides have been revised to include MySQL. If you prefer MySQL or it is more easily supported in your environment, configuring Nautobot to use MySQL is as easy as changing value of <code>ENGINE</code> in your <code>DATABASES</code> setting to point to <code>django.db.backends.mysql</code> and installing the MySQL Python driver using <code>pip3 install nautobot[mysql]</code>.</p> <p>A new <code>NAUTOBOT_DB_ENGINE</code> environment variable has been added to allow for specifying the desired database engine at runtime without needing to modify your <code>nautobot_config.py</code>. Please see the configuration guide on <code>DATABASES</code> for more details on how to configure Nautobot to use MySQL.</p> <p>Please see the MySQL setup guides for Ubuntu and CentOS to get started.</p>"},{"location":"release-notes/version-1.1.html#plugin-defined-jinja2-filters","title":"Plugin Defined Jinja2 Filters","text":"<p>Plugins can now define custom Jinja2 filters to be used when rendering templates defined within computed fields or custom links. To register your own filters, you may add a <code>jinja_filters.py</code> to your plugin and any filters defined there will be automatically registered and globally usable.</p> <p>Please see the plugin development documentation on including Jinja2 filters to get started.</p>"},{"location":"release-notes/version-1.1.html#read-only-jobs-200","title":"Read Only Jobs (#200)","text":"<p>Jobs may be optionally marked as read only by setting the <code>read_only = True</code> meta attribute. This prevents the job from making any changes to nautobot data and suppresses certain log messages. Read only jobs can be a great way to safely develop new jobs, and for working with reporting use cases. Please see the Jobs documentation for more details.</p>"},{"location":"release-notes/version-1.1.html#saved-graphql-queries-3","title":"Saved GraphQL Queries (#3)","text":"<p>Saved GraphQL queries offers a new model where reusable queries can be stored in Nautobot. New views for managing saved queries are available; additionally, the GraphiQL interface has been augmented to allow populating the interface from a saved query, editing and saving new queries.</p> <p>Saved queries can easily be imported into the GraphiQL interface by using the new navigation tab located on the right side of the navbar. Inside the new tab are also buttons for editing and saving queries directly into Nautobot's databases.</p> <p>Additionally, two new GraphQL utility functions have been added to allow easy access to the GraphQL system from source code. Both functions can be imported from <code>nautobot.core.graphql</code>:</p> <ol> <li><code>execute_query()</code>: Runs string as a query against GraphQL.</li> <li><code>execute_saved_query()</code>: Execute a saved query from Nautobot database.</li> </ol>"},{"location":"release-notes/version-1.1.html#changed","title":"Changed","text":""},{"location":"release-notes/version-1.1.html#background-tasks-now-use-celery-223","title":"Background Tasks now use Celery (#223)","text":"<p>Celery has been introduced to eventually replace RQ for executing background tasks within Nautobot. All Nautobot core usage of RQ has been migrated to use Celery.</p> <p>Note</p> <p>Custom background tasks implemented by plugins are not part of Nautobot core functions</p> <p>Prior to version 1.1.0, Nautobot utilized RQ as the primary background task worker. As of Nautobot 1.1.0, RQ is now deprecated. RQ and the <code>@job</code> decorator for custom tasks are still supported for now, but will no longer be documented, and support for RQ will be removed in a future release.</p> <p>RQ support for custom tasks was not removed in order to give plugin authors time to migrate, however, to continue to utilize advanced Nautobot features such as Git repository synchronization, webhooks, jobs, etc. you must migrate your <code>nautobot-worker</code> deployment from RQ to Celery.</p> <p>Please see the section on migrating to Celery from RQ for more information on how to easily migrate your deployment.</p> <p>Warning</p> <p>If you are running plugins that use background tasks requiring the RQ worker, you will need to run both the RQ and Celery workers concurrently until the plugins are converted to use the Celery worker. See the Migrating to Celery from RQ for details.</p>"},{"location":"release-notes/version-1.1.html#fixed","title":"Fixed","text":""},{"location":"release-notes/version-1.1.html#http-remote-end-closed-connection-errors-725","title":"HTTP \"Remote end closed connection\" errors (#725)","text":"<p>The example <code>uwsgi.ini</code> provided in earlier versions of the Nautobot documentation was missing a recommendation to include the configuration <code>http-keepalive = 1</code> which enables support for HTTP/1.1 keep-alive headers.</p> <p>Warning</p> <p>If you are upgrading from an earlier version of Nautobot (including 1.1.0) you should check your <code>uwsgi.ini</code> and ensure that it contains this important configuration line.</p>"},{"location":"release-notes/version-1.1.html#v116-2021-12-03","title":"v1.1.6 (2021-12-03)","text":""},{"location":"release-notes/version-1.1.html#fixed_1","title":"Fixed","text":"<ul> <li>#1093 - Improved REST API performance by adding caching of serializer \"opt-in fields\".</li> </ul>"},{"location":"release-notes/version-1.1.html#v115-2021-11-11","title":"v1.1.5 (2021-11-11)","text":""},{"location":"release-notes/version-1.1.html#added_1","title":"Added","text":"<ul> <li>#263 - Added a link in the Docker deployment guide to the Nautobot Docker Compose repository.</li> <li>#931 - Added support for direct upload of CSV files as an alternative to copy-pasting CSV text into a form field. (Partially based on NetBox #6561)</li> <li>#953 - Added option to use MySQL in the docker-compose development environment</li> <li>#954 - Added documentation for migrating from PostgreSQL to MySQL, improved documentation as to recommended MySQL database configuration.</li> <li>#989 - Added <code>id</code> and <code>name</code> fields to <code>NestedJobResultSerializer</code> for the REST API.</li> <li>#1019 - Added GitHub action to redeploy the Nautobot sandbox on pushes to <code>main</code>, <code>develop</code>, and <code>next</code>.</li> <li>#1025 - Added reference documentation for how to hide navigation menu items with no permissions.</li> <li>#1031 - Added a troubleshooting note around the combination of RedHat/CentOS, uWSGI, and static files.</li> <li>#1057 - Added GitHub action to automatically push Docker images to <code>ghcr.io</code>.</li> </ul>"},{"location":"release-notes/version-1.1.html#fixed_2","title":"Fixed","text":"<ul> <li>#555 - Fixed <code>Status.DoesNotExist</code> during <code>nautobot-server loaddata</code>.</li> <li>#567 - Fixed incorrect GraphQL schema generation for <code>_custom_field_data</code> when certain plugins are installed.</li> <li>#733 - A Job erroring out early in initialization could result in its associated JobResult staying in Pending state indefinitely.</li> <li>#816 - Fixed <code>AttributeError</code> reported when viewing a Rack with certain associated power configurations.</li> <li>#948 - Fixed advanced logging example to use <code>EXTRA_MIDDLEWARE</code> instead of <code>MIDDLEWARE.append()</code>.</li> <li>#970 - Clarified documentation around config context definition in Git repositories.</li> <li>#981 - Fixed incorrect handling of missing custom fields in the <code>fix_custom_fields</code> management command.</li> <li>#986 - Fixed <code>TemplateDoesNotExist</code> exception when running a Job containing a <code>FileVar</code> variable.</li> <li>#991 - Fixed incorrect logging when importing ConfigContextSchemas from Git.</li> <li>#993 - Fixed incorrect <code>git</code> command when refreshing a previously checked out repository.</li> <li>#1023 - Removed invalid link in \"Deploying Nautobot\" documentation.</li> </ul>"},{"location":"release-notes/version-1.1.html#security","title":"Security","text":"<ul> <li>#998 - Update <code>mkdocs</code> dependency to avoid a potential path-traversal vulnerability; note that mkdocs is only used in development and is not a production deployment dependency of Nautobot.</li> </ul>"},{"location":"release-notes/version-1.1.html#v114-2021-10-04","title":"v1.1.4 (2021-10-04)","text":""},{"location":"release-notes/version-1.1.html#added_2","title":"Added","text":"<ul> <li>#623 - Git repository sync logs now include the commit hash that was synchronized to.</li> <li>#728 - Added <code>SOCIAL_AUTH_BACKEND_PREFIX</code> configuration setting to support custom authentication backends.</li> <li>#861 - Bulk editing of devices can now update their site, rack, and rack-group assignments.</li> <li>#949 - Added documentation note about using <code>MAINTENANCE_MODE</code> in combination with LDAP.</li> </ul>"},{"location":"release-notes/version-1.1.html#changed_1","title":"Changed","text":"<ul> <li>#956 - Switched CI from Travis to GitHub Actions.</li> <li>#964 - Updated README.md build status badge to show GitHub status.</li> </ul>"},{"location":"release-notes/version-1.1.html#fixed_3","title":"Fixed","text":"<ul> <li>#944 - Jobs that commit changes to the database could not be invoked successfully from the <code>nautobot-server runjob</code> command.</li> <li>#955 - REST API endpoint for syncing Git repositories was still checking for RQ workers instead of Celery workers.</li> <li>#969 - IPv6 prefixes such as <code>::1/128</code> were not being treated correctly.</li> </ul>"},{"location":"release-notes/version-1.1.html#security_1","title":"Security","text":"<ul> <li>#939 - Nautobot views now default to <code>X-Frame-Options: DENY</code> rather than <code>X-Frame-Options: SAMEORIGIN</code>, with the exception of the rack-elevation API view (<code>/api/dcim/rack-elevation/</code>) which specifically requires <code>X-Frame-Options: SAMEORIGIN</code> for functional reasons.</li> </ul>"},{"location":"release-notes/version-1.1.html#v113-2021-09-13","title":"v1.1.3 (2021-09-13)","text":""},{"location":"release-notes/version-1.1.html#added_3","title":"Added","text":"<ul> <li>#11 - Added tests to verify that plugin models can support webhooks if appropriately decorated with <code>@extras_features(\"webhooks\")</code></li> <li>#652 - Jobs REST API <code>run</code> endpoint now can look up ObjectVar references via a dictionary of parameters.</li> <li>#755 - Added example showing how to use <code>django-request-logging</code> middleware to log the user associated with inbound requests.</li> <li>#791 - Added support for <code>NAUTOBOT_DOCKER_SKIP_INIT</code> variable to allow running the Docker container with a read-only database.</li> <li>#841 - Added more detailed documentation around defining Relationship filters.</li> <li>#850 - Added developer documentation around the installation and use of <code>mkdocs</code> to locally preview documentation changes.</li> <li>#856 - Added more detailed user documentation on how to create an API token.</li> </ul>"},{"location":"release-notes/version-1.1.html#changed_2","title":"Changed","text":"<ul> <li>#601 - Developer documentation for advanced docker-compose use cases is now a separate file.</li> <li>#709 - Computed fields can now have a blank <code>fallback_value</code>.</li> <li>#812 - In the GraphiQL interface, the \"Queries\" dropdown now appears alongside the other GraphiQL interface buttons instead of appearing in the main Nautobot navigation bar.</li> <li>#832 - Plugin installation documentation now recommends <code>nautobot-server post_upgrade</code> instead of separately running <code>nautobot-server migrate</code> and <code>nautobot-server collectstatic</code>.</li> </ul>"},{"location":"release-notes/version-1.1.html#fixed_4","title":"Fixed","text":"<ul> <li>#464 - Fixed GraphQL schema generation error when certain custom field names are used.</li> <li>#651 - Fixed Jobs validation enforce schema consistently across UI and API.</li> <li>#670 - Clarified Jobs documentation regarding how to fail or abort a Job.</li> <li>#715 - Fixed display of GraphiQL interface in narrow browser windows.</li> <li>#718 - Fixed rendering of long template values in Computed Field detail view.</li> <li>#731 - Config context schemas including <code>format</code> properties (such as <code>\"format\": \"ipv4\"</code>) are now correctly enforced.</li> <li>#779 - Fixed incorrect Tenant display in Prefix \"Duplicate Prefixes\" table. (Port of two fixes originally from NetBox)</li> <li>#809 - Fixed docker-compose file <code>version</code> values to work correctly with older versions of docker-compose.</li> <li>#818 - Database health-check now reports as healthy even when in <code>MAINTENANCE_MODE</code>.</li> <li>#825 - Removed unnecessary <code>-B</code> flag from development Celery worker invocation.</li> <li>#830 - Fixed incorrect database migration introduced by #818.</li> <li>#845 - Clarified documentation around <code>nautobot-server init</code> and <code>NAUTOBOT_ROOT</code>.</li> <li>#848 - Fixed stale links to NAPALM documentation</li> </ul>"},{"location":"release-notes/version-1.1.html#security_2","title":"Security","text":"<ul> <li>#893 - Bump Pillow dependency version from 8.2.0 to 8.2.3 to address numerous critical CVE advisories</li> </ul>"},{"location":"release-notes/version-1.1.html#v112-2021-08-10","title":"v1.1.2 (2021-08-10)","text":""},{"location":"release-notes/version-1.1.html#added_4","title":"Added","text":"<ul> <li>#758 - Added documentation about the Job <code>class_path</code> concept.</li> <li>#771 - Added examples of various possible logging configurations.</li> <li>#773 - Added documentation around enabling Prometheus metrics for database and caching backends.</li> </ul>"},{"location":"release-notes/version-1.1.html#changed_3","title":"Changed","text":"<ul> <li>#742 - The development environment now respects the setting of the <code>NAUTOBOT_DEBUG</code> environment variable if present.</li> </ul>"},{"location":"release-notes/version-1.1.html#fixed_5","title":"Fixed","text":"<ul> <li>#723 - Fixed power draw not providing a <code>UtilizationData</code> type for use in graphing power draw utilization</li> <li>#782 - Corrected documentation regarding the use of <code>docker-compose.override.yml</code></li> <li>#785 - Fixed plugin loading error when using <code>final</code> Docker image.</li> <li>#786 - Fixed <code>Unknown command: 'post_upgrade'</code> when using <code>final</code> Docker image.</li> <li>#789 - Avoid a <code>NoReverseMatch</code> exception at startup time if an app or plugin defines a nav menu item with an invalid link reference.</li> </ul>"},{"location":"release-notes/version-1.1.html#v111-2021-08-05","title":"v1.1.1 (2021-08-05)","text":""},{"location":"release-notes/version-1.1.html#added_5","title":"Added","text":"<ul> <li>#506 - <code>nautobot-server</code> now detects and rejects the misconfiguration of setting <code>MAINTENANCE_MODE</code> while using database-backed session storage (<code>django.contrib.sessions.backends.db</code>)</li> <li>#681 - Added an example guide on how to use AWS S3 for hosting static files in production.</li> </ul>"},{"location":"release-notes/version-1.1.html#changed_4","title":"Changed","text":"<ul> <li>#738 - Added <code>*.env</code> (except <code>dev.env</code>) to <code>.gitignore</code> to prevent local environment variable files from accidentally being committed to Git</li> </ul>"},{"location":"release-notes/version-1.1.html#fixed_6","title":"Fixed","text":"<ul> <li>#683 - Fixed slug auto-construction when defining a new ComputedField.</li> <li>#725 - Added missing <code>http-keepalive = 1</code> to recommended <code>uswgi.ini</code> configuration.</li> <li>#727 - Fixed broken REST API endpoint (<code>/api/extras/graphql-queries/&lt;uuid&gt;/run/</code>) for running saved GraphQL queries.</li> <li>#744 - Fixed missing Celery Django fixup that could cause assorted errors when multiple background tasks were run concurrently.</li> <li>#746 - Fixed data serialization error when running Jobs that used <code>IPAddressVar</code>, <code>IPAddressWithMaskVar</code>, and/or <code>IPNetworkVar</code> variables.</li> <li>#759 - Corrected backwards add/import links for Power Feed and Power Panel in navigation bar</li> </ul>"},{"location":"release-notes/version-1.1.html#v110-2021-07-20","title":"v1.1.0 (2021-07-20)","text":""},{"location":"release-notes/version-1.1.html#added_6","title":"Added","text":"<ul> <li>#372 - Added support for displaying custom fields in tables used in object list views</li> <li>#620 - Config context schemas can now be managed via Git repositories.</li> </ul>"},{"location":"release-notes/version-1.1.html#changed_5","title":"Changed","text":"<ul> <li>#675 - Update MySQL unicode settings docs to be more visible</li> <li>#684 - Renamed <code>?opt_in_fields=</code> query param to <code>?include=</code></li> <li>#691 - Clarify documentation on RQ to Celery worker migration and running both workers in parallel to help ease migration</li> <li>#692 - Clarify plugin development docs on naming of file for custom Jinja2 filters</li> <li>#697 - Added <code>CELERY_TASK_SOFT_TIME_LIMIT</code> to <code>settings.py</code> and lowered the default <code>CELERY_TASK_TIME_LIMIT</code> configuration.</li> </ul>"},{"location":"release-notes/version-1.1.html#fixed_7","title":"Fixed","text":"<ul> <li>#363 - Fixed using S3 django-storages backend requires <code>USE_TZ=False</code></li> <li>#466 - Fixed improper GraphQL schema generation on fields that can be blank but not null (such as <code>Interface.mode</code>)</li> <li>#663 - Fixed <code>kombu.exceptions.EncodeError</code> when trying to execute Jobs using <code>(Multi)ObjectVar</code> objects with nested relationships</li> <li>#672 - Fixed inheritance of Celery broker/results URL settings for dev/template configs (they can now be defined using Redis env. vars)</li> <li>#677 - Revise LDAPS outdated documentation for ignoring TLS cert errors</li> <li>#680 - Removed unnecessary warning message when both RQ and Celery workers are present</li> <li>#686 - Fixed incorrect permission name for Tags list view in nav menu</li> <li>#690 - Fixed Jinja2 dependency version to remain backwards-compatible with Nautobot 1.0.x</li> <li>#696 - Fixed inheritance of VRF and Tenant assignment when creating an IPAddress or Prefix under a parent Prefix. (Port of NetBox #5703 and NetBox #6012)</li> <li>#698 - Fixed cloning of a computed field object to now carry over required non-unique fields</li> <li>#699 - Exceptions such as TypeError are now caught and handled correctly when rendering a computed field.</li> <li>#702 - GraphiQL view no longer requires internet access to load libraries.</li> <li>#703 - Fixed direct execution of saved GraphQL queries containing double quotes</li> <li>#705 - Fixed missing description field from detail view for computed fields</li> </ul>"},{"location":"release-notes/version-1.1.html#security_3","title":"Security","text":"<ul> <li>#717 - Bump Pillow dependency version from 8.1.2 to 8.2.0 to address numerous critical CVE advisories</li> </ul>"},{"location":"release-notes/version-1.1.html#v110b2-2021-07-09","title":"v1.1.0b2 (2021-07-09)","text":""},{"location":"release-notes/version-1.1.html#added_7","title":"Added","text":"<ul> <li>#599 - Custom fields are now supported on <code>JobResult</code> objects</li> <li>#637 - Implemented a <code>nautobot-server fix_custom_fields</code> command to manually purge stale custom field data</li> </ul>"},{"location":"release-notes/version-1.1.html#changed_6","title":"Changed","text":"<ul> <li>#634 - Documentation on plugin capabilities has been clarified.</li> </ul>"},{"location":"release-notes/version-1.1.html#fixed_8","title":"Fixed","text":"<ul> <li>#495 - Fixed search for partial IPv4 prefixes/aggregates not finding all matching objects</li> <li>#533 - Custom field tasks are now run atomically to avoid stale field data from being saved on objects.</li> <li>#554 - Fixed search for partial IPv6 prefixes/aggregates not finding all matching objects</li> <li>#569 - Change minimum/maximum allowed values for integer type in Custom Fields to 64-bit <code>BigIntegerField</code> types (64-bit)</li> <li>#600 - The <code>invoke migrate</code> step is now included in the development getting started guide for Docker workflows</li> <li>#617 - Added extra comments to <code>uwsgi.ini</code> config to help with load balancer deployments in Nautobot services documentation</li> <li>#626 - Added prefix <code>NAUTOBOT_</code> in <code>override.env</code> example inside of <code>docker-entrypoint.sh</code></li> <li>#645 - Updated services troubleshooting docs to include \"incorrect string value\" fix when using Unicode emojis with MySQL as a database backend</li> <li>#653 - Fixed systemd unit file for <code>nautobot-worker</code> to correctly start/stop/restart</li> <li>#661 - Fixed <code>computed_fields</code> key not being included in API response for devices when using <code>include</code> (for opt-in fields)</li> <li>#667 - Fixed various outdated/incorrect places in the documentation for v1.1.0 release.</li> </ul>"},{"location":"release-notes/version-1.1.html#v110b1-2021-07-02","title":"v1.1.0b1 (2021-07-02)","text":""},{"location":"release-notes/version-1.1.html#added_8","title":"Added","text":"<ul> <li>#3 - GraphQL queries can now be saved for later execution</li> <li>#10 - Added a new \"Getting Started in the Web UI\" section to the documentation to help new users begin learning how to use Nautobot.</li> <li>#17 - MySQL 8.x is now fully supported as a database backend</li> <li>#200 - Jobs can be marked as read-only</li> <li>#274 - Added config context schemas to optionally validate config and local context data against JSON Schemas</li> <li>#297 -  Added an anonymous health-checking endpoint at <code>/health/</code>using, also introducing a <code>nautobot-server health_check</code> command.</li> <li>#485 - Applications can define navbar properties through <code>navigation.py</code></li> <li>#557 - <code>Prefix</code> records can now be created using /32 (IPv4) and /128 (IPv6) networks. (Port of NetBox #6545)</li> <li>#561 - Added autodetection of <code>mime_type</code> on <code>export_templates</code> provided by Git datasources</li> <li>#636 - Added custom fields to <code>JobResult</code> model, with minor changes to job result detail page</li> </ul>"},{"location":"release-notes/version-1.1.html#changed_7","title":"Changed","text":"<ul> <li>#431 - <code>ConfigContext</code> and <code>ExportTemplate</code> records now must have unique <code>name</code> values. This was always the case in NetBox, but was inadvertently un-enforced in earlier versions of Nautobot.</li> </ul>"},{"location":"release-notes/version-1.1.html#fixed_9","title":"Fixed","text":"<ul> <li>#460 - Deleting a record now deletes any associated <code>RelationshipAssociation</code> records</li> <li>#494 - Objects with <code>status</code> fields now emit limited choices correctly when performing <code>OPTIONS</code> metadata API requests</li> <li>#602 - Fixed incorrect requirement to install <code>toml</code> Python library before running <code>invoke</code> tasks</li> <li>#618 - Fixed typo in release-notes</li> </ul>"},{"location":"release-notes/version-1.2.html","title":"Version 1.2","text":""},{"location":"release-notes/version-1.2.html#nautobot-v12","title":"Nautobot v1.2","text":"<p>This document describes all new features and changes in Nautobot 1.2.</p> <p>If you are a user migrating from NetBox to Nautobot, please refer to the \"Migrating from NetBox\" documentation.</p>"},{"location":"release-notes/version-1.2.html#release-overview","title":"Release Overview","text":""},{"location":"release-notes/version-1.2.html#added","title":"Added","text":""},{"location":"release-notes/version-1.2.html#admin-configuration-ui-370","title":"Admin Configuration UI (#370)","text":"<p>The Nautobot Admin UI now includes a \"Configuration\" page that can be used to dynamically customize a number of optional settings as an alternative to editing <code>nautobot_config.py</code> and restarting the Nautobot processes.</p> <p>If upgrading from a previous Nautobot version where these settings were defined in your <code>nautobot_config.py</code>, you must remove those definitions in order to use this feature, as explicit configuration in <code>nautobot_config.py</code> takes precedence over values configured in the Admin UI.</p>"},{"location":"release-notes/version-1.2.html#common-base-template-for-object-detail-views-479-585","title":"Common Base Template for Object Detail Views (#479, #585)","text":"<p>All \"object detail\" views (pages displaying details of a single Nautobot record) now inherit from a common base template, providing improved UI consistency, reducing the amount of boilerplate code needed to create a new detail view, and fixing a number of bugs in various views. Plugin developers are encouraged to make use of this new template (<code>generic/object_detail.html</code>) to take advantage of these improvements.</p> <p>Views based on this template now include a new \"Advanced\" tab - currently this tab includes the UUID and slug (if any) of the object being viewed, but may be extended in the future to include additional information not relevant to the basic object detail view.</p>"},{"location":"release-notes/version-1.2.html#custom-fields-are-now-user-configurable-229","title":"Custom Fields are now User Configurable (#229)","text":"<p>Creation and management of Custom Field definitions can now be performed by any user with appropriate permissions. (Previously, only admin users were able to manage Custom Fields.)</p>"},{"location":"release-notes/version-1.2.html#custom-field-webhooks-519","title":"Custom Field Webhooks (#519)","text":"<p>Webhooks can now be triggered when creating/updating/deleting <code>CustomField</code> and <code>CustomFieldChoice</code> definition records.</p>"},{"location":"release-notes/version-1.2.html#database-ready-signal-13","title":"Database Ready Signal (#13)","text":"<p>After running <code>nautobot-server migrate</code> or <code>nautobot-server post_upgrade</code>, Nautobot now emits a custom signal, <code>nautobot_database_ready</code>. This signal is designed for plugins to connect to in order to perform automatic database population (such as defining custom fields, relationships, webhooks, etc.) at install/upgrade time. For more details, refer to the plugin development documentation.</p>"},{"location":"release-notes/version-1.2.html#graphql-filters-at-all-levels-248","title":"GraphQL Filters at All Levels (#248)","text":"<p>The GraphQL API now supports query filter parameters at any level of a query. For example:</p> <pre><code>query {\n  sites(name: \"ams\") {\n    devices(role: \"edge\") {\n      name\n      interfaces(type: \"virtual\") {\n        name\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"release-notes/version-1.2.html#graphql-query-optimizations-171","title":"GraphQL Query Optimizations (#171)","text":"<p>Complex GraphQL queries have been greatly optimized thanks to integration of <code>graphene-django-optimizer</code> into Nautobot!</p> <p>In our internal testing and benchmarking the number of SQL queries generated per GraphQL query have been drastically reduced, resulting in much quicker response times and less strain on the database.</p> <p>For in depth details on our benchmarks, please see the comment thread on the issue.</p>"},{"location":"release-notes/version-1.2.html#installed-plugins-list-and-detail-views-plugin-config-and-home-views-935","title":"Installed Plugins List and Detail Views, Plugin Config and Home Views (#935)","text":"<p>The <code>Plugins</code> menu now includes an \"Installed Plugins\" menu item which provides a list view of information about all installed and enabled plugins, similar to a formerly administrator-only view.</p> <p>Additionally, when viewing this list, each plugin can now be clicked on for a detail view, which provides an in-depth look at the capabilities of the plugin, including whether it makes use of each or all of the various Nautobot features available to be used by plugins.</p> <p>Additionally, plugins now have the option of registering specific \"home\" and/or \"configuration\" views, which will be linked and accessible directly from the installed-plugins list and detail views.</p> <p>Please refer to the plugin development documentation for more details about this functionality.</p>"},{"location":"release-notes/version-1.2.html#ipam-custom-lookups-for-filtering-982","title":"IPAM custom lookups for filtering (#982)","text":"<p>Nautobot now again supports custom lookup filters on the <code>IPAddress</code>, <code>Prefix</code>, and <code>Aggregate</code> models, such as <code>address__net_contained</code>, <code>network__net_contains_or_equals</code>, etc. Refer to the REST API filtering documentation for more specifics and examples.</p>"},{"location":"release-notes/version-1.2.html#job-approval-125","title":"Job Approval (#125)","text":"<p>Jobs can now be optionally defined as <code>approval_required = True</code>, in which case the Job will not be executed immediately upon submission, but will instead be placed into an approval queue; any user other than the submitter can approve or deny a queued Job, at which point it will then be executed as normal.</p>"},{"location":"release-notes/version-1.2.html#job-scheduling-374","title":"Job Scheduling (#374)","text":"<p>Jobs can now be scheduled for execution at a future date and time (such as during a planned maintenance window), and can also be scheduled for repeated execution on an hourly, daily, or weekly recurring cadence.</p> <p>Note</p> <p>Execution of scheduled jobs is dependent on Celery Beat; enablement of this system service is a new requirement in Nautobot 1.2.</p> <p>Please see the documentation on enabling the Celery Beat scheduler service to get started!</p>"},{"location":"release-notes/version-1.2.html#networking-template-filters-1082","title":"Networking Template Filters (#1082)","text":"<p>Template rendering with Django and/or Jinja2 now supports by default all filters provided by the <code>netutils</code> library. These filters can be used in page templates, computed fields, custom links, export templates, etc. For details, please refer to the filters documentation.</p>"},{"location":"release-notes/version-1.2.html#organizational-branding-859","title":"Organizational Branding (#859)","text":"<p>Organizations may provide custom branding assets to change the logo, icons, and footer URLs to help Nautobot fit within their environments and user communities. Please see the configuration documenation for details on how to specify the location and usage of custom branding assets.</p>"},{"location":"release-notes/version-1.2.html#plugin-banners-534","title":"Plugin Banners (#534)","text":"<p>Each plugin is now able to optionally inject a custom banner into any of the Nautobot core views.</p> <p>Please refer to the plugin development documentation for more details about this functionality.</p>"},{"location":"release-notes/version-1.2.html#same-type-and-symmetric-relationships-157","title":"Same-Type and Symmetric Relationships (#157)","text":"<p>The Relationships feature has been extended in two ways:</p> <ol> <li>Relationships between the same object type (e.g. device-to-device) are now permitted and supported.</li> <li>For same-object-type relationships specifically, symmetric (peer-to-peer rather than source-to-destination) relationships are now an option.</li> </ol> <p>For more details, refer to the Relationships documentation.</p>"},{"location":"release-notes/version-1.2.html#secrets-integration-541","title":"Secrets Integration (#541)","text":"<p>Nautobot can now read secret values (such as device or Git repository access credentials) on demand from a variety of external sources, including environment variables and text files, and extensible via plugins to support additional secrets providers such as Hashicorp Vault and AWS Secrets Manager. Both the NAPALM device integration and the Git repository integration can now make use of these secrets, and plugins and jobs can do so as well.</p> <p>For more details, please refer to the Secrets documentation.</p>"},{"location":"release-notes/version-1.2.html#software-defined-home-page-674-716","title":"Software-Defined Home Page (#674, #716)","text":"<p>Nautobot core applications and plugins can now both define panels, groups, and items to populate the Nautobot home page. The home page now dynamically reflows to accommodate available content. Plugin developers can add to existing panels or groups or define entirely new panels as needed. For more details, see Populating the Home Page.</p>"},{"location":"release-notes/version-1.2.html#changed","title":"Changed","text":""},{"location":"release-notes/version-1.2.html#admin-site-changes-900","title":"Admin Site Changes (#900)","text":"<p>The Admin sub-site within Nautobot (<code>/admin/</code> and its child pages) has been revamped in appearance and functionality. It has been re-skinned to resemble the rest of the Nautobot UI, and has been slimmed down to only include those models and features that are still exclusive to admin users, such as user/group/permission management.</p>"},{"location":"release-notes/version-1.2.html#joblogentry-data-model-1030","title":"JobLogEntry Data Model (#1030)","text":"<p>Job log messages are now stored in a separate database table as a separate <code>JobLogEntry</code> data model, instead of being stored as JSON on the <code>JobResult</code> model/table. This provides faster and more robust rendering of <code>JobResult</code>-related views and lays groundwork for future enhancements of the Jobs feature.</p> <p>Note</p> <p>If you are executing Jobs inside your tests, there are some changes you will need to make for your tests to support this feature correctly. Refer to the Jobs documentation for details.</p> <p>Note</p> <p>Because <code>JobLogEntry</code> records reference their associated <code>JobResult</code>, the pattern <code>job.job_result = JobResult()</code> (creating only an in-memory <code>JobResult</code> object, rather than a database entry) will no longer work. Instead you will need to create a proper JobResult database object <code>job.job_result = JobResult.objects.create(...)</code>.</p>"},{"location":"release-notes/version-1.2.html#slug-fields-are-now-optional-in-csv-import-rest-api-and-orm-493","title":"Slug fields are now Optional in CSV import, REST API and ORM (#493)","text":"<p>All models that have <code>slug</code> fields now use <code>AutoSlugField</code> from the <code>django-extensions</code> package. This means that when creating a record via the REST API, CSV import, or direct ORM Python calls, the <code>slug</code> field is now fully optional; if unspecified, it will be automatically assigned a unique value, just as how a <code>slug</code> is auto-populated in the UI when creating a new record.</p> <p>Just as with the UI, the <code>slug</code> can still always be explicitly set if desired.</p>"},{"location":"release-notes/version-1.2.html#v1211-2022-04-04","title":"v1.2.11 (2022-04-04)","text":""},{"location":"release-notes/version-1.2.html#added_1","title":"Added","text":"<ul> <li>#1123 - Add validation for IPAddress assigned_object_type and assigned_object_id.</li> <li>#1146 - Added change date filtering lookup expressions to GraphQL.</li> <li>#1495 - Added full coverage of cable termination types to Graphene.</li> <li>#1501 - Add IP field to CSV export of device.</li> <li>#1529 - Added list of standard hex colors to the Tags documentation.</li> </ul>"},{"location":"release-notes/version-1.2.html#changed_1","title":"Changed","text":"<ul> <li>#1536 - Removed the ServiceUnavailable exception when no <code>primary_ip</code> is available for a device, but other connection options are available.</li> <li>#1581 - Changed MultipleChoiceJSONField to accept choices as a callable, fixing Datasource Contents provided by plugins are not accepted as valid choice by REST API.</li> <li>#1584 - Replaced links in docs to celeryproject.org with celeryq.dev</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed","title":"Fixed","text":"<ul> <li>#1313 - Fixed GraphQL query error on OneToOneFields such as <code>IPAddress.primary_ip4_for</code></li> <li>#1408 - Fixed incorrect HTML in the Devices detail views.</li> <li>#1467 - Fixed an issue where at certain browser widths the nav bar would cover the top of the page content.</li> <li>#1523 - Fixed primary IP being unset after creating/updating different interface</li> <li>#1548 - Pin Jinja2 version for mkdocs requirements to fix RTD docs builds related to API deprecation in Jinja2 &gt;= 3.1.0</li> <li>#1583 - Fixed Nautobot service definition in PostgreSQL-backed development environment.</li> <li>#1599 - Bump mkdocs version for Snyk report.</li> </ul>"},{"location":"release-notes/version-1.2.html#v1210-2022-03-21","title":"v1.2.10 (2022-03-21)","text":""},{"location":"release-notes/version-1.2.html#added_2","title":"Added","text":"<ul> <li>#1492 - Added note in the Jobs documentation about the use of <code>AbortTransaction</code> to end the job and force rollback.</li> <li>#1517 - Added password filtering example to advanced logging section in docs.</li> </ul>"},{"location":"release-notes/version-1.2.html#changed_2","title":"Changed","text":"<ul> <li>#1514 - Simplified switching between PostgreSQL and MySQL database backends in the developer environment.</li> <li>#1518 - Updated GitHub Pull Request template to include detail section, todo list.</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed_1","title":"Fixed","text":"<ul> <li>#1511 - Fixed left column of Read The Docs being cut off.</li> <li>#1522 - Fixed link name attribute name in developer docs.</li> </ul>"},{"location":"release-notes/version-1.2.html#v129-2022-03-14","title":"v1.2.9 (2022-03-14)","text":""},{"location":"release-notes/version-1.2.html#fixed_2","title":"Fixed","text":"<ul> <li>#1431 - Fixed potential failure of <code>extras.0017_joblog_data_migration</code> migration when the job logs contain messages mistakenly logged as object references.</li> <li>#1459 - Fixed incorrect display of related devices and VMs in the Cluster Type and Cluster Group detail views.</li> <li>#1469 - Fixed incorrect CSV export for devices</li> </ul>"},{"location":"release-notes/version-1.2.html#security","title":"Security","text":"<p>Danger</p> <p>It is highly recommended that users of Python 3.6 prioritize upgrading to a newer version of Python. Nautobot will be removing support for Python 3.6 in a future update.</p> <p>Important</p> <p>For users remaining on Python 3.6, please know that upgrading to Nautobot v1.2.9 will not resolve these CVEs for your installation. The only remedy at this time is to upgrade your systems to utilize Python 3.7 or later.</p> <ul> <li>#1487 - Implemented fixes for CVE-2022-22817, CVE-2022-24303, and potential infinite loop by requiring Pillow &gt;=9.0.1 for Python version &gt;=3.7. For Python version &lt;3.7 (e.g. 3.6), it is recommended that you prioritize upgrading your environment to use Python 3.7 or higher. Support for Python 3.6 will be removed in a future update.</li> </ul>"},{"location":"release-notes/version-1.2.html#v128-2022-03-07","title":"v1.2.8 (2022-03-07)","text":""},{"location":"release-notes/version-1.2.html#added_3","title":"Added","text":"<ul> <li>#839 - Add CODE_OF_CONDUCT.md to repository.</li> <li>#1242 - Add MAJOR.MINOR tags to Docker images upon release.</li> <li>#1299 - Add SECURITY.md to repository.</li> <li>#1388 - Added beta version of GitHub Issue Form style for feature request.</li> <li>#1419 - Add documentation for specifying a CA cert file for LDAP authentication backend.</li> <li>#1446 - Apply title labels to Docker images.</li> </ul>"},{"location":"release-notes/version-1.2.html#changed_3","title":"Changed","text":"<ul> <li>#1348 - Pin Selenium Grid container version to match Python Client version.</li> <li>#1432 - Update django-redis to <code>5.2.x</code> to address <code>5.1.x</code> blocking redis <code>4.x</code> versions.</li> <li>#1447 - Minor <code>nit</code> on Github Issue Form styling.</li> <li>#1452 - Changed GitHub release workflow to not run on prerelease releases.</li> <li>#1453 - Changed feature request to use GitHub Issue Form.</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed_3","title":"Fixed","text":"<ul> <li>#1301 - Fixed window history handling for views with tabs in Safari/Firefox.</li> <li>#1302 - Fixed missing Advanced tab on Virtual Machine detail view.</li> <li>#1398 - Fixed missing safeguard for removing master from Virtual Chassis via API.</li> <li>#1399 - Fixed not being able to set master to <code>null</code> on Virtual Chassis API.</li> <li>#1405 - Fixed incorrect import in 'startplugin' template code.</li> <li>#1412 - Fixed not being able to query for prefix family via GraphQL.</li> <li>#1442 - Fixed missing Advanced tab on Job Result, Git Repository, and Config Context Schema detail views.</li> </ul>"},{"location":"release-notes/version-1.2.html#v127-2022-02-22","title":"v1.2.7 (2022-02-22)","text":""},{"location":"release-notes/version-1.2.html#changed_4","title":"Changed","text":"<ul> <li>#1403 - Changes the GitHub Action on Release version template variable name.</li> </ul>"},{"location":"release-notes/version-1.2.html#v126-2022-02-22","title":"v1.2.6 (2022-02-22)","text":""},{"location":"release-notes/version-1.2.html#added_4","title":"Added","text":"<ul> <li>#1279 - Circuit terminations now render custom relationships on the circuit detail page.</li> <li>#1353 - Added UI for deleting previously uploaded images when editing a DeviceType.</li> </ul>"},{"location":"release-notes/version-1.2.html#changed_5","title":"Changed","text":"<ul> <li>#1386 - Updated release schedule in docs for patch releases, now every two weeks.</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed_4","title":"Fixed","text":"<ul> <li>#1249 - Fixed a timing issue where after creating a custom field with a default value and immediately assigning values to this custom field on individual objects, the custom field values could be automatically reverted to the default value.</li> <li>#1280 - Added missing <code>get_absolute_url</code> method to the <code>CircuitTermination</code> model, fixing a UI error that could occur when relationships involve CircuitTerminations.</li> <li>#1283 - Update Sentinel docs to have 3 hosts (minimum per Redis docs), and change <code>CELERY_BROKER_URL</code> to a multiline string instead of a Tuple (tuple is invalid, and raises an exception when job completes).</li> <li>#1312 - Fixed a bug where a Prefix filter matching zero records would instead show all records in the UI.</li> <li>#1327 - Fixes the broken dependencies from the Release action.</li> <li>#1328 - Fixed an error in the Job class-path documentation.</li> <li>#1332 - Fixed a regression in which the REST API did not default to pagination based on the configured <code>PAGINATE_COUNT</code> setting but instead defaulted to full unpaginated results.</li> <li>#1335 - Fixed an issue with the Secret create/edit form that caused problems when defining AWS secrets using the <code>nautobot-secrets-providers</code> plugin.</li> <li>#1346 - Fixed an error in the periodic execution of Celery's built-in <code>celery.backend_cleanup</code> task.</li> <li>#1360 - Fixed an issue in the development environment that could cause Selenium integration tests to error out.</li> <li>#1390 - Pinned transitive dependency <code>MarkupSafe</code> to version 2.0.1 as later versions are incompatible with Nautobot's current <code>Jinja2</code> dependency.</li> </ul>"},{"location":"release-notes/version-1.2.html#v125-2022-02-02","title":"v1.2.5 (2022-02-02)","text":""},{"location":"release-notes/version-1.2.html#changed_6","title":"Changed","text":"<ul> <li>#1293 - Reorganized the developer documents somewhat to reduce duplication of information, added diagrams for issue intake process.</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed_5","title":"Fixed","text":"<ul> <li>#371 - Fixed a server error that could occur when importing cables via CSV.</li> <li>#1161 - The <code>description</code> field for device component templates is now correctly propagated to device components created from these templates.</li> <li>#1233 - Prevented a job aborting when an optional ObjectVar is provided with a value of None</li> <li>#1272 - Fixed GitHub Actions syntax and Slack payload for <code>release</code> CI workflow</li> <li>#1282 - Fixed a server error when editing User accounts.</li> <li>#1308 - Fixed another server error that could occur when importing cables via CSV.</li> </ul>"},{"location":"release-notes/version-1.2.html#v124-2022-01-13","title":"v1.2.4 (2022-01-13)","text":""},{"location":"release-notes/version-1.2.html#added_5","title":"Added","text":"<ul> <li>#1113 - Added documentation about using Redis Sentinel with Nautobot.</li> <li>#1251 - Added <code>workflow_call</code> to the GitHub Actions CI workflow so that it may be called by other GHA workflows.</li> </ul>"},{"location":"release-notes/version-1.2.html#changed_7","title":"Changed","text":"<ul> <li>#616 - The REST API now no longer permits setting non-string values for text-type custom fields.</li> <li>#1243 - Github CI action no longer runs for pull requests that don't impact Nautobot code, such as documentation, examples, etc.</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed_6","title":"Fixed","text":"<ul> <li>#1053 - Fixed error when removing an IP address from an interface when it was previously the parent device's primary IP.</li> <li>#1140 - Fixed incorrect UI widgets in the updated Admin UI.</li> <li>#1253 - Fixed missing code that prevented switching between tabs in the device-type detail view.</li> </ul>"},{"location":"release-notes/version-1.2.html#security_1","title":"Security","text":"<p>Danger</p> <p>It is highly recommended that users of Python 3.6 prioritize upgrading to a newer version of Python. Nautobot will be removing support for Python 3.6 in a future update.</p> <p>Important</p> <p>For users remaining on Python 3.6, please know that upgrading to Nautobot v1.2.4 will not resolve these CVEs for your installation. The only remedy at this time is to upgrade your systems utilize Python 3.7 or later.</p> <ul> <li>#1267 - Implemented fixes for CVE-2022-22815, CVE-2022-22816, and CVE-2022-22817 to require Pillow &gt;=9.0.0 for Python version &gt;=3.7. For Python version &lt;3.7 (e.g. 3.6), it is recommended that you prioritize upgrading your environment to use Python 3.7 or higher. Support for Python 3.6 will be removed in a future update.</li> </ul>"},{"location":"release-notes/version-1.2.html#v123-2022-01-07","title":"v1.2.3 (2022-01-07)","text":""},{"location":"release-notes/version-1.2.html#added_6","title":"Added","text":"<ul> <li>#1037 - Added documentation about how to successfully use the <code>nautobot-server dumpdata</code> and <code>nautobot-server loaddata</code> commands.</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed_7","title":"Fixed","text":"<ul> <li>#313 - REST API documentation now correctly shows that <code>status</code> is a required field.</li> <li>#477 - Model <code>TextField</code>s are now correctly mapped to <code>MultiValueCharFilter</code> in filter classes.</li> <li>#734 - Requests to nonexistent <code>/api/</code> URLs now correctly return a JSON 404 response rather than an HTML 404 response.</li> <li>#1127 - Fixed incorrect rendering of the navbar at certain browser window sizes.</li> <li>#1203 - Fixed maximum recursion depth error when filtering GraphQL queries by <code>device_types</code>.</li> <li>#1220 - Fixed an inconsistency in the breadcrumbs seen in various Admin pages.</li> <li>#1228 - Fixed a case where a GraphQL query for objects associated by Relationships could potentially throw an exception.</li> <li>#1229 - Fixed a template rendering error in the login page.</li> <li>#1234 - Fixed missing changelog support for Custom Fields.</li> </ul>"},{"location":"release-notes/version-1.2.html#security_2","title":"Security","text":"<p>Danger</p> <p>It is highly recommended that users of Python 3.6 prioritize upgrading to a newer version of Python. Nautobot will be removing support for Python 3.6 in a future update.</p> <p>Important</p> <p>For users remaining on Python 3.6, please know that upgrading to Nautobot v1.2.3 will not resolve this CVE for your installation. The only remedy at this time is to upgrade your systems utilize Python 3.7 or later.</p> <ul> <li>#1238 - Implemented fix for CVE-2021-23727 to require Celery &gt;=5.2.2 for Python version &gt;=3.7. For Python version &lt;3.7 (e.g. 3.6), it is recommended that you prioritize upgrading your environment to use Python 3.7 or higher. Support for Python 3.6 will be removed in a future update.</li> </ul>"},{"location":"release-notes/version-1.2.html#v122-2021-12-27","title":"v1.2.2 (2021-12-27)","text":""},{"location":"release-notes/version-1.2.html#added_7","title":"Added","text":"<ul> <li>#1152 - Added REST API and GraphQL for <code>JobLogEntry</code> objects.</li> </ul>"},{"location":"release-notes/version-1.2.html#changed_8","title":"Changed","text":"<ul> <li>#650 - Job Results UI now render job log messages immediately</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed_8","title":"Fixed","text":"<ul> <li>#1181 - Avoid throwing a 500 error in the case where users have deleted a required Status value. (Preventing the user from doing this will need to be a later fix.)</li> <li>#1186 - Corrected an error in the docs regarding developing secrets providers in plugins.</li> <li>#1188 - Corrected some errors in the developer documentation about our branch management approach.</li> <li>#1193 - Fixed <code>JobResult</code> page may fail to list <code>JobLogEntries</code> in chronological order</li> <li>#1195 - Job log entries now again correctly render inline Markdown formatting.</li> </ul>"},{"location":"release-notes/version-1.2.html#v121-2021-12-16","title":"v1.2.1 (2021-12-16)","text":""},{"location":"release-notes/version-1.2.html#added_8","title":"Added","text":"<ul> <li>#1110 - Added GraphQL support for the <code>ObjectChange</code> model.</li> </ul>"},{"location":"release-notes/version-1.2.html#changed_9","title":"Changed","text":"<ul> <li>#1106 - Updating Docker health checks to be more robust and greatly reduce performance impact.</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed_9","title":"Fixed","text":"<ul> <li>#1170 - Fixed bug in renamed column of <code>JobResultTable</code> where rename was not made to the <code>Meta</code>.</li> <li>#1173 - Fixed official Docker image: v1.2.0 tagged images fail to load with <code>ImportError: libxml2.so.2</code>.</li> </ul>"},{"location":"release-notes/version-1.2.html#removed","title":"Removed","text":""},{"location":"release-notes/version-1.2.html#security_3","title":"Security","text":"<ul> <li>#1077 - Updated <code>graphiql</code> to 1.5.16 as well as updating the associated Javascript libraries used in the GraphiQL UI to address a reported security flaw in older versions of GraphiQL. To the best of our understanding, the Nautobot implementation of GraphiQL was not vulnerable to said flaw.</li> </ul>"},{"location":"release-notes/version-1.2.html#v120-2021-12-15","title":"v1.2.0 (2021-12-15)","text":""},{"location":"release-notes/version-1.2.html#added_9","title":"Added","text":"<ul> <li>#843 - Added more information about Celery in the Upgrading Nautobot docs.</li> <li>#876 - Added option to apply a validation regex when defining CustomFieldChoices.</li> <li>#965 - Added example script for performing group sync from AzureAD.</li> <li>#982 - Added IPAM custom lookup database functions.</li> <li>#1002 - Added <code>URM-P2</code>, <code>URM-P4</code>, and <code>URM-P8</code> port types.</li> <li>#1041 - Add passing of <code>**kwargs</code> to Celery tasks when using <code>JobResult.enqueue_job()</code> to execute a <code>Job</code>.</li> <li>#1080 - Added documentation around using LDAP with multiple search groups.</li> <li>#1082 - Added <code>netutils</code> template filters for both Django and Jinja2 template rendering.</li> <li>#1104 - Added documentation and context on filtering execution of unit tests using labels</li> <li>#1124 - Added documentation on generating <code>SECRET_KEY</code> before Nautobot is configured.</li> <li>#1143 - Added documentation on using LDAP with multiple LDAP servers.</li> <li>#1159 - Add <code>family</code> field to <code>IPAddressType</code> for GraphQL API enable filtering of <code>IPAddress</code> objects by <code>family</code>.</li> </ul>"},{"location":"release-notes/version-1.2.html#changed_10","title":"Changed","text":"<ul> <li>#1068 - Docker images now include optional Nautobot dependencies by default.</li> <li>#1095 - Refined Admin Configuration UI.</li> <li>#1105 - Reverted minimum Python 3.6 version to 3.6.0 rather than 3.6.2.</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed_10","title":"Fixed","text":"<ul> <li>#453 - Fixed potential <code>ValueError</code> when rendering <code>JobResult</code> detail view with non-standard <code>JobResult.data</code> contents.</li> <li>#864 - Fixed inconsistent <code>JobResult</code> detail view page templates.</li> <li>#888 - Addressed FIXME comment in LDAP documentation.</li> <li>#926 - Fixed inability to pass multiple values for a MultiObjectVar as query parameters.</li> <li>#958 - Fixed Job REST API handling of ObjectVars specified by query parameters.</li> <li>#992 - Improved loading/rendering time of the <code>JobResult</code> table/list view.</li> <li>#1043 - Fixed <code>AttributeError</code> when bulk-adding interfaces to virtual machines.</li> <li>#1078 - Fixed missing support for filtering several models by their custom fields and/or created/updated stamps.</li> <li>#1093 - Improved REST API performance by adding caching of serializer \"opt-in fields\".</li> <li>#1098 - Fixed 404 error when creating a circuit termination for circuit and other edge cases resulting in 404 errors</li> <li>#1112 - Fixed broken single-object GraphQL query endpoints.</li> <li>#1116 - Fixed UnboundLocalError when using device NAPALM integration</li> <li>#1121 - Fixed issue with handling of relationships referencing no-longer-present model classes.</li> <li>#1133 - Fixed some incorrect documentation about the Docker image build/publish process.</li> <li>#1141 - Improved reloading of changed Job files. (Port of NetBox #7820)</li> <li>#1154 - Fixed inability to save changes in Admin Configuration UI.</li> <li>#1162 - Fixed error when creating a <code>NavMenuItem</code> without specifying the <code>buttons</code> argument.</li> </ul>"},{"location":"release-notes/version-1.2.html#removed_1","title":"Removed","text":"<ul> <li>#1094 - Removed leftover custom field management views from Admin UI</li> </ul>"},{"location":"release-notes/version-1.2.html#v120b1-2021-11-19","title":"v1.2.0b1 (2021-11-19)","text":""},{"location":"release-notes/version-1.2.html#added_10","title":"Added","text":"<ul> <li>#13 - Added <code>nautobot_database_ready</code> signal</li> <li>#125 - Added support for <code>approval_required = True</code> on Jobs</li> <li>#157 - Added support for same-object-type and symmetric Relationships</li> <li>#171 - GraphQL queries have been greatly optimized by integration with <code>graphene-django-optimizer</code></li> <li>#229 - Added user-facing views for Custom Field management</li> <li>#248 - Added support for filtering GraphQL queries at all levels</li> <li>#370 - Added support for server configuration via the Admin UI.</li> <li>#374 - Added ability to schedule Jobs for future and/or recurring execution</li> <li>#478 - CustomFieldChoice model now supports GraphQL.</li> <li>#479 - Added shared generic template for all object detail views</li> <li>#519 - Added webhook support for <code>CustomField</code> and <code>CustomFieldChoice</code> models.</li> <li>#534 - Added ability to inject a banner from a plugin</li> <li>#541 - Added Secrets integration</li> <li>#580 - Added ability for plugins to register \"home\" and \"configuration\" views.</li> <li>#585 - Added \"Advanced\" tab to object detail views including UUID and slug information.</li> <li>#642 - Added documentation of the <code>GIT_SSL_NO_VERIFY</code> environment variable for using self-signed Git repositories</li> <li>#674 - Plugins can now add items to the Nautobot home page</li> <li>#716 - Nautobot home page content is now dynamically populated based on installed apps and plugins.</li> <li>#866 - Added support for organizational custom branding for the logo and icons</li> <li>#866 - Added documentation for job scheduling and approvals</li> <li>#879 - Added API testing for job scheduling and approvals</li> <li>#908 - Added UI testing for job scheduling and approvals</li> <li>#935 - Added Installed Plugins list view and detail view</li> <li>#937 - Added bulk-delete option for scheduled jobs</li> <li>#938 - Added titles to job approval UI buttons</li> <li>#947 - Added <code>DISABLE_PREFIX_LIST_HIERARCHY</code> setting to render IPAM Prefix list view as a flat list</li> <li>#953 - Added option to use MySQL in docker-compose development environment</li> </ul>"},{"location":"release-notes/version-1.2.html#changed_11","title":"Changed","text":"<ul> <li>#222 - Changed wildcard imports to explicitly enumerated imports and enabled associated Flake8 linter rules.</li> <li>#472 - <code>JobResult</code> lists now show the associated Job's name (if available) instead of the Job's <code>class_path</code>.</li> <li>#493 - All <code>slug</code> fields are now optional when creating records via the REST API, ORM, or CSV import. Slugs will be automatically assigned if unspecified.</li> <li>#877 - Hid unused \"Social Auth\" section from Django admin page.</li> <li>#900 - Admin site has been revised and re-skinned to more closely match the core Nautobot UI.</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed_11","title":"Fixed","text":"<ul> <li>#852 - Fixed missing \"Change Log\" tab on certain object detail views</li> <li>#853 - Fixed <code>AttributeError</code> on certain object detail views</li> <li>#891 - Fixed custom field select/multiselect not handled by new UI and added integration tests</li> <li>#966 - Fixed missing \"Advanced\" tab on Device detail views</li> <li>#1060 - Fixed documentation incorrectly indicating that the Admin UI was the only way to manage custom field definitions.</li> </ul>"},{"location":"release-notes/version-1.2.html#security_4","title":"Security","text":"<ul> <li>#1017 - Custom field descriptions no longer potentially render as arbitrary HTML in object edit forms; Markdown format is now supported as a less dangerous option.</li> </ul>"},{"location":"release-notes/version-1.3.html","title":"Version 1.3","text":""},{"location":"release-notes/version-1.3.html#nautobot-v13","title":"Nautobot v1.3","text":"<p>This document describes all new features and changes in Nautobot 1.3.</p> <p>If you are a user migrating from NetBox to Nautobot, please refer to the \"Migrating from NetBox\" documentation.</p>"},{"location":"release-notes/version-1.3.html#release-overview","title":"Release Overview","text":""},{"location":"release-notes/version-1.3.html#added","title":"Added","text":""},{"location":"release-notes/version-1.3.html#dynamic-group-model-896","title":"Dynamic Group Model (#896)","text":"<p>A new data model for representing dynamic groups of objects has been implemented. Dynamic groups can be used to organize objects together by matching criteria such as their site location or region, for example, and are dynamically updated whenever new matching objects are created, or existing objects are updated.</p> <p>For the initial release only dynamic groups of <code>Device</code> and <code>VirtualMachine</code> objects are supported.</p>"},{"location":"release-notes/version-1.3.html#extend-filtersets-and-filter-forms-via-plugins-1470","title":"Extend FilterSets and Filter Forms via Plugins (#1470)","text":"<p>Plugins can now extend existing FilterSets and Filter Forms. This allows plugins to provide alternative lookup methods or custom queries in the UI or API that may not already exist today.</p> <p>You can refer to the plugin development guide on how to create new filters and fields.</p>"},{"location":"release-notes/version-1.3.html#graphql-pagination-1109","title":"GraphQL Pagination (#1109)","text":"<p>GraphQL list queries can now be paginated by specifying the filter parameters <code>limit</code> and <code>offset</code>. Refer to the GraphQL user guide for examples.</p>"},{"location":"release-notes/version-1.3.html#job-database-model-1001","title":"Job Database Model (#1001)","text":"<p>Installed Jobs are now represented by a data model in the Nautobot database. This allows for new functionality including:</p> <ul> <li>The Jobs listing UI view can now be filtered and searched like most other Nautobot table/list views.</li> <li>Job attributes (name, description, approval requirements, etc.) can now be managed via the Nautobot UI by an administrator or user with appropriate permissions to customize or override the attributes defined in the Job source code.</li> <li>Jobs can now be identified by a <code>slug</code> as well as by their <code>class_path</code>.</li> <li>A new set of REST API endpoints have been added to <code>/api/extras/jobs/&lt;uuid&gt;/</code>. The existing <code>/api/extras/jobs/&lt;class_path&gt;/</code> REST API endpoints continue to work but should be considered as deprecated.<ul> <li>A new version of the REST API <code>/api/extras/jobs/</code> list endpoint has been implemented as well, but by default this endpoint continues to demonstrate the pre-1.3 behavior unless the REST API client explicitly requests API <code>version=1.3</code>. See the section on REST API versioning, below, for more details.</li> </ul> </li> <li>As a minor security measure, newly installed Jobs default to <code>enabled = False</code>, preventing them from being run until an administrator or user with appropriate permissions updates them to be enabled for running.</li> </ul> <p>Note</p> <p>As a convenience measure, when initially upgrading to Nautobot 1.3.x, any existing Jobs that have been run or scheduled previously (i.e., have at least one associated JobResult and/or ScheduledJob record) will instead default to <code>enabled = True</code> so that they may continue to be run without requiring changes.</p> <p>For more details please refer to the Jobs feature documentation as well as the Job data model documentation.</p>"},{"location":"release-notes/version-1.3.html#jobs-with-sensitive-parameters-2091","title":"Jobs With Sensitive Parameters (#2091)","text":"<p>Jobs model now includes a <code>has_sensitive_variables</code> field which by default prevents the job's input parameters from being saved to the database. Review whether each job's input parameters include sensitive data such as passwords or other user credentials before setting this to <code>False</code> for any given job.</p>"},{"location":"release-notes/version-1.3.html#json-type-for-custom-fields-897","title":"JSON Type for Custom Fields (#897)","text":"<p>Custom fields can now have a type of \"json\". Fields of this type can be used to store arbitrary JSON data.</p>"},{"location":"release-notes/version-1.3.html#natural-indexing-for-common-lookups-1638","title":"Natural Indexing for Common Lookups (#1638)","text":"<p>Many fields have had indexing added to them as well as index togethers on <code>ObjectChange</code> fields. This should provide a noticeable performance improvement when filtering and doing lookups.</p> <p>Note</p> <p>This is going to perform several migrations to add all of the indexes. On MySQL databases and tables with 1M+ records this can take a few minutes. Every environment is different but it should be expected for this upgrade to take some time.</p>"},{"location":"release-notes/version-1.3.html#overlappingmultiple-nat-support-630","title":"Overlapping/Multiple NAT Support (#630)","text":"<p>IP addresses can now be associated with multiple outside NAT IP addresses. To do this, set more than one IP Address to have the same NAT inside IP address.</p> <p>A new version of the REST API <code>/api/ipam/ip-addresses/*</code> endpoints have been implemented as well, but by default this endpoint continues to demonstrate the pre-1.3 behavior unless the REST API client explicitly requests API <code>version=1.3</code>. See the section on REST API versioning, below, for more details.</p> <p>Note</p> <p>There are some guardrails on this feature to support backwards compatibility. If you consume the REST API without specifying the version header or query argument and start associating multiple IPs to have the same NAT inside IP address, an error will be reported, because the existing REST API schema returns <code>nat_outside</code> as a single object, where as 1.3 and beyond will return this as a list.</p>"},{"location":"release-notes/version-1.3.html#provider-network-model-724","title":"Provider Network Model (#724)","text":"<p>A data model has been added to support representing the termination of a circuit to an external provider's network.</p>"},{"location":"release-notes/version-1.3.html#python-310-support-1255","title":"Python 3.10 Support (#1255)","text":"<p>Python 3.10 is officially supported by Nautobot now, and we are building and publishing Docker images with Python 3.10 now.</p>"},{"location":"release-notes/version-1.3.html#regular-expression-support-in-api-filtering-1525","title":"Regular Expression Support in API Filtering (#1525)","text":"<p>New lookup expressions for using regular expressions to filter objects by string (char) fields in the API have been added to all core filters.</p> <p>The expressions <code>re</code> (regex), <code>nre</code> (negated regex), <code>ire</code> (case-insensitive regex), and <code>nire</code> (negated case-insensitive regex) lookup expressions are now dynamically-generated for filter fields inherited by subclasses of <code>nautobot.utilities.filters.BaseFilterSet</code>.</p>"},{"location":"release-notes/version-1.3.html#remove-stale-scheduled-jobs-2091","title":"Remove Stale Scheduled Jobs (#2091)","text":"<p>remove_stale_scheduled_jobs management command has been added to delete non-recurring scheduled jobs that were scheduled to run more than a specified days ago.</p>"},{"location":"release-notes/version-1.3.html#rest-api-token-provisioning-1374","title":"REST API Token Provisioning (#1374)","text":"<p>Nautobot now has an <code>/api/users/tokens/</code> REST API endpoint where a user can provision a new REST API token. This allows a user to gain REST API access without needing to first create a token via the web UI.</p> <pre><code>curl -X POST \\\n-H \"Accept: application/json; indent=4\" \\\n-u \"hankhill:I&lt;3C3H8\" \\\nhttps://nautobot/api/users/tokens/\n</code></pre> <p>This endpoint specifically supports Basic Authentication in addition to the other REST API authentication methods.</p>"},{"location":"release-notes/version-1.3.html#rest-api-versioning-1465","title":"REST API Versioning (#1465)","text":"<p>Nautobot's REST API now supports multiple versions, which may be requested by modifying the HTTP Accept header on any requests sent by a REST API client. Details are in the REST API documentation, but in brief:</p> <ul> <li>The REST API endpoints that are versioned in the 1.3.0 release are<ul> <li><code>/api/extras/jobs/</code> listing endpoint</li> <li><code>/api/extras/tags/</code> create/put/patch endpoints</li> <li>all <code>/api/ipam/ip-addresses/</code> endpoints</li> </ul> </li> <li>All other REST API endpoints are currently non-versioned. However, over time more versioned REST APIs will be developed, so this is important to understand for all REST API consumers.</li> <li>If a REST API client does not request a specific REST API version (in other words, requests <code>Accept: application/json</code> rather than <code>Accept: application/json; version=1.3</code>) the API behavior will be compatible with Nautobot 1.2, at a minimum for the remainder of the Nautobot 1.x release cycle.</li> <li>The API behavior may change to a newer default version in a Nautobot major release (such as 2.0).</li> <li>To request an updated (non-backwards-compatible) API endpoint, an API version must be requested corresponding at a minimum to the Nautobot <code>major.minor</code> version where the updated API endpoint was introduced (so to interact with the updated REST API endpoints mentioned above, <code>Accept: application/json; version=1.3</code>).</li> </ul> <p>Tip</p> <p>As a best practice, when developing a Nautobot REST API integration, your client should always request the current API version it is being developed against, rather than relying on the default API behavior (which may change with a new Nautobot major release, as noted, and which also may not include the latest and greatest API endpoints already available but not yet made default in the current release).</p>"},{"location":"release-notes/version-1.3.html#webhook-prepost-change-data-added-to-request-body-330","title":"Webhook Pre/Post-change Data Added to Request Body (#330)","text":"<p>Webhooks now provide a snapshot of data before and after a change, as well as the differences between the old and new data. See the default request body section in the webhook docs.</p>"},{"location":"release-notes/version-1.3.html#changed","title":"Changed","text":""},{"location":"release-notes/version-1.3.html#docker-images-now-default-to-python-37-1252","title":"Docker Images Now Default to Python 3.7 (#1252)","text":"<p>As Python 3.6 has reached end-of-life, the default Docker images published for this release (i.e. <code>1.3.0</code>, <code>stable</code>, <code>latest</code>) have been updated to use Python 3.7 instead.</p>"},{"location":"release-notes/version-1.3.html#job-approval-now-controlled-by-extrasapprove_job-permission-1490","title":"Job Approval Now Controlled By <code>extras.approve_job</code> Permission (#1490)","text":"<p>Similar to the existing <code>extras.run_job</code> permission, a new <code>extras.approve_job</code> permission is now enforced by the UI and the REST API when approving scheduled jobs. Only users with this permission can approve or deny approval requests; additionally such users also now require the <code>extras.view_scheduledjob</code>, <code>extras.change_scheduledjob</code>, and <code>extras.delete_scheduledjob</code> permissions as well.</p>"},{"location":"release-notes/version-1.3.html#openapi-30-rest-api-documentation-595","title":"OpenAPI 3.0 REST API documentation (#595)","text":"<p>The online REST API Swagger documentation (<code>/api/docs/</code>) has been updated from OpenAPI 2.0 format to OpenAPI 3.0 format and now supports Nautobot's REST API versioning as described above. Try <code>/api/docs/?api_version=1.3</code> as an example.</p>"},{"location":"release-notes/version-1.3.html#tag-restriction-by-content-type-872","title":"Tag restriction by content-type (#872)","text":"<p>When created, a <code>Tag</code> can be associated to one or more model content-types using a many-to-many relationship. The tag will then apply only to models belonging to those associated content-types.</p> <p>For users migrating from an earlier Nautobot release, any existing tags will default to being enabled for all content-types for compatibility purposes. Individual tags may subsequently edited to remove any content-types that they do not need to apply to.</p> <p>Note that a Tag created programmatically via the ORM without assigning any <code>content_types</code> will not be applicable to any model until content-types are assigned to it.</p>"},{"location":"release-notes/version-1.3.html#update-jinja2-to-3x-1474","title":"Update Jinja2 to 3.x (#1474)","text":"<p>We've updated the Jinja2 dependency from version 2.11 to version 3.0.3. This may affect the syntax of any <code>nautobot.extras.models.ComputedField</code> objects in your database... Specifically, the <code>template</code> attribute, which is parsed as a Jinja2 template. Please refer to Jinja2 3.0.x's release notes to check if any changes might be required in your computed fields' templates.</p>"},{"location":"release-notes/version-1.3.html#virtual-chassis-master-device-interfaces-list","title":"Virtual Chassis Master Device Interfaces List","text":"<p>The device column will now show on a device's interfaces list if this device is the master in a virtual chassis. And will conversely not appear if the device is not a master on a virtual chassis.</p> <p>It is no longer possible to connect an interface to itself in the cable connect form.</p>"},{"location":"release-notes/version-1.3.html#removed","title":"Removed","text":""},{"location":"release-notes/version-1.3.html#python-36-no-longer-supported-1268","title":"Python 3.6 No Longer Supported (#1268)","text":"<p>As Python 3.6 has reached end-of-life, and many of Nautobot's dependencies have already dropped support for Python 3.6 as a consequence, Nautobot 1.3 and later do not support installation under Python 3.6.</p>"},{"location":"release-notes/version-1.3.html#v1310-2022-08-08","title":"v1.3.10 (2022-08-08)","text":""},{"location":"release-notes/version-1.3.html#added_1","title":"Added","text":"<ul> <li>#1226 - Added custom job intervals package management.</li> <li>#2073 - Added <code>--local</code> option to <code>nautobot-server runjob</code> command.</li> <li>#2080 - Added <code>--data</code> parameter to <code>nautobot-server runjob</code> command.</li> <li>#2091 - Added <code>remove_stale_scheduled_jobs</code> management command which removes all stale scheduled jobs and also added <code>has_sensitive_variables</code> field to Job model which prevents the job's input parameters from being saved to the database.</li> <li>#2143 - Scheduled Job detail view now includes details of any custom interval.</li> </ul>"},{"location":"release-notes/version-1.3.html#changed_1","title":"Changed","text":"<ul> <li>#2025 - Tweak Renovate config for automated package management.</li> <li>#2114 - Home page now redirects to the login page when <code>HIDE_RESTRICTED_UI</code> is enabled and user is not authenticated.</li> <li>#2115 - Patch updates to <code>mkdocs</code>, <code>svgwrite</code>.</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed","title":"Fixed","text":"<ul> <li>#1739 - Fixed paginator not enforcing max_page_size setting in web ui views.</li> <li>#2060 - Fixed relationship peer_id filter non-existent error on relationship association page.</li> <li>#2095 - Fixed health check failing with Redis Sentinel, TLS configuration.</li> <li>#2119 - Fixed flaky integration test for cable connection UI.</li> </ul>"},{"location":"release-notes/version-1.3.html#security","title":"Security","text":"<p>Important</p> <p>With introducing the <code>has_sensitive_variables</code> flag on Job classes and model (see: #2091), jobs can be prevented from storing their inputs in the database. Due to the nature of queuing or scheduling jobs, the desired inputs must be stored for future use.</p> <p>New safe-default behavior will only permit jobs to be executed immediately, as <code>has_sensitive_variables</code> defaults to <code>True</code>. This value can be overridden by the Job class itself or the Job model edit page. Values entered for jobs executing immediately go straight to the Celery message bus and are cleaned up on completion of execution.</p> <p>Scheduling jobs or requiring approval necessitates those values to be stored in the database until they have been sent to the Celery message bus for execution.</p> <p>During installation of <code>v1.3.10</code>, a migration is applied to set the <code>has_sensitive_variables</code> value to <code>True</code> to all existing Jobs. However to maintain backwards-compatibility, past scheduled jobs are permitted to keep their schedule. New schedules cannot be made until an administrator has overridden the <code>has_sensitive_variables</code> for the desired Job.</p> <p>A new management command exists (<code>remove_stale_scheduled_jobs</code>) which will aid in cleaning up schedules to past jobs which may still have sensitive data stored in the database. This command is not exhaustive nor intended to clean up sensitive values stored in the database. You should review the <code>extras_scheduledjob</code> table for any further cleanup.</p> <p>Note: Leveraging the Secrets and Secret Groups features in Jobs does not need to be considered a sensitive variable. Secrets are retrieved by reference at run time, which means no secret value is stored directly in the database.</p>"},{"location":"release-notes/version-1.3.html#v139-2022-07-25","title":"v1.3.9 (2022-07-25)","text":""},{"location":"release-notes/version-1.3.html#added_2","title":"Added","text":"<ul> <li>#860 - Added documentation that adding device component to device type does not modify existing device instances</li> <li>#1595 - Add ability to specify uWSGI buffer size via environment variable.</li> <li>#1757 - Added nullable face, position to Device bulk edit form to provided desired behavior to bulk assigning to a new rack.</li> </ul>"},{"location":"release-notes/version-1.3.html#changed_2","title":"Changed","text":"<ul> <li>#386 - Clarified messaging in API for rack position occupied.</li> <li>#1356 - Virtual chassis master device interface list is less confusing.</li> <li>#2045 - Clarified Job authoring around proper class inheritance.</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_1","title":"Fixed","text":"<ul> <li>#1035 - Fix assertion raised if SLAAC Status is missing when creating <code>IPAddress</code> objects</li> <li>#1694 - Fixed CablePath not found error when disconnects/delete action performed on a cable</li> <li>#1795 - Corrected relationship source/destination filter help text from queryset Filter to filterset Filter and updated documentations.</li> <li>#1839 - Fixed staff users with auth &gt; group permissions unable to view groups in admin UI.</li> <li>#1937 - Solved <code>_custom_field_data</code> do not fully delete when using CustomFieldBulkDeleteView.</li> <li>#1947 - Fixed unbound local error by initializing template variable before conditional logic statements.</li> <li>#2036 - Fixed outdated UI navigation references in documentation.</li> <li>#2039 - Fixed IntegerVar with default set to 0 on Job evaluating to False.</li> <li>#2057 - Fixed RIR changelog route being in VRF name prefix.</li> <li>#2077 - Fixed an error when viewing object detail pages after uninstalling a plugin but still having RelationshipAssociations involving the plugin's models.</li> <li>#2081 - Fixed error raised if status connected not found when creating a cable</li> </ul>"},{"location":"release-notes/version-1.3.html#v138-2022-07-11","title":"v1.3.8 (2022-07-11)","text":""},{"location":"release-notes/version-1.3.html#added_3","title":"Added","text":"<ul> <li>#1464 - Added \"Continue with SSO\" link on login page.</li> </ul>"},{"location":"release-notes/version-1.3.html#changed_3","title":"Changed","text":"<ul> <li>#1407 - Changed custom field export column headings to prefix with <code>cf_</code>.</li> <li>#1603 - Changed GraphQL schema generation to call time for GraphQL API.</li> <li>#1977 - Updated Renovate config to batch updates (additional PRs included to further refine config).</li> <li>#2020 - Updated <code>celery &gt;= 5.2.7</code>, <code>django-jinja &gt;= 2.10.2</code>, and <code>mysqlclient &gt;= 2.1.1</code> versions in lock file (patch updates).</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_2","title":"Fixed","text":"<ul> <li>#1838 - Fixed job result to show latest not oldest.</li> <li>#1874 - Fixed Git repo sync issue with Sentinel with deprecated rq_count check.</li> </ul>"},{"location":"release-notes/version-1.3.html#security_1","title":"Security","text":"<p>Important</p> <p>CVE in Django versions <code>&gt;= 3.2, &lt; 3.2.14</code>. This update upgrades Django to <code>3.2.14</code>.</p> <ul> <li>#2004 - Bump Django from 3.2.13 to 3.2.14 for for CVE-2022-34265.</li> </ul>"},{"location":"release-notes/version-1.3.html#v137-2022-06-27","title":"v1.3.7 (2022-06-27)","text":""},{"location":"release-notes/version-1.3.html#added_4","title":"Added","text":"<ul> <li>#1896 - Added Renovate Bot configuration, targeting <code>next</code>.</li> <li>#1900 - Added ability to filter Git repository table based on provided contents.</li> </ul>"},{"location":"release-notes/version-1.3.html#changed_4","title":"Changed","text":"<ul> <li>#1645 - Hide search bar for unauthenticated users if <code>HIDE_RESTRICTED_UI</code> is True</li> <li>#1946 - Increase character limit on <code>FileAttachment.mimetype</code> to 255 to allow for all mime types to be used.</li> <li>#1948 - Switched Renovate Bot configuration to bump lock-file only on patch releases instead of bumping in <code>pyproject.toml</code>.</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_3","title":"Fixed","text":"<ul> <li>#1677 - Fixed default values of custom fields on device components (such as Interface) not being applied upon Device creation.</li> <li>#1769 - Resolve missing menu 'General / Installed Plugins' in navbar if <code>HIDE_RESTRICTED_UI</code> is activated</li> <li>#1836 - Fixed incorrect pre-population of custom field filters in table views.</li> <li>#1870 - Fixed cable <code>_abs_length</code> validation error.</li> <li>#1941 - Fixes uWSGI config example, development environment links in Docker section of docs.</li> </ul>"},{"location":"release-notes/version-1.3.html#v136-2022-06-13","title":"v1.3.6 (2022-06-13)","text":""},{"location":"release-notes/version-1.3.html#changed_5","title":"Changed","text":"<ul> <li>#207 - Update permissions documentation to add assigning permissions section.</li> <li>#1763 - Job testing documentation updated to include details around enabling jobs. Job logs database added to <code>TransactionTestCase</code>.</li> <li>#1829 - Change Docker build GitHub Action to cache with matrix awareness.</li> <li>#1856 - Updated links to Slack community.</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_4","title":"Fixed","text":"<ul> <li>#1409 - Fixed page title on device status (NAPALM) page template.</li> <li>#1524 - Fixed valid \"None\" option removed from search field upon display.</li> <li>#1649 - Changed the incorrect view permission (<code>circuits.view_vrf</code> to <code>ipam.view_vrf</code>)</li> <li>#1750 - Fixed incorrect display of boolean value in Virtual Chassis display.</li> <li>#1759 - Fixed TypeError on webhook REST API PATCH.</li> <li>#1787 - Fix scheduled jobs failing when scheduled from REST API.</li> <li>#1841 - Fixed incorrect display of boolean values in Git Repository view.</li> <li>#1848 - Fix Poetry cache issue in CI causing version tests to fail in <code>next</code>.</li> <li>#1850 - Added <code>{{block.super}}</code> to negate the override from the js block in rack.html. This change fixed the issue of unable to navigate away from rack changelog tab.</li> <li>#1868 - Updated link to advanced Docker compose use in getting started guide.</li> </ul>"},{"location":"release-notes/version-1.3.html#v135-2022-05-30","title":"v1.3.5 (2022-05-30)","text":""},{"location":"release-notes/version-1.3.html#added_5","title":"Added","text":"<ul> <li>#1606 - Added best practices for working with FilterSet classes to developer documentation.</li> <li>#1796 - Added documentation for using Git Repositories behind/via proxies.</li> <li>#1811 - Added developer Docker container for running mkdocs instead of locally.</li> </ul>"},{"location":"release-notes/version-1.3.html#changed_6","title":"Changed","text":"<ul> <li>#1818 - Changed README.md to link to correct build status workflows.</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_5","title":"Fixed","text":"<ul> <li>#895 - Fixed validation when creating <code>Interface</code> and <code>VMInterface</code> objects via the REST API while specifying <code>untagged_vlan</code> without <code>mode</code> also set in the payload. A 400 error will now be raised as expected.</li> <li>#1289 - Fixed issue where job result live pagination would reset to page 1 on refresh. The currently selected page will now persist until the job run completes.</li> <li>#1290 - Fix NAPALM enable password argument for devices using the eos NAPALM driver.</li> <li>#1427 - Fix NoReverseMatch exception when related views for action_buttons don't exist.</li> <li>#1428 - Fix IPAM prefix utilization sometimes showing greater than 100 percent for IPv4 prefixes.</li> <li>#1604 - Fix missing filter restriction enforcement on relationship association.</li> <li>#1771 - Fix exception raised for RelationshipAssociation when updating source.</li> <li>#1772 - Fix RelationshipAssociationSerializer not triggering model clean method.</li> <li>#1784 - Fix <code>nautobot-server dumpdata</code> not working due to <code>django_rq</code> update. Updated documentation.</li> <li>#1805 - Fix git pre-commit hook incompatibility with dash shell and add warning on skipped tests.</li> </ul>"},{"location":"release-notes/version-1.3.html#security_2","title":"Security","text":"<p>Attention</p> <p><code>PyJWT</code> - Nautobot does not directly depend on <code>PyJWT</code> so your upgrading Nautobot via <code>pip</code> or other package management tools may not pick up the patched version (we are not pinning this dependency). However some tools support an \"eager\" upgrade policy as an option. For example, <code>pip install --upgrade --upgrade-strategy eager nautobot</code> will upgrade Nautobot and all it's dependencies to their latest compatible version. This may not work for all use cases so it may be safer to update Nautobot then perform <code>pip install --upgrade PyJWT</code>.</p> <p>Docker containers published with this build will have PyJWT upgraded.</p> <ul> <li>#1808 - Bump PyJWT from 2.3.0 to 2.4.0</li> </ul>"},{"location":"release-notes/version-1.3.html#v134-2022-05-16","title":"v1.3.4 (2022-05-16)","text":""},{"location":"release-notes/version-1.3.html#added_6","title":"Added","text":"<ul> <li>#1766 - Added configuration for downloaded filename branding.</li> <li>#1752 - Added a new <code>SearchFilter</code> that is now used on all core filtersets to provide the <code>q=</code> search parameter for basic searching in list view of objects.</li> </ul>"},{"location":"release-notes/version-1.3.html#changed_7","title":"Changed","text":"<ul> <li>#1744 - Updated REST API token provisioning docs to include added in version.</li> <li>#1751 - Updated secrets documentation advisory notes.</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_6","title":"Fixed","text":"<ul> <li>#1263 - Rack device image toggle added back to detail UI.</li> <li>#1449 - Fixed a performance bug in <code>/api/dcim/devices/</code> and <code>/api/virtualization/virtual-machines/</code> relating to configuration contexts.</li> <li>#1652 - Unicode now renders correctly on uses of json.dumps and yaml.dump throughout the code base.</li> <li>#1712 - Fixed circuit termination detail view getting 500 response when it's a provider network.</li> <li>#1755 - Fixed \"Select All\" helper widget from taking full UI height.</li> <li>#1761 - Fixed typo in upgrading documentation.</li> </ul>"},{"location":"release-notes/version-1.3.html#security_3","title":"Security","text":"<ul> <li>#1715 - Add <code>SANITIZER_PATTERNS</code> optional setting and <code>nautobot.utilities.logging.sanitize</code> function and use it for redaction of Job log entries.</li> </ul>"},{"location":"release-notes/version-1.3.html#v133-2022-05-02","title":"v1.3.3 (2022-05-02)","text":""},{"location":"release-notes/version-1.3.html#added_7","title":"Added","text":"<ul> <li>#1481 - Pre-Generate Docs, Add Support for Plugin-Provided Docs</li> <li>#1617 - Added <code>run_job_for_testing</code> helper method for testing Jobs in plugins, internally.</li> </ul>"},{"location":"release-notes/version-1.3.html#changed_8","title":"Changed","text":"<ul> <li>#1481 - Docs link in footer now opens link to bundled documentation instead of Read the Docs.</li> <li>#1680 - Bump netutils dependency to 1.1.0.</li> <li>#1700 - Revert vendoring <code>drf-spectacular</code>.</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_7","title":"Fixed","text":"<ul> <li>#473 - Fix <code>get_return_url</code> for plugin reverse URLs.</li> <li>#1430 - Fix not being able to print Job results, related IPs.</li> <li>#1503 - SSO users can no longer interact with or see the change password form.</li> <li>#1515 - Further fixes for slow/unresponsive jobs results display.</li> <li>#1538 - Fix incorrect page title alignment on the \"Device Type Import\" page.</li> <li>#1678 - Custom fields with 'json' type no longer raise TypeError when filtering on an object list URL</li> <li>#1679 - Fix a data migration error when upgrading to 1.3.x with pre-existing JobResults that reference Jobs with names exceeding 100 characters in length.</li> <li>#1685 - Fix Hadolint issue of <code>docker/Dockerfile</code>.</li> <li>#1692 - Fix duplicate tags in search list results.</li> <li>#1697 - Fix docs incorrectly stating Celerey Redis URLs defaulting from CACHES.</li> <li>#1701 - Fix static file serving of drf-spectacular-sidecar assets when using alternative <code>STATICFILES_STORAGE</code> settings.</li> <li>#1705 - Fix <code>NestedVMInterfaceSerializer</code> referencing the wrong model.</li> </ul>"},{"location":"release-notes/version-1.3.html#v132-2022-04-22","title":"v1.3.2 (2022-04-22)","text":""},{"location":"release-notes/version-1.3.html#added_8","title":"Added","text":"<ul> <li>#1219 - Add ARM64 support (alpha).</li> <li>#1426 - Added plugin development documentation around using ObjectListView.</li> <li>#1674 - Added flag in Dockerfile, tasks.py to enable Poetry install parallelization.</li> </ul>"},{"location":"release-notes/version-1.3.html#changed_9","title":"Changed","text":"<ul> <li>#1667 - Updated README.md screenshots.</li> <li>#1670 - Configure drf-spectacular schema to more closely match drf-yasg (related to: nautobot-ansible#135).</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_8","title":"Fixed","text":"<ul> <li>#1659 - Added some missing test/lint commands to the development getting-started documentation, and made <code>invoke cli</code> parameters match <code>invoke start/stop</code>.</li> <li>#1666 - Fixed errors in documentation with incomplete import statements.</li> <li>#1682 - Fixed Nautobot health checks failing if Redis Sentinel password is required.</li> </ul>"},{"location":"release-notes/version-1.3.html#security_4","title":"Security","text":"<p>Important</p> <p>Critical CVEs in Django versions <code>&gt;= 3.2, &lt; 3.2.13</code>. This update upgrades Django to <code>3.2.13</code>.</p> <ul> <li>#1686 - Implemented fixes for CVE-2022-28347 and CVE-2022-28346 to require Django &gt;=3.2.13.</li> </ul>"},{"location":"release-notes/version-1.3.html#v131-2022-04-19","title":"v1.3.1 (2022-04-19)","text":""},{"location":"release-notes/version-1.3.html#changed_10","title":"Changed","text":"<ul> <li>#1647 - Changed class inheritance of JobViewSet to be simpler and more self-consistent.</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_9","title":"Fixed","text":"<ul> <li>#1278 - Fixed several different errors that could be raised when working with RelationshipAssociations.</li> <li>#1662 - Fixed nat_outside prefetch on Device API view, and displaying multiple nat_outside entries on VM detail view.</li> </ul>"},{"location":"release-notes/version-1.3.html#v130-2022-04-18","title":"v1.3.0 (2022-04-18)","text":""},{"location":"release-notes/version-1.3.html#added_9","title":"Added","text":"<ul> <li>#630 - Added support for multiple NAT outside IP addresses.</li> <li>#872 - Added ability to scope tags to content types.</li> <li>#896 - Implemented support for Dynamic Groups objects.</li> <li>#897 - Added JSON type for custom fields.</li> <li>#1374 - Added REST API Token Provisioning. (Port of NetBox #6592 and subsequent fixes)</li> <li>#1385 - Added MarkdownLint validation and enforcement to CI.</li> <li>#1465 - Implemented REST API versioning.</li> <li>#1525 - Implemented support for regex lookup expressions for <code>BaseFilterSet</code> filter fields in the API.</li> <li>#1638 - Implemented numerous indexes on models natural lookup fields as well as some index togethers for <code>ObjectChange</code>.</li> </ul>"},{"location":"release-notes/version-1.3.html#changed_11","title":"Changed","text":"<ul> <li>#595 - Migrated from <code>drf-yasg</code> (OpenAPI 2.0) to <code>drf-spectacular</code> (OpenAPI 3.0) for REST API interactive Swagger documentation.</li> <li>#792 - Poetry-installed dependencies are now identical between <code>dev</code> and <code>final</code> images.</li> <li>#814 - Extended documentation for configuring Celery for use Redis Sentinel clustering.</li> <li>#1225 - Relaxed uniqueness constraint on Webhook creation, allowing multiple webhooks to send to the same target address so long as their content-type(s) and action(s) do not overlap.</li> <li>#1417 - CI scope improvements for streamlined performance.</li> <li>#1478 - ScheduledJob REST API endpoints now enforce <code>extras.approve_job</code> permissions as appropriate.</li> <li>#1479 - Updated Jobs documentation regarding the concrete Job database model.</li> <li>#1502 Finalized Dynamic Groups implementation for 1.3 release (including documentation and integration tests).</li> <li>#1521 - Consolidated Job REST API endpoints, taking advantage of REST API versioning.</li> <li>#1556 - Cleaned up typos and formatting issues across docs, few code spots.</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_10","title":"Fixed","text":"<ul> <li>#794 - Fixed health check issue when using Redis Sentinel for caching with Cacheops. The Redis health check backend is now aware of Redis Sentinel.</li> <li>#1311 - Fixed a where it was not possible to set the rack height to <code>0</code> when performing a bulk edit of device types.</li> <li>#1476 - Fixed a bug wherein a Job run via the REST API with a missing <code>schedule</code> would allow <code>approval_required</code> to be bypassed.</li> <li>#1504 - Fixed an error that could be encountered when migrating from Nautobot 1.1 or earlier with JobResults with very long log entries.</li> <li>#1515 - Fix Job Result rendering performance issue causing Bad Gateway errors.</li> <li>#1516 - Fixed MySQL unit tests running in Docker environment and revised recommended MySQL encoding settings</li> <li>#1562 - Fixed JobResult filter form UI pointing to the wrong endpoint.</li> <li>#1563 - Fixed UI crash when trying to execute Jobs provided by disabled plugins. A friendly error message will now be displayed.</li> <li>#1582 - Fixed a timing issue with editing a record while its custom field(s) are in the process of being cleaned up by a background task.</li> <li>#1632 - Fixed issue accessing request attributes when request may be None.</li> <li>#1637 - Fixed warnings logged during REST API schema generation.</li> </ul>"},{"location":"release-notes/version-1.3.html#v130b1-2022-03-11","title":"v1.3.0b1 (2022-03-11)","text":""},{"location":"release-notes/version-1.3.html#added_10","title":"Added","text":"<ul> <li>#5 - Added the option to perform a \"dry run\" of Git repository syncing.</li> <li>#330 - Added pre-/post-change data to WebHooks leveraging snapshots.</li> <li>#498 - Added custom-validator support to the RelationshipAssociation model.</li> <li>#724 - Added Provider Network data model. (Partially based on NetBox #5986.)</li> <li>#795 - Added ability to filter objects missing custom field values by using <code>null</code>.</li> <li>#803 - Added a <code>render_boolean</code> template filter, which renders computed boolean values as HTML in a consistent manner.</li> <li>#863 - Added the ability to hide a job in the UI by setting <code>hidden = True</code> in the Job's inner <code>Meta</code> class.</li> <li>#881 - Improved the UX of the main Jobs list by adding accordion style interface that can collapse/expand jobs provided by each module.</li> <li>#885 - Added the ability to define a <code>soft_time_limit</code> and <code>time_limit</code> in seconds as attributes of a Job's <code>Meta</code>.</li> <li>#894 - Added the ability to view computed fields in an object list.</li> <li>#898 - Added support for moving a CustomField, Relationship or ComputedField from the main tab of an object's detail page in the UI to the \"Advanced\" tab.</li> <li>#1001 - Added Job database model and associated functionality.</li> <li>#1109 - Added pagination support for GraphQL list queries.</li> <li>#1255 - Added Python 3.10 support.</li> <li>#1350 - Added missing methods on Circuit Termination detail view.</li> <li>#1411 - Added concrete Job database model; added database signals to populate Job records in the database; added detail, edit, and delete views for Job records.</li> <li>#1457 - Added new Jobs REST API, added control logic to use JobModel rather than JobClass where appropriate; improved permissions enforcement for Jobs.</li> <li>#1470 - Added plugin framework for extending FilterSets and Filter Forms.</li> </ul>"},{"location":"release-notes/version-1.3.html#changed_12","title":"Changed","text":"<ul> <li>#368 - Added <code>nautobot.extras.forms.NautobotModelForm</code> and <code>nautobot.extras.filters.NautobotFilterSet</code> base classes. All form classes which inherited from all three of (<code>BootstrapMixin</code>, <code>CustomFieldModelForm</code>, and <code>RelationshipModelForm</code>) now inherit from <code>NautobotModelForm</code> as their base class. All filterset classes which inherited from all three of (<code>BaseFilterSet</code>, <code>CreatedUpdatedFilterSet</code>, and <code>CustomFieldModelFilterSet</code>) now inherit from <code>NautobotFilterSet</code> as their base class.</li> <li>#443 - The provided \"Dummy Plugin\" has been renamed to \"Example Plugin\".</li> <li>#591 - All uses of <code>type()</code> are now refactored to use <code>isinstance()</code> where applicable.</li> <li>#880 - Jobs menu items now form their own top-level menu instead of a sub-section under the Extensibility menu.</li> <li>#909 - Device, InventoryItem, and Rack serial numbers can now be up to 255 characters in length.</li> <li>#916 - A <code>Job.Meta.description</code> can now contain markdown-formatted multi-line text.</li> <li>#1107 - Circuit Provider account numbers can now be up to 100 characters in length.</li> <li>#1252 - As Python 3.6 has reached end-of-life, the default Docker images published for this release (i.e. <code>1.3.0</code>, <code>stable</code>, <code>latest</code>) have been updated to use Python 3.7 instead.</li> <li>#1277 - Updated Django dependency to 3.2.X LTS.</li> <li>#1307 - Updated various Python package dependencies to their latest compatible versions.</li> <li>#1314 - Updated various development-only Python package dependencies to their latest compatible versions.</li> <li>#1321 - Updates to various browser package dependencies. This includes updating from Material Design Icons 5.x to 6.x, which has a potential impact on plugins: a small number of icons have been removed or renamed as a result of this change.</li> <li>#1367 - Extracted Job-related models to submodule <code>nautobot.extras.models.jobs</code>; refined Job testing best practices.</li> <li>#1391 - Updated Jinja2 dependency to 3.0.X.</li> <li>#1435 - Update to Selenium 4.X.</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_11","title":"Fixed","text":"<ul> <li>#1440 - Handle models missing serializer methods, dependent from adding pre-/post-change data to WebHooks.</li> </ul>"},{"location":"release-notes/version-1.3.html#removed_1","title":"Removed","text":"<ul> <li>#1268 - Drop Support for Python 3.6.</li> </ul>"},{"location":"release-notes/version-1.4.html","title":"Version 1.4","text":""},{"location":"release-notes/version-1.4.html#nautobot-v14","title":"Nautobot v1.4","text":"<p>This document describes all new features and changes in Nautobot 1.4.</p> <p>If you are a user migrating from NetBox to Nautobot, please refer to the \"Migrating from NetBox\" documentation.</p>"},{"location":"release-notes/version-1.4.html#release-overview","title":"Release Overview","text":""},{"location":"release-notes/version-1.4.html#added","title":"Added","text":""},{"location":"release-notes/version-1.4.html#custom-field-extended-filtering-1498","title":"Custom Field Extended Filtering (#1498)","text":"<p>Objects with custom fields now support filter lookup expressions for filtering by custom field values, such as <code>cf_date_field__gte=2022-08-11</code> to select objects whose <code>date_field</code> custom field has a date of 2022-08-11 or later.</p>"},{"location":"release-notes/version-1.4.html#custom-field-slugs-1962","title":"Custom Field Slugs (#1962)","text":"<p>Custom fields now have a distinct <code>slug</code> field. The custom field <code>name</code> attribute should be considered deprecated, and will be removed in a future major release (see also #824.) Additionally, the <code>label</code> attribute, while currently optional in the database, will become mandatory in that same future release as a consequence. When migrating from an earlier Nautobot release to version 1.4 or later, the <code>slug</code> and <code>label</code> for all existing custom fields will be automatically populated if not previously defined.</p> <p>A new version of the <code>/api/extras/custom-fields/</code> REST API endpoints has been implemented. By default this endpoint continues to demonstrate the pre-1.4 behavior (<code>name</code> required, <code>slug</code> and <code>label</code> optional; if unspecified, the <code>slug</code> and <code>label</code> will receive default values based on the provided <code>name</code>). A REST API client can request API version 1.4, in which case the updated API will require <code>slug</code> and <code>label</code> parameters in place of <code>name</code>.</p> <p>Additionally, REST API serialization of custom field data is itself now versioned. For all object endpoints that include custom field data under the <code>custom_fields</code> key, REST API versions 1.3 and earlier will continue the previous behavior of indexing the <code>custom_fields</code> dictionary by fields' <code>name</code> values, but when REST API version 1.4 or later is requested, the <code>custom_fields</code> data will be indexed by <code>slug</code> instead.</p> <p>For technical reasons of backwards-compatibility, the database (ORM) and GraphQL interfaces continue to access and store object custom field data exclusively under the <code>name</code> key; this will change to use the <code>slug</code> in a future major release. Again, watch #824 for plans in that regard.</p>"},{"location":"release-notes/version-1.4.html#custom-tabs-in-object-detail-views-1000","title":"Custom Tabs in Object Detail Views (#1000)","text":"<p>A plugin may now define extra tabs which will be appended to the object view's list of tabs.</p> <p>You can refer to the plugin development guide on how to add tabs to existing object detail views.</p>"},{"location":"release-notes/version-1.4.html#custom-template-css-html-javascript-on-job-forms-1865","title":"Custom Template (CSS, HTML, JavaScript) on Job Forms (#1865)","text":"<p>Jobs can now specify a <code>template_name</code> property and provide a custom template with additional JavaScript and CSS to help with user input on the Job submission form.</p> <p>You can refer to the Job class metadata attribute documentation on how to build and define this template.</p>"},{"location":"release-notes/version-1.4.html#dynamic-groups-support-additional-models-2200","title":"Dynamic Groups Support Additional Models (#2200)","text":"<p>Cluster, IP Address, Prefix, and Rack models can now be filtered on in Dynamic Groups and can also support nested or groups of Dynamic Groups. Some fields have been excluded from filtering until a sensible widget can be provided.</p>"},{"location":"release-notes/version-1.4.html#dark-mode-ui-729","title":"Dark Mode UI (#729)","text":"<p>Nautobot's UI now supports dark mode, both explicitly and via browser preference selection.</p> <p>The \"Theme\" link in the footer provides a modal popup to select the preferred theme. This preference is saved per browser via <code>localStorage</code>.</p>"},{"location":"release-notes/version-1.4.html#improved-filter-coverage-for-dcim-and-virtualization-models","title":"Improved Filter Coverage for DCIM and Virtualization Models","text":"<ul> <li>DCIM: #1729</li> <li>Virtualization: #1735</li> </ul> <p>The DCIM, Virtualization FilterSets have been updated with over 150 new filters, including hybrid filters that support filtering on both <code>pk</code> and <code>slug</code> (or <code>pk</code> and <code>name</code> where <code>slug</code> is not available). A new filter class <code>NaturalKeyOrPKMultipleChoiceFilter</code> was added to <code>nautobot.utilities.filters</code> to support filtering on multiple fields of a related object.</p> <p>Please see the documentation on best practices for mapping model fields to filters for more information.</p>"},{"location":"release-notes/version-1.4.html#job-hooks-1878","title":"Job Hooks (#1878)","text":"<p>Jobs can now be configured to run automatically when a change event occurs on a Nautobot object. Job hooks associate jobs to content types and actions to run jobs when a create, update or delete action occurs on the selected content type. A new job base class <code>JobHookReceiver</code> was introduced that jobs must subclass to be associated with a job hook.</p> <p>Please see the documentation on Job Hooks for more information.</p>"},{"location":"release-notes/version-1.4.html#job-re-runs-1875","title":"Job Re-Runs (#1875)","text":"<p>JobResult records now save the arguments with which the Job was called, allowing for easy re-execution of the Job with the same arguments as before. A \"re-run\" button has been added to the JobResult list view and detail view.</p>"},{"location":"release-notes/version-1.4.html#location-data-model-1052","title":"Location Data Model (#1052)","text":"<p>To locate network information more precisely than a Site defines, you can now define a hierarchy of Location Types (for example, <code>Building</code> \u2190 <code>Floor</code> \u2190 <code>Room</code>) and then create Locations corresponding to these types within each Site. Data objects such as devices, prefixes, VLAN groups, etc. can thus be mapped or assigned to Location representing a specific building, wing, floor, room, etc. as appropriate to your needs.</p> <p>Info</p> <p>At present, Locations fill the conceptual space between the more abstract Region and Site models and the more concrete Rack Group model. In a future Nautobot release, some or all of these other models may be collapsed into Locations. That is to say, in the future you might not deal with Regions and Sites as distinct models, but instead your Location Type hierarchy might include these higher-level categories, becoming something like Country \u2190 City \u2190 Site \u2190 Building \u2190 Floor \u2190 Room.</p>"},{"location":"release-notes/version-1.4.html#parent-interfaces-and-bridge-interfaces-1455","title":"Parent Interfaces and Bridge Interfaces (#1455)","text":"<p>Interface and VMInterface models now have <code>parent_interface</code> and <code>bridge</code> keys. An interface of type <code>Virtual</code> can now associate to a parent physical interface on the same device, virtual chassis, or virtual machine, and an interface of any type can specify another interface as its associated bridge interface. (A new <code>Bridge</code> interface type has also been added, but the <code>bridge</code> interface property is not restricted to interfaces of this type.)</p>"},{"location":"release-notes/version-1.4.html#rackview-ui-add-option-to-truncate-device-name-1119","title":"Rackview UI - Add Option to Truncate Device Name (#1119)","text":"<p>Users can now toggle device full name and truncated name in the rack elevation view. The truncating function is customizable in <code>nautobot_config.py</code> via defining <code>UI_RACK_VIEW_TRUNCATE_FUNCTION</code>. Default behavior is to split on <code>.</code> and return the first item in the list.</p> <p>\"Save SVG\" link presents the same view as what is currently displayed on screen</p> <p>Current preferred toggle state is preserved across tabs (requires refresh) and persists in-browser until local storage is cleared. This presents a consistent behavior when browsing between multiple racks.</p>"},{"location":"release-notes/version-1.4.html#rest-api-enhancements-1463","title":"REST API Enhancements (#1463)","text":"<ul> <li>For all models that support Relationships, their corresponding list and detail REST API endpoints now include the option to include data on their associated Relationships and related objects by specifying <code>include=relationships</code> as a query parameter.</li> <li>Relationship associations on a model can be edited by a PATCH to the appropriate nested value, such as <code>\"relationships\" -&gt; &lt;relationship-slug&gt; -&gt; \"source\"</code> or <code>\"relationships\" -&gt; &lt;relationship-slug&gt; -&gt; \"destination\"</code>.</li> <li>For implementers of REST API serializers (core and/or plugins), a new <code>nautobot.extras.api.serializers.NautobotModelSerializer</code> base class has been added. Using this class guarantees support for relationships, custom fields, and computed fields on the serializer, and provides for a streamlined developer experience.</li> </ul>"},{"location":"release-notes/version-1.4.html#status-field-on-interface-vminterface-models-984","title":"Status Field on Interface, VMInterface Models (#984)","text":"<p>Interface and VMInterface models now support a status. Default statuses that are available to be set are: Active, Planned, Maintenance, Failed, and Decommissioned. During migration all existing interfaces will be set to the status of \"Active\".</p> <p>A new version of the <code>/dcim/interfaces/*</code> REST API endpoints have been implemented. By default this endpoint continues to demonstrate the pre-1.4 behavior unless the REST API client explicitly requests API version=1.4. If you continue to use the pre-1.4 API endpoints, status is defaulted to \"Active\".</p> <p>Visit the documentation on REST API versioning for more information on using the versioned APIs.</p>"},{"location":"release-notes/version-1.4.html#nautobotuiviewset-1812","title":"NautobotUIViewSet (#1812)","text":"<p>New in Nautobot 1.4 is the debut of <code>NautobotUIViewSet</code>: A powerful plugin development tool that can save plugin developer hundreds of lines of code compared to using legacy <code>generic.views</code>. Using it to gain access to default functionalities previous provided by <code>generic.views</code> such as <code>create()</code>, <code>bulk_create()</code>, <code>update()</code>, <code>partial_update()</code>, <code>bulk_update()</code>, <code>destroy()</code>, <code>bulk_destroy()</code>, <code>retrieve()</code> and <code>list()</code> actions.</p> <p>Note that this ViewSet is catered specifically to the UI, not the API.</p> <p>Concrete examples on how to use <code>NautobotUIViewSet</code> resides in <code>nautobot.circuits.views</code>.</p> <p>Please visit the plugin development guide on <code>NautobotViewSet</code> for more information.</p>"},{"location":"release-notes/version-1.4.html#notes-767","title":"Notes (#767)","text":"<p>Primary and Organizational models now support notes. A notes tab has been added to the Object Detail view for all models that inherit the Primary or Organizational base abstract models.</p> <p>Warning</p> <p>Any plugin that inherits from one of these two models and uses the <code>ViewTestCases.PrimaryObjectViewTestCase</code> or <code>ViewTestCases.OrganizationalObjectViewTestCase</code> for their test will need to add the <code>NotesObjectView</code> to the objects URLs.</p> <p>Notes can also be used via the REST API at endpoint <code>/api/extras/notes/</code> or per object detail endpoint at the object's nested <code>/notes/</code> endpoint.</p> <p>Info</p> <p>For implementers of REST API views (core and/or plugins), a new <code>nautobot.extras.api.views.NautobotModelViewSet</code> base class has been added. Use of this class ensures that all features from <code>PrimaryModel</code> or <code>OrganizationalModel</code> are accessible through the API. This includes custom fields and notes.</p> <p>Please see the on plugin development guide on Notes for more details.</p>"},{"location":"release-notes/version-1.4.html#changed","title":"Changed","text":""},{"location":"release-notes/version-1.4.html#dynamic-groups-of-dynamic-groups-1614","title":"Dynamic Groups of Dynamic Groups (#1614)","text":"<p>Dynamic Groups may now be nested in parent/child relationships. The Dynamic Group edit view now has a \"Child Groups\" tab that allows one to make other Dynamic Groups of the same content type children of the parent group. Any filters provided by the child groups are used to filter the members from the parent group using one of three operators: \"Restrict (AND)\", \"Include (OR)\", or \"Exclude (NOT)\". This allows for logical parenthetical grouping of nested groups by the operator you choose for that child group association to the parent.</p> <p>Warning</p> <p>The default behavior of Dynamic Groups with an empty filter (<code>{}</code>) has been inverted to include all objects matching the content type by default instead of matching no objects. This was necessary to implement the progressive layering of child filters similarly to how we use filters to reduce desired objects from basic list view filters.</p> <p>Please see the greatly-expanded documentation on Dynamic Groups for more information.</p>"},{"location":"release-notes/version-1.4.html#renamed-mixin-classes-2135","title":"Renamed Mixin Classes (#2135)","text":"<p>A number of mixin classes have been renamed for improved self-consistency and clarity of usage. The former names of these mixins are still available for now as aliases, but inheriting from these mixins will raise a <code>DeprecationWarning</code>, and these aliases will be removed in a future major release.</p> Former Name New Name <code>AddRemoveTagsForm</code> <code>TagsBulkEditFormMixin</code> <code>CustomFieldBulkCreateForm</code> <code>CustomFieldModelBulkEditFormMixin</code> <code>CustomFieldBulkEditForm</code> <code>CustomFieldModelBulkEditFormMixin</code> <code>CustomFieldFilterForm</code> <code>CustomFieldModelFilterFormMixin</code> <code>CustomFieldModelForm</code> <code>CustomFieldModelFormMixin</code> <code>RelationshipModelForm</code> <code>RelationshipModelFormMixin</code> <code>StatusBulkEditFormMixin</code> <code>StatusModelBulkEditFormMixin</code> <code>StatusFilterFormMixin</code> <code>StatusModelFilterFormMixin</code>"},{"location":"release-notes/version-1.4.html#strict-filter-validation-by-default-1736","title":"Strict Filter Validation by Default (#1736)","text":"<p>Filtering of object lists in the UI and in the REST API will now report an error if an unknown or unrecognized filter parameter is specified. This is a behavior change from previous Nautobot releases, in which unknown filter parameters would be silently discarded and ignored.</p> <p>A new configuration setting, <code>STRICT_FILTERING</code> has been added. It defaults to <code>True</code>, enabling strict validation of filter parameters, but can be set to <code>False</code> to disable this validation.</p> <p>Warning</p> <p>Setting <code>STRICT_FILTERING</code> to <code>False</code> can result in unexpected filtering results in the case of user error, for example a request to <code>/api/dcim/devices/?has_primry_ip=false</code> (note the typo <code>primry</code>) will result in a list of all devices, rather than the intended list of only devices that lack a primary IP address. In the case of Jobs or external automation making use of such a filter, this could have wide-ranging consequences.</p>"},{"location":"release-notes/version-1.4.html#moved-registry-template-context-1945","title":"Moved Registry Template Context (#1945)","text":"<p>The <code>settings_and_registry</code> default context processor was changed to purely <code>settings</code> - the (large) Nautobot application registry dictionary is no longer provided as part of the render context for all templates by default. Added a new <code>registry</code> template tag that can be invoked by specific templates to provide this variable where needed.</p>"},{"location":"release-notes/version-1.4.html#v1410-2022-11-07","title":"v1.4.10 (2022-11-07)","text":""},{"location":"release-notes/version-1.4.html#changed_1","title":"Changed","text":"<ul> <li>#2758 - Changed console logging back to disabled by default when running <code>nautobot-server test ...</code>.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed","title":"Fixed","text":"<ul> <li>#2755 - Fixed incorrect file permissions on <code>/opt/nautobot/nautobot_config.py</code> in <code>final</code> Docker images.</li> </ul>"},{"location":"release-notes/version-1.4.html#v149-2022-11-04","title":"v1.4.9 (2022-11-04)","text":""},{"location":"release-notes/version-1.4.html#added_1","title":"Added","text":"<ul> <li>#1720 - Added NullableDateField to enable Date Type CustomField to filter on null value.</li> <li>#2685 - Added watchdog dev-dependency explicitly.</li> <li>#2685 - Added watchmedo command to worker container to allow container to restart on file change and documented.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_2","title":"Changed","text":"<ul> <li>#2658 - Updated plugin development documentation to introduce <code>NautobotUIViewSet</code> as the first approach for the <code>Adding Web UI Views</code> section.</li> <li>#2669 - Blocked changing the parent of a LocationType when it already has Locations using it.</li> <li>#2671 - Changed the published <code>nautobot-dev</code> images to use the same default <code>nautobot_config.py</code> as the published <code>nautobot</code> images, instead of using the Nautobot core development <code>nautobot_config.py</code> file.</li> <li>#2671 - Renamed <code>development/docker-compose.build.yml</code> to <code>development/docker-compose.final.yml</code> to better reflect its meaning.</li> <li>#2671 - Changed the image labels used in the docker-compose development workflow to reduce ambiguity.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_1","title":"Fixed","text":"<ul> <li>#2406 - Fixed missing HTML element ID for hyperlinks.</li> <li>#2419 - Fixed the null device interface status when a device is created with a device_role associated to an InterfaceTemplate.</li> <li>#2552 - Updated CSS to better account for footer resizing.</li> <li>#2601 - Fixed an issue where a Git repository could provide Jobs even if not marked as a provider of Jobs.</li> <li>#2682 - Fixed test failing when version number contains alpha characters.</li> <li>#2683 - Fixed so that unauthenticated users don't see the version number for Nautobot in the footer.</li> <li>#2684 - Fixed \"The results could not be loaded\" when filtering <code>ContentTypes</code> in the UI.</li> <li>#2688 - Fixed exception not raised when the interface contains a tagged vlan but mode is not set to tagged.</li> <li>#2702 - Fixed NautobotUIViewSet BulkCreateViewMixin validation error handling and .csv file import issue.</li> <li>#2706 - Fixed a ValidationError that could occur when specifying Site latitude/longitude as a float.</li> <li>#2712 - Updated docs links to include the <code>/projects/core</code> in the url path to link correctly.</li> <li>#2717 - Fixed backwards-compatibility with changes made to <code>TreeNodeMultipleChoiceFilter</code>.</li> <li>#2733 - Fixed bug in run_job_for_testing when no request is provided.</li> <li>#2736 - Fixed incorrect <code>site_url</code> setting for MkDocs.</li> </ul>"},{"location":"release-notes/version-1.4.html#v148-2022-10-31","title":"v1.4.8 (2022-10-31)","text":""},{"location":"release-notes/version-1.4.html#added_2","title":"Added","text":"<ul> <li>#2086 - Added JobResult export feature.</li> <li>#2578 - Added support for the documented environment variables in Nautobot's base <code>settings.py</code>, so that they will be recognized even when using a minimal <code>nautobot_config.py</code> or one that was not generated by <code>nautobot-server init</code>.</li> <li>#2578 - Added documentation of more configuration options in the configuration that is generated by <code>nautobot-server init</code>.</li> <li>#2578 - Added a warning in the documentation about django-cryptography and changing <code>SECRET_KEY</code>.</li> <li>#2590 - Added unit tests for bulk-editing and bulk-deleting all instances of a model.</li> <li>#2619 - Added notes about restarting the Nautobot server after creating relationships, custom fields, and computed fields to show them in GraphQL.</li> <li>#2675 - Added the ability to configure Redis Unix socket connections.</li> <li>#2681 - Added multiple assert failure messages to <code>UpdateObjectViewTestCase</code>.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_3","title":"Changed","text":"<ul> <li>#2578 - Updated defaults in <code>settings.py</code> to more closely align to the documentation. If you're using a configuration file generated by <code>nautobot-server init</code>, these changes should have no impact, but if you have a manually crafted configuration file, please verify that the configuration of your system is still as expected after upgrading, with a particular focus on the database configuration, <code>SECRET_KEY</code>, and <code>LOGGING</code>.</li> <li>#2578 - Changed the default <code>LOGGING</code> configuration for virtualenv installs to be the same as it is for Nautobot's published Docker images.</li> <li>#2578 - Revised the template for new configurations generated by <code>nautobot-server init</code> to have less redundancy with Nautobot's built-in <code>settings.py</code>.</li> <li>#2585 - Updated dependency <code>django-health-check</code> from 3.16.5 to 3.16.7.</li> <li>#2585 - Updated dependency <code>psycopg2-binary</code> from 2.9.3 to 2.9.4.</li> <li>#2585 - Updated development dependency <code>coverage</code> from 6.4.2 to 6.4.4.</li> <li>#2585 - Updated development dependency <code>invoke</code> from 1.7.1 to 1.7.3.</li> <li>#2585 - Updated development dependency <code>mkdocs-material</code> from 8.4.2 to 8.4.4.</li> <li>#2591 - Updated README.md to include additional information about the Nautobot project.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_2","title":"Fixed","text":"<ul> <li>#2099 - Fixed PowerFeed Utilization on Rack View not displaying correctly.</li> <li>#2099 - Fixed Total Power Utilization on Rack View not taking into account direct-connected devices.</li> <li>#2099 - Fixed created_updated template adding the end small tag twice.</li> <li>#2146 - Added signals to log when a user logs in and logs out to fix a bug where SSO logins were not being logged.</li> <li>#2426 - Fixed weekly scheduled job executing a day early.</li> <li>#2489 - Fixed custom field regex validation always anchored to beginning of string.</li> <li>#2494 - Fixed custom field regex validation not being enforced on URL custom fields.</li> <li>#2513 - Fixed an issue with <code>DynamicGroup</code> not properly filtering by <code>Region</code> or <code>Location</code>.</li> <li>#2578 - Fixed issue where the documented environment variables for various configuration settings would not be supported if using a minimal <code>nautobot_config.py</code> that was not generated from <code>nautobot-server init</code>.</li> <li>#2632 - Fixed incorrect link from Circuit Type detail view to filtered Circuits table.</li> <li>#2652 - Fixed the issue with Job ObjectChange and Notes not displaying the page header.</li> <li>#2655 - Fixed error when selecting a \"related path\" from the Cable Trace view.</li> <li>#2661 - Fixed default tagging of Docker images built with <code>invoke buildx</code>.</li> <li>#2677 - Fixed a documentation error by adding an import statement to a code example in <code>nautobot/docs/plugins/development.md</code>.</li> <li>#2690 - Fixed test settings to disable logging when running tests.</li> <li>#2693 - Fixed filtering by tree node objects in nested Dynamic Groups.</li> </ul>"},{"location":"release-notes/version-1.4.html#security","title":"Security","text":"<ul> <li>#2651 - Updated <code>Django</code> minimum version to 3.2.16 due to CVE-2022-41323.</li> </ul>"},{"location":"release-notes/version-1.4.html#v147-2022-10-18","title":"v1.4.7 (2022-10-18)","text":""},{"location":"release-notes/version-1.4.html#fixed_3","title":"Fixed","text":"<ul> <li>#2636 - Fixed <code>pyproject.toml</code> to be a proper full release.</li> </ul>"},{"location":"release-notes/version-1.4.html#v146-2022-10-17","title":"v1.4.6 (2022-10-17)","text":""},{"location":"release-notes/version-1.4.html#added_3","title":"Added","text":"<ul> <li>#2437 - Added Nautobot-themed error page for handling 403 CSRF errors.</li> <li>#2512 - Added link to <code>nautobot-plugin-nornir</code> in the Apps section of the documentation.</li> <li>#2588 - Added a danger admonition to developer docs about never using <code>pip</code> to install Poetry into Nautobot dev environment.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_4","title":"Changed","text":"<ul> <li>#2434 - Updated <code>oauthlib</code> to <code>3.2.1</code> for <code>CVE-2022-36087</code>. This is a dependency of <code>social-auth-core</code> so will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> <li>#2530 - Updated development documentation to include LTM, additional release schedule information.</li> <li>#2565 - Updated version to 1.4.6-beta.1.</li> <li>#2602 - Increased size of <code>ObjectChange.change_context_detail</code> field from 100 to 400 chars, and add truncation to it. Also adding truncation to <code>ObjectChange.object_repr</code>.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_4","title":"Fixed","text":"<ul> <li>#2075 - Fixed white screen flash in dark mode.</li> <li>#2546 - Applied a hotfix for multiple jobs executing from a single scheduled job.</li> <li>#2560 - Fixed NautobotHTMLRenderer incorrectly overrides selected pk_list for bulk_destroy and bulk_update.</li> <li>#2566 - Clarified documentation on superusers needing staff permission to access admin UI.</li> <li>#2573 - Fixed link from VLAN group detail view to filtered VLAN list.</li> <li>#2574 - Updated <code>nautobot.core.settings</code> to match expected behavior on <code>NAPALM_USERNAME</code>, <code>NAPALM_PASSWORD</code>, and <code>NAPALM_TIMEOUT</code> based on documentation.</li> <li>#2595 - Fixed NautobotUIViewSet handling of unauthenticated users.</li> <li>#2614 - Fixed CONTRIBUTING.md link to actual Nautobot documentation.</li> </ul>"},{"location":"release-notes/version-1.4.html#v145-2022-10-03","title":"v1.4.5 (2022-10-03)","text":""},{"location":"release-notes/version-1.4.html#added_4","title":"Added","text":"<ul> <li>#2330 - Added <code>created</code> and <code>last_updated</code> fields to Device <code>Component</code> and <code>ComponentTemplate</code> models.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_5","title":"Changed","text":"<ul> <li>#2490 - Added change log fragment checkbox to Github pull request template.</li> <li>#2508 - Updated dark mode theme to be less...dark.</li> <li>#2537 - Updated <code>django-extensions</code> to <code>3.2.1</code>, <code>drf-spectacular</code> to <code>0.24.2</code>, <code>drf-yasg</code> to <code>1.21.4</code>.</li> <li>#2544 - Updated towncrier template to convert multi-line change fragments into multiple release notes entries.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_5","title":"Fixed","text":"<ul> <li>#2326 - Fixed 500 error in Circuit Termination swap.</li> <li>#2330 - Fixed missing Change Log tab on device component detail views.</li> <li>#2445 - Fixed invalid Renovate config.</li> <li>#2466 - Fixed Jobs misleading sensitive variables or requiring approval error message.</li> <li>#2509 - Fixed template lookup logic in ObjectNotesView, ObjectDynamicGroupsView and ObjectChangeLogView.</li> <li>#2526 - Fixed error in rendering the example plugin's <code>AnotherExampleModel</code> list view by adding a <code>get_absolute_url()</code> method to the <code>AnotherExampleModel</code> class and adding an <code>AnotherExampleModel</code> detail view template.</li> <li>#2533 - Fixed <code>test_list_objects_unknown_filter_no_strict_filtering</code> failure if a filterset couldn't be found for a given model.</li> <li>#2539 - Updated links from nautobot.readthedocs.io to docs.nautobot.com.</li> </ul>"},{"location":"release-notes/version-1.4.html#v144-2022-09-26","title":"v1.4.4 (2022-09-26)","text":""},{"location":"release-notes/version-1.4.html#added_5","title":"Added","text":"<ul> <li>#2023 - Added reusable GitHub Action workflow for use by plugins to test against <code>next</code>, <code>develop</code> routinely.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_6","title":"Changed","text":"<ul> <li>#2153 - Updated optional settings documentation to provide clarity on Nautobot vs Django settings.</li> <li>#2235 - Added ancestor information to Location and LocationType display names to provide additional context in the UI.</li> <li>#2457 - Moved <code>towncrier_template.j2</code> from root to develop directory.</li> <li>#2468 - Upgraded CI gh-action-setup-poetry-environment action to v3</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_6","title":"Fixed","text":"<ul> <li>#2353 - Fixed MultiSelect CustomField being emptied unintentionally after bulk update.</li> <li>#2375 - Fixed error in Cable list view filtering when <code>color</code> and <code>type</code> filters are not set.</li> <li>#2461 - Fixed an exception during OpenAPI schema generation when certain Nautobot apps (including <code>nautobot-firewall-models</code>) were installed.</li> <li>#2496 - Fixed failing CI due to #2468</li> </ul>"},{"location":"release-notes/version-1.4.html#v143-2022-09-19","title":"v1.4.3 (2022-09-19)","text":""},{"location":"release-notes/version-1.4.html#added_6","title":"Added","text":"<ul> <li>#2327 - Added help text to the Job scheduling datetime picker to indicate the applicable time zone.</li> <li>#2362 - Added documentation and automation for Nautobot Github project to use <code>towncrier</code> for changelog fragments.</li> <li>#2431 - Add section to the custom field documentation on ORM filtering.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_7","title":"Changed","text":"<ul> <li>#1619 - Updated <code>drf-spectacular</code> dependency to version 0.24.</li> <li>#2223 - Augment <code>get_route_for_model()</code> to support REST API routes.</li> <li>#2340 - Improved rendering of badges, labels, buttons, and color selection menus in dark mode.</li> <li>#2383 - Updated documentation link for Nautobot ChatOps plugin.</li> <li>#2392 - Un-group Renovate <code>next</code> updates to address code changes per package.</li> <li>#2400 - Improved formatting of version changes in the documentation.</li> <li>#2417 - Reworked Docker builds in CI to publish an intermediate \"dependencies-only\" image to speed up rebuild times.</li> <li>#2447 - Moved Dynamic Groups tab on object detail view to it's own view as a generic <code>ObjectDynamicGroupsView</code>.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_7","title":"Fixed","text":"<ul> <li>#138 - Fixed lack of user-facing message when an exception occurs while discovering Jobs from a Git repository.</li> <li>#950 - Fixed database concurrency issues with uWSGI pre-forking.</li> <li>#1619 - Improved accuracy of OpenAPI schema for bulk REST API operations.</li> <li>#2299 - Remove <code>render_filter()</code> method and <code>filter</code> field from table columns</li> <li>#2309 - Fixed 404 on ScheduledJobView, <code>job_class</code> no longer found behavior.</li> <li>#2324 - Fixed errors encountered when a job model is deleted while a job is running.</li> <li>#2338 - Fixed whitespace issue with Text File secrets and they are now stripped of leading/trailing whitespace and newlines.</li> <li>#2364 - Allow <code>invoke</code> tasks to be run even if <code>rich</code> is not installed.</li> <li>#2378 - Fix Job Result redirection on submit.</li> <li>#2382 - Removed extraneous cache and temporary files from the <code>dev</code> and <code>final-dev</code> Docker images to reduce image size.</li> <li>#2389 - Removed extraneous <code>inspect.getsource()</code> call from Job class.</li> <li>#2407 - Corrected SSO Backend reference for Azure AD Tenant.</li> <li>#2449 - CI: Moved dependency build to be a job, not a step.</li> </ul>"},{"location":"release-notes/version-1.4.html#v142-2022-09-05","title":"v1.4.2 (2022-09-05)","text":""},{"location":"release-notes/version-1.4.html#added_7","title":"Added","text":"<ul> <li>#983 - Added functionalities to specify <code>args</code> and <code>kwargs</code> to <code>NavMenuItem</code>.</li> <li>#2250 - Added \"Stats\" and \"Rack Groups\" to Location detail view, added \"Locations\" to Site detail view.</li> <li>#2273 - Added custom markdownlint rule to check for invalid relative links in the documentation.</li> <li>#2307 - Added <code>dynamic_groups</code> field in GraphQL on objects that can belong to dynamic groups.</li> <li>#2314 - Added <code>pylint</code> to linting suite and CI.</li> <li>#2339 - Enabled and addressed additional <code>pylint</code> checkers.</li> <li>#2360 - Added Django natural key to <code>extras.Tag</code>.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_8","title":"Changed","text":"<ul> <li>#2011 - replaced all .format() strings and C format strings with fstrings.</li> <li>#2293 - Updated GitHub bug report template.</li> <li>#2296 - Updated <code>netutils</code> dependency from 1.1.x to 1.2.x.</li> <li>#2347 - Revamped documentation look and feel.</li> <li>#2349 - Docker images are now built with Poetry 1.2.0.</li> <li>#2360 - Django natural key for Status is now <code>name</code> rather than <code>slug</code>.</li> <li>#2363 - Update app icons for consistency</li> <li>#2365 - Update Network to Code branding name</li> <li>#2367 - Remove coming soon from projects that exists</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_8","title":"Fixed","text":"<ul> <li>#449 - Improved error checking and reporting when syncing Git repositories.</li> <li>#1227 - The NAUTOBOT_DOCKER_SKIP_INIT environment variable can now be set to \"false\" (case-insensitive),</li> <li>#1807 - Fixed post_run method fails to add exceptions to job log.</li> <li>#2085 - The log entries table on a job result page can now be filtered by log level or message and hitting the return key has no effect.</li> <li>#2107 - Fixed a TypeError when a view defines <code>action_buttons = None</code>.</li> <li>#2237 - Fixed several issues with permissions enforcement for Note creation and viewing.</li> <li>#2268 - Fixed broken links in documentation.</li> <li>#2269 - Fixed missing JS code causing rendering errors on GraphQL Query and Rack Reservation detail views.</li> <li>#2278 - Fixed incorrect permissions check on \"Installed Plugins\" menu item.</li> <li>#2290 - Fixed inheritance of ObjectListViewMixin for CircuitTypeUIViewSet.</li> <li>#2311 - Fixed autopopulation of \"Parent\" selection when editing an existing Location.</li> <li>#2341 - Fixed omission of docs from published Python packages.</li> <li>#2342 - Reduced file size of <code>nautobot-dev</code> Docker images by clearing Poetry cache</li> <li>#2350 - Fixed potential Redis deadlock if Nautobot server restarts at an unfortunate time.</li> </ul>"},{"location":"release-notes/version-1.4.html#v141-2022-08-22","title":"v1.4.1 (2022-08-22)","text":""},{"location":"release-notes/version-1.4.html#added_8","title":"Added","text":"<ul> <li>#1809 - Added Django natural key to <code>extras.Status</code> to simplify exporting and importing of database dumps for <code>Status</code> objects.</li> <li>#2202 - Added <code>validate_models</code> management command to validate each instance in the database.</li> <li>#2213 - Added a new <code>--pull</code> parameter for <code>invoke build</code> to tell Docker to pull images when building containers.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_9","title":"Changed","text":"<ul> <li>#2206 - Changed Run button on Job Result to always be displayed, \"Re-Run\" if available.</li> <li>#2252 - Updated Poetry install command for Development Getting Started guide.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_9","title":"Fixed","text":"<ul> <li>#2209 - Fixed lack of dark-mode support in GraphiQL page.</li> <li>#2215 - Fixed error seen in migration from 1.3.x if certain default Statuses had been modified.</li> <li>#2218 - Fixed typos/links in release notes and Dynamic Groups docs.</li> <li>#2219 - Fixed broken pagination in Dynamic Group detail \"Members\" tab.</li> <li>#2220 - Narrowed scope of auto-formatting in VSCode to only apply to Python files.</li> <li>#2222 - Fixed missing app headings in Swagger UI.</li> <li>#2229 - Fixed <code>render_form.html</code> include template to not render a duplicate <code>object_note</code> field.</li> <li>#2232 - Fixed incorrect API URLs and incorrect inclusion of Circuits UI URLs in Swagger UI.</li> <li>#2241 - Fixed <code>DynamicGroup.objects.get_for_model()</code> to support nested Dynamic Groups.</li> <li>#2259 - Fixed footer not bound to bottom of Device View.</li> </ul>"},{"location":"release-notes/version-1.4.html#v140-2022-08-15","title":"v1.4.0 (2022-08-15)","text":""},{"location":"release-notes/version-1.4.html#added_9","title":"Added","text":"<ul> <li>#1812 - Added <code>NautobotViewSet</code> and accompanying helper methods, documentation.</li> <li>#2173 - Added flake8 linting and black formatting settings to vscode workspace settings.</li> <li>#2105 - Added support for Notes in NautobotBulkEditForm and NautobotEditForm.</li> <li>#2200 - Added Dynamic Groups support for Cluster, IP Address, Prefix, and Rack.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_10","title":"Changed","text":"<ul> <li>#1812 - Changed Circuit app models to use <code>NautobotViewSet</code>s.</li> <li>#2029 - Updated optional settings docs to call out environment variable only settings.</li> <li>#2176 - Update invoke task output to use rich formatting, print full Docker Compose commands.</li> <li>#2183 - Update dependency django to ~3.2.15.</li> <li>#2193 - Updated Postgres/MySQL <code>dumpdata</code> docs to exclude <code>django_rq</code> exports.</li> <li>#2200 - Group of dynamic group membership links now link to the group's membership table view.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_10","title":"Fixed","text":"<ul> <li>#1304 - Fixed incorrect display of connection counts on home page.</li> <li>#1845 - Fixed not being able to schedule job with 'immediate' schedule via API.</li> <li>#1996 - Fixed Menu Item <code>link_text</code> render on top of buttons.</li> <li>#2178 - Fixed \"invalid filter\" error when filtering JobResults in the UI.</li> <li>#2184 - Fixed job re-run not honoring <code>has_sensitive_variables</code>.</li> <li>#2190 - Fixed tags missing from Location forms.</li> <li>#2191 - Fix widget for boolean filters fields when generating filter form for a Dynamic Group</li> <li>#2192 - Fixed job.request removed from job instance in <code>v1.4.0b1</code>.</li> <li>#2197 - Fixed some display issues in the Dynamic Groups detail view.</li> </ul>"},{"location":"release-notes/version-1.4.html#v140rc1-2022-08-10","title":"v1.4.0rc1 (2022-08-10)","text":""},{"location":"release-notes/version-1.4.html#added_10","title":"Added","text":"<ul> <li>#767 - Added notes field to Primary and Organizational models.</li> <li>#1498 - Added extended lookup expression filters to custom fields.</li> <li>#1962 - Added <code>slug</code> field to Custom Field model, added 1.4 REST API version of the <code>api/extras/custom-fields/</code> endpoints.</li> <li>#2106 - Added support for listing/creating Notes via REST API.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_11","title":"Changed","text":"<ul> <li>#2156 - Update network automation apps listed on overview of docs.</li> <li>#2168 - Added model toggle to skip adding missing Dynamic Group filter fields for use in easing integration of new models into Dynamic Groups.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_11","title":"Fixed","text":"<ul> <li>#2090 - Fixed an issue where a REST API PATCH of a Tag could inadvertently reset its associated content-types.</li> <li>#2150 - Fixed unit tests performance degradation.</li> <li>#2132 - Updated job hooks to use slugs in urls instead of pk.</li> <li>#2133 - Update documentation for job hooks, make it reachable from the Nautobot UI.</li> <li>#2135 - Fixed ImportError on <code>RelationshipModelForm</code>, renamed other mixins and added aliases for backwards compatibility.</li> <li>#2137 - Fixed incorrect parameter name in <code>NaturalKeyOrPKMultipleChoiceFilter</code> documentation.</li> <li>#2142 - Fixed incorrect URL field in REST API nested relationship representation.</li> <li>#2165 - Fix up relationship-association API test issue.</li> </ul>"},{"location":"release-notes/version-1.4.html#v140b1-2022-07-30","title":"v1.4.0b1 (2022-07-30)","text":""},{"location":"release-notes/version-1.4.html#added_11","title":"Added","text":"<ul> <li>#1463 - Added REST API support for opt-in <code>relationships</code> data on model endpoints; added <code>NautobotModelSerializer</code> base class.</li> <li>#1614 - Added support for nesting of Dynamic Groups, allowing inclusion/exclusion rules of sub-group members.</li> <li>#1735 - Added missing filters to model FilterSets for Virtualization models.</li> <li>#1865 - Added support for a custom template on Job forms.</li> <li>#1875 - Add ability to quickly re-submit a previously run <code>Job</code> with the same parameters.</li> <li>#1877 - Add new job base class JobHookReceiver to support triggering job execution from change events.</li> <li>#1878 - Add job hooks feature.</li> <li>#1883 - Add ability to filter objects by their relationships into the existing FilterSet.</li> <li>#1884 - Add ability to set the relationship filter via the filter form.</li> <li>#2035 - Added change source context to object change context manager.</li> <li>#2051 - Add changelog url for Relationships.</li> <li>#2061 - Add draggable child groups to Dynamic Groups edit view in UI, recompute and hide weights.</li> <li>#2072 - Expand on <code>query_params</code> for <code>ObjectVar</code> in Jobs documentation.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_12","title":"Changed","text":"<ul> <li>#2049 - Moved <code>get_changelog_url</code> to a method on objects that support changelogs, updated template context.</li> <li>#2116 - Updated package dependencies: Pillow <code>~9.1.1</code> -&gt; <code>~9.2.0</code>, black <code>~22.3.0</code> -&gt; <code>~22.6.0</code>, coverage <code>6.4.1</code> -&gt; <code>6.4.2</code>, django-cacheops <code>6.0</code> -&gt; <code>6.1</code>, django-cryptography <code>1.0</code> -&gt; <code>1.1</code>, django-debug-toolbar <code>~3.4.0</code> -&gt; <code>~3.5.0</code>, django-extensions <code>~3.1.5</code> -&gt; <code>~3.2.0</code>, drf-yasg <code>~1.20.0</code> -&gt; <code>^1.20.0</code>, importlib-metadata <code>~4.4</code> -&gt; <code>^4.4.0</code>, jsonschema <code>~4.4.0</code> -&gt; <code>~4.8.0</code>, mkdocs <code>1.3.0</code> -&gt; <code>1.3.1</code>, mkdocs <code>==1.3.0</code> -&gt; <code>==1.3.1</code>, mkdocs-include-markdown-plugin <code>~3.2.3</code> -&gt; <code>~3.6.0</code>, mkdocs-include-markdown-plugin <code>==3.2.3</code> -&gt; <code>==3.6.1</code>, social-auth-core <code>~4.2.0</code> -&gt; <code>~4.3.0</code>, svgwrite <code>1.4.2</code> -&gt; <code>1.4.3</code></li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_12","title":"Fixed","text":"<ul> <li>#1710 - Fixed invalid CSS when clicking \"Add another\" row buttons for formsets on Secrets Groups, Dynamic Groups edit view in the UI.</li> <li>#2069 - Addressed numerous UX improvements for Dynamic Groups of Dynamic Groups feature to ease usability of this feature.</li> <li>#2109 - Fixed Relationship Filters are not Applied with \"And\" Operator.</li> <li>#2111 - Fixed Invalid filter error thrown for <code>__source</code> with message: \"\" is not a valid UUID.</li> </ul>"},{"location":"release-notes/version-1.4.html#v140a2-2022-07-11","title":"v1.4.0a2 (2022-07-11)","text":"<p>Attention</p> <p>The  <code>next</code> and <code>develop</code> branches introduced conflicting migration numbers during the release cycle. This necessitates reordering the migration in <code>next</code>. If you installed <code>v1.4.0a1</code>, you will need to roll back a migration before upgrading/installing <code>v1.4.0a2</code> and newer. If you have not installed <code>v1.4.0a</code> this will not be an issue.</p> <p>Before upgrading, run: <code>nautobot-server migrate extras 0033_add__optimized_indexing</code>. This will revert the reordered migration <code>0034_configcontextschema__remove_name_unique__create_constraint_unique_name_owner</code>, which is now number <code>0035</code>.</p> <p>Perform the Nautobot upgrade as usual and proceed with post-installation migration.</p> <p>No data loss is expected as the reordered migration only modified indexing on existing fields.</p>"},{"location":"release-notes/version-1.4.html#added_12","title":"Added","text":"<ul> <li>#1000 - Object detail views can now have extra UI tabs which are defined by a plugin.</li> <li>#1052 - Initial prototype implementation of Location data model.</li> <li>#1318 - Added <code>nautobot.extras.forms.NautobotBulkEditForm</code> base class. All bulk-edit forms for models that support both custom fields and relationships now inherit from this class.</li> <li>#1466 - Plugins can now override views.</li> <li>#1729 - Add new filter class <code>NaturalKeyOrPKMultipleChoiceFilter</code> to <code>nautobot.utilities.filters</code>.</li> <li>#1729 - Add 137 new filters to <code>nautobot.dcim.filters</code> FilterSets.</li> <li>#1729 - Add <code>cable_terminations</code> to the <code>model_features</code> registry.</li> <li>#1893 - Added an object detail view for Relationships.</li> <li>#1949 - Added TestCaseMixin for Helper Functions across all test case bases.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_13","title":"Changed","text":"<ul> <li>#1908 - Update dependency Markdown to ~3.3.7</li> <li>#1909 - Update dependency MarkupSafe to ~2.1.1</li> <li>#1912 - Update dependency celery to ~5.2.7</li> <li>#1913 - Update dependency django-jinja to ~2.10.2</li> <li>#1915 - Update dependency invoke to ~1.7.1</li> <li>#1917 - Update dependency svgwrite to ~1.4.2</li> <li>#1919 - Update dependency Pillow to ~9.1.1</li> <li>#1920 - Update dependency coverage to ~6.4.1</li> <li>#1921 - Update dependency django-auth-ldap to ~4.1.0</li> <li>#1924 - Update dependency django-cors-headers to ~3.13.0</li> <li>#1925 - Update dependency django-debug-toolbar to ~3.4.0</li> <li>#1928 - Update dependency napalm to ~3.4.1</li> <li>#1929 - Update dependency selenium to ~4.2.0</li> <li>#1945 - Change the <code>settings_and_registry</code> default context processor to purely <code>settings</code>, moving registry dictionary to be accessible via <code>registry</code> template tag.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_13","title":"Fixed","text":"<ul> <li>#1898 - Browsable API is now properly styled as the rest of the app.</li> </ul>"},{"location":"release-notes/version-1.4.html#removed","title":"Removed","text":"<ul> <li>#1462 - Removed job source tab from Job and Job Result view.</li> <li>#2002 - Removed rqworker container from default Docker development environment.</li> </ul>"},{"location":"release-notes/version-1.4.html#v140a1-2022-06-13","title":"v1.4.0a1 (2022-06-13)","text":""},{"location":"release-notes/version-1.4.html#added_13","title":"Added","text":"<ul> <li>#729 - Added UI dark mode.</li> <li>#984 - Added status field to Interface, VMInterface models.</li> <li>#1119 - Added truncated device name functionality to Rackview UI.</li> <li>#1455 - Added <code>parent_interface</code> and <code>bridge</code> fields to Interface and VMInterface models.</li> <li>#1833 - Added <code>hyperlinked_object</code> template filter to consistently reference objects in templates.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_14","title":"Changed","text":"<ul> <li>#1736 - <code>STRICT_FILTERING</code> setting is added and enabled by default.</li> <li>#1793 - Added index notes to fields from analysis, relaxed ConfigContextSchema constraint (unique on <code>name</code>, <code>owner_content_type</code>, <code>owner_object_id</code> instead of just <code>name</code>).</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_14","title":"Fixed","text":"<ul> <li>#1815 - Fix theme link style in footer.</li> <li>#1831 - Fixed missing <code>parent_interface</code> and <code>bridge</code> from 1.4 serializer of Interfaces.</li> <li>#1831 - Fix job from with <code>approval_required=True</code> and <code>has_sensitive_variables=True</code> can be scheduled. .</li> </ul>"},{"location":"release-notes/version-1.5.html","title":"Version 1.5","text":""},{"location":"release-notes/version-1.5.html#nautobot-v15","title":"Nautobot v1.5","text":"<p>This document describes all new features and changes in Nautobot 1.5.</p> <p>If you are a user migrating from NetBox to Nautobot, please refer to the \"Migrating from NetBox\" documentation.</p>"},{"location":"release-notes/version-1.5.html#release-overview","title":"Release Overview","text":""},{"location":"release-notes/version-1.5.html#added","title":"Added","text":""},{"location":"release-notes/version-1.5.html#added-nautobot-server-generate_test_data-command-2536","title":"Added <code>nautobot-server generate_test_data</code> command (#2536)","text":"<p>A new management command, <code>nautobot-server generate_test_data</code>, has been added that can be used to populate the Nautobot database with various data as a baseline for manual or automated testing. This is now used internally by Nautobot's unit testing suite to create a synthetic data set that looks and feels like real data with randomly-generated values. Most importantly, the objects are created with all of the fields fully and correctly populated, to assert that each object in the database is properly exercising all features.</p> <p>Warning</p> <p>Be very cautious about running this command on your server instance. It is not intended to be used in production environments and will result in data loss.</p>"},{"location":"release-notes/version-1.5.html#custom-field-grouping-899","title":"Custom Field Grouping (#899)","text":"<p>Custom fields can now be assigned to a free-text \"grouping\" to improve usability when a large number of custom fields are defined on a given model. In the UI, fields in the same grouping will be grouped together, and groupings can be expanded/collapsed for display purposes.</p>"},{"location":"release-notes/version-1.5.html#custom-celery-task-queues-2421","title":"Custom Celery Task Queues (#2421)","text":"<p>A new optional job property <code>task_queues</code> has been introduced to allow Nautobot to leverage custom celery queues for jobs. This will allow you to send jobs to specific workers based on which queue is selected. This property can be set on the job class and overridden in the job model, similar to other overridable job fields. If <code>task_queues</code> is not defined on the job class or job model, the job will only be able to use the default queue. A new field has been added to the job run form to allow you to select a queue when you run the job and  an optional field <code>task_queue</code> has been added to the REST API job run endpoint for the same purpose.</p> <p>Important</p> <p>The default celery queue name has been changed from <code>celery</code> to <code>default</code>. If you have any workers or tasks hard coded to use <code>celery</code> you will need to update those workers/tasks or change the <code>CELERY_TASK_DEFAULT_QUEUE</code> setting in your <code>nautobot_config.py</code>.</p>"},{"location":"release-notes/version-1.5.html#device-redundancy-groups-1892","title":"Device Redundancy Groups (#1892)","text":"<p>Device Redundancy Groups have been added to model groups of distinct devices that perform device clustering or failover high availability functions. This may be used to model whole device redundancy strategies across devices with separate control planes (ex: ASA failover), not devices that share a control plane (ex: stackwise switch stacks), or interface specific redundancy strategies (ex: hsrp). Device Redundancy Groups support grouping an arbitrary number of devices and may be assigned an optional secrets group and one or more optional failover strategies.</p>"},{"location":"release-notes/version-1.5.html#nautobot-apps-api-2723","title":"Nautobot Apps API (#2723)","text":"<p>Added in version 1.5.2</p> <p>The new <code>nautobot.apps</code> module provides a common starting point for app (a.k.a. plugin) developers to find all of the functions and classes that are recommended for use in apps. For example, instead of needing to look through the entire Nautobot codebase to find the appropriate classes, and then write:</p> <pre><code>from nautobot.extras.forms import NautobotModelForm\nfrom nautobot.utilities.forms import BulkEditForm, CSVModelForm\nfrom nautobot.utilities.forms.fields import DynamicModelChoiceField\n</code></pre> <p>an app developer can now refer to <code>nautobot.apps.forms</code> and then write simply:</p> <pre><code>from nautobot.apps.forms import (\nBulkEditForm,\nCSVModelForm,\nDynamicModelChoiceField,\nNautobotModelForm,\n)\n</code></pre> <p>For more details, please refer to the updated app developer documentation.</p>"},{"location":"release-notes/version-1.5.html#nestable-locationtypes-2608","title":"Nestable LocationTypes (#2608)","text":"<p><code>LocationType</code> definitions can now be flagged as <code>nestable</code>. When this flag is set, Locations of this type may nest within one another, similar to how Regions work at present. This allows you to have a variable-depth hierarchy of Locations, for example:</p> <ul> <li>Main Campus (\"Building Group\" location type)<ul> <li>West Campus (Building Group)<ul> <li>Building A (\"Building\" location type)</li> <li>Building B (Building)</li> </ul> </li> <li>East Campus (Building Group)<ul> <li>Building C (Building)</li> <li>Building D (Building)</li> </ul> </li> <li>South Campus (Building Group)<ul> <li>Western South Campus (Building Group)<ul> <li>Building G (Building)</li> </ul> </li> </ul> </li> </ul> </li> <li>Satellite Campus (Building Group)<ul> <li>Building Z (Building)</li> </ul> </li> </ul> <p>In the above example, only two LocationTypes are defined (\"Building Group\" and \"Building\") but the \"Building Group\" type is flagged as nestable, so one Building Group may contain another Building Group.</p>"},{"location":"release-notes/version-1.5.html#required-relationships-873","title":"Required Relationships (#873)","text":"<p>Relationships can be marked as being required. By default, relationships are not marked as being required.</p> <p>To mark a relationship as being required, select \"Source objects MUST implement this relationship\" or conversely \" Destination objects MUST implement this relationship\" from the \"Required on\" field when editing or creating a relationship:</p> <ul> <li>If \"Destination objects MUST implement this relationship\" is selected, objects of the type selected in \"Destination Type\" will enforce this relationship when they are created or edited.</li> <li>If \"Source objects MUST implement this relationship\" is selected, objects of the type selected in \"Source Type\" will enforce this relationship when they are created or edited.</li> </ul> <p>Required relationships are enforced in the following scenarios:</p> <ul> <li>Creating or editing an object via the API or the UI</li> <li>Bulk creating objects via the API</li> <li>Bulk editing objects via the API or the UI</li> </ul>"},{"location":"release-notes/version-1.5.html#changed","title":"Changed","text":""},{"location":"release-notes/version-1.5.html#database-query-caching-is-now-disabled-by-default-1721","title":"Database Query Caching is now Disabled by Default (#1721)","text":"<p>In prior versions of Nautobot, database query caching using the <code>django-cacheops</code> application (aka Cacheops) was enabled by default. This is determined by the default value of the <code>CACHEOPS_ENABLED</code> setting being set to <code>True</code>.</p> <p>Through much trial and error we ultimately decided that this feature is more trouble than it is worth and we have begun to put more emphasis on improving performance of complex database queries over continuing to rely upon the various benefits and pitfalls of utilizing Cacheops.</p> <p>As a result, the value of this setting now defaults to <code>False</code>, disabling database query caching entirely for new deployments. Cacheops will be removed entirely in a future release.</p> <p>Important</p> <p>Users with existing <code>nautobot_config.py</code> files generated from earlier versions of Nautobot will still have <code>CACHEOPS_ENABLED = True</code> unless they modify or regenerate their configuration. If users no longer desire caching, please be sure to explicitly toggle the value of this setting to <code>False</code> and restart your Nautobot services.</p>"},{"location":"release-notes/version-1.5.html#deprecation-warnings-silenced-by-default-2798","title":"Deprecation Warnings Silenced by Default (#2798)","text":"<p>Changed in version 1.5.2</p> <p>Deprecation warnings raised by Nautobot itself (such as warnings about upcoming breaking changes in a future release) are no longer logged as <code>WARNING</code> log messages by default, but can be enabled by setting the <code>NAUTOBOT_LOG_DEPRECATION_WARNINGS</code> environment variable to <code>True</code> in your configuration. More information is available under Optional Settings.</p> <p>Caution</p> <p>In Nautobot 2.0, deprecation warnings will again be logged by default; a future release of Nautobot 1.5.x will also re-enable default logging of deprecation warnings.</p>"},{"location":"release-notes/version-1.5.html#redesigned-list-filtering-ui-1998","title":"Redesigned List Filtering UI (#1998)","text":"<p>Added a dynamic filter form that allows users to filter object tables/lists by any field and lookup expression combination supported by the corresponding FilterSet and API.</p>"},{"location":"release-notes/version-1.5.html#renamed-mixin-classes-2779","title":"Renamed Mixin Classes (#2779)","text":"<p>Changed in version 1.5.2</p> <p>A number of mixin classes have been renamed and/or relocated for improved self-consistency and clarity of usage. The former names of these mixins are still available for now as aliases, but inheriting from these aliases will now raise a <code>DeprecationWarning</code>, and these aliases wil be removed in a future release.</p> Former Name New Name <code>CableTerminationFilterSet</code> <code>CableTerminationModelFilterSetMixin</code> <code>CableTerminationSerializer</code> <code>CableTerminationModelSerializerMixin</code> <code>ConnectedEndpointSerializer</code> <code>PathEndpointModelSerializerMixin</code> <code>ConnectionFilterSet</code> <code>ConnectionFilterSetMixin</code> <code>CreatedUpdatedFilterSet</code> <code>CreatedUpdatedModelFilterSetMixin</code> <code>CustomFieldModelFilterSet</code> <code>CustomFieldModelFilterSetMixin</code> <code>CustomFieldModelSerializer</code> <code>CustomFieldModelSerializerMixin</code> <code>DeviceComponentFilterSet</code> <code>DeviceComponentModelFilterSetMixin</code> <code>DeviceTypeComponentFilterSet</code> <code>DeviceComponentTemplateModelFilterSetMixin</code> <code>LocalContextFilterSet</code> <code>LocalContextModelFilterSetMixin</code> <code>PathEndpointFilterSet</code> <code>PathEndpointModelFilterSetMixin</code> <code>PluginBanner</code> <code>Banner</code> <code>PluginConfig</code> <code>NautobotAppConfig</code> <code>PluginCustomValidator</code> <code>CustomValidator</code> <code>PluginFilterExtension</code> <code>FilterExtension</code> <code>PluginTemplateExtension</code> <code>TemplateExtension</code> <code>RelationshipModelFilterSet</code> <code>RelationshipModelFilterSetMixin</code> <code>TaggedObjectSerializer</code> <code>TaggedModelSerializerMixin</code> <code>TenancyFilterSet</code> <code>TenancyModelFilterSetMixin</code>"},{"location":"release-notes/version-1.5.html#v1524-2023-07-24","title":"v1.5.24 (2023-07-24)","text":""},{"location":"release-notes/version-1.5.html#fixed","title":"Fixed","text":"<ul> <li>#3312 - Fixed custom fields not auto-populating when creating objects through the ORM.</li> <li>#4127 - Fixed JavaScript error with 'Check Secret' button introduced in the previous patch release.</li> </ul>"},{"location":"release-notes/version-1.5.html#security","title":"Security","text":"<ul> <li>#4126 - Updated <code>cryptography</code> to <code>41.0.2</code> due to CVE-2023-38325. As this is not a direct dependency of Nautobot, it will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1523-2023-07-10","title":"v1.5.23 (2023-07-10)","text":""},{"location":"release-notes/version-1.5.html#added_1","title":"Added","text":"<ul> <li>#3235 - Added a warning notifying users when the requested <code>per_page</code> on a list page exceeds the <code>MAX_PAGE_SIZE</code> set.</li> <li>#3937 - Added a Nautobot 2.0 pre-migration management command aptly named <code>pre_migrate</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_1","title":"Changed","text":"<ul> <li>#1854 - When sorting tables for MPTT models, nesting/indentation of the model name display is disabled as it was misleading.</li> <li>#1854 - Disabled sorting on TreeNode model tables as TreeNode do not support sorting.</li> <li>#4049 - Restructured non-production dependencies in <code>pyproject.toml</code> to comply with latest Poetry expectations.</li> <li>#4050 - Added <code>develop-1.6</code> to list of target branches to run changelog step in pull request CI workflow.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies","title":"Dependencies","text":"<ul> <li>#4049 - Updated development-only dependencies for documentation rendering: <code>mkdocstrings</code> 0.22.0, <code>mkdocstrings-python</code> 1.1.2, and <code>griffe</code> 0.30.1.</li> <li>#4064 - Updated <code>Django</code> to <code>3.2.20</code> to address <code>CVE-2023-36053</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_1","title":"Fixed","text":"<ul> <li>#2374 - Revised documentation for recommended parameters to use when running <code>nautobot-server dumpdata</code>.</li> <li>#2374 - Revised documentation around preparing to run <code>nautobot-server loaddata</code>.</li> <li>#2374 - Added documentation to run <code>nautobot-server trace_paths</code> after <code>nautobot-server loaddata</code>.</li> <li>#2374 - Fixed a signal handler that could cause <code>nautobot-server loaddata</code> to abort if certain data is present.</li> <li>#3109 - Fixed missing trailing slash in NautobotUIViewSet urls.</li> <li>#3422 - Fixed postgres database healthcheck error message in development environment.</li> <li>#3524 - Fixed the unhandled exception brought on by updating Rack to a new site with a similar device sharing the same name and tenant by catching error in 'RackForm.clean`.</li> <li>#4021 - Fixed erroneous warning banner on list views when <code>MAX_PAGE_SIZE</code> is set to zero.</li> <li>#4048 - Fixed broken tab navigation in secrets.</li> </ul>"},{"location":"release-notes/version-1.5.html#security_1","title":"Security","text":"<ul> <li>#4064 - Updated <code>Django</code> to <code>3.2.20</code> to address <code>CVE-2023-36053</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1522-2023-06-26","title":"v1.5.22 (2023-06-26)","text":""},{"location":"release-notes/version-1.5.html#added_2","title":"Added","text":"<ul> <li>#3534 - Added optional args and kwargs to <code>BaseModel.validated_save()</code> that pass through to the model's <code>save</code> method.</li> <li>#3946 - Added warning note to job scheduling documentation for the attributes that can prevent scheduling.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_2","title":"Fixed","text":"<ul> <li>#3534 - Fixed confusing unit test failure message when trying to run a non-existent test.</li> <li>#3534 - Fixed unit tests sometimes clearing out the default database.</li> <li>#3658 - Fixed a typo in the success message when removing a child Device from a Device Bay.</li> <li>#3739 - Fixed change log entries not being created for some long running requests.</li> <li>#3891 - Fixed a bug preventing Job buttons from supporting the <code>FORCE_SCRIPT_NAME</code> setting due to hard-coded URLs.</li> <li>#3924 - Fixed a potential server hang at startup when a misconfigured GitRepository is present.</li> <li>#3948 - Fixed device name copy button adding an extra space/return.</li> <li>#3987 - Fixed issue where download SVG download did not actually download.</li> </ul>"},{"location":"release-notes/version-1.5.html#security_2","title":"Security","text":"<ul> <li>#3796 - Updated <code>requests</code> to 2.31.0 to address CVE-2023-32681. This is a development dependency and will not auto-update when upgrading Nautobot. Please be sure to update your local environment.</li> <li>#3843 - Updated <code>cryptography</code> to 41.0.0 due to a statically linked version of OpenSSL which contained vulnerability CVE-2023-2650. This is not a direct dependency so will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1521-2023-06-12","title":"v1.5.21 (2023-06-12)","text":""},{"location":"release-notes/version-1.5.html#added_3","title":"Added","text":"<ul> <li>#3806 - Added instructions and examples for SAML SSO using Okta as the IdP.</li> <li>#3811 - Added a note that addresses UWSGI buffer size concerns with Azure SSO in <code>nautobot/docs/configuration/authentication/sso.md</code>.</li> <li>#3897 - Adds log message when a secrets group for a git repository doesn't yield a token.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_2","title":"Changed","text":"<ul> <li>#3888 - Changed note for celery concurrency in the docs.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_3","title":"Fixed","text":"<ul> <li>#3809 - Fixed a bug that prevented  <code>__init__()</code> function of <code>bulk_create_form_class</code> being overridden in NautobotUIViewSet.</li> <li>#3882 - Removed deprecated distutils dependency.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1520-2023-05-30","title":"v1.5.20 (2023-05-30)","text":""},{"location":"release-notes/version-1.5.html#added_4","title":"Added","text":"<ul> <li>#3400 - Added documentation on how to enable Jobs and Job hooks.</li> <li>#3766 - Add troubleshooting steps for Azure AD SSO Group Sync example.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_3","title":"Changed","text":"<ul> <li>#3680 - Changed device component instantiation to be a separate method.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_4","title":"Fixed","text":"<ul> <li>#3503 - Fixed FieldError when sorting VMs list by primary IP.</li> <li>#3616 - Fixed <code>location</code> filter on <code>CircuitFilterSet</code> and <code>ProviderFilterSet</code>.</li> <li>#3787 - Fixed MySQL <code>Out of sort memory</code> error on <code>JobListView</code> and <code>JobResultListView</code>.</li> <li>#3789 - Fixed Exception <code>unsupported operand type(s) for -: 'list' and 'list'</code> for MultiObjectVar with missing UUID.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1519-2023-05-16","title":"v1.5.19 (2023-05-16)","text":""},{"location":"release-notes/version-1.5.html#added_5","title":"Added","text":"<ul> <li>#3695 - Added note to documentation about using <code>{{ obj.cf }}</code> to access custom fields in jinja templates.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_4","title":"Changed","text":"<ul> <li>#3617 - SearchForms on Nautobot homepage now redirect users to login page when they are not authenticated.</li> <li>#3663 - Modified <code>delete_button</code> and <code>edit_button</code> template tags to lookup <code>pk</code> and <code>slug</code> without the need to specify the lookup key.</li> <li>#3703 - Added generic views documentation to navigation panel.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies_1","title":"Dependencies","text":"<ul> <li>#3549 - Updated <code>django</code> to <code>~3.2.19</code> to address <code>CVE-2023-31047</code>.</li> <li>#3549 - Updated <code>mkdocs</code> to <code>~1.4.3</code>.</li> <li>#3549 - Updated <code>psycopg2-binary</code> to <code>~2.9.6</code>.</li> <li>#3698 - Updated <code>social-auth-core</code> to <code>~4.4.0</code> to permit addressing <code>CVE-2022-2309</code>.</li> <li>#3753 - Updated indirect dev dependency <code>pymdown-extensions</code> to <code>10.0</code> to address <code>CVE-2023-32309</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_5","title":"Fixed","text":"<ul> <li>#3704 - Fixed GitRepository fetching on Home Page when getting repo-based Job's name.</li> <li>#3726 - Fixed a <code>KeyError</code> when filtering Cables in the UI by <code>termination_a_type</code> or <code>termination_b_type</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#security_3","title":"Security","text":"<ul> <li>#3698 - Updated <code>lxml</code> to <code>~4.9.2</code> to address <code>CVE-2022-2309</code>. This is not a direct dependency so it will not auto-update when upgrading Nautobot. Please be sure to update your local environment.</li> <li>#3724 - Updated <code>django</code> to <code>~3.2.19</code> due to <code>CVE-2023-31047</code>.</li> <li>#3753 - Updated indirect dev dependency <code>pymdown-extensions</code> to <code>10.0</code> to address <code>CVE-2023-32309</code>. This should not be installed in a production environment by default but should be updated if you have installed it.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1518-2023-05-01","title":"v1.5.18 (2023-05-01)","text":""},{"location":"release-notes/version-1.5.html#added_6","title":"Added","text":"<ul> <li>#1526 - Added UI button and REST API to validate a <code>Secret</code> can be retrieved.</li> <li>#3669 - Added indexes to <code>JobResult</code> across common fields: <code>created</code>, <code>completed</code>, and <code>status</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_5","title":"Changed","text":"<ul> <li>#2800 - Add model documentation to navigation panel.</li> <li>#3440 - Added warning admonitions for Job Hooks and Job Approvals documentation that setting <code>Meta.approval_required</code> is ignored on <code>JobHookReceiver</code> classes.</li> <li>#3602 - Updated <code>.gitignore</code> to not track new UI non-source files.</li> <li>#3621 - Changed development Docker compose commands to not leave temporary containers behind.</li> <li>#3633 - Changed Custom Validator applicator to not require DB query.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_6","title":"Fixed","text":"<ul> <li>#3083 - Fixed an issue where unit tests might fail erroneously when dealing with objects whose name/display contains characters like <code>\"&lt;&gt;</code>.</li> <li>#3533 - Fixed an issue where sending a PATCH to <code>/api/dcim/interfaces/(uuid)/</code> might inadvertently reset the interface's status to <code>Active</code>.</li> <li>#3533 - Fixed an issue where sending a PATCH to <code>/api/users/tokens/(uuid)/</code> might inadvertently change the token's value.</li> <li>#3612 - Fixed a 500 error when filtering by <code>content_type</code> in Dynamic Groups list view.</li> <li>#3660 - Fixed an issue where grouped job buttons would always be disabled due to a template rendering issue.</li> </ul>"},{"location":"release-notes/version-1.5.html#security_4","title":"Security","text":"<ul> <li>#3642 - Updated <code>sqlparse</code> to <code>0.4.4</code> due to CVE-2023-30608. This is not a direct dependency so it will not auto-update when upgrading Nautobot. Please be sure to update your local environment.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1517-2023-04-17","title":"v1.5.17 (2023-04-17)","text":""},{"location":"release-notes/version-1.5.html#added_7","title":"Added","text":"<ul> <li>#3484 - Added job profiling option to job execution when in DEBUG mode.</li> <li>#3544 - Added the ability to change the <code>CACHES[\"default\"][\"BACKEND\"]</code> via an environment variable <code>NAUTOBOT_CACHES_BACKEND</code></li> </ul>"},{"location":"release-notes/version-1.5.html#changed_6","title":"Changed","text":"<ul> <li>#3544 - The default database backend if <code>METRICS_ENABLED</code> is <code>True</code> is now \"django_prometheus.db.backends.postgresql\"</li> <li>#3544 - The default CACHES backend if <code>METRICS_ENABLED</code> is <code>True</code> is now \"django_prometheus.cache.backends.redis.RedisCache\"</li> <li>#3548 - Changed Git Repository docs to include admonition about Github Apps.</li> <li>#3595 - Update the warning provided when a bad reverse entry is not found in serializer to point to correct import location.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies_2","title":"Dependencies","text":"<ul> <li>#3525 - Added explicit dependency on <code>packaging</code> that had been inadvertently omitted.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_7","title":"Fixed","text":"<ul> <li>#3116 - Fixed JSON comparison of <code>data_scheme</code> keys in <code>assertInstanceEqual</code> tests.</li> <li>#3573 - Fixed advanced filtering on interface UI list page not working.</li> <li>#3577 - Fixed <code>NautobotUIViewSet</code> documentation example for case sensitive typos.</li> <li>#3577 - Fixed <code>NautobotUIViewSet</code> documentation example not including imports.</li> <li>#3598 - Fixed default sanitizer patterns to account for strings beginning with <code>i</code> or <code>is</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1516-2023-04-10","title":"v1.5.16 (2023-04-10)","text":""},{"location":"release-notes/version-1.5.html#added_8","title":"Added","text":"<ul> <li>#3557 - Added docs page for Circuit Maintenance.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_8","title":"Fixed","text":"<ul> <li>#2944 - Fixed slow performance of relationships on ObjectListView.</li> <li>#3345 - Fixed missing Relationships in DynamicFilterForm.</li> <li>#3477 - Added a note under heading Setting ViewSet Attributes to mention the caveat of not using <code>slug</code> or <code>pk</code>.</li> <li>#3502 - Updated upstream workflow to support testing apps <code>next-2.0</code> branches against <code>next</code>.</li> <li>#3550 - Fixed display name of filtered relationships on ObjectListView.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1515-2023-04-04","title":"v1.5.15 (2023-04-04)","text":""},{"location":"release-notes/version-1.5.html#added_9","title":"Added","text":"<ul> <li>#3446 - Added documentation links for Device Onboarding and LifeCycle Management plugins to docs.nautobot.com menu.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_7","title":"Changed","text":"<ul> <li>#3384 - Moved extra information stored previously in <code>block sidebar</code> to <code>block header_extra</code> in page templates (<code>aggregate_list.html</code> and <code>objectchange_list.html</code>).</li> <li>#3384 - Documented <code>block header_extra</code> in <code>docs/development/templates.md</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies_3","title":"Dependencies","text":"<ul> <li>#3499 - Updated <code>redis</code> to 4.5.4. This is not a direct dependency of Nautobot so it will not auto-update when upgrading. Please update your local environment as needed.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_9","title":"Fixed","text":"<ul> <li>#3206 - Fixed Docker tag syntax on prerelease workflow.</li> <li>#3480 - Fixed an error that could be seen in certain cases with IPAddress records.</li> </ul>"},{"location":"release-notes/version-1.5.html#removed","title":"Removed","text":"<ul> <li>#3384 - Removed all remaining instances of <code>block sidebar</code> from page templates (<code>aggregate_list.html</code> and <code>objectchange_list.html</code>).</li> <li>#3384 - Removed documentation about <code>block sidebar</code> from <code>docs/development/templates.md</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#security_5","title":"Security","text":"<ul> <li>#3499 - Updated <code>redis</code> to 4.5.4 due to CVE-2023-28858 and CVE-2023-28859. This is not a direct dependency so will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1514-2023-03-20","title":"v1.5.14 (2023-03-20)","text":""},{"location":"release-notes/version-1.5.html#added_10","title":"Added","text":"<ul> <li>#2618 - Added the ability to stand up a local dev env for SSO using Keycloak.</li> <li>#3033 - Added <code>JobButton</code> model to create single click execution buttons in the web UI to run jobs based on a single object.</li> <li>#3377 - Added additional choices for many data types in <code>nautobot.dcim</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_8","title":"Changed","text":"<ul> <li>#3434 - Changed the recommended exception to raise to end jobs early.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_10","title":"Fixed","text":"<ul> <li>#3419 - Fixed <code>test_queryset_to_csv</code> to format data fetched from the model.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1513-2023-03-14","title":"v1.5.13 (2023-03-14)","text":""},{"location":"release-notes/version-1.5.html#added_11","title":"Added","text":"<ul> <li>#766 - Added option for apps to extend Nautobot's Prometheus metrics, based on <code>nautobot_capacity_metrics</code>.</li> <li>#3410 - Added <code>-time</code> index for ObjectChange records.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_9","title":"Changed","text":"<ul> <li>#3410 - Changed Homepage ObjectChange query to not join User or Content Type tables, use record cache for user entries instead.</li> <li>#3416 - Updated Windows development documentation.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies_4","title":"Dependencies","text":"<ul> <li>#3405 - Updated version of <code>pyopenssl</code> in Nautobot dev environment and Docker images to 23.0.0 due to an incompatibility between older versions of <code>pyopenssl</code> and version 39.x of <code>cryptography</code>. This is not a direct dependency of Nautobot so it will not auto-update when upgrading. Please update your local environment as needed.</li> <li>#3405 - Updated <code>cryptography</code> to 39.0.2. This is not a direct dependency of Nautobot so it will not auto-update when upgrading. Please update your local environment as needed.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_11","title":"Fixed","text":"<ul> <li>#3347 - Fixed (again) <code>Location.parent</code> not populating correctly in the form when editing an existing Location.</li> </ul>"},{"location":"release-notes/version-1.5.html#removed_1","title":"Removed","text":"<ul> <li>#3407 - Removed permission checks for ContentTypeAPIViewSet.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1512-2023-03-03","title":"v1.5.12 (2023-03-03)","text":""},{"location":"release-notes/version-1.5.html#added_12","title":"Added","text":"<ul> <li>#3182 - Added support for assigning Config Context objects via Dynamic Groups.</li> <li>#3219 - Added support for custom fields to Dynamic Groups.</li> <li>#3220 - Added support for relationships to Dynamic Groups.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_10","title":"Changed","text":"<ul> <li>#3369 - Changed <code>RelationshipModelFilterSetMixin</code> to perform a single OR query including <code>select_related</code> for <code>source_type</code> and <code>destination_type</code> vs. two single queries for each source/destination types.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies_5","title":"Dependencies","text":"<ul> <li>#3388 - Updated <code>GitPython</code> to 3.1.31.</li> <li>#3388 - Updated <code>drf-yasg</code> to 1.21.5. Note: this is automatic for the Nautobot-provided containers, but because our dependency on it goes away in 2.0, it's an optional update for other installations.</li> <li>#3388 - Updated <code>netutils</code> to 1.4.1.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_12","title":"Fixed","text":"<ul> <li>#3295 - Fixed kombu serialization error on <code>User</code> object that arose when <code>CELERY_RESULT_EXTENDED == True</code> or when <code>enqueue_job</code> was called from within an existing <code>Job</code>.</li> <li>#3318 - Fixed a bug in prefix factory when a /0 ipv6 network is generated by faker.</li> <li>#3341 - Fixed missing <code>get_route_for_model()</code> logic for the <code>ContentType</code> and <code>Group</code> models.</li> <li>#3353 - Fixed a bug in <code>nautobot.extras.forms.mixins.CustomFieldModelFilterFormMixin</code> where the list of custom field names were not being stored on <code>self.custom_fields</code>.</li> <li>#3353 - Fixed a bug in <code>nautobot.utilities.filters.MappedPredicatesFilterMixin</code> (from which <code>SearchFilter</code> inherits) that was preventing <code>q</code> fields from being used in Dynamic Group filters.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1511-2023-02-18","title":"v1.5.11 (2023-02-18)","text":""},{"location":"release-notes/version-1.5.html#added_13","title":"Added","text":"<ul> <li>#3168 - Add device name to bulk interface rename header.</li> <li>#3184 - Added Git 2.0+ as a mandatory dependency in the installation instructions.</li> <li>#3255 - Added <code>--cache-test-fixtures</code> command line argument to Nautobot unit and integration tests.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_11","title":"Changed","text":"<ul> <li>#3134 - Migrate ModelMultipleChoiceFilters to NaturalKeyOrPKMultipleChoiceFilter.</li> <li>#3224 - Updates to our deprecation policy: Prior-major REST API versions will be dropped upon next-major release.</li> <li>#3264 - Changed <code>DynamicGroup.objects.get_for_object()</code> to be a little more efficient.</li> <li>#3311 - Add Links to Branch Names to README.md.</li> <li>#3314 - Updated developer documentation for user and prototype branching conventions.</li> <li>#3314 - Updated pre-commit hook to validate user namespace prefix on branch name.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies_6","title":"Dependencies","text":"<ul> <li>#3251 - Updated <code>oauthlib</code> to 3.2.2.</li> <li>#3258 - Updated <code>cryptography</code> to 39.0.1.</li> <li>#3320 - Updated <code>django</code> to 3.2.18.</li> <li>#3333 - Updated <code>netutils</code> constraint from ~1.4.0 to ^1.4.0 to permit semver upgrades.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_13","title":"Fixed","text":"<ul> <li>#2580 - Fixed fragile generic view test.</li> <li>#3187 - Fixed <code>DynamicModelChoiceField</code>s having a generic default label when one is provided.</li> <li>#3274 - Fixed ObjectListViewMixin's filtering when exporting objects in NautobotUIViewSet.</li> <li>#3277 - Fixed incorrect test data in <code>nautobot.extras.tests.test_api.NoteTest</code>.</li> <li>#3278 - Fixed docker development environment error when the Nautobot container tries to start before the database is ready.</li> <li>#3290 - Fixed an issue preventing the inclusion of <code>netutils</code> functions in Django templates.</li> <li>#3308 - Fixed incorrect documentation for object permissions.</li> <li>#3327 - Fixed Azure AD tenant configuration documentation.</li> <li>#3332 - Fixed missing imports in Secrets Providers plugin development documentation.</li> <li>#3335 - Fixed inability to change filtering on custom field (selection) once filter is configured.</li> </ul>"},{"location":"release-notes/version-1.5.html#security_6","title":"Security","text":"<ul> <li>#3251 - Updated <code>oauthlib</code> to 3.2.2 due to CVE-2022-36087. This is not a direct dependency so will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> <li>#3258 - Updated <code>cryptography</code> to 39.0.1 due to CVE-2023-0286, CVE-2023-23931. This is not a direct dependency so will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> <li>#3320 - Updated <code>django</code> to 3.2.18 due to CVE-2023-24580.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1510-2023-02-06","title":"v1.5.10 (2023-02-06)","text":""},{"location":"release-notes/version-1.5.html#added_14","title":"Added","text":"<ul> <li>#3013 - Added <code>CELERY_WORKER_PROMETHEUS_PORTS</code> configuration setting</li> <li>#3013 - Added prometheus HTTP server listening on the worker to expose worker metrics</li> <li>#3013 - Added <code>nautobot_job_duration_seconds</code> counter metric that reports on job execution</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_12","title":"Changed","text":"<ul> <li>#3177 - Updated VLANFactory to generate longer and more \"realistic\" VLAN names.</li> <li>#3198 - Added dependencies towncrier section, removed extra newline.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies_7","title":"Dependencies","text":"<ul> <li>#3227 - Updated <code>django</code> to 3.2.17.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_14","title":"Fixed","text":"<ul> <li>#3126 - Fixed interface not raising exception when adding a VLAN from a different site in tagged_vlans.</li> <li>#3153 - Made integration test <code>CableConnectFormTestCase.test_js_functionality</code> more resilient and less prone to erroneous failures.</li> <li>#3177 - Fixed a spurious failure in BulkEditObjectsViewTestCase.test_bulk_edit_objects_with_constrained_permission.</li> <li>#3200 - Added <code>dependencies</code> to the list of valid change fragment types in the documentation.</li> </ul>"},{"location":"release-notes/version-1.5.html#security_7","title":"Security","text":"<ul> <li>#3227 - Updated <code>django</code> to 3.2.17 due to CVE-2023-23969.</li> </ul>"},{"location":"release-notes/version-1.5.html#v159-2023-01-26","title":"v1.5.9 (2023-01-26)","text":""},{"location":"release-notes/version-1.5.html#changed_13","title":"Changed","text":"<ul> <li>#3117 - Update Renovate config to batch lockfile updates to next.</li> <li>#3144 - Updated <code>netutils</code> to <code>~1.4.0</code></li> <li>#3171 - Increased maximum VLAN name length from 64 characters to 255 characters.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_15","title":"Fixed","text":"<ul> <li>#3114 - Fixed Navbar scroll through top-level menu in low resolution desktop screens.</li> <li>#3155 - Aligned buttons on device component create page.</li> <li>#3169 - Fixed data mismatch in <code>ScheduledJob</code> causing celery workers to fail when running scheduled jobs created in versions prior to <code>v1.5.8</code>. \u26a0 NOTE: If your celery workers are failing on startup after upgrading to <code>v1.5.8</code>, you may need to purge the celery queue with <code>nautobot-server celery purge</code> or <code>nautobot-server celery purge -Q &lt;queues&gt;</code> to purge custom queues.</li> </ul>"},{"location":"release-notes/version-1.5.html#v158-2023-01-23","title":"v1.5.8 (2023-01-23)","text":""},{"location":"release-notes/version-1.5.html#added_15","title":"Added","text":"<ul> <li>#3103 - Added Redis troubleshooting section to installation docs.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_14","title":"Changed","text":"<ul> <li>#3072 - In Nautobot's unit tests, all HTTP requests are now sent with SERVER_NAME set to <code>nautobot.example.com</code> instead of <code>testserver</code> (Django's default) and the test configuration for Nautobot itself sets <code>ALLOWED_HOSTS</code> to expect <code>nautobot.example.com</code>. This is intended to protect against issues such as #3065.</li> <li>#3077 - Updated Nautobot release checklist to reflect current branching and pull request process.</li> <li>#3112 - Converted eligible <code>prefetch_related()</code> to <code>select_related()</code> queries. Users should note a performance gain from this change, but note that cacheops is no longer recommended in v1.5 and this change will likely result in invalid data responses if cacheops remains enabled in your environment. Cacheops will be removed entirely in a future release.</li> <li>#3121 - Updated Config Contexts documentation to denote support for associating by Device Redundancy Group membership.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_16","title":"Fixed","text":"<ul> <li>#2244 - Fixed an unnecessary and sometimes problematic database access from the Celery worker before it forks off to execute an individual job.</li> <li>#3097 - Fixed scrolling past select dropdown in modals.</li> <li>#3104 - Fixed bug preventing filters from being removed from list views.</li> </ul>"},{"location":"release-notes/version-1.5.html#security_8","title":"Security","text":"<ul> <li>#3055 - Updated <code>setuptools</code> to <code>65.5.1</code> to address <code>CVE-2022-40897</code>. This is not a direct dependency so will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> <li>#3082 - Updated <code>gitpython</code> to <code>~3.1.30</code> to address <code>CVE-2022-24439</code>.</li> <li>#3119 - Updated <code>future</code> to <code>0.18.3</code> due to <code>CVE-2022-40899</code>. This is not a direct dependency so will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> </ul>"},{"location":"release-notes/version-1.5.html#v157-2023-01-04","title":"v1.5.7 (2023-01-04)","text":""},{"location":"release-notes/version-1.5.html#fixed_17","title":"Fixed","text":"<ul> <li>#3065 - Rolled back the changes made in 1.5.6 by #3016 to fix a breaking issue with <code>ALLOWED_HOSTS</code> and change-logging.</li> </ul>"},{"location":"release-notes/version-1.5.html#security_9","title":"Security","text":"<ul> <li>#3074 - Sandboxed rendering of Jinja2 templates is now enforced by default in keeping with Jinja2 best practices. To enable template sandboxing in a Nautobot instance without needing to upgrade, add the following value to your <code>nautobot_config.py</code> and restart your Nautobot services: <code>TEMPLATES[1][\"OPTIONS\"][\"environment\"] = \"jinja2.sandbox.SandboxedEnvironment\"</code></li> </ul>"},{"location":"release-notes/version-1.5.html#v156-2022-12-23","title":"v1.5.6 (2022-12-23)","text":""},{"location":"release-notes/version-1.5.html#added_16","title":"Added","text":"<ul> <li>#1768 - Added the display of half-depth rack items from the rear face.</li> <li>#2481 - Added <code>clone_fields</code> definition to Custom Field class.</li> <li>#2511 - Added mouseover help text for cable connect buttons on DeviceConsolePortTable, DeviceConsoleServerPortTable, DevicePowerPortTable, DeviceInterfaceTable, DeviceFrontPortTable, DeviceRearPortTable.</li> <li>#2951 - Added change logging when relationships are changed.</li> <li>#2966 - Added device name to rack elevation with images.</li> <li>#3014 - Added support for Git repositories to provide config contexts filtered by Location.</li> <li>#3025 - Added plugin banner test back to ListObjectsViewTestCase and ensured <code>example_plugin</code> installation before running it.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_15","title":"Changed","text":"<ul> <li>#2589 - Updated all screenshots on the README.md to gifs.</li> <li>#2970 - Updated <code>certifi</code> to <code>2022.12.7</code> for <code>CVE-2022-23491</code>. This is a nested dependency so will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> <li>#2994 - Updated <code>mkdocs-material</code> to <code>8.5.11</code>.</li> <li>#2995 - Updated <code>Poetry</code> lockfile to use new v2 version format (requiring <code>Poetry&gt;=1.3</code>).</li> <li>#2995 - Updated included <code>poetry</code> version in <code>nautobot-dev</code> container to <code>1.3.1</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_18","title":"Fixed","text":"<ul> <li>#2898 - Disabled sorting on Computed Field column.</li> <li>#2967 - Fixed inverted device images in dark mode.</li> <li>#2989 - Fixed legacy filters displaying UUIDs instead of user-friendly display names.</li> <li>#2999 - Fixed several missing fields in the UI when bulk-adding components to a list of devices.</li> <li>#3018 - Fixed rendering of Select2 widgets in modal dialogs.</li> <li>#3028 - Fixed filter fields on advanced filter form not being alpha-sorted.</li> <li>#3036 - Fixed MultiValueUUIDFilter's value input field in ObjectListView Advanced FilterSet Form.</li> </ul>"},{"location":"release-notes/version-1.5.html#v155-2022-12-12","title":"v1.5.5 (2022-12-12)","text":""},{"location":"release-notes/version-1.5.html#changed_16","title":"Changed","text":"<ul> <li>#2663 - Changed <code>tags</code> field in ConfigContextForm to <code>DynamicModelMultipleChoiceField</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_19","title":"Fixed","text":"<ul> <li>#2948 - Fixed incorrect assumption in test base that <code>example_plugin</code> would always be installed.</li> <li>#2962 - Fixed an error raised when logging errors about a <code>Secret</code> with an invalid <code>provider</code>.</li> <li>#2963 - Fixed 500 error when combining filtering on relationships with concrete fields.</li> </ul>"},{"location":"release-notes/version-1.5.html#v154-2022-12-02","title":"v1.5.4 (2022-12-02)","text":""},{"location":"release-notes/version-1.5.html#added_17","title":"Added","text":"<ul> <li>#86 - Added user-guide for relationships and S3 storage backends.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_20","title":"Fixed","text":"<ul> <li>#2154 - Fixed SwaggerUI use of Authorization Token, API calls in SwaggerUI now use appropriate token pattern and curl command match the correct pattern.</li> <li>#2931 - Fixed title and breadcrumb rendering in NautobotUIViewSet list views.</li> <li>#2936 - Fixed NautobotUIViewSet views not being able to delete objects.</li> </ul>"},{"location":"release-notes/version-1.5.html#v153-2022-11-29","title":"v1.5.3 (2022-11-29)","text":""},{"location":"release-notes/version-1.5.html#fixed_21","title":"Fixed","text":"<ul> <li>#2924 - Fix deprecation warning flag check throwing error on startup with plugins installed.</li> </ul>"},{"location":"release-notes/version-1.5.html#v152-2022-11-28","title":"v1.5.2 (2022-11-28)","text":""},{"location":"release-notes/version-1.5.html#added_18","title":"Added","text":"<ul> <li>#1273 - Added section \"VS Code Remote Debugging Configuration\" to development chapter in documentation.</li> <li>#2473 - Added <code>multipart/form-data</code> support to Job run API.</li> <li>#2723 - Added <code>nautobot.apps</code> module to provide a central location for code that is recommended for use by Nautobot apps (plugins).</li> <li>#2723 - Added code reference documentation for the <code>nautobot.apps</code> module.</li> <li>#2759 - Add prometheus metrics for health check results</li> <li>#2798 - Added <code>LOG_DEPRECATION_WARNINGS</code> configuration variable and corresponding environment-variable support.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_17","title":"Changed","text":"<ul> <li>#2644 - Changed published accepted content types for REST API to remove unsupported types.</li> <li>#2723 - Moved app (plugin) development documentation into its own section.</li> <li>#2723 - Revised \"plugin\" development documentation to refer to \"apps\" instead where appropriate.</li> <li>#2779 - Renamed many mixin classes for clarity and consistency. Aliases remain but will raise <code>DeprecationWarning</code>.</li> <li>#2779 - Reorganized filterset code and created <code>nautobot.dcim.filters.mixins</code>, <code>nautobot.extras.filters.mixins</code>, and <code>nautobot.tenancy.filters.mixins</code> submodules.</li> <li>#2798 - Changed logging of Nautobot deprecation warnings to be silent by default (can be enabled with <code>DEBUG</code> or <code>LOG_DEPRECATION_WARNINGS</code> settings).</li> <li>#2814 - Update dependency <code>netutils</code> to <code>~1.3.0</code>.</li> <li>#2817 - Update docs to not indicate prompt, makes for better use of copy code snippet feature of MkDocs</li> <li>#2838 - Fixed filter selection box colors in dark mode.</li> <li>#2878 - Changed Upstream Workflow Job to continue on error for group, not each specific job.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_22","title":"Fixed","text":"<ul> <li>#1519 - Extending the model table columns that need to display copy button when hovered over.</li> <li>#2477 - Fixed last login time being updated during maintenance mode when remote user authentication is used.</li> <li>#2744 - Enforced required Relationships when bulk editing or creating objects that have required relationships. Bulk edit via API or UI. Bulk create via API.</li> <li>#2774 - Fixed SiteFactory time_zone attribute to use only <code>pytz.common_timezones</code>.</li> <li>#2795 - Fixed changelog diff data to fall back to <code>object_data</code> when <code>object_data_v2</code> is not present for both <code>ObjectChange</code> instances.</li> <li>#2816 - Fixed issue where changing the interface mode first required removing tagged_vlans in a different request.</li> <li>#2819 - Adds appropriate invoke task for running docs locally and adds how to run manually.</li> <li>#2833 - Fixed plugin banner issue and breadcrumb rendering issue in NautobotHTMLRenderer.</li> <li>#2837 - Fixed incorrect logic in <code>nautobot.utilities.utils.is_single_choice_field</code> that was causing valid filters to report as invalid.</li> </ul>"},{"location":"release-notes/version-1.5.html#v151-2022-11-14","title":"v1.5.1 (2022-11-14)","text":""},{"location":"release-notes/version-1.5.html#added_19","title":"Added","text":"<ul> <li>#2500 - Added <code>try/except</code> block to catch <code>NoReverseMatch</code> exception in NotesSerializerMixin and return helpful message.</li> <li>#2556 - Revised TODO/FIXME comments for more clarity.</li> <li>#2740 - Added ObjectChangeLogView and ObjectNotesView Viewset mixins and routes.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_18","title":"Changed","text":"<ul> <li>#1813 - Updated Example_Plugin to use NautobotUIViewSet.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_23","title":"Fixed","text":"<ul> <li>#2470 - Fixed incorrect automatic generation of Location slugs in the UI.</li> <li>#2757 - Fixed filters on default filter form replaces filters on dynamic filter form on submit</li> <li>#2761 - Fixed failover strategy not being displayed on Device Redundancy Group page.</li> <li>#2789 - Fixed web UI footer margin and swagger UI authorization box size.</li> <li>#2824 - Fixed an issue when filtering on nested related fields for Dynamic Groups.</li> </ul>"},{"location":"release-notes/version-1.5.html#v150-2022-11-08","title":"v1.5.0 (2022-11-08)","text":"<p>Unchanged from v1.5.0-beta.1.</p>"},{"location":"release-notes/version-1.5.html#v150-beta1-2022-11-07","title":"v1.5.0-beta.1 (2022-11-07)","text":""},{"location":"release-notes/version-1.5.html#added_20","title":"Added","text":"<ul> <li>#270 - Added custom fields user guide to documentation.</li> <li>#873 - Made it possible to require Relationships to be included when editing or creating the related models.</li> <li>#899 - Added support for grouping of Custom Fields.</li> <li>#1468 - Added relationship columns to ObjectListTableView and disabled sorting.</li> <li>#1892 - Added <code>DeviceRedundancyGroup</code> model for representing a logical grouping of physical hardware for the purposes of high-availability.</li> <li>#2063 - Added documentation and initial support for custom celery queues.</li> <li>#2064 - Added <code>task_queues</code> job property to support custom celery queues.</li> <li>#2227 - Added generating performance report options to 'invoke unittest'.</li> <li>#2227 - Added <code>invoke performance-test</code> to <code>tasks.py</code>.</li> <li>#2281 - Added test database fixtures for Tag and Status models.</li> <li>#2282 - Added fixture factory for Region, Site, Location, LocationType.</li> <li>#2283 - Added test fixture factories for Prefix and IPAddress models.</li> <li>#2460 - Added search box filter form to generic list views.</li> <li>#2479 - Added <code>factory-boy</code> as development dependency. Added factories for Tenant, TenantGroup, RIR, and Aggregate models. Updated test runner global setup to use these factories to pre-populate baseline data.</li> <li>#2514 - Added test factories for RouteTarget, VRF, Role, VLANGroup, and VLAN models.</li> <li>#2514 - Added <code>OrganizationalModelFactory</code> and <code>PrimaryModelFactory</code> base classes.</li> <li>#2514 - Added <code>TenancyFilterTestCaseMixin</code> class.</li> <li>#2518 - Added <code>base_site</code> and <code>subtree</code> filters to <code>LocationFilterSet</code>, allowing for filtering Locations by their root ancestor or its Site.</li> <li>#2536 - Added <code>nautobot-server generate_test_data</code> command.</li> <li>#2536 - Added <code>TEST_USE_FACTORIES</code> and <code>TEST_FACTORY_SEED</code> optional settings.</li> <li>#2593 - Added StatusFactory and TagFactory classes.</li> <li>#2594 - Added factories for DCIM <code>DeviceRole</code>, <code>DeviceType</code>, <code>Manufacturer</code>, and <code>Platform</code>.</li> <li>#2608 - Added the option for certain LocationTypes to be nestable (similar to Regions).</li> <li>#2617 - Added dynamic filter form support to specialized list views.</li> <li>#2686 - Added test helper method to <code>FilterTestCases</code> to find values suitable for testing multiple choice filters.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_19","title":"Changed","text":"<ul> <li>#1892 - Updated <code>Device</code> to have <code>device_redundancy_group</code> relationship, <code>device_redundancy_group_priority</code> numeric property.</li> <li>#1892 - Updated <code>ConfigContext</code> to have <code>ManyToManyField</code> to <code>dcim.DeviceRedundancyGroup</code> for the purposes of applying a <code>ConfigContext</code> based upon a <code>Device</code>s <code>DeviceRedundancyGroup</code> membership.</li> <li>#1983 - Updated <code>django-taggit</code> dependency to 3.0.0.</li> <li>#1998 - Added DynamicFilterForm to list views.</li> <li>#2064 - Changed default celery queue name from <code>celery</code> to <code>default</code>.</li> <li>#2170 - Updated <code>django-constance</code> dependency to 2.9.1; updated <code>Jinja2</code> dependency to 3.1.2; updated <code>black</code> development dependency to 22.8.0.</li> <li>#2282 - Changed unittests to use Site, Region, Location, LocationType fixtures.</li> <li>#2320 - Removed PKs from Tag test database fixture.</li> <li>#2482 - Updated <code>djangorestframework</code> to <code>~3.14.0</code>, <code>drf-spectacular</code> to <code>0.24.2</code>.</li> <li>#2483 - Updated <code>mkdocs</code> to 1.4.2 and <code>mkdocs-material</code> to 8.5.8.</li> <li>#2484 - Updated <code>django-debug-toolbar</code> to <code>~3.7.0</code></li> <li>#2551 - Updated development dependency on <code>coverage</code> to version 6.5.0.</li> <li>#2562 - Updated <code>django-mptt</code> dependency to 0.14.0.</li> <li>#2597 - Updated <code>GitPython</code> dependency from 3.1.27 to 3.1.29.</li> <li>#2615 - Changed <code>ConfigContextFilterForm</code>s <code>schema</code> filter form field to support added filter field on <code>ConfigContextFilterSet</code>.</li> <li>#2615 - Changed <code>BaseNetworkQuerySet</code> and <code>IPAddressQuerySet</code> to search both IPv6 and IPv4 when given search string is ambiguous.</li> <li>#2615 - Changed <code>test_slug_not_modified</code> to ensure no collision on new slug source value as well as changing lookup expression from <code>__contains</code> to <code>__exact</code>.</li> <li>#2615 - Changed <code>DeleteObjectViewTestCase.get_deletable_object</code> to throw a helpful failure message when deletable object not found.</li> <li>#2645 - Updated <code>psycopg2-binary</code> dependency from 2.9.3 to 2.9.5.</li> <li>#2710 - Updated <code>pyuwsgi</code> minimum version from 2.0.20 to 2.0.21.</li> <li>#2711 - Updated <code>Pillow</code> package dependency from 9.2.0 to 9.3.0.</li> <li>#2746 - Changed <code>LocationType</code> test case to not attempt to re-parent a <code>LocationType</code> with descendant <code>Locations</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_24","title":"Fixed","text":"<ul> <li>#192 - Eliminated Unit Test noisy output.</li> <li>#2266 - Fixed navbar floating over main viewport scrollbar.</li> <li>#2388 - Return \"\u2014\" instead of \"None\" when relationship column is empty.</li> <li>#2536 - Made use of test factories optional when using Nautobot test runner.</li> <li>#2555 - Fixed broken accordion for Job list view.</li> <li>#2615 - Fixed <code>ConfigContextFilterSet</code> missing <code>schema</code> filter but existed on form.</li> <li>#2615 - Fixed <code>Device(Form)TestCase</code> flaky test setup possibly not finding a <code>DeviceType</code> with a <code>Manufacturer</code> with associated <code>Platform</code>s that is full depth and 1U height.</li> <li>#2615 - Fixed <code>Location(View)TestCase</code>, <code>RouteTarget(View)TestCase</code> flaky test setup possibly finding names for <code>csv_data</code> that might include commas but not escaped.</li> <li>#2615 - Fixed <code>PrefixFactory</code> may randomly decide to create a child of <code>2.2.2.2/32</code>.</li> <li>#2615 - Fixed <code>BaseNetworkQuerySet</code> and <code>IPAddressQuerySet</code> only searching non-abbreviated first hextet IPv6 addresses.</li> <li>#2615 - Fixed <code>DynamicFilterLookupExpressionTest</code>, <code>VirtualChassis(Filter)TestCase</code>, <code>Cluster(Filter)TestCase</code>, <code>VirtualMachine(Filter)TestCase</code> had too narrow of a region lookup for supported tests.</li> <li>#2615 - Fixed <code>RackGroup(Model)Test</code>, <code>Prefix(Model)Test</code>, <code>VLANGroup(Model)Test</code> may randomly choose to update to the same site.</li> <li>#2615 - Fixed <code>Tenant(View)TestCase</code>, <code>RIR(View)TestCase</code> may not find deletable objects.</li> <li>#2615 - Fixed <code>VLAN(View)TestCase</code> may not find enough <code>Site</code>s with <code>Location</code>s.</li> <li>#2691 - Fixed hard coded tests that were failing after factory fixtures were integrated.</li> <li>#2746 - Fixed Site <code>latitude</code>, <code>longitude</code> clean method for when valid string value entered.</li> </ul>"},{"location":"release-notes/version-1.5.html#removed_2","title":"Removed","text":"<ul> <li>#2593 - Removed static test fixtures since we're using factories now instead.</li> </ul>"},{"location":"release-notes/version-1.6.html","title":"Version 1.6","text":""},{"location":"release-notes/version-1.6.html#nautobot-v16","title":"Nautobot v1.6","text":"<p>This document describes all new features and changes in Nautobot 1.6.</p>"},{"location":"release-notes/version-1.6.html#release-overview","title":"Release Overview","text":""},{"location":"release-notes/version-1.6.html#added","title":"Added","text":""},{"location":"release-notes/version-1.6.html#custom-field-markdown-type-4006","title":"Custom Field \"Markdown\" Type (#4006)","text":"<p>A new Custom Field type, \"Markdown\", has been added. Custom fields of this type can store Markdown-formatted text which will be rendered in the web UI.</p>"},{"location":"release-notes/version-1.6.html#caching-of-dynamic-groups-and-content-types-4092","title":"Caching of Dynamic Groups and Content Types (#4092)","text":"<p>APIs have been added to allow for caching of the results of looking up an object's content-type or Dynamic Group memberships, as well as for looking up the members of a Dynamic Group itself. These caches are disabled by default but can be enabled by configuring the <code>DYNAMIC_GROUPS_MEMBER_CACHE_TIMEOUT</code> and <code>CONTENT_TYPE_CACHE_TIMEOUT</code> settings respectively. Apps (plugins) that make use of dynamic groups should review the documentation for the APIs to determine how and when to make use of the cache for improved performance.</p>"},{"location":"release-notes/version-1.6.html#interface-redundancy-group-2825","title":"Interface Redundancy Group (#2825)","text":"<p>Interface Redundancy Group model and related views have been added to allow logical grouping of multiple interfaces under a specific interface redundancy protocol (HSRP, VRRP, CARP, and etc).</p>"},{"location":"release-notes/version-1.6.html#installation-metrics-4047","title":"Installation Metrics (#4047)","text":"<p>A new setting, <code>INSTALLATION_METRICS_ENABLED</code>, has been added to allow Nautobot to send anonymous installation metrics to the Nautobot maintainers. This setting is <code>True</code> by default but can be changed in <code>nautobot_config.py</code> or the <code>NAUTOBOT_INSTALLATION_METRICS_ENABLED</code> environment variable.</p> <p>If the <code>INSTALLATION_METRICS_ENABLED</code> setting is <code>True</code>, running the <code>post_upgrade</code> or <code>send_installation_metrics</code> management commands will send a list of all installed plugins and their versions, as well as the currently installed Nautobot and Python versions, to the Nautobot maintainers. A randomized UUID will be generated and saved in the <code>DEPLOYMENT_ID</code> setting to anonymously and uniquely identify each installation. The plugin names will be one-way hashed with SHA256 to further anonymize the data sent. This enables tracking the installation metrics of publicly released plugins without disclosing the names of any private plugins.</p> <p>The following is an example of the data that is sent:</p> <pre><code>{\n\"deployment_id\": \"1de3dacf-f046-4a98-8d4a-17419080db79\",\n\"nautobot_version\": \"1.6.0b1\",\n\"python_version\": \"3.10.12\",\n\"installed_apps\": {\n# \"example_plugin\" hashed by sha256\n\"3ffee4622af3aad6f78257e3ae12da99ca21d71d099f67f4a2e19e464453bee7\": \"1.0.0\"\n},\n\"debug\": true\n}\n</code></pre>"},{"location":"release-notes/version-1.6.html#platformnetwork_driver-and-related-fields-4136","title":"<code>Platform.network_driver</code> and related fields (4136)","text":"<p>The Platform model has been enhanced to include a <code>network_driver</code> database field and a <code>network_driver_mappings</code> derived property based on the <code>netutils</code> library. For example, if you set a Platform to have a <code>network_driver</code> value of <code>\"cisco_ios\"</code>, the <code>platform.network_driver_mappings</code> property will return a dictionary containing <code>ansible</code>, <code>hier_config</code>, <code>napalm</code>, <code>netmiko</code>, <code>ntc_templates</code>, <code>pyats</code>, <code>pyntc</code>, and <code>scrapli</code> keys corresponding to this entry. These properties can be referenced via the REST API and GraphQL to assist in developing and maintaining Apps, Jobs, or third-party code that interact with devices by using any of these libraries.</p> <p>If the default derivations provided by <code>netutils</code> are not suitable for your purposes, you can extend or override them by configuring the <code>NETWORK_DRIVERS</code> system setting.</p>"},{"location":"release-notes/version-1.6.html#python-311-support-3561","title":"Python 3.11 Support (#3561)","text":"<p>Nautobot 1.6.0 formally adds support for installation and operation under Python 3.11.</p>"},{"location":"release-notes/version-1.6.html#changed","title":"Changed","text":""},{"location":"release-notes/version-1.6.html#additional-hide_restricted_ui-effects-for-unauthenticated-users-3646","title":"Additional HIDE_RESTRICTED_UI Effects for Unauthenticated Users (#3646)","text":"<p>When <code>HIDE_RESTRICTED_UI</code> is enabled, unauthenticated users are no longer able to view the OpenAPI (Swagger) UI, the GraphiQL UI, or any configured top/bottom banners. Additionally, the page footer on the login page will not display the Nautobot server hostname in this case.</p>"},{"location":"release-notes/version-1.6.html#increased-deviceasset_tag-maximum-length-3693","title":"Increased <code>Device.asset_tag</code> maximum length (#3693)","text":"<p>The maximum length of the <code>Device.asset_tag</code> field has been increased from 50 to 100 characters.</p>"},{"location":"release-notes/version-1.6.html#changed-default-python-version-for-docker-images-4029","title":"Changed Default Python Version for Docker Images (#4029)","text":"<p>The default Python version for Nautobot Docker images has been changed from 3.7 to 3.11.</p>"},{"location":"release-notes/version-1.6.html#removed","title":"Removed","text":""},{"location":"release-notes/version-1.6.html#removed-python-37-support-3561","title":"Removed Python 3.7 Support (#3561)","text":"<p>As Python 3.7 has reached end-of-life, Nautobot 1.6 and later do not support installation or operation under Python 3.7.</p>"},{"location":"release-notes/version-1.6.html#v160-2023-08-08","title":"v1.6.0 (2023-08-08)","text":""},{"location":"release-notes/version-1.6.html#added_1","title":"Added","text":"<ul> <li>#4169 - Added environment variable <code>NAUTOBOT_SESSION_EXPIRE_AT_BROWSER_CLOSE</code> to set the <code>SESSION_EXPIRE_AT_BROWSER_CLOSE</code> Django setting which expires session cookies when the user closes their browser.</li> <li>#4184 - Added documentation detailing rack power utilization calculation.</li> </ul>"},{"location":"release-notes/version-1.6.html#dependencies","title":"Dependencies","text":"<ul> <li>#4208 - Updated django-rq to 2.8.1.</li> <li>#4209 - Relaxed constraint on prometheus-client minimum version to <code>0.14.1</code>.</li> <li>#4173 - Updated <code>drf-spectacular</code> to <code>0.26.4</code>.</li> <li>#4199 - Updated <code>cryptography</code> to <code>~41.0.3</code>. As this is not a direct dependency of Nautobot, it will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> <li>#4215 - Broadened the range of acceptable <code>packaging</code> dependency versions.</li> </ul>"},{"location":"release-notes/version-1.6.html#fixed","title":"Fixed","text":"<ul> <li>#3985 - Added error handling in <code>JobResult.log()</code> for the case where an object's <code>get_absolute_url()</code> raises an exception.</li> <li>#3985 - Added missing <code>get_absolute_url()</code> implementation on <code>CustomFieldChoice</code> model.</li> <li> <p>#4222 - Fixed a bug in which <code>Job</code> <code>ChoiceVars</code> could sometimes get rendered incorrectly in the UI as multiple-choice fields.</p> </li> <li> <p>#4175 - Changed custom field clean to not populate null default values.</p> </li> <li>#4204 - Fixed failing Apps CI by downgrading <code>jsonschema&lt;4.18</code>.</li> <li>#4205 - Fixed failing Apps CI due to missing dependency of <code>toml</code>.</li> </ul>"},{"location":"release-notes/version-1.6.html#v160-rc1-2023-08-02","title":"v1.6.0-rc.1 (2023-08-02)","text":""},{"location":"release-notes/version-1.6.html#added_2","title":"Added","text":"<ul> <li>#2825 - Added InterfaceRedundancyGroup and related views, forms, filtersets and table.</li> <li>#3269 - Added ability to cache <code>DynamicGroup</code> memberships in Redis to improve reverse lookup performance.</li> <li>#3269 - Added ability to cache <code>ContentType</code> lookups in Redis to improve performance.</li> <li>#3561 - Added support for Python 3.11.</li> <li>#4006 - Added Markdown custom field type.</li> <li>#4044 - Added ability to use <code>@action(detail=True)</code> decorator for registering additional non-standard <code>GET</code> views to a <code>NautobotUIViewSet</code>.</li> <li>#4047 - Added ability for Nautobot to send installation metrics.</li> <li>#4118 - Added documentation for troubleshooting integration test failures via VNC.</li> <li>#4136 - Added <code>network_driver</code> database field to the <code>Platform</code> model.</li> <li>#4136 - Added <code>network_driver_mappings</code> derived attribute on the <code>Platform</code> model.</li> <li>#4136 - Added <code>CONSTANCE_DATABASE_CACHE_BACKEND = 'default'</code> to <code>settings.py</code>, which should improve performance a bit.</li> <li>#4136 - Added support for <code>NETWORK_DRIVERS</code> config setting to override or extend default network driver mappings from <code>netutils</code> library.</li> <li>#4161 - Enhanced <code>NautobotUIViewSet</code> to allow Create and Update methods to have their own form classes.</li> </ul>"},{"location":"release-notes/version-1.6.html#changed_1","title":"Changed","text":"<ul> <li>#3646 - Redirect unauthenticated users on all views to login page if <code>HIDE_RESTRICTED_UI</code> is True.</li> <li>#3646 - Only time is shown on the footer if a user is unauthenticated and <code>HIDE_RESTRICTED_UI</code> is True.</li> <li>#3693 - Increased Device model's <code>asset_tag</code> size limit to 100.</li> <li>#4029 - Changed default Python version for Docker images from 3.7 to 3.11.</li> </ul>"},{"location":"release-notes/version-1.6.html#dependencies_1","title":"Dependencies","text":"<ul> <li>#3561 - Updated <code>celery</code> dependency to <code>~5.3.1</code>.</li> <li>#3561 - Updated <code>django-auth-ldap</code> optional dependency to <code>~4.3.0</code>.</li> <li>#3561 - Updated <code>django-cacheops</code> dependency to <code>~6.2</code>.</li> <li>#3561 - Updated <code>django-celery-beat</code> dependency to <code>~2.5.0</code>.</li> <li>#3561 - Updated <code>django-constance</code> dependency to <code>~2.9.1</code>.</li> <li>#3561 - Updated <code>django-cors-headers</code> dependency to <code>~4.2.0</code>.</li> <li>#3561 - Updated <code>django-cryptography</code> dependency to <code>~1.1</code>. Note that this dependency will be removed in Nautobot 2.0.</li> <li>#3561 - Updated <code>django-extensions</code> dependency to <code>~3.2.3</code>.</li> <li>#3561 - Updated <code>django-filter</code> dependency to <code>~23.1</code>.</li> <li>#3561 - Updated <code>django-health-check</code> dependency to <code>~3.17.0</code></li> <li>#3561 - Updated <code>django-prometheus</code> dependency to <code>~2.3.1</code>.`</li> <li>#3561 - Updated <code>django-redis</code> dependency to <code>~5.3.0</code>.</li> <li>#3561 - Updated <code>django-storages</code> optional dependency to <code>~1.13.2</code>.</li> <li>#3561 - Updated <code>django-tables2</code> dependency to <code>~2.6.0</code>.</li> <li>#3561 - Updated <code>django-taggit</code> dependency to <code>~4.0.0</code>.</li> <li>#3561 - Updated <code>django-timezone-field</code> dependency to <code>~5.1</code>.</li> <li>#3561 - Updated <code>django-tree-queries</code> dependency to <code>~0.15.0</code>.</li> <li>#3561 - Updated <code>drf-spectacular</code> dependency to <code>~0.26.3</code>.</li> <li>#3561 - Updated <code>graphene-django</code> dependency to <code>~2.16.0</code>.</li> <li>#3561 - Updated <code>Jinja2</code> dependency to <code>~3.1.2</code>.</li> <li>#3561 - Updated <code>jsonschema</code> dependency to permit versions up to 4.18.x. Note that versions back to 4.7.0 are still permitted, so this dependency may not necessarily auto-upgrade when updating Nautobot.</li> <li>#3561 - Updated <code>MarkupSafe</code> dependency to <code>~2.1.3</code>.</li> <li>#3561 - Updated <code>mysqlclient</code> optional dependency to <code>~2.2.0</code>.</li> <li>#3561 - Updated <code>napalm</code> optional dependency to <code>~4.1.0</code>. Note that as a result of this update, the following indirect package dependencies are no longer included by default when installing Nautobot with NAPALM: <code>ciscoconfparse</code>, <code>dnspython</code>, <code>loguru</code>, <code>passlib</code>, <code>tenacity</code>, <code>toml</code>, <code>win32-setctime</code>.</li> <li>#3561 - Updated <code>packaging</code> dependency to <code>~23.1</code>.</li> <li>#3561 - Updated <code>Pillow</code> dependency to <code>~10.0.0</code>.</li> <li>#3561 - Updated <code>prometheus-client</code> dependency to <code>~0.17.1</code>.</li> <li>#3561 - Updated <code>social-auth-core</code> optional dependency to <code>~4.4.2</code>.</li> <li>#3561 - Updated <code>social-auth-app-django</code> dependency to <code>~5.2.0</code>.</li> <li>#3561 - Updated various development-only dependencies to the latest available versions.</li> </ul>"},{"location":"release-notes/version-1.6.html#fixed_1","title":"Fixed","text":"<ul> <li>#4178 - Fixed JSON serialization of overloaded/non-default FilterForm fields on Dynamic Groups.</li> </ul>"},{"location":"release-notes/version-1.6.html#removed_1","title":"Removed","text":"<ul> <li>#3561 - Dropped support for Python 3.7. Python 3.8 is now the minimum version required by Nautobot.</li> <li>#3561 - Removed direct dependency on <code>importlib-metadata</code>.</li> <li>#3561 - Removed direct dependency on <code>pycryptodome</code> as Nautobot does not currently use this library and hasn't for some time.</li> </ul>"},{"location":"rest-api/authentication.html","title":"REST API Authentication","text":"<p>The Nautobot REST API primarily employs token-based authentication. For convenience, cookie-based authentication can also be used when navigating the browseable API.</p>"},{"location":"rest-api/authentication.html#tokens","title":"Tokens","text":"<p>A token is a unique identifier mapped to a Nautobot user account. Each user may have one or more tokens which he or she can use for authentication when making REST API requests. To create a token, navigate to the API tokens page under your user profile.</p> <ol> <li>Sign into Nautobot</li> <li>On the upper right hand corner, select your username, then Profile</li> <li>On the left hand side, under User Profile, select API Tokens</li> <li>Select +Add a token</li> <li>Leave Key blank to automatically create a token, or fill one in for yourself</li> <li>Check or uncheck \"Write enabled\", as desired</li> <li>(Optional) Set an expiration date for this token</li> <li>(Optional) Add a description</li> </ol> <p>Note</p> <p>The creation and modification of API tokens can be restricted per user by an administrator. If you don't see an option to create an API token, ask an administrator to grant you access.</p> <p>Each token contains a 160-bit key represented as 40 hexadecimal characters. When creating a token, you'll typically leave the key field blank so that a random key will be automatically generated. However, Nautobot allows you to specify a key in case you need to restore a previously deleted token to operation.</p> <p>By default, a token can be used to perform all actions via the API that a user would be permitted to do via the web UI. Deselecting the \"write enabled\" option will restrict API requests made with the token to read operations (e.g. GET) only.</p> <p>Additionally, a token can be set to expire at a specific time. This can be useful if an external client needs to be granted temporary access to Nautobot.</p>"},{"location":"rest-api/authentication.html#authenticating-to-the-api","title":"Authenticating to the API","text":"<p>An authentication token is attached to a request by setting the <code>Authorization</code> header to the string <code>Token</code> followed by a space and the user's token:</p> <pre><code>curl -H \"Authorization: Token $TOKEN\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttp://nautobot/api/dcim/sites/\n</code></pre> <pre><code>{\n\"count\": 10,\n\"next\": null,\n\"previous\": null,\n\"results\": [...]\n}\n</code></pre> <p>A token is not required for read-only operations which have been exempted from permissions enforcement (using the <code>EXEMPT_VIEW_PERMISSIONS</code> configuration parameter). However, if a token is required but not present in a request, the API will return a 403 (Forbidden) response:</p> <pre><code>curl http://nautobot/api/dcim/sites/\n</code></pre> <pre><code>{\n\"detail\": \"Authentication credentials were not provided.\"\n}\n</code></pre>"},{"location":"rest-api/authentication.html#initial-token-provisioning","title":"Initial Token Provisioning","text":"<p>Added in version 1.3.0</p> <p>Ideally, each user should provision his or her own REST API token(s) via the web UI. However, you may encounter where a token must be created by a user via the REST API itself. Nautobot provides a special endpoint to provision tokens using a valid username and password combination.</p> <p>To provision a token via the REST API, make a <code>POST</code> request to the <code>/api/users/tokens/</code> endpoint:</p> <pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\n-u \"hankhill:I&lt;3C3H8\" \\\nhttps://nautobot/api/users/tokens/\n</code></pre> <p>Note that we are not passing an existing REST API token with this request. If the supplied credentials are valid, a new REST API token will be automatically created for the user. Note that the key will be automatically generated, and write ability will be enabled.</p> <pre><code>{\n\"id\": \"e87e6ee9-1ab2-46c6-ad7f-3d4697c33d13\",\n\"url\": \"https://nautobot/api/users/tokens/e87e6ee9-1ab2-46c6-ad7f-3d4697c33d13/\",\n\"display\": \"3c9cb9 (hankhill)\",\n\"created\": \"2021-06-11T20:09:13.339367Z\",\n\"expires\": null,\n\"key\": \"9fc9b897abec9ada2da6aec9dbc34596293c9cb9\",\n\"write_enabled\": true,\n\"description\": \"\"\n}\n</code></pre>"},{"location":"rest-api/filtering.html","title":"REST API Filtering","text":""},{"location":"rest-api/filtering.html#filtering-objects","title":"Filtering Objects","text":"<p>The objects returned by an API list endpoint can be filtered by attaching one or more query parameters to the request URL. For example, <code>GET /api/dcim/sites/?status=active</code> will return only sites with a status of \"active.\"</p> <p>Multiple parameters can be joined to further narrow results. For example, <code>GET /api/dcim/sites/?status=active&amp;region=europe</code> will return only active sites within the Europe region.</p> <p>Generally, passing multiple values for a single parameter will result in a logical OR operation. For example, <code>GET /api/dcim/sites/?region=north-america&amp;region=south-america</code> will return sites in North America or South America. However, a logical AND operation will be used in instances where a field may have multiple values, such as tags. For example, <code>GET /api/dcim/sites/?tag=foo&amp;tag=bar</code> will return only sites which have both the \"foo\" and \"bar\" tags applied.</p> <p>Changed in version 1.4.0</p> <p>If STRICT_FILTERING is True (its default value), unrecognized filter parameters now result in a 400 Bad Request response instead of being silently ignored.</p>"},{"location":"rest-api/filtering.html#filtering-by-choice-field","title":"Filtering by Choice Field","text":"<p>Some models have fields which are limited to specific choices, such as the <code>status</code> field on the Prefix model. To find all available choices for this field, make an authenticated <code>OPTIONS</code> request to the model's list endpoint, and use <code>jq</code> to extract the relevant parameters:</p> <pre><code>curl -s -X OPTIONS \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://nautobot/api/ipam/prefixes/ | jq \".actions.POST.status.choices\"\n</code></pre> <p>Example output:</p> <pre><code>[\n{\n\"value\": \"container\",\n\"display\": \"Container\"\n},\n{\n\"value\": \"active\",\n\"display\": \"Active\"\n},\n{\n\"value\": \"reserved\",\n\"display\": \"Reserved\"\n},\n{\n\"value\": \"deprecated\",\n\"display\": \"Deprecated\"\n}\n]\n</code></pre> <p>Note</p> <p>The above works only if the API token used to authenticate the request has permission to make a <code>POST</code> request to this endpoint.</p>"},{"location":"rest-api/filtering.html#filtering-by-custom-field","title":"Filtering by Custom Field","text":"<p>To filter results by a custom field value, prepend <code>cf_</code> to the custom field name. For example, the following query will return only sites where a custom field named <code>foo</code> is equal to 123:</p> <pre><code>GET /api/dcim/sites/?cf_foo=123\n</code></pre> <p>Note</p> <p>For custom field filters, due to historical details of implementation, only a single filter value can be specified when matching a given field. In other words, in the above example, you could not add <code>&amp;cf_foo=456</code> to the query in order to get all sites where custom field <code>foo</code> is 123 or 456; instead you would need to run two separate queries. This restriction does not apply to custom field filters using lookup expressions (next section) and will likely be changed in a future major version of Nautobot.</p> <p>Custom fields can be mixed with built-in fields to further narrow results. When creating a custom string field, the type of filtering selected (loose versus exact) determines whether partial or full matching is used.</p> <p>Added in version 1.4.0</p> <p>Custom fields can use the lookup expressions listed in the next section by prepending <code>cf_</code> to the custom field <code>name</code> (and not the <code>slug</code>) followed by the required lookup type (see below).</p>"},{"location":"rest-api/filtering.html#lookup-expressions","title":"Lookup Expressions","text":"<p>Certain model fields (including, in Nautobot 1.4.0 and later, custom fields of type <code>text</code>, <code>url</code>, <code>select</code>, <code>integer</code>, and <code>date</code>) also support filtering using additional lookup expressions. This allows for negation and other context-specific filtering.</p> <p>These lookup expressions can be applied by adding a suffix to the desired field's name, e.g. <code>mac_address__n</code>. In this case, the filter expression is for negation and it is separated by two underscores. Below are the lookup expressions that are supported across different field types.</p>"},{"location":"rest-api/filtering.html#numeric-fields","title":"Numeric Fields","text":"<p>Numeric-based fields (ASN, VLAN ID, etc.) support these lookup expressions:</p> <ul> <li><code>n</code> - not equal to (negation)</li> <li><code>lt</code> - less than</li> <li><code>lte</code> - less than or equal</li> <li><code>gt</code> - greater than</li> <li><code>gte</code> - greater than or equal</li> </ul>"},{"location":"rest-api/filtering.html#string-fields","title":"String Fields","text":"<p>String-based (char) fields (Name, Address, etc.) support these lookup expressions:</p> <ul> <li><code>n</code> - not equal to (negation)</li> <li><code>ic</code> - case-insensitive contains</li> <li><code>nic</code> - negated case-insensitive contains</li> <li><code>isw</code> - case-insensitive starts-with</li> <li><code>nisw</code> - negated case-insensitive starts-with</li> <li><code>iew</code> - case-insensitive ends-with</li> <li><code>niew</code> - negated case-insensitive ends-with</li> <li><code>ie</code> - case-insensitive exact match</li> <li><code>nie</code> - negated case-insensitive exact match</li> </ul> <p>Added in version 1.3.0</p> <ul> <li><code>re</code> - case-sensitive regular expression match</li> <li><code>nre</code> - negated case-sensitive regular expression match</li> <li><code>ire</code> - case-insensitive regular expression match</li> <li><code>nire</code> - negated case-insensitive regular expression match</li> </ul>"},{"location":"rest-api/filtering.html#foreign-keys-other-fields","title":"Foreign Keys &amp; Other Fields","text":"<p>Certain other fields, namely foreign key relationships support just the negation expression: <code>n</code>.</p>"},{"location":"rest-api/filtering.html#network-and-host-fields","title":"Network and Host Fields","text":"<p>There are Custom Lookups built for the <code>VarbinaryIPField</code> field types. While the <code>VarbinaryIPField</code> is applied to fields for network, host, and broadcast, the below filters only apply to network and host. The design makes an assumption that there is in fact a broadcast (of type <code>VarbinaryIPField</code>) and prefix_length (of type <code>Integer</code>) within the same model. This assumption is used to understand the relevant scope of the network in question and is important to note when extending the Nautobot core or plugin data model.</p> <ul> <li><code>**</code> <code>exact</code> - An exact match of an IP or network address, e.g. <code>host__exact=\"10.0.0.1\"</code></li> <li><code>**</code> <code>iexact</code> - An exact match of an IP or network address, e.g. <code>host__iexact=\"10.0.0.1\"</code></li> <li><code>**</code> <code>startswith</code> - Determine if IP or network starts with the value provided, e.g. <code>host__startswith=\"10.0.0.\"</code></li> <li><code>**</code> <code>istartswith</code> - Determine if IP or network starts with the value provided, e.g. <code>host__istartswith=\"10.0.0.\"</code></li> <li><code>**</code> <code>endswith</code> - Determine if IP or network ends with the value provided, e.g. <code>host__endswith=\"0.1\"</code></li> <li><code>**</code> <code>iendswith</code> - Determine if IP or network ends with the value provided, e.g. <code>host__iendswith=\"0.1\"</code></li> <li><code>**</code> <code>regex</code> - Determine if IP or network matches the pattern provided, e.g. <code>host__regex=r\"10\\.(.*)\\.1</code></li> <li><code>**</code> <code>iregex</code> - Determine if IP or network matches the pattern provided, e.g. <code>host__iregex=r\"10\\.(.*)\\.1</code></li> <li><code>net_contained</code> - Given a network, determine which networks are contained within the provided e.g. <code>network__net_contained=\"192.0.0.0/8\"</code> would include 192.168.0.0/24 in the result</li> <li><code>net_contained_or_equal</code> - Given a network, determine which networks are contained or is within the provided e.g. <code>network__net_contained_or_equal=\"192.0.0.0/8\"</code> would include 192.168.0.0/24 and 192.0.0.0/8 in the result</li> <li><code>net_contains</code> - Given a network, determine which networks contain the provided network e.g. <code>network__net_contains=\"192.168.0.0/16\"</code> would include 192.0.0.0/8 in the result</li> <li><code>net_contains_or_equals</code> - Given a network, determine which networks contain or is the provided network e.g. <code>network__net_contains=\"192.168.0.0/16\"</code> would include 192.0.0.0/8 and 192.168.0.0/16 in the result</li> <li><code>net_equals</code> - Given a network, determine which which networks are an exact match. e.g. <code>network__net_equals=\"192.168.0.0/16\"</code> would include only 192.168.0.0/16 in the result</li> <li><code>net_host</code> - Determine which networks are parent of the provided IP, e.g. <code>host__net_host=\"10.0.0.1\"</code> would include 10.0.0.1/32 and 10.0.0.0/24 in the result</li> <li><code>net_host_contained</code> - Given a network, select IPs whose host address (regardless of its subnet mask) falls within that network , e.g. <code>host__net_host_contained=\"10.0.0.0/24\"</code> would include hosts 10.0.0.1/8 and 10.0.0.254/32 in the result</li> <li><code>net_in</code> - Given a list of networks, select addresses (regardless of their subnet masks) within those networks, e.g. <code>host__net_in=[\"10.0.0.0/24\", \"2001:db8::/64\"]</code> would include hosts 10.0.0.1/16 and 2001:db8::1/65 in the result</li> <li><code>family</code> - Given an IP address family of 4 or 6, provide hosts or networks that are that IP version type, e.g. <code>host__family=6</code> would include 2001:db8::1 in the result</li> </ul> <p>Note: The fields denoted with <code>**</code> are only supported in the MySQL dialect (and not Postgresql) at the current time.</p>"},{"location":"rest-api/overview.html","title":"REST API Overview","text":""},{"location":"rest-api/overview.html#what-is-a-rest-api","title":"What is a REST API?","text":"<p>REST stands for representational state transfer. It's a particular type of API which employs HTTP requests and JavaScript Object Notation (JSON) to facilitate create, retrieve, update, and delete (CRUD) operations on objects within an application. Each type of operation is associated with a particular HTTP verb:</p> <ul> <li><code>GET</code>: Retrieve an object or list of objects</li> <li><code>POST</code>: Create an object</li> <li><code>PUT</code> / <code>PATCH</code>: Modify an existing object. <code>PUT</code> requires all mandatory fields to be specified, while <code>PATCH</code> only expects the field that is being modified to be specified.</li> <li><code>DELETE</code>: Delete an existing object</li> </ul> <p>Additionally, the <code>OPTIONS</code> verb can be used to inspect a particular REST API endpoint and return all supported actions and their available parameters.</p> <p>One of the primary benefits of a REST API is its human-friendliness. Because it utilizes HTTP and JSON, it's very easy to interact with Nautobot data on the command line using common tools. For example, we can request an IP address from Nautobot and output the JSON using <code>curl</code> and <code>jq</code>. The following command makes an HTTP <code>GET</code> request for information about a particular IP address, identified by its primary key, and uses <code>jq</code> to present the raw JSON data returned in a more human-friendly format. (Piping the output through <code>jq</code> isn't strictly required but makes it much easier to read.)</p> <pre><code>curl -s http://nautobot/api/ipam/ip-addresses/c557df87-9a63-4555-bfd1-21cea2f6aac3/ | jq '.'\n</code></pre> <pre><code>{\n\"id\": 2954,\n\"url\": \"http://nautobot/api/ipam/ip-addresses/c557df87-9a63-4555-bfd1-21cea2f6aac3/\",\n\"family\": {\n\"value\": 4,\n\"label\": \"IPv4\"\n},\n\"address\": \"192.168.0.42/26\",\n\"vrf\": null,\n\"tenant\": null,\n\"status\": {\n\"value\": \"active\",\n\"label\": \"Active\"\n},\n\"role\": null,\n\"assigned_object_type\": \"dcim.interface\",\n\"assigned_object_id\": \"9fd066d2-135c-4005-b032-e0551cc61cec\",\n\"assigned_object\": {\n\"id\": \"9fd066d2-135c-4005-b032-e0551cc61cec\",\n\"url\": \"http://nautobot/api/dcim/interfaces/9fd066d2-135c-4005-b032-e0551cc61cec/\",\n\"device\": {\n\"id\": \"6a522ebb-5739-4c5c-922f-ab4a2dc12eb0\",\n\"url\": \"http://nautobot/api/dcim/devices/6a522ebb-5739-4c5c-922f-ab4a2dc12eb0/\",\n\"name\": \"router1\",\n\"display\": \"router1\"\n},\n\"name\": \"et-0/1/2\",\n\"cable\": null,\n\"connection_status\": null\n},\n\"nat_inside\": null,\n\"nat_outside\": null,\n\"dns_name\": \"\",\n\"description\": \"Example IP address\",\n\"tags\": [],\n\"custom_fields\": {},\n\"created\": \"2020-08-04\",\n\"last_updated\": \"2020-08-04T14:12:39.666885Z\"\n}\n</code></pre> <p>Each attribute of the IP address is expressed as an attribute of the JSON object. Fields may include their own nested objects, as in the case of the <code>assigned_object</code> field above. Every object includes a primary key named <code>id</code> which uniquely identifies it in the database.</p>"},{"location":"rest-api/overview.html#interactive-documentation","title":"Interactive Documentation","text":"<p>Comprehensive, interactive documentation of all REST API endpoints is available on a running Nautobot instance at <code>/api/docs/</code>. This interface provides a convenient sandbox for researching and experimenting with specific endpoints and request types. The API itself can also be explored using a web browser by navigating to its root at <code>/api/</code>.</p> <p>Added in version 1.3.0</p> <p>You can view or explore a specific REST API version by adding the API version as a query parameter, for example <code>/api/docs/?api_version=1.3</code> or <code>/api/?api_version=1.2</code></p>"},{"location":"rest-api/overview.html#endpoint-hierarchy","title":"Endpoint Hierarchy","text":"<p>Nautobot's entire REST API is housed under the API root at <code>https://&lt;hostname&gt;/api/</code>. The URL structure is divided at the root level by application: circuits, DCIM, extras, IPAM, plugins, tenancy, users, and virtualization. Within each application exists a separate path for each model. For example, the provider and circuit objects are located under the \"circuits\" application:</p> <ul> <li><code>/api/circuits/providers/</code></li> <li><code>/api/circuits/circuits/</code></li> </ul> <p>Likewise, the site, rack, and device objects are located under the \"DCIM\" application:</p> <ul> <li><code>/api/dcim/sites/</code></li> <li><code>/api/dcim/racks/</code></li> <li><code>/api/dcim/devices/</code></li> </ul> <p>The full hierarchy of available endpoints can be viewed by navigating to the API root in a web browser.</p> <p>Each model generally has two views associated with it: a list view and a detail view. The list view is used to retrieve a list of multiple objects and to create new objects. The detail view is used to retrieve, update, or delete an single existing object. All objects are referenced by their UUID primary key (<code>id</code>).</p> <ul> <li><code>/api/dcim/devices/</code> - List existing devices or create a new device</li> <li><code>/api/dcim/devices/6a522ebb-5739-4c5c-922f-ab4a2dc12eb0/</code> - Retrieve, update, or delete the device with ID 6a522ebb-5739-4c5c-922f-ab4a2dc12eb0</li> </ul> <p>Lists of objects can be filtered using a set of query parameters. For example, to find all interfaces belonging to the device with ID 6a522ebb-5739-4c5c-922f-ab4a2dc12eb0:</p> <pre><code>GET /api/dcim/interfaces/?device_id=6a522ebb-5739-4c5c-922f-ab4a2dc12eb0\n</code></pre> <p>See the filtering documentation for more details.</p>"},{"location":"rest-api/overview.html#versioning","title":"Versioning","text":"<p>Added in version 1.3.0</p> <p>As of Nautobot 1.3, the REST API supports multiple versions. A REST API client may request a given API version by including a <code>major.minor</code> Nautobot version number in its request in one of two ways:</p> <ol> <li>A client may include a <code>version</code> in its HTTP Accept header, for example <code>Accept: application/json; version=1.3</code></li> <li>A client may include an <code>api_version</code> as a URL query parameter, for example <code>/api/extras/jobs/?api_version=1.3</code></li> </ol> <p>Generally the former approach is recommended when writing automated API integrations, as it can be set as a general request header alongside the authentication token and re-used across a series of REST API interactions, while the latter approach may be more convenient when initially exploring the REST API via the interactive documentation as described above.</p>"},{"location":"rest-api/overview.html#default-versions-and-backward-compatibility","title":"Default Versions and Backward Compatibility","text":"<p>By default, a REST API request that does not specify an API version number will default to compatibility with a specified Nautobot version. This default REST API version can be expected to remain constant throughout the lifespan of a given Nautobot major release.</p> <p>Note</p> <p>For Nautobot 1.x, the default API behavior is to be compatible with the REST API of Nautobot version 1.2, in other words, for all Nautobot 1.x versions (beginning with Nautobot 1.2.0), <code>Accept: application/json</code> is functionally equivalent to <code>Accept: application/json; version=1.2</code>.</p> <p>Tip</p> <p>The default REST API version compatibility may change in a subsequent Nautobot major release, so as a best practice, it is recommended that a REST API client should always request the exact Nautobot REST API version that it is compatible with, rather than relying on the default behavior to remain constant.</p> <p>Tip</p> <p>Any successful REST API response will include an <code>API-Version</code> header showing the API version that is in use for the specific API request being handled.</p>"},{"location":"rest-api/overview.html#non-breaking-changes","title":"Non-Breaking Changes","text":"<p>Non-breaking (forward- and backward-compatible) REST API changes may be introduced in major or minor Nautobot releases. Since these changes are non-breaking, they will not correspond to the introduction of a new API version, but will be added seamlessly to the existing API version, and so will immediately be available to existing REST API clients. Examples would include:</p> <ul> <li>Addition of new fields in GET responses</li> <li>Added support for new, optional fields in POST/PUT/PATCH requests</li> <li>Deprecation (but not removal) of existing fields</li> </ul> <p>Important</p> <p>There is no way to \"opt out\" of backwards-compatible enhancements to the REST API; because they are fully backwards-compatible there should never be a need to do so. Thus, for example, a client requesting API version <code>1.2</code> from a Nautobot 1.3 server may actually receive the (updated but still backwards-compatible) <code>1.3</code> API version as a response. For this reason, clients should always default to ignoring additional fields in an API response that they do not understand, rather than reporting an error.</p>"},{"location":"rest-api/overview.html#breaking-changes","title":"Breaking Changes","text":"<p>Breaking (non-backward-compatible) REST API changes also may be introduced in major or minor Nautobot releases. Examples would include:</p> <ul> <li>Removal of deprecated fields</li> <li>Addition of new, required fields in POST/PUT/PATCH requests</li> <li>Changed field types (for example, changing a single value to a list of values)</li> <li>Redesigned API (for example, listing and accessing Job instances by UUID primary-key instead of by class-path string)</li> </ul> <p>Per Nautobot's feature-deprecation policy, the previous REST API version(s) will continue to be supported until the next major release. Upon the next major release, previously deprecated API versions will be removed and the newest behavior will become the default. You will no longer be able to request API versions from the previous major version.</p> <p>Important</p> <p>When breaking changes are introduced in a minor release, for compatibility as described above, the default REST API behavior within the remainder of the current major release cycle will continue to be the previous (unchanged) API version. API clients must \"opt in\" to the new version of the API by explicitly requesting the new API version.</p> <p>Tip</p> <p>This is another reason to always specify the exact <code>major.minor</code> Nautobot REST API version when developing a REST API client integration, as it guarantees that the client will be receiving the latest API feature set available in that release rather than possibly defaulting to an older REST API version that is still default but is now deprecated.</p>"},{"location":"rest-api/overview.html#example-of-api-version-behavior","title":"Example of API Version Behavior","text":"<p>As an example, let us say that Nautobot 1.3 introduced a new, non-backwards-compatible REST API for the <code>/api/extras/jobs/</code> endpoint, and also introduced a new, backwards-compatible set of additional fields on the <code>/api/dcim/sites/</code> endpoint. Depending on what API version a REST client interacting with Nautobot 1.3 specified (or didn't specify), it would see the following responses from the server:</p> API endpoint Requested API version Response <code>/api/extras/jobs/</code> (unspecified) Deprecated 1.2-compatible REST API <code>/api/extras/jobs/</code> <code>1.2</code> Deprecated 1.2-compatible REST API <code>/api/extras/jobs/</code> <code>1.3</code> New/updated 1.3-compatible REST API <p>Important</p> <p>Note again that if not specifying an API version, the client would not receive the latest API version when breaking changes are present. Even though the server had Nautobot version 1.3, the default Jobs REST API behavior would be that of Nautobot 1.2. Only by actually requesting API version <code>1.3</code> was the client able to access the new Jobs REST API.</p> API endpoint Requested API version Response <code>/api/dcim/sites/</code> (unspecified) 1.3-updated, 1.2-compatible REST API <code>/api/dcim/sites/</code> <code>1.2</code> 1.3-updated, 1.2-compatible REST API <code>/api/dcim/sites/</code> <code>1.3</code> 1.3-updated, 1.2-compatible REST API API endpoint Requested API version Response <code>/api/dcim/racks/</code> (unspecified) 1.2-compatible REST API (unchanged) <code>/api/dcim/racks/</code> <code>1.2</code> 1.2-compatible REST API (unchanged) <code>/api/dcim/racks/</code> <code>1.3</code> 1.3-compatible REST API (unchanged from 1.2)"},{"location":"rest-api/overview.html#apiselect-with-versioning-capability","title":"APISelect with versioning capability","text":"<p>Added in version 1.3.0</p> <p>The constructor for Nautobot's <code>APISelect</code>/<code>APISelectMultiple</code> UI widgets now includes an optional <code>api_version</code> argument which if set overrides the default API version of the request.</p>"},{"location":"rest-api/overview.html#serialization","title":"Serialization","text":"<p>The REST API employs two types of serializers to represent model data: base serializers and nested serializers. The base serializer is used to present the complete view of a model. This includes all database table fields which comprise the model, and may include additional metadata. A base serializer includes relationships to parent objects, but does not include child objects. For example, the <code>VLANSerializer</code> includes a nested representation its parent VLANGroup (if any), but does not include any assigned Prefixes.</p> <pre><code>{\n\"id\": 1048,\n\"site\": {\n\"id\": \"09c9e21c-e038-44fd-be9a-43aef97bff8f\",\n\"url\": \"http://nautobot/api/dcim/sites/09c9e21c-e038-44fd-be9a-43aef97bff8f/\",\n\"name\": \"Corporate HQ\",\n\"slug\": \"corporate-hq\"\n},\n\"group\": {\n\"id\": \"eccc0964-9fab-43bc-bb77-66b1be08f64b\",\n\"url\": \"http://nautobot/api/ipam/vlan-groups/eccc0964-9fab-43bc-bb77-66b1be08f64b/\",\n\"name\": \"Production\",\n\"slug\": \"production\"\n},\n\"vid\": 101,\n\"name\": \"Users-Floor1\",\n\"tenant\": null,\n\"status\": {\n\"value\": \"active\",\n\"label\": \"Active\"\n},\n\"role\": {\n\"id\": \"a1fd5e46-a85e-48c3-a2f4-3c2ec2bb2464\",\n\"url\": \"http://nautobot/api/ipam/roles/a1fd5e46-a85e-48c3-a2f4-3c2ec2bb2464/\",\n\"name\": \"User Access\",\n\"slug\": \"user-access\"\n},\n\"description\": \"\",\n\"display\": \"101 (Users-Floor1)\",\n\"custom_fields\": {}\n}\n</code></pre>"},{"location":"rest-api/overview.html#related-objects","title":"Related Objects","text":"<p>Related objects (e.g. <code>ForeignKey</code> fields) are represented using nested serializers. A nested serializer provides a minimal representation of an object, including only its direct URL and enough information to display the object to a user. When performing write API actions (<code>POST</code>, <code>PUT</code>, and <code>PATCH</code>), related objects may be specified by either UUID (primary key), or by a set of attributes sufficiently unique to return the desired object.</p> <p>For example, when creating a new device, its rack can be specified by Nautobot ID (PK):</p> <pre><code>{\n\"name\": \"MyNewDevice\",\n\"rack\": \"7f3ca431-8103-45cc-a9ce-b94c1f784a1d\",\n...\n}\n</code></pre> <p>Or by a set of nested attributes which uniquely identify the rack:</p> <pre><code>{\n\"name\": \"MyNewDevice\",\n\"rack\": {\n\"site\": {\n\"name\": \"Equinix DC6\"\n},\n\"name\": \"R204\"\n},\n...\n}\n</code></pre> <p>Note that if the provided parameters do not return exactly one object, a validation error is raised.</p>"},{"location":"rest-api/overview.html#generic-relations","title":"Generic Relations","text":"<p>Some objects within Nautobot have attributes which can reference an object of multiple types, known as generic relations. For example, an IP address can be assigned to either a device interface or a virtual machine interface. When making this assignment via the REST API, we must specify two attributes:</p> <ul> <li><code>assigned_object_type</code> - The content type of the assigned object, defined as <code>&lt;app&gt;.&lt;model&gt;</code></li> <li><code>assigned_object_id</code> - The assigned object's UUID</li> </ul> <p>Together, these values identify a unique object in Nautobot. The assigned object (if any) is represented by the <code>assigned_object</code> attribute on the IP address model.</p> <pre><code>curl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=1.3; indent=4\" \\\nhttp://nautobot/api/ipam/ip-addresses/ \\\n--data '{\n    \"address\": \"192.0.2.1/24\",\n    \"assigned_object_type\": \"dcim.interface\",\n    \"assigned_object_id\": \"e824bc29-623f-407e-8aa8-828f4c0b98ee\"\n}'\n</code></pre> <pre><code>{\n\"id\": \"e2f29f8f-002a-4c4a-9d19-24cc7549e715\",\n\"url\": \"http://nautobot/api/ipam/ip-addresses/56296/\",\n\"assigned_object_type\": \"dcim.interface\",\n\"assigned_object_id\": \"e824bc29-623f-407e-8aa8-828f4c0b98ee\",\n\"assigned_object\": {\n\"id\": \"e824bc29-623f-407e-8aa8-828f4c0b98ee\",\n\"url\": \"http://nautobot/api/dcim/interfaces/e824bc29-623f-407e-8aa8-828f4c0b98ee/\",\n\"device\": {\n\"id\": \"76816a69-db2c-40e6-812d-115c61156e21\",\n\"url\": \"http://nautobot/api/dcim/devices/76816a69-db2c-40e6-812d-115c61156e21/\",\n\"name\": \"device105\",\n\"display\": \"device105\"\n},\n\"name\": \"ge-0/0/0\",\n\"cable\": null,\n\"connection_status\": null\n},\n...\n}\n</code></pre> <p>If we wanted to assign this IP address to a virtual machine interface instead, we would have set <code>assigned_object_type</code> to <code>virtualization.vminterface</code> and updated the object ID appropriately.</p>"},{"location":"rest-api/overview.html#pagination","title":"Pagination","text":"<p>API responses which contain a list of many objects will be paginated for efficiency. The root JSON object returned by a list endpoint contains the following attributes:</p> <ul> <li><code>count</code>: The total number of all objects matching the query</li> <li><code>next</code>: A hyperlink to the next page of results (if applicable)</li> <li><code>previous</code>: A hyperlink to the previous page of results (if applicable)</li> <li><code>results</code>: The list of objects on the current page</li> </ul> <p>Here is an example of a paginated response:</p> <pre><code>HTTP 200 OK\nAllow: GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS\nAPI-Version: 1.2\nContent-Type: application/json\nVary: Accept\n{\n\"count\": 2861,\n\"next\": \"http://nautobot/api/dcim/devices/?limit=50&amp;offset=50\",\n\"previous\": null,\n\"results\": [\n{\n\"id\": \"fa069c4b-4f6e-4349-88ac-8b6baf9d70c5\",\n\"name\": \"Device1\",\n...\n},\n{\n\"id\": \"a37df58c-8bf3-4b97-bad5-301ef3880bea\",\n\"name\": \"Device2\",\n...\n},\n...\n]\n}\n</code></pre> <p>The default page is determined by the <code>PAGINATE_COUNT</code> configuration parameter, which defaults to 50. However, this can be overridden per request by specifying the desired <code>offset</code> and <code>limit</code> query parameters. For example, if you wish to retrieve a hundred devices at a time, you would make a request for:</p> <pre><code>http://nautobot/api/dcim/devices/?limit=100\n</code></pre> <p>The response will return devices 1 through 100. The URL provided in the <code>next</code> attribute of the response will return devices 101 through 200:</p> <pre><code>{\n\"count\": 2861,\n\"next\": \"http://nautobot/api/dcim/devices/?limit=100&amp;offset=100\",\n\"previous\": null,\n\"results\": [...]\n}\n</code></pre> <p>The maximum number of objects that can be returned is limited by the <code>MAX_PAGE_SIZE</code> configuration parameter, which is 1000 by default. Setting this to <code>0</code> or <code>None</code> will remove the maximum limit. An API consumer can then pass <code>?limit=0</code> to retrieve all matching objects with a single request.</p> <p>Warning</p> <p>Disabling the page size limit introduces a potential for very resource-intensive requests, since one API request can effectively retrieve an entire table from the database.</p>"},{"location":"rest-api/overview.html#interacting-with-objects","title":"Interacting with Objects","text":""},{"location":"rest-api/overview.html#retrieving-multiple-objects","title":"Retrieving Multiple Objects","text":"<p>To query Nautobot for a list of objects, make a <code>GET</code> request to the model's list endpoint. Objects are listed under the response object's <code>results</code> parameter. Specifying the <code>Accept</code> header with the Nautobot API version is not required, but is strongly recommended.</p> <pre><code>curl -s -X GET \\\n-H \"Accept: application/json; version=1.3\" \\\nhttp://nautobot/api/ipam/ip-addresses/ | jq '.'\n</code></pre> <pre><code>{\n\"count\": 42031,\n\"next\": \"http://nautobot/api/ipam/ip-addresses/?limit=50&amp;offset=50\",\n\"previous\": null,\n\"results\": [\n{\n\"id\": \"bd307eca-de34-4bda-9195-d69ca52206d6\",\n\"address\": \"192.0.2.1/24\",\n...\n},\n{\n\"id\": \"6c52e918-4f0c-4c50-ae49-6bef22c97fd5\",\n\"address\": \"192.0.2.2/24\",\n...\n},\n{\n\"id\": \"b8cde1ee-1b86-4ea4-a884-041c472d8999\",\n\"address\": \"192.0.2.3/24\",\n...\n},\n...\n]\n}\n</code></pre>"},{"location":"rest-api/overview.html#retrieving-a-single-object","title":"Retrieving a Single Object","text":"<p>To query Nautobot for a single object, make a <code>GET</code> request to the model's detail endpoint specifying its UUID.</p> <p>Note</p> <p>Note that the trailing slash is required. Omitting this will return a 302 redirect.</p> <pre><code>curl -s -X GET \\\n-H \"Accept: application/json; version=1.3\" \\\nhttp://nautobot/api/ipam/ip-addresses/bd307eca-de34-4bda-9195-d69ca52206d6/ | jq '.'\n</code></pre> <pre><code>{\n\"id\": \"bd307eca-de34-4bda-9195-d69ca52206d6\",\n\"address\": \"192.0.2.1/24\",\n...\n}\n</code></pre>"},{"location":"rest-api/overview.html#brief-format","title":"Brief Format","text":"<p>The <code>GET</code> API endpoints support an optional \"brief\" format, which returns only a minimal representation of each object in the response. This is useful when you need only a list of available objects without any related data, such as when populating a drop-down list in a form. As an example, the default (complete) format of an IP address looks like this:</p> <pre><code>GET /api/ipam/prefixes/7d2d24ac-4737-4fc1-a850-b30366618f3d/\n</code></pre> <pre><code>{\n\"id\": \"7d2d24ac-4737-4fc1-a850-b30366618f3d\",\n\"url\": \"http://nautobot/api/ipam/prefixes/7d2d24ac-4737-4fc1-a850-b30366618f3d/\",\n\"family\": {\n\"value\": 4,\n\"label\": \"IPv4\"\n},\n\"prefix\": \"192.0.2.0/24\",\n\"site\": {\n\"id\": \"b9edf2ee-cad9-48be-9921-006294bff730\",\n\"url\": \"http://nautobot/api/dcim/sites/b9edf2ee-cad9-48be-9921-006294bff730/\",\n\"name\": \"Site 23A\",\n\"slug\": \"site-23a\"\n},\n\"vrf\": null,\n\"tenant\": null,\n\"vlan\": null,\n\"status\": {\n\"value\": \"container\",\n\"label\": \"Container\"\n},\n\"role\": {\n\"id\": \"ae1470bc-a858-4ce7-b9ce-dd1cd46333fe\",\n\"url\": \"http://nautobot/api/ipam/roles/ae1470bc-a858-4ce7-b9ce-dd1cd46333fe/\",\n\"name\": \"Staging\",\n\"slug\": \"staging\"\n},\n\"is_pool\": false,\n\"description\": \"Example prefix\",\n\"tags\": [],\n\"custom_fields\": {},\n\"created\": \"2018-12-10\",\n\"last_updated\": \"2019-03-01T20:02:46.173540Z\"\n}\n</code></pre> <p>The brief format is much more terse:</p> <pre><code>GET /api/ipam/prefixes/7d2d24ac-4737-4fc1-a850-b30366618f3d/?brief=1\n</code></pre> <pre><code>{\n\"id\": \"7d2d24ac-4737-4fc1-a850-b30366618f3d\",\n\"url\": \"http://nautobot/api/ipam/prefixes/7d2d24ac-4737-4fc1-a850-b30366618f3d/\",\n\"family\": 4,\n\"prefix\": \"10.40.3.0/24\"\n}\n</code></pre> <p>The brief format is supported for both lists and individual objects.</p>"},{"location":"rest-api/overview.html#retrieving-object-relationships-and-relationship-associations","title":"Retrieving Object Relationships and Relationship Associations","text":"<p>Added in version 1.4.0</p> <p>Objects that are associated with another object by a custom Relationship are also retrievable and modifiable via the REST API. Due to the additional processing overhead involved in retrieving and representing these relationships, they are not included in default REST API <code>GET</code> responses. To include relationships data, pass <code>include=relationships</code> as a query parameter; in this case an additional key, <code>\"relationships\"</code>, will be included in the API response, as seen below:</p> <pre><code>GET /api/dcim/sites/f472bb77-7f56-4e79-ac25-2dc73eb63924/?include=relationships\n</code></pre> <pre><code>{\n\"id\": \"f472bb77-7f56-4e79-ac25-2dc73eb63924\",\n\"display\": \"alpha\",\n\"url\": \"http://nautobot/api/dcim/sites/f472bb77-7f56-4e79-ac25-2dc73eb63924/\",\n...\n\"relationships\": {\n\"site-to-vrf\": {\n\"id\": \"e74cb7f7-15b0-499d-9401-a0f01cb96a9a\",\n\"url\": \"/api/extras/relationships/e74cb7f7-15b0-499d-9401-a0f01cb96a9a/\",\n\"name\": \"Single Site to Single VRF\",\n\"type\": \"one-to-one\",\n\"destination\": {\n\"label\": \"VRF\",\n\"object_type\": \"ipam.vrf\",\n\"objects\": [\n{\n\"id\": \"36641ba0-50d6-43be-b9b5-86aa992402e0\",\n\"url\": \"http://nautobot/api/ipam/vrfs/36641ba0-50d6-43be-b9b5-86aa992402e0/\",\n\"name\": \"red\",\n\"rd\": null,\n\"display\": \"red\"\n}\n]\n}\n},\n\"vrfs-to-sites\": {\n\"id\": \"e39c53e4-78cf-4572-b116-1d8830b81b2e\",\n\"url\": \"/api/extras/relationships/e39c53e4-78cf-4572-b116-1d8830b81b2e/\",\n\"name\": \"VRFs to Sites\",\n\"type\": \"many-to-many\",\n\"source\": {\n\"label\": \"VRFs\",\n\"object_type\": \"ipam.vrf\",\n\"objects\": []\n}\n},\n}\n}\n</code></pre> <ul> <li>Under the <code>\"relationships\"</code> key, there will be one key per Relationship that applies to this model, corresponding to the <code>slug</code> of that Relationship.<ul> <li>Under each slug key, there will be information about the Relationship itself, plus any of <code>\"source\"</code>, <code>\"destination\"</code>, or <code>\"peer\"</code> keys (depending on the type and directionality of the Relationship).<ul> <li>Under the <code>\"source\"</code>, <code>\"destination\"</code>, or <code>\"peer\"</code> keys, there are the following keys:<ul> <li><code>\"label\"</code> - a human-readable description of the related objects</li> <li><code>\"object_type\"</code> - the content-type of the related objects</li> <li><code>\"objects\"</code> - a list of all related objects, each represented in nested-serializer form as described under Related Objects above.</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>In the example above we can see that a single VRF, <code>green</code>, is a destination for the <code>site-to-vrf</code> Relationship from this Site, while there are currently no VRFs associated as sources for the <code>vrfs-to-sites</code> Relationship to this Site.</p>"},{"location":"rest-api/overview.html#excluding-config-contexts","title":"Excluding Config Contexts","text":"<p>When retrieving devices and virtual machines via the REST API, each will include its rendered configuration context data by default. Users with large amounts of context data will likely observe suboptimal performance when returning multiple objects, particularly with very high page sizes. To combat this, context data may be excluded from the response data by attaching the query parameter <code>?exclude=config_context</code> to the request. This parameter works for both list and detail views.</p>"},{"location":"rest-api/overview.html#creating-a-new-object","title":"Creating a New Object","text":"<p>To create a new object, make a <code>POST</code> request to the model's list endpoint with JSON data pertaining to the object being created. Note that a REST API token is required for all write operations; see the authentication documentation for more information. Also be sure to set the <code>Content-Type</code> HTTP header to <code>application/json</code>. As always, it's a good practice to also set the <code>Accept</code> HTTP header to include the requested REST API version.</p> <pre><code>curl -s -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=1.3\" \\\nhttp://nautobot/api/ipam/prefixes/ \\\n--data '{\"prefix\": \"192.0.2.0/24\", \"site\": 8df9e629-4338-438b-8ea9-06114f7be08e}' | jq '.'\n</code></pre> <pre><code>{\n\"id\": \"48df6965-0fcb-4155-b5f8-00fe8b9b01af\",\n\"url\": \"http://nautobot/api/ipam/prefixes/48df6965-0fcb-4155-b5f8-00fe8b9b01af/\",\n\"family\": {\n\"value\": 4,\n\"label\": \"IPv4\"\n},\n\"prefix\": \"192.0.2.0/24\",\n\"site\": {\n\"id\": \"8df9e629-4338-438b-8ea9-06114f7be08e\",\n\"url\": \"http://nautobot/api/dcim/sites/8df9e629-4338-438b-8ea9-06114f7be08e/\",\n\"name\": \"US-East 4\",\n\"slug\": \"us-east-4\"\n},\n\"vrf\": null,\n\"tenant\": null,\n\"vlan\": null,\n\"status\": {\n\"value\": \"active\",\n\"label\": \"Active\"\n},\n\"role\": null,\n\"is_pool\": false,\n\"description\": \"\",\n\"tags\": [],\n\"custom_fields\": {},\n\"created\": \"2020-08-04\",\n\"last_updated\": \"2020-08-04T20:08:39.007125Z\"\n}\n</code></pre>"},{"location":"rest-api/overview.html#creating-multiple-objects","title":"Creating Multiple Objects","text":"<p>To create multiple instances of a model using a single request, make a <code>POST</code> request to the model's list endpoint with a list of JSON objects representing each instance to be created. If successful, the response will contain a list of the newly created instances. The example below illustrates the creation of three new sites.</p> <pre><code>curl -X POST -H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=1.3; indent=4\" \\\nhttp://nautobot/api/dcim/sites/ \\\n--data '[\n{\"name\": \"Site 1\", \"slug\": \"site-1\", \"region\": {\"name\": \"United States\"}},\n{\"name\": \"Site 2\", \"slug\": \"site-2\", \"region\": {\"name\": \"United States\"}},\n{\"name\": \"Site 3\", \"slug\": \"site-3\", \"region\": {\"name\": \"United States\"}}\n]'\n</code></pre> <pre><code>[\n{\n\"id\": \"0238a4e3-66f2-455a-831f-5f177215de0f\",\n\"url\": \"http://nautobot/api/dcim/sites/0238a4e3-66f2-455a-831f-5f177215de0f/\",\n\"name\": \"Site 1\",\n...\n},\n{\n\"id\": \"33ac3a3b-0ee7-49b7-bf2a-244096051dc0\",\n\"url\": \"http://nautobot/api/dcim/sites/33ac3a3b-0ee7-49b7-bf2a-244096051dc0/\",\n\"name\": \"Site 2\",\n...\n},\n{\n\"id\": \"10b3134d-960b-4794-ad18-0e73edd357c4\",\n\"url\": \"http://nautobot/api/dcim/sites/10b3134d-960b-4794-ad18-0e73edd357c4/\",\n\"name\": \"Site 3\",\n...\n}\n]\n</code></pre>"},{"location":"rest-api/overview.html#updating-an-object","title":"Updating an Object","text":"<p>To modify an object which has already been created, make a <code>PATCH</code> request to the model's detail endpoint specifying its UUID. Include any data which you wish to update on the object. As with object creation, the <code>Authorization</code> and <code>Content-Type</code> headers must also be specified, and specifying the <code>Accept</code> header is also strongly recommended.</p> <pre><code>curl -s -X PATCH \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=1.3\" \\\nhttp://nautobot/api/ipam/prefixes/b484b0ac-12e3-484a-84c0-aa17955eaedc/ \\\n--data '{\"status\": \"reserved\"}' | jq '.'\n</code></pre> <pre><code>{\n\"id\": \"48df6965-0fcb-4155-b5f8-00fe8b9b01af\",\n\"url\": \"http://nautobot/api/ipam/prefixes/48df6965-0fcb-4155-b5f8-00fe8b9b01af/\",\n\"family\": {\n\"value\": 4,\n\"label\": \"IPv4\"\n},\n\"prefix\": \"192.0.2.0/24\",\n\"site\": {\n\"id\": \"8df9e629-4338-438b-8ea9-06114f7be08e\",\n\"url\": \"http://nautobot/api/dcim/sites/8df9e629-4338-438b-8ea9-06114f7be08e/\",\n\"name\": \"US-East 4\",\n\"slug\": \"us-east-4\"\n},\n\"vrf\": null,\n\"tenant\": null,\n\"vlan\": null,\n\"status\": {\n\"value\": \"reserved\",\n\"label\": \"Reserved\"\n},\n\"role\": null,\n\"is_pool\": false,\n\"description\": \"\",\n\"tags\": [],\n\"custom_fields\": {},\n\"created\": \"2020-08-04\",\n\"last_updated\": \"2020-08-04T20:14:55.709430Z\"\n}\n</code></pre> <p>PUT versus PATCH</p> <p>The Nautobot REST API support the use of either <code>PUT</code> or <code>PATCH</code> to modify an existing object. The difference is that a <code>PUT</code> request requires the user to specify a complete representation of the object being modified, whereas a <code>PATCH</code> request need include only the attributes that are being updated. For most purposes, using <code>PATCH</code> is recommended.</p>"},{"location":"rest-api/overview.html#updating-relationship-associations","title":"Updating Relationship Associations","text":"<p>Added in version 1.4.0</p> <p>It is possible to modify the objects associated via Relationship with an object as part of a REST API <code>PATCH</code> request by specifying the <code>\"relationships\"</code> key, any or all of the relevant Relationships, and the list of desired related objects for each such Relationship. Since nested serializers are used for the related objects, they can be identified by ID (primary key) or by one or more attributes in a dictionary. For example, either of the following requests would be valid:</p> <pre><code>{\n\"relationships\": {\n\"site-to-vrf\": {\n\"destination\": {\n\"objects\": [\n{\"name\": \"blue\"}\n]\n}\n},\n\"vrfs-to-sites\": {\n\"source\": {\n\"objects\": [\n{\"name\": \"green\"},\n{\"name\": \"red\"},\n]\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"relationships\": {\n\"site-to-vrf\": {\n\"destination\": {\n\"objects\": [\"3e3c58f9-4f63-44ba-acee-f0c42430eba7\"]\n}\n}\n}\n}\n</code></pre> <p>Note</p> <p>Relationship slugs can be omitted from the <code>\"relationships\"</code> dictionary, in which case the associations for that Relationship will be left unmodified. In the second example above, the existing association for the <code>\"site-to-vrf\"</code> Relationship would be replaced, but the <code>\"vrfs-to-sites\"</code> Relationship's associations would remain as-is.</p>"},{"location":"rest-api/overview.html#updating-multiple-objects","title":"Updating Multiple Objects","text":"<p>Multiple objects can be updated simultaneously by issuing a <code>PUT</code> or <code>PATCH</code> request to a model's list endpoint with a list of dictionaries specifying the UUID of each object to be deleted and the attributes to be updated. For example, to update sites with UUIDs 18de055e-3ea9-4cc3-ba78-b7eef6f0d589 and 1a414273-3d68-4586-ba22-6ae0a5702b8f to a status of \"active\", issue the following request:</p> <pre><code>curl -s -X PATCH \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=1.3\" \\\nhttp://nautobot/api/dcim/sites/ \\\n--data '[{\"id\": \"18de055e-3ea9-4cc3-ba78-b7eef6f0d589\", \"status\": \"active\"}, {\"id\": \"1a414273-3d68-4586-ba22-6ae0a5702b8f\", \"status\": \"active\"}]'\n</code></pre> <p>Note that there is no requirement for the attributes to be identical among objects. For instance, it's possible to update the status of one site along with the name of another in the same request.</p> <p>Note</p> <p>The bulk update of objects is an all-or-none operation, meaning that if Nautobot fails to successfully update any of the specified objects (e.g. due a validation error), the entire operation will be aborted and none of the objects will be updated.</p>"},{"location":"rest-api/overview.html#deleting-an-object","title":"Deleting an Object","text":"<p>To delete an object from Nautobot, make a <code>DELETE</code> request to the model's detail endpoint specifying its UUID. The <code>Authorization</code> header must be included to specify an authorization token, however this type of request does not support passing any data in the body.</p> <pre><code>curl -s -X DELETE \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Accept: application/json; version=1.3\" \\\nhttp://nautobot/api/ipam/prefixes/48df6965-0fcb-4155-b5f8-00fe8b9b01af/\n</code></pre> <p>Note that <code>DELETE</code> requests do not return any data: If successful, the API will return a 204 (No Content) response.</p> <p>Note</p> <p>You can run <code>curl</code> with the verbose (<code>-v</code>) flag to inspect the HTTP response codes.</p>"},{"location":"rest-api/overview.html#deleting-multiple-objects","title":"Deleting Multiple Objects","text":"<p>Nautobot supports the simultaneous deletion of multiple objects of the same type by issuing a <code>DELETE</code> request to the model's list endpoint with a list of dictionaries specifying the UUID of each object to be deleted. For example, to delete sites with UUIDs 18de055e-3ea9-4cc3-ba78-b7eef6f0d589, 1a414273-3d68-4586-ba22-6ae0a5702b8f, and c2516019-caf6-41f0-98a6-4276c1a73fa3, issue the following request:</p> <pre><code>curl -s -X DELETE \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=1.3\" \\\nhttp://nautobot/api/dcim/sites/ \\\n--data '[{\"id\": \"18de055e-3ea9-4cc3-ba78-b7eef6f0d589\"}, {\"id\": \"1a414273-3d68-4586-ba22-6ae0a5702b8f\"}, {\"id\": \"c2516019-caf6-41f0-98a6-4276c1a73fa3\"}]'\n</code></pre> <p>Note</p> <p>The bulk deletion of objects is an all-or-none operation, meaning that if Nautobot fails to delete any of the specified objects (e.g. due a dependency by a related object), the entire operation will be aborted and none of the objects will be deleted.</p>"},{"location":"user-guides/custom-fields.html","title":"Custom Fields","text":"<p>Custom fields are a convenient method of adding new fields to existing Nautobot models without needing to modify the underlying source code or database schema. For more general information on how custom fields work, refer to the custom fields model documentation.</p>"},{"location":"user-guides/custom-fields.html#when-to-use-custom-fields","title":"When to use Custom Fields","text":"<p>Custom fields are commonly used for fields that need different values across individual objects. For example, a custom field on devices to reference an internal ticket number that inventories each device in Nautobot. If you need a solution for marking multiple objects with a common flag, tags may be a better fit.</p>"},{"location":"user-guides/custom-fields.html#create-a-custom-field","title":"Create a Custom Field","text":"<p>Navigate to the custom fields page by clicking on Extensibility -&gt; Custom Fields in the Nautobot menu. Click on Add to create a new custom field.</p>"},{"location":"user-guides/custom-fields.html#custom-field-attributes","title":"Custom Field Attributes","text":""},{"location":"user-guides/custom-fields.html#label","title":"Label","text":"<p>The label is the human readable label of the custom field that will be displayed on the associated object detail view.</p> <p></p>"},{"location":"user-guides/custom-fields.html#grouping","title":"Grouping","text":"<p>The optional grouping field allows you to group custom fields into collapsible menus.</p> <p></p>"},{"location":"user-guides/custom-fields.html#slug","title":"Slug","text":"<p>The slug is used to create the URL endpoint for the custom field and is also used as the key in the underlying custom field data dictionary. This is automatically created from the label if not supplied. The default value should be sufficient for most deployments.</p> <p>Tip</p> <p>Because custom field data is included in the database, in the REST API and in GraphQL, we strongly recommend that when defining a custom field, you provide a <code>slug</code> that contains underscores rather than dashes (<code>my_field_slug</code>, not <code>my-field-slug</code>), as some features may not work optimally if dashes are included in the slug. Similarly, the provided <code>name</code> should also contain only alphanumeric characters and underscores, as it is currently treated in some cases like a slug.</p>"},{"location":"user-guides/custom-fields.html#type","title":"Type","text":"<p>The type of data that the custom field will store. Valid choices are documented in the custom field model documentation.</p>"},{"location":"user-guides/custom-fields.html#weight","title":"Weight","text":"<p>Weight determines how custom fields are sorted in forms and object detail views. Higher-weight fields will be ordered lower on the page; if multiple fields have the same weight, they will be listed alphabetically.</p>"},{"location":"user-guides/custom-fields.html#description","title":"Description","text":"<p>The description of a custom field is shown as a mouseover tooltip in object detail views and as help text under form fields.</p> <p></p>"},{"location":"user-guides/custom-fields.html#required","title":"Required","text":"<p>Check the required box if this field cannot be null on the associated objects.</p> <p>Warning</p> <p>If an associated object does not have a valid value assigned to a required custom field, that field must be updated with a valid value before the object can be saved. Try to supply a valid default value when creating required custom fields. Since automatic provisioning is only performed when the assigned content types for a custom field change, if an existing custom field is changed from optional to required the associated objects will need to be updated manually.</p>"},{"location":"user-guides/custom-fields.html#default","title":"Default","text":"<p>The default value for the custom field. This form field only accepts JSON data so if you want to set the field default to a string of <code>foo</code> you must supply the JSON string <code>\"foo\"</code>. Boolean field valid values are <code>true</code> and <code>false</code> (all lowercase). Date fields are strings in the format <code>\"YYYY-MM-DD\"</code>. Select and multi-select field default must match one of the field's choices.</p> <p>Note</p> <p>The default value for a select or multi-select field must match one of the existing choices. If the desired default value is not in the list of choices, the choices must be updated and saved before the default can be changed. As a result of this behavior, default values cannot be set on select and multi-select fields when a custom field is created.</p>"},{"location":"user-guides/custom-fields.html#filter-logic","title":"Filter Logic","text":"<p>Changed in version 1.4.0</p> <p>Custom field extended filtering introduced extended lookup expression filters for <code>exact</code> and <code>icontains</code>, duplicating the functionality of both the <code>Strict</code> and <code>Loose</code> settings.</p> <p>The filter logic setting applies to filtering on custom fields in the UI and API. For example, when filtering in the API to find a device with the custom field <code>cf1</code> set to <code>\"abc\"</code> you would query <code>/api/dcim/devices/?cf_cf1=abc</code>. If the filter logic setting is set to <code>Loose</code> this would match on <code>\"ABC\"</code> and <code>\"abcdef\"</code>. If the filter logic setting is set to <code>Strict</code> only devices with the custom field set to exactly \"abc\" (case sensitive) would be returned. If the filter logic setting is set to <code>disabled</code>, no filters will be available for this custom field, including extended lookup filters. The <code>Loose</code> and <code>Strict</code> settings only change the behavior of the default filter (<code>cf_customfieldname</code>) on <code>text</code>, <code>url</code> and <code>json</code> custom fields.</p>"},{"location":"user-guides/custom-fields.html#move-to-advanced-tab","title":"Move to Advanced Tab","text":"<p>When selected, the custom field will appear in the \"Advanced\" tab of the object detail view instead of the default tab.</p>"},{"location":"user-guides/custom-fields.html#assignment","title":"Assignment","text":""},{"location":"user-guides/custom-fields.html#content-types","title":"Content Types","text":"<p>The list of content types to add this custom field to. Only models that inherit from the <code>nautobot.extras.models.customfields.CustomFieldModel</code> model class can be selected.</p> <p>Note</p> <p>When a custom field is created or associated to a new content type (model), all affected existing objects will be updated to add the custom field. The initial value will be set to the <code>default</code> value of the custom field. This update runs as a background task via Celery, so it may take a few seconds or more before all objects reflect the new custom field, depending on the size of your database.</p>"},{"location":"user-guides/custom-fields.html#validation-rules","title":"Validation Rules","text":"<p>Validation rules are used for constraining custom fields to specific values.</p>"},{"location":"user-guides/custom-fields.html#minimum-value","title":"Minimum value","text":"<p>Minimum allowed value for <code>Integer</code> fields.</p>"},{"location":"user-guides/custom-fields.html#maximum-value","title":"Maximum value","text":"<p>Maximum allowed value for <code>Integer</code> fields.</p>"},{"location":"user-guides/custom-fields.html#validation-regex","title":"Validation Regex","text":"<p>Regular expression to enforce on <code>Text</code>, <code>URL</code>, <code>Selection</code> and <code>Multiple selection</code> field values. Regex validation is handled by the python re engine which uses a PCRE or perl-like regular expression syntax. Examples of common regex validations:</p> <p>Must start with companyname</p> <pre><code>^companyname\n</code></pre> <p>Must end with 5 digit zip code</p> <pre><code>[0-9]{5}$\n</code></pre> <p>Must only contain digits</p> <pre><code>^\\d+$\n</code></pre> <p>Must be exactly 8 alphanumeric characters</p> <pre><code>^[0-9a-zA-Z]{8}$\n</code></pre> <p>Must be between 8 and 10 alphanumeric characters and underscore</p> <pre><code>^\\w+{8,10}$\n</code></pre> <p>Must contain anything that is not whitespace</p> <pre><code>\\S\n</code></pre>"},{"location":"user-guides/custom-fields.html#custom-field-choices","title":"Custom Field Choices","text":"<p>The choices to be presented for <code>Selection</code> and <code>Multiple selection</code> custom field types. These are displayed in the order of the weight values supplied with the lowest weight on top. If regex validation is being used, these choices must match the regular expression.</p> <p></p> <p></p>"},{"location":"user-guides/custom-fields.html#editing-custom-fields","title":"Editing Custom Fields","text":"<p>Since automatic provisioning is only performed when a custom field's content types change, some changes made to existing custom fields are not reflected on the associated objects automatically. Some examples of cases where this might cause unexpected behavior are changes to the <code>required</code>, <code>default</code> and validation fields.</p> <p>If a custom field is created with <code>required=False</code> and then later changed to <code>required=True</code>, all of the associated objects that do not yet have a value for this field will fail validation the next time they're saved unless updated with a valid value. Similarly, changes to the validation fields for a custom field will not automatically result in changes to affected objects, but may require changes the next time those objects are edited in order to bring them into compliance with the updated validation rules.</p> <p>If a custom field's <code>default</code> value is changed, newly created objects will use the new default, but existing objects that were set to the previous default value will not automatically be updated.</p>"},{"location":"user-guides/custom-fields.html#deleting-custom-fields","title":"Deleting Custom Fields","text":"<p>Custom fields are removed from associated objects when a content type is removed from the custom field, including when the custom field is deleted. This update runs as a background task via Celery, so it may take a few seconds or more before the custom field data is removed from all objects, depending on the size of your database.</p>"},{"location":"user-guides/custom-fields.html#retrieving-custom-field-data","title":"Retrieving Custom Field Data","text":"<p>Custom fields augment an existing model so retrieving custom field values is different from native fields. All custom field data is stored as a dictionary in the model field named <code>_custom_field_data</code> but there is a property named <code>cf</code> to make accessing this field easier. Example:</p>"},{"location":"user-guides/custom-fields.html#retrieve-custom-field-data-in-nautobot-shell","title":"Retrieve Custom Field Data in Nautobot Shell","text":"<pre><code># retrieve all custom field data\n&gt;&gt;&gt; device.cf\n{'eol_date': '1970-01-01',\n'support_group': 'Network Operations (555-4357)',\n'dmz_device': True,\n'cmdb_id': 12345}\n# retrieve a single field\n&gt;&gt;&gt; device.cf.get(\"eol_date\")\n'1970-01-01'\n</code></pre> <p>The <code>slug</code> of the custom field is used as the key for the associated object's data dictionary.</p>"},{"location":"user-guides/custom-fields.html#retrieve-custom-field-data-in-the-rest-api","title":"Retrieve Custom Field Data in the Rest API","text":"<p>Custom fields are returned in the API for all supported models in the <code>custom_fields</code> key:</p> <code>GET http://localhost:8080/api/dcim/devices/ffd8df99-6d1a-41c3-b19f-b8357eefc481/</code> <pre><code>{\n\"id\": \"ffd8df99-6d1a-41c3-b19f-b8357eefc481\",\n...\n\"custom_fields\": {\n\"dmz_device\": true,\n\"eol_date\": \"1970-01-01\",\n\"cmdb_id\": 12345,\n\"support_group\": \"Network Operations (555-4357)\"\n}\n}\n</code></pre>"},{"location":"user-guides/custom-fields.html#graphql","title":"GraphQL","text":""},{"location":"user-guides/custom-fields.html#retrieve-data-for-a-custom-field-in-graphql","title":"Retrieve Data for a Custom Field in GraphQL","text":"<p>Individual custom fields can be retrieved in GraphQL queries by using the <code>cf_&lt;fieldname&gt;</code> field name format:</p> <pre><code>{\n  devices {\n    cf_support_group\n    name\n    id\n  }\n}\n</code></pre> Example GraphQL output <pre><code>{\n\"data\": {\n\"devices\": [\n{\n\"name\": \"phx-leaf1-1-1\",\n\"cf_support_group\": \"Network Operations (555-4357)\",\n\"id\": \"8bd9ed2b-3774-4806-9d17-c9f21f2c73e4\"\n},\n{\n\"name\": \"stl-leaf1-2-1\",\n\"cf_support_group\": \"Network Operations (555-4357)\",\n\"id\": \"b22bb7f4-6a6d-4426-9d27-5dcb0471ed2a\"\n},\n{\n\"name\": \"Test Device\",\n\"cf_support_group\": \"Network Testing (555-8080)\",\n\"id\": \"ffd8df99-6d1a-41c3-b19f-b8357eefc481\"\n}\n]\n}\n}\n</code></pre>"},{"location":"user-guides/custom-fields.html#retrieve-data-for-all-custom-fields-in-graphql","title":"Retrieve Data For All Custom Fields in GraphQL","text":"<p>All custom field data can be retrieved in GraphQL queries by using the <code>_custom_field_data</code> field:</p> <pre><code>{\n  devices(id:\"8bd9ed2b-3774-4806-9d17-c9f21f2c73e4\") {\n    name\n    id\n    _custom_field_data\n  }\n}\n</code></pre> Example GraphQL output <pre><code>{\n\"data\": {\n\"devices\": [\n{\n\"name\": \"phx-leaf1-1-1\",\n\"id\": \"8bd9ed2b-3774-4806-9d17-c9f21f2c73e4\",\n\"_custom_field_data\": {\n\"eol_date\": \"1970-01-01\",\n\"support_group\": \"Network Operations (555-4357)\",\n\"dmz_device\": true,\n\"cmdb_id\": 12345,\n}\n}\n]\n}\n}\n</code></pre>"},{"location":"user-guides/custom-fields.html#filter-queries-on-custom-field-data-in-graphql","title":"Filter Queries on Custom Field Data in GraphQL","text":"<p>Queries can also be filtered by custom field values using any of the filters available in the UI and Rest API:</p> <pre><code># Retrieve devices where custom field support_group\n# does not contain \"Network Operations\" (case insensitive)\n{\n  devices(cf_support_group__nic: \"Network Operations\") {\n    name\n    id\n    cf_support_group\n  }\n}\n</code></pre> Example GraphQL output <pre><code>{\n\"data\": {\n\"devices\": [\n{\n\"name\": \"Test Device\",\n\"id\": \"ffd8df99-6d1a-41c3-b19f-b8357eefc481\",\n\"cf_support_group\": \"Network Testing (555-8080)\"\n}\n]\n}\n}\n</code></pre>"},{"location":"user-guides/custom-fields.html#modifying-custom-field-data","title":"Modifying Custom Field Data","text":""},{"location":"user-guides/custom-fields.html#modify-custom-field-data-in-nautobot-shell","title":"Modify Custom Field Data in Nautobot Shell","text":"<p>Custom field data behaves like a python dictionary in the Nautobot Shell. When modifying custom fields through the Nautobot Shell, make sure to use the <code>.validated_save()</code> method to save the object to ensure that custom field validation is performed.  Example:</p> <pre><code>&gt;&gt;&gt; device.cf[\"support_group\"]\n'Network Operations (555-4357)'\n&gt;&gt;&gt; device.cf[\"support_group\"] = \"Network Testing (555-8080)\"\n&gt;&gt;&gt; device.validated_save()\n&gt;&gt;&gt; device.cf[\"support_group\"]\n'Network Testing (555-8080)'\n</code></pre> <p>If you do not use <code>.validated_save()</code> when creating or updating objects, the custom field dictionary will not be populated with default values or even empty values and this can lead to unintuitive behaviour.</p>"},{"location":"user-guides/custom-fields.html#modify-custom-field-data-in-the-rest-api","title":"Modify Custom Field Data in the Rest API","text":"<p>Individual custom field data can be modified by sending a PATCH to the Rest API and setting the new value in the <code>custom_fields</code> key:</p> <pre><code>PATCH http://localhost:8080/api/dcim/devices/ffd8df99-6d1a-41c3-b19f-b8357eefc481/\n{\n    \"custom_fields\": {\n        \"support_group\": \"Rest API test\"\n    }\n}\n</code></pre> Example API output <pre><code>{\n\"id\": \"ffd8df99-6d1a-41c3-b19f-b8357eefc481\",\n...\n\"custom_fields\": {\n\"dmz_device\": true,\n\"eol_date\": \"1970-01-01\",\n\"cmdb_id\": 12345,\n\"support_group\": \"Rest API test\"\n}\n}\n</code></pre>"},{"location":"user-guides/git-data-source.html","title":"Git as a Data Source","text":"<p>The \"Git\u2122 as a Data Source\" feature was developed to provide the ability to populate existing data, templates, scripts, and much more into Nautobot; while leveraging the benefits that tools such as GitHub and GitLab already provide, including issue tracking, discussions, pipelines, and approvals.  For example having the ability to have users approve the YAML data that is used for Nautobot  <code>config context</code> along with running tests on that data, or having the users approve Jinja2 templates that are used for Nautobot <code>export templates</code>.  These examples and more can be accomplished by used Git as a Data Source.</p> <p>For more technical details on how to use this feature, please see the documentation on Git Repositories.</p>"},{"location":"user-guides/git-data-source.html#supported-providers","title":"Supported Providers","text":"<p>The feature uses the concept of a <code>provides</code> field to map a repository to a use case. A list of the supported options is provided below.</p>"},{"location":"user-guides/git-data-source.html#core-functionality","title":"Core Functionality","text":"Name Summary Export Templates Nautobot allows users to define custom templates that can be used when exporting objects. Jobs Jobs are a way for users to execute custom logic on demand from within the Nautobot UI. Jobs can interact directly with Nautobot data to accomplish various data creation, modification, and validation tasks. Config Contexts Config contexts can be used to provide additional data that you can't natively store in Nautobot. Config Context Schemas Schemas enforce data validation on config contexts."},{"location":"user-guides/git-data-source.html#examples-of-plugins-defining-additional-providers","title":"Examples of Plugins Defining Additional Providers","text":"<p>Additional Git providers can be added by using Nautobot's flexible plugin system.</p> Name Summary Related Plugin Backup Configs Backup configuration data. Golden Config Intended Configs Stores the intended configurations, this grabs Nautobot data and runs through Jinja Templates. Golden Config Jinja Templates Repository that holds Jinja templates to be used to generate intended configs. Golden Config"},{"location":"user-guides/git-data-source.html#repository-details","title":"Repository Details","text":"<p>This table defines repository parameters that are required to establish a repository connection.</p> Field Explanation Name User friendly name for the repo. Slug Computer-friendly name for the repo. Auto-generated based on the <code>name</code> provided, but you can change it if you wish. Remote URL The URL pointing to the Git repo. Current git url usage is limited to <code>http</code> or <code>https</code>. Branch The branch in the Git repo to use. Defaults to <code>main</code>. Token (Optional) A personal access token for the <code>username</code> provided.  For more information on generating a personal access token see the corresponding links below. Username (Optional) The Git username that corresponds with the personal access token above. Note not required for GitHub, but is for GitLab. Secrets Group (Optional) Grouping containing a HTTP token and/or HTTP username as needed to access the repository. Provides Resource type(s) provided by this Git repo. <ul> <li>GitHub Personal Access Token</li> <li>GitLab Personal Access Token</li> <li>Bitbucket Personal Access Token</li> </ul> <p>Warning</p> <p>Beginning in Nautobot 1.2, there are two ways to define a <code>token</code> and/or <code>username</code> for a Git repository -- either by directly configuring them into the repository definition, or by associating the repository with a secrets group record (this latter approach is new in Nautobot 1.2). The direct-configuration approach should be considered as deprecated, as it is less secure and poses a number of maintainability issues. If at all possible, you should use a secrets group instead. The direct-configuration approach may be removed altogether as an option in a future release of Nautobot.</p>"},{"location":"user-guides/git-data-source.html#using-git-data-sources","title":"Using Git Data Sources","text":"<p>This section will focus on examples and use the <code>user-guide</code> branch on the <code>demo-git-datasources</code> repo: <code>https://github.com/nautobot/demo-git-datasource/tree/user-guide</code>.</p>"},{"location":"user-guides/git-data-source.html#export-templates","title":"Export Templates","text":"<p>Export Templates allow a user to export Nautobot objects based on a custom template.  Export templates can change over time depending on the needs of a user.  Allowing export templates to reference a Git repo makes managing templates easier.</p> <p>A template can be used to put objects into a specific format for ingestion into another system, tool, or report.  It is possible that different templates are needed depending on specific users or teams.  This can lead to sprawl of export templates.  To keep accurate templates synced with Nautobot the Git Data Sources extensibility feature can be used.</p>"},{"location":"user-guides/git-data-source.html#add-a-repository","title":"Add a Repository","text":"<p>Navigate to the Data Sources Git integration. Extensibility -&gt; Git Repositories.</p> <p></p> <p>Click [+] or [Add]</p> <p>That loads a default page to add a repository.</p> <p></p> <p>Note</p> <p>By default only config contexts, export templates, and jobs are available resource types.  Others may be added when specific plugins are used.</p>"},{"location":"user-guides/git-data-source.html#fill-out-repository-details","title":"Fill out Repository Details","text":"<p>Fill out the details for the Git repository. More information on the inputs can be found in the fields section.</p> <p></p> <p>As soon as you click on Create &amp; Sync, Nautobot will clone and sync the repository and provide status of the job.</p> <p>Note</p> <p>If you are using a self-signed Git repository, the Server Administrator will need to ensure the <code>GIT_SSL_NO_VERIFY</code> environment variable is set to permit this.</p> <p> </p> <p>The repository will now be displayed on the main Git Repository page.</p> <p></p> <p>Once the repository is synced each template will now be available in the Export Templates section.  Extensibility -&gt; Export Templates.</p> <p></p> <p>Note</p> <p>If the templates don't populate, make sure the Git directory is named <code>export_templates</code> and the sub-directory and sub-sub-directory names correctly match the Nautobot <code>content type</code>.</p> <p>Example below:</p> <pre><code>\u25b6 tree export_templates\nexport_templates\n\u2514\u2500\u2500 dcim\n    \u2514\u2500\u2500 device\n        \u251c\u2500\u2500 markdown_export.md\n        \u251c\u2500\u2500 text_export.txt\n        \u2514\u2500\u2500 yaml_export.yml\n\n2 directories, 3 files\n</code></pre>"},{"location":"user-guides/git-data-source.html#modifying-a-file-and-sync-changes","title":"Modifying a File and Sync Changes","text":"<p>Now that the export templates have been loaded into Nautobot they can be utilized as normal.  For example navigate to Devices -&gt; Devices and click on Export in the top right corner, the dropdown will now include the templates loaded from the Git repository.</p> <p>The power of having export templates utilizing the Git integration comes with the native source control features that Git comes with.  To illustrate a simple Git sync within Nautobot assume the following template needs to be updated.</p> <p>Filename: <code>/export_templates/dcim/device/yaml_export.yml</code></p> <p>Current contents:</p> <pre><code>---\n{% for device in queryset %}\n{% if device.status %}\n- {{ device.name }}:\n{% endif %}\n{% endfor %}\n...\n</code></pre> <p>The template needs to be modified to provide more information than just a list of hostnames.  The site needs to be added.</p> <p>The updated template is now:</p> <pre><code>---\n{% for device in queryset %}\n{% if device.status %}\n- {{ device.name }}:\n  site: {{ device.site }}\n{% endif %}\n{% endfor %}\n...\n</code></pre> <p>Once the contributor updates the Git repository via normal Git processes and it is reviewed and merged into the branch that was used, a sync process from Nautobot needs to be completed.  This can be done from the default Git view, or within a specific detailed view of a Git repository.</p> <p>From the default Git repositories view: </p> <p>From the detailed view: </p> <p>Tip</p> <p>Once the repository has been synced it's easy to check the history for the templates. Navigate to Git Repositories and select the repository in question.  Once you're in the detailed view you can look through the Synchronization Status or Change Log tabs.</p> <p>Now that the Git repository is linked for export templates it can be controlled via the normal Git operations workflow, which allows users or groups of users to perform code reviews using Pull Requests etc.</p>"},{"location":"user-guides/git-data-source.html#jobs","title":"Jobs","text":"<p>Jobs are a way for users to execute custom logic on demand from within the Nautobot UI. Jobs can interact directly with Nautobot data to accomplish various data creation, modification, and validation tasks.</p> <p>For technical details on jobs, please see the documentation on jobs.</p> <p>Jobs allow a user to write scripts in Python.  By integrating the scripts with Git, a user can utilize Git workflows to manage source control, versioning, and pipelines.</p> <p>Setting up the repository can be done following the same steps from Export Templates.  The only differences is the <code>provides</code> selection changes to <code>jobs</code>.</p> <p>Jobs need to be defined in <code>/jobs/</code> directory at the root of a Git repository.</p> <p>An example tree for <code>/jobs/</code>.</p> <pre><code>\u25b6 tree jobs\njobs\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 get-device-connection.py\n\n1 directory, 2 files\n</code></pre> <p>Note</p> <p>As shown in the above example, the <code>/jobs/</code> directory must contain a file called <code>__init__.py</code>. This may be an empty file, but it must exist.</p> <p>Once the repository is created in Nautobot. </p> <p>Tip</p> <p>The same repository and branch can be used for the different <code>provides</code> methods.  Nautobot Git as a data source will look for specific root directory names.</p> <p>Once the scripts have been pushed into the repository, a sync needs to be executed, after which navigating to Jobs via Jobs -&gt; Jobs will show the new jobs loaded from the Git repository.</p> <p></p> <p>Jobs now shows the job from the Git repository.</p> <p></p> <p>At this point all changes, and history can be kept using Git.  A simple <code>sync</code> operation can be done from Nautobot to pulldown any changes.</p>"},{"location":"user-guides/git-data-source.html#config-contexts","title":"Config Contexts","text":"<p>Detailed information on config contexts in Git Repositories.</p> <p>Config contexts may be provided as JSON or YAML files located in the <code>/config_contexts/</code> folder, which must be in the root of the Git repository.</p> <p>Config contexts can be used to provide additional details to different automation tooling.  For example Ansible variables, or any other data that you can't natively store in Nautobot.  It can also be used in the Golden Configuration Nautobot plugin to provide extra details to generate configuration templates.</p> <p>A few simple examples of Configuration Context data might be:</p> <ul> <li>DNS Servers</li> <li>NTP Servers</li> <li>ACL Data</li> <li>Routing Information such as BGP ASNs etc.</li> </ul> <p>Similar to the other data sources, the repository can be added by navigating to Extensibility -&gt; Git repositories. Click on Add, and fill out the repository details.</p> <p></p> <p>Once the repository syncs the details can be found in the Synchronization Status tab.  For example, the platform specifics were synced:</p> <p></p> <p>The repository structure is:</p> <pre><code>\u25b6 tree config_contexts\nconfig_contexts\n\u251c\u2500\u2500 devices\n\u2502   \u251c\u2500\u2500 site-a-bb-01.yml\n\u2502   \u251c\u2500\u2500 site-a-rtr-01.yml\n\u2502   \u251c\u2500\u2500 site-a-rtr-02.yml\n\u2502   \u251c\u2500\u2500 site-a-spine-01.yml\n\u2502   \u251c\u2500\u2500 site-a-spine-02.yml\n\u2502   \u251c\u2500\u2500 site-b-bb-01.yml\n\u2502   \u251c\u2500\u2500 site-b-leaf-01.yml\n\u2502   \u251c\u2500\u2500 site-b-leaf-02.yml\n\u2502   \u251c\u2500\u2500 site-b-rtr-01.yml\n\u2502   \u251c\u2500\u2500 site-b-rtr-02.yml\n\u2502   \u251c\u2500\u2500 site-b-spine-01.yml\n\u2502   \u2514\u2500\u2500 site-b-spine-02.yml\n\u251c\u2500\u2500 platform_eos.yml\n\u251c\u2500\u2500 platform_junos.yml\n\u251c\u2500\u2500 platform_nxos.yml\n\u2514\u2500\u2500 role_spine.yml\n\n1 directory, 16 files\n</code></pre> <p>Configuration Context details:</p> <ul> <li>Follows an inheritance methodology similar to what Ansible implements.  Global contexts can be overwritten by local contexts at both a group level, as well as at a device specific level.</li> <li>Nautobot UI provides a simple view to see merged config contexts.  It can be visualized by navigating to a device and clicking on the config contexts tab.</li> </ul> <p>Here's an example, with some of the details omitted for brevity.</p> <p></p> <p>There is a huge benefit to having <code>config contexts</code> managed by a Git workflow.  This type of data can be modified often, especially platform specifics, or new device roles.  Utilizing a standard Git workflow allows for all the proper reviews and approvals to be accomplished before accepting the changes into Nautobot for use.</p>"},{"location":"user-guides/git-data-source.html#config-context-schemas","title":"Config Context Schemas","text":"<p>Detailed information on config context schemas in Git Repositories.</p> <p>Config context schemas are used to enforce data validation on config contexts. These schema are managed via the config context schema model and are optionally linked to config context instances, in addition to devices and virtual machines for the purpose of validating their local context data.</p> <pre><code>\u25b6 tree config_contexts\nconfig_context_schemas\n\u251c\u2500\u2500 schema_1.yaml\n\u251c\u2500\u2500 schema_2.json\n</code></pre>"},{"location":"user-guides/git-data-source.html#additional-git-data-sources","title":"Additional Git Data Sources","text":"<p>As seen in Fill out Repository Details, the standard installation of Nautobot will come natively with export templates, jobs, and config contexts.  Additional data sources can be incorporated using the Nautobot plugin system.  For example, the nautobot-plugin-golden-config plugin implements four additional data sources.</p> <ul> <li>Config Contexts</li> <li>Backup Configs</li> <li>Intended Configs</li> <li>Jinja Templates</li> </ul> <p>For more information for the Golden Configuration specific data sources, navigate to Nautobot Golden Config Repo.</p>"},{"location":"user-guides/git-data-source.html#common-issues-and-troubleshooting","title":"Common Issues and Troubleshooting","text":"<ol> <li>Repository is linked, but data is not properly loaded into Nautobot.<ul> <li>Validate the root directory is set to the proper name.</li> <li>Export Templates -&gt; <code>export_templates</code>.</li> <li>Jobs -&gt; <code>jobs</code>.</li> <li>Config Contexts -&gt; <code>config_contexts</code>.</li> </ul> </li> <li>Synchronization Status Failures.<ul> <li>Validate branch is correct and exists in the remote repository. </li> <li>Validate the remote url is correct and is the <code>http(s)</code> url.  <code>ssh</code> urls are not currently supported. </li> </ul> </li> <li> <p>Authentication Issues.</p> <ul> <li>Check repository permissions.</li> <li>Ensure the password is the Personal Access Token (PAT) for the username supplied.</li> <li>Ensure the PAT permissions are setup properly.</li> <li>At a minimum the <code>repo</code> option should be checked or access.</li> </ul> <p></p> </li> </ol>"},{"location":"user-guides/graphql.html","title":"GraphQL User Guide","text":""},{"location":"user-guides/graphql.html#introduction","title":"Introduction","text":""},{"location":"user-guides/graphql.html#what-is-graphql","title":"What is GraphQL?","text":"<p>GraphQL is a query language for your APIs and a runtime for fulfilling those queries with your existing data.</p>"},{"location":"user-guides/graphql.html#how-graphql-simplifies-api-interactions","title":"How GraphQL simplifies API Interactions","text":"<p>When interacting with APIs, It's often necessary to build relationships between multiple models to achieve the result that is desired. Doing this typically requires multiple API calls to create the relationships. For example, lets assume that there are two devices in Nautobot. Each are assigned a site, region, roles, interfaces, and IP Addresses.</p> <p>Simply querying the <code>/api/dcim/devices/</code> API route provides:</p> View API Results <pre><code>{\n\"count\": 2,\n\"next\": \"https://demo.nautobot.com/api/dcim/devices/?limit=1&amp;offset=2\",\n\"previous\": \"https://demo.nautobot.com/api/dcim/devices/?limit=1\",\n\"results\": [\n{\n\"id\": \"c8886c88-6eff-4c4f-a079-4ef16b53d4f6\",\n\"url\": \"https://demo.nautobot.com/api/dcim/devices/c8886c88-6eff-4c4f-a079-4ef16b53d4f6/\",\n\"name\": \"ams-edge-02\",\n\"display\": \"ams-edge-02\",\n\"device_type\": {\n\"id\": \"244ea351-3c7a-4d23-ba80-5db6b65312cc\",\n\"url\": \"https://demo.nautobot.com/api/dcim/device-types/244ea351-3c7a-4d23-ba80-5db6b65312cc/\",\n\"manufacturer\": {\n\"id\": \"687f53d9-2c51-40fd-83aa-875e43d01a05\",\n\"url\": \"https://demo.nautobot.com/api/dcim/manufacturers/687f53d9-2c51-40fd-83aa-875e43d01a05/\",\n\"name\": \"Arista\",\n\"slug\": \"arista\"\n},\n\"model\": \"DCS-7280CR2-60\",\n\"slug\": \"dcs-7280cr2-60\",\n\"display\": \"Arista DCS-7280CR2-60\"\n},\n\"device_role\": {\n\"id\": \"a3637471-6b4d-4f5a-a249-838d621abe60\",\n\"url\": \"https://demo.nautobot.com/api/dcim/device-roles/a3637471-6b4d-4f5a-a249-838d621abe60/\",\n\"name\": \"edge\",\n\"slug\": \"edge\"\n},\n\"tenant\": null,\n\"platform\": null,\n\"serial\": \"\",\n\"asset_tag\": null,\n\"site\": {\n\"id\": \"4ad439e9-4f1b-41c9-bc8c-dd7c1c921dc3\",\n\"url\": \"https://demo.nautobot.com/api/dcim/sites/4ad439e9-4f1b-41c9-bc8c-dd7c1c921dc3/\",\n\"name\": \"ams\",\n\"slug\": \"ams\"\n},\n\"rack\": {\n\"id\": \"bff3f7af-bd77-49b6-a57a-9c4b8fc7673a\",\n\"url\": \"https://demo.nautobot.com/api/dcim/racks/bff3f7af-bd77-49b6-a57a-9c4b8fc7673a/\",\n\"name\": \"ams-102\",\n\"display\": \"ams-102\"\n},\n\"position\": 40,\n\"face\": {\n\"value\": \"front\",\n\"label\": \"Front\"\n},\n\"parent_device\": null,\n\"status\": {\n\"value\": \"active\",\n\"label\": \"Active\"\n},\n\"primary_ip\": null,\n\"primary_ip4\": null,\n\"primary_ip6\": null,\n\"cluster\": null,\n\"virtual_chassis\": null,\n\"vc_position\": null,\n\"vc_priority\": null,\n\"comments\": \"\",\n\"local_context_data\": null,\n\"tags\": [],\n\"custom_fields\": {},\n\"config_context\": {},\n\"created\": \"2021-02-25\",\n\"last_updated\": \"2021-02-25T14:51:57.609598\"\n}\n]\n}\n</code></pre> <p> There is a lot of useful information in that API call, but there is also a lot of information that is missing; such as interfaces and ip addresses associated with the devices. There is also potentially a lot of information that isn't needed for the specific task. To retrieve the missing information, subsequent API calls would need to be performed; and those API results would need to be correlated to the correct device.</p> <p>GraphQL reduces the complexity of performing multiple API calls and correlating results by empowering the user to create their own query that provides the user exactly what they want and nothing that they don't, in a single API call.</p>"},{"location":"user-guides/graphql.html#exploring-graphql-in-nautobot","title":"Exploring GraphQL in Nautobot","text":"<p>In Nautobot, there is a link to the GraphQL web interface at the bottom right-hand side of the page. The GraphQL web interface is called GraphiQL. Navigating to the URI (<code>/graphql</code>), brings up the GraphiQL tool for creating queries. This interface is useful for exploring the possibilities of GraphQL and validating that written queries execute successfully.</p> <p></p>"},{"location":"user-guides/graphql.html#documentation-explorer","title":"Documentation Explorer","text":"<p>If you're new to GraphQL, take a little bit of time to explore the Documentation Explorer. This can be accomplished by clicking the <code>&lt; Docs</code> link in the GraphiQL interface. The information within Documentation Explorer is specific to creating queries in Nautobot.</p> <p></p> <p>In the Documentation Explorer, search for <code>devices</code>. The results are all of the models that utilize the <code>devices</code> model.</p> <p></p> <p>From the <code>devices</code> query, select <code>devices</code> from <code>Query.devices</code>. This will display all of the potential query fields from devices.</p> <p></p>"},{"location":"user-guides/graphql.html#first-query","title":"First Query","text":"<p>Now that you have a basic understanding of how to obtain information to query from the Documentation Explorer, let's craft a query. Earlier in the guide, a sample REST API call was performed to obtain device information. While the query had a lot of important information, it also lacked a lot of information. In this section, lets explore how to craft a GraphQL query that displays all of the information that we want.</p> <p>GraphQL queries are encapsulated in <code>query { }</code> flags (simply <code>{ }</code> is also acceptable). With that in mind, let's craft our query from the GraphiQL interface to inspect all devices and display their device names. To do this, let's execute:</p> <pre><code>query {\n  devices {\n    name\n  }\n}\n</code></pre> <p>This query will retrieve a list of all devices by their hostname.</p> View GraphQL Query Results <p> </p> <p> Now, let's modify the query to provide interface names for each device. We can do that by modifying the existing query to add <code>interfaces { name }</code> as a sub-query of <code>devices</code>. GraphiQL makes this process a bit easier, because it has syntax completion built in.</p> <p></p> <pre><code>query {\n  devices {\n    name\n    interfaces {\n      name\n    }\n  }\n}\n</code></pre> <p>The result is a list of all the devices by their hostname and associated interfaces by their names.</p> View GraphQL Query Results <p> </p> <p> We can continue iterating on the query until we get exactly what we want from the query. For example, if I wanted to iterate on the previous query to not only display the interfaces of the devices, but also display the interface description, the IP Addresses associated with the interface, and whether or not the interface was a dedicated management interface; I would structure the query like:</p> <pre><code>query {\n  devices {\n    name\n    interfaces {\n      name\n      description\n      mgmt_only\n      ip_addresses {\n        address\n      }   \n    }\n  }\n}\n</code></pre> <p>The results of the query look like:</p> View GraphQL Query Results <p> </p>"},{"location":"user-guides/graphql.html#filtering-queries","title":"Filtering Queries","text":"<p>These queries are great, but they are displaying the interface attributes and device names for every device in the Nautobot inventory. Nautobot allows users to filter queries at any level as desired to narrow the scope of the returned data. As an example, we can filter the queried devices by their site location. This is done by adding <code>(site: \"&lt;site name&gt;\")</code> after <code>devices</code>. For example: <code>query { devices(site: \"ams\") { name }}</code> will display all devices in the <code>ams</code> site.</p> <p>As an example. We can query devices by their site location. This is done by adding <code>(site: \"&lt;site name&gt;\")</code> after <code>devices</code>. For example: <code>query { devices(site: \"ams\") { name }}</code> will display all devices in the <code>ams</code> site.</p> View GraphQL Query Results <p> </p> <p> GraphQL also allows you to filter by multiple attributes at once if desired. You can use the Documentation Explorer to assist you in finding criteria attributes to filter on. In this example, I add the <code>role</code> attribute in addition to <code>site</code>.</p> <pre><code>query {\n  devices(site: \"ams\", role: \"edge\") {\n    name\n  }\n}\n</code></pre> View GraphQL Query Results <p> </p> <p> You can also filter at deeper levels of the query. On many to one relationships you can filter the results based on an attribute of the field. Any attribute that relates to a GraphQLType can be filtered.</p> <pre><code>query {\n  devices(site: \"ams\", role: \"edge\") {\n    name\n    interfaces(name: \"Ethernet1/1\") {\n      name\n    }\n  }\n}\n</code></pre> <pre><code>query {\n  sites(name: \"ams\") {\n    devices(role: \"edge\") {\n      name\n      interfaces(name: \"Ethernet1/1\") {\n        name\n      }\n    }\n  }\n}\n</code></pre> View GraphQL Query Results <p> </p> <p>Added in version 1.3.0</p> <p>You can also paginate the results returned to you when the data set gets larger. To do so, use the keywords \"limit\" and \"offset\". The \"limit\" keyword will limit the count of results returned after the \"offset\". If no \"offset\" is specified, then the default offset is zero.</p> <pre><code>query {\n  devices(site: \"ams01\", , limit: 1, offset: 1) {\n    name\n  }\n}\n</code></pre>"},{"location":"user-guides/graphql.html#using-the-graphql-api-in-nautobot","title":"Using the GraphQL API in Nautobot","text":"<p>Now that we've explored how to use the GraphiQL interface to help us create GraphQL queries, let's take our queries and call them with the REST API. This is where the real advantage is going to come in to play, because it will allow us to utilize these queries in a programmatic way.</p> <p></p> <p>From the Nautobot Swagger documentation, we can see that the API calls to <code>/api/graphql</code> require a HTTP POST method. In the HTTP POST, the <code>query</code> field is required, as it is where we specify the GraphQL query. The <code>variables</code> field is optional; it's where we can assign values to any variables included in the query, if we choose to do so.</p> <p>To simplify the process even more, we'll utilize the PyNautobot SDK.</p> <p>Here is an example Python script using the PyNautobot SDK to query GraphQL:</p> <pre><code>#!/usr/bin/env python3\nimport pynautobot\nimport json\nquery = \"\"\"\nquery {\n  devices {\n    name\n    interfaces {\n      name\n      description\n      mgmt_only\n      ip_addresses {\n        address\n      }\n    }\n  }\n}\n\"\"\"\nnb = pynautobot.api(\nurl=\"http://localhost\",\ntoken=\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n)\ngql = nb.graphql.query(query=query)\nprint(json.dumps(gql.json, indent=2))\n</code></pre> <p>The contents of the <code>query</code> variable was taken directly from the example above where we grabbed all device interfaces and associated attributes. We then take the output and print the contents as a JSON object. Now, let's iterate on the script to filter the contents with the <code>variable</code> flag. Just as we did above, we'll filter by <code>site</code>.</p> <pre><code>#!/usr/bin/env python3\nimport pynautobot\nimport json\nvariables = {\"site_name\": \"ams\"}\nquery = \"\"\"\nquery ($site_name: String!) {\n  devices (site: $site_name) {\n    name\n    interfaces {\n      name\n      mgmt_only\n      ip_addresses {\n        address\n      }\n    }\n  }\n}\n\"\"\"\nnb = pynautobot.api(\nurl=\"http://localhost\",\ntoken=\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n)\ngql = nb.graphql.query(query=query, variables=variables)\nprint(json.dumps(gql.json, indent=2))\n</code></pre> <p>In the updated script, we add the <code>variables = {\"site_name\": \"ams\"}</code> variable. We then update the query to let GraphQL know that we will be sending parameters to to filter by <code>site</code>. The updated output is still a JSON object. Instead of fetching all devices, we are filtering by devices in the <code>ams</code> site. The PyNautobot SDK has some excellent GraphQL examples. Be sure to check out the documentation.</p>"},{"location":"user-guides/graphql.html#saving-queries","title":"Saving Queries","text":"<p>Added in version 1.1.0</p> <p>Queries can now be stored inside of Nautobot, allowing the user to easily rerun previously defined queries.</p> <p>Inside of Extensibility -&gt; Data Management -&gt; GraphQL Queries, there are views to create and manage GraphQL queries.</p> <p>Saved queries can be executed from the detailed query view or via a REST API request. The queries can also be populated from the detailed query view into GraphiQL by using the \"Open in GraphiQL\" button. Additionally, in the GraphiQL UI, there is now a menu item, \"Queries\", which can be used to populate GraphiQL with any previously saved query.</p> <p>To execute a stored query via the REST API, a POST request can be sent to <code>/api/extras/graphql-queries/[slug]/run/</code>. Any GraphQL variables required by the query can be passed in as JSON data within the request body.</p>"},{"location":"user-guides/graphql.html#closing","title":"Closing","text":"<p>GraphQL is a powerful, yet simple, tool for querying the exact information that is necessary for the task at hand. For further information about GraphQL, be sure to check out the GraphQL Docs!</p>"},{"location":"user-guides/relationships.html","title":"Relationships","text":"<p>Relationships are defined between one (or more) objects in your source of truth to reflect business logic or other relationships that may be useful to you but that haven't been defined. Relationships define specific links between objects that might be specific to your network or data.</p> <p>For more technical details on how to use this feature, please see the documentation on Relationships.</p>"},{"location":"user-guides/relationships.html#relationship-details","title":"Relationship details","text":"<p>This table defines repository parameters that are required to establish a relationship.</p> Field Explanation Name Name of the relationship as displayed to users. Slug Internal name of this relationship. Please use underscores rather than dashes. Description (Optional) Meaningful description to provide additional relationship details. Type Cardinality of this relationship. Source type The source object type to which this relationship applies. Source Label (Optional) Label for related destination objects, as displayed on the source object. Source filter (Optional) Filterset filter matching the applicable source objects of the selected type. Destination type The destination object type to which this relationship applies. Destination Label (Optional) Label for related destination objects, as displayed on the destination object. Destination filter (Optional) Filterset filter matching the applicable destination objects of the selected type. <p>As seen in the table above relationships offers many additional optional options for more advanced functionality, those options will be discussed further during this user guide.</p>"},{"location":"user-guides/relationships.html#using-a-relationship","title":"Using a Relationship","text":"<p>This section will focus on examples relationships.</p>"},{"location":"user-guides/relationships.html#adding-a-relationship","title":"Adding a Relationship","text":"<p>To create a relationship, navigate to Extensibility &gt; Data Management &gt; Relationships</p> <p>A simple relationship between <code>Device to Vlan</code> which is a <code>many-to-many</code> relationship. This relationship is <code>many-to-many</code> because more than one Devices can be assigned more than one Vlans. This relationship object is shown below.</p> <p></p>"},{"location":"user-guides/relationships.html#extensibility-of-a-relationship","title":"Extensibility of a Relationship","text":"<p>Now that this relationship is created we can navigate over to a Device detail view and we see <code>VLANs</code> is now listed under the <code>Relationships</code> section.</p> <p></p> <p>What if your business requirements or terminology differs from what you want? For example lets say you want <code>VLANs</code> to be called <code>VIDs</code>, you can simply update the relationship <code>source label</code> field based on your needs.</p> <p>You can see now the relationship name is <code>VIDs</code> instead of <code>VLANs</code>.</p> <p></p> <p>Info</p> <p>In a similar fashion the destination label can be changed to meet business requirements.</p> <p>Business requirements are one concept to take into account when making <code>labels</code>, but making the relationship data more meaningful is an option worth exploring.</p> <p>In the snippet below the source label was updated to <code>Configured VLANs</code>. The result on the device detail view is evident and provides additional context that is otherwise missing. <code>VLANs: 3 Vlans</code> doesn't give the same context as <code>Configured VLANs: 3 Vlans</code>.</p> <p></p> <p>In a similar fashion the destination label can make it move evident that these VLANs are in use on the devices. A destination label <code>In use on devices: 3 devices</code> is far superior to the default of <code>Devices: 3 devices</code>. Providing these labels makes it easier for users of the system to understand the relationships, especially if they weren't the initial implementor of the relationship.</p> <p></p> <p>Next, some of the visibility options will be discussed. The first option to be demonstrated is the ability to <code>Move to Advanced tab</code>. In some cases a particular relationship may not be relevant to the typical user (maybe it's used exclusively in automation) and so you may want the relationship data to be displayed on the <code>Advanced</code> tab instead of within the default detail view of the object.</p> <p>First the option needs to be enabled. </p> <p>Once the option is enabled you will see the relationship is now moved to the <code>Advanced</code> tab.</p> <p></p> <p>Another visibility option is the <code>Hide on Source Object</code> and <code>Hide on Destination Object</code>, these do exactly what you'd expect. If enabled (via checkbox) the relationship will not be displayed on the object under the <code>Relationships</code> section.</p> <p>Info</p> <p>If the <code>Move to Advanced tab</code> and the <code>Hide on Object</code> are both enabled, the <code>Hide on Object</code> takes precedence and the relationship is not shown on the advanced tab.</p> <p>The two options above add flexibility to how the data is visualized within the Nautobot UI, the final option to enhance the relationship feature is the ability to match source or destination objects by providing a filterset.</p> <p>To continue on this example say we want to limit the relationship on the device to be able to only relate VLANs that have specific attributes. Perhaps only VLANs with the role of server and ID of 1000.</p> <p>The filterset below can be used to accomplish this.</p> <p></p> <p>Once this has been applied you can navigate to the Device and attempt to add the relationship. As seen in the screenshot below only <code>VLANs</code> matching the filterset are shown and available to be related.</p> <p></p> <p>As detailed in the extras documentation the API can be used to determine what can be filtered on. Below is a quick example of how to do that.</p>"},{"location":"user-guides/relationships.html#constructing-a-relationship-filter","title":"Constructing a Relationship Filter","text":"<p>The first step is to navigate to the API documentation. This can be done by going to a browser and navigating to <code>https://&lt;server-name&gt;/api/docs</code>.</p> <p>This will load the Swagger documentation, the next step would be to navigate to the endpoint you're trying to filter.</p> <p>Info</p> <p>The easiest way to navigate the Swagger documentation for the necessary endpoint is to search using the content-type defined in your relationship object.</p> <p>In this example the <code>Destination type</code> chosen was <code>ipam | VLAN</code>. We can use that to search in the Swagger docs for <code>ipam/vlans</code>.</p> <p></p> <p>As seen above this endpoint supports all the methods, but if we dig into the <code>GET</code> method we will see the parameters that are available.</p> <p></p> <p>Warn</p> <p>The screenshot above is only a subset of the available filters.</p> <p>Info</p> <p>A great way to test a filterset before applying it to a relationship would be to use the <code>try it out</code> feature from within the API docs page.</p>"},{"location":"user-guides/relationships.html#additional-examples","title":"Additional Examples","text":"<p>Many relationship examples are available on the public sandbox</p> <p>These cover many of the different <code>Types</code> of relationships available in Nautobot.</p>"},{"location":"user-guides/s3-django-storage.html","title":"AWS S3 using Django-Storage Backend","text":"<p>The backend storage engine is used for Nautobot to handle uploaded files (e.g. image attachments), as well as static files (e.g. css, js). Nautobot supports integration with the django-storages package, which provides backends for several popular file storage services. If not configured, local filesystem storage will be used; however this user-guide will demonstrate how to use AWS S3 buckets to store these files.</p>"},{"location":"user-guides/s3-django-storage.html#installation","title":"Installation","text":"<p>Nautobot can use <code>django-storages</code> to publish files to S3 -- see the installation docs for more information on installing this optional dependency.</p> <p>TLDR:</p> <pre><code>$ echo \"nautobot[remote_storage]\" &gt;&gt; $NAUTOBOT_ROOT/local_requirements.txt\n$ pip3 install \"nautobot[remote_storage]\"\n</code></pre>"},{"location":"user-guides/s3-django-storage.html#bucket-creation-terraform","title":"Bucket Creation Terraform","text":"<p>The AWS S3 bucket will be hosting Nautobot static files and needs some specific configuration to allow anonymous HTTP access.  The following is an example of Terraform configuration to create the S3 bucket appropriately, the same values can be configured manually:</p> <pre><code>resource \"aws_s3_bucket\" \"nautobot_static_files\" {\nbucket        = \"my-bucket-name\"\nacl           = \"public-read\"\ncors_rule {\nallowed_headers = [\"*\"]\nallowed_methods = [\"GET\"]\nallowed_origins = [\"http*\"]\n}\ncors_rule {\nallowed_methods = [\"GET\", \"HEAD\"]\nallowed_origins = [\"*\"]\n}\ntags = {\nName = \"Nautobot Static Files\"\n}\n}\n</code></pre>"},{"location":"user-guides/s3-django-storage.html#configuration","title":"Configuration","text":"<p>The <code>django-storages</code> library is quite powerful, please refer to their documentation for a more detailed explanation of the individual settings or for more information.</p> <p>In <code>nautobot_config.py</code> define the following configuration:</p> <pre><code>STORAGE_BACKEND = \"storages.backends.s3boto3.S3Boto3Storage\"\nSTORAGE_CONFIG = {\n\"AWS_ACCESS_KEY_ID\": \"...\",\n\"AWS_SECRET_ACCESS_KEY\": \"...\",\n\"AWS_STORAGE_BUCKET_NAME\": \"my-bucket-name\",\n\"AWS_S3_REGION_NAME\": \"us-west-1\",\n\"AWS_DEFAULT_ACL\": \"public-read\",\n\"AWS_QUERYSTRING_AUTH\": False,\n\"AWS_LOCATION\": \"subfolder/name/static/\"\n}\nSTATICFILES_STORAGE = STORAGE_BACKEND\n</code></pre> <p>If <code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code> are not set, <code>boto3</code> internally looks up IAM credentials.  Using an IAM Role for EC2 is highly recommended.</p> <p>The <code>STORAGE_CONFIG</code> has some valuable pieces of information.</p> <ul> <li>Access Key and Secret Key are for authentication and authorization of the S3 bucket.</li> <li>Storage bucket name is the S3 bucket name, within the bucket provided the aws location will be used to build the parent directory structure.<ul> <li>In the example above the static files will be stored in <code>f\"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/{AWS_LOCATION}\"</code></li> </ul> </li> <li>Finally, region is where the s3 bucket resides.</li> </ul> <p>Info</p> <p>The remaining options are not required, but django-storages documentation should be reviewed to understand the security requirements.</p> <p>By using the the settings listed above, the static files will be stored in the S3 bucket instead of on the Nautobot server's filesystem. Once the <code>nautobot-server collectstatic</code> is executed you will see the files.</p> <p>Here's a snippet from the S3 bucket in use. </p> <p>Now when an image is added to one of the core supported models like the <code>dcim.device-type</code>, a new directory will be created in the S3 bucket based on the <code>upload_to</code> attribute from the originating model. As an example we now see a new directory called <code>devicetype-images/</code>.</p> <p></p> <p>The directory is defined in the <code>Devicetype</code> model on the front/rear images attributes. Source code snippet below:</p> <pre><code>front_image = models.ImageField(upload_to=\"devicetype-images\", blank=True)\nrear_image = models.ImageField(upload_to=\"devicetype-images\", blank=True)\n</code></pre> <p>At a high level this takes care of everything you'd need for standard Nautobot deployment, but what if you're creating a plugin and you have a requirement for the data to be stored in an additional directory?</p> <p>This is where using the generic <code>FileField</code> provided by Django comes into play. For example, lets say a new plugin is being developed and storing the software images is one of the key requirements. The model might look something like the snippet below:</p> <pre><code>class SoftwareFileAttachment(BaseModel):\n\"\"\"An uploaded software bin file for OS upgrades.\"\"\"\nfile = models.FileField(upload_to=\"uploads/\")\nname = models.CharField(max_length=50, blank=True)\ncreated = models.DateTimeField(auto_now_add=True)\ndef __str__(self):\n\"\"\"String value for HTML rendering.\"\"\"\nreturn f\"{self.file}\"\n</code></pre> <p>The <code>models.FileField</code> alongside the <code>upload_to</code> argument can be used to store user uploaded files into the already established S3 bucket. With the configuration settings provided earlier in this article and the <code>upload_to=uploads/</code> attribute the software attachments will be stored at <code>f\"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/{AWS_LOCATION}/uploads/\"</code>.</p> <p>The nice thing about using <code>django-storages</code> is the ease of use and the ability to easily extend storage backends. One use case for extending storage backends that has been used is to store certain plugin data attachments in its own S3 bucket with different permissions. If we take this concept to the example of <code>SoftwareFileAttachment</code> we can put the software images in their own S3 bucket by creating a custom storage backend that we can pass to our <code>models.FileField</code> model field.</p> <p>For this example I created a simple python file called <code>customer_storage.py</code> in the root of my plugin.</p> <pre><code>\"\"\"Example of a custom extension to support flexible s3 storage.\"\"\"\nfrom storages.backends.s3boto3 import S3Boto3Storage\nclass MediaStorage(S3Boto3Storage):\nbucket_name = 'nautobot-sw-media'\nlocation = \"software_images\" # store files under directory `software_images/` in bucket `nautobot-sw-media`\n</code></pre> <p>In the model you just need to pass in the <code>storage=</code> argument.</p> <pre><code>from custom_config_plugin.custom_storage import MediaStorage\nclass SoftwareFileAttachment(BaseModel):\n\"\"\"An uploaded software bin file for OS upgrades.\"\"\"\nfile = models.FileField(upload_to=\"uploads/\", storage=MediaStorage)\nname = models.CharField(max_length=50, blank=True)\ncreated = models.DateTimeField(auto_now_add=True)\ndef __str__(self):\n\"\"\"String value for HTML rendering.\"\"\"\nreturn f\"{self.file}\"\n</code></pre> <p>When a user uploads a new software image to this model it will be stored in <code>&lt;AWS S3 URL&gt;/software_images/uploads/&lt;file&gt;.bin</code>.</p> <p>This is valuable because you may have certain models in a plugin or other enhancements that need to have more specific granularity in the S3 bucket they belong in, also it may be crucial to have different S3 IAM requirements for certain files over the general static files the Nautobot application needs to run appropriately.</p>"},{"location":"user-guides/s3-django-storage.html#summary","title":"Summary","text":"<p>Django-Storages is the backend library used to extend Nautobots backend storage flexibility. The same concepts above can be used for Azure Storage, Dropbox, GCP etc. As all of these have native support within the <code>django-storages</code> library.</p>"},{"location":"user-guides/getting-started/index.html","title":"Introduction and Scope","text":"<p>The audience for this user guide is users new to Nautobot. This guide will demonstrate how to use and perform common operations in Nautobot's Web UI.</p> <p>It is intended to assist the user with:</p> <ul> <li>Understanding the prerequisites for adding a new Device</li> <li>Creating the necessary prerequisite objects to add a new Device</li> <li>Adding new Devices</li> <li>Adding and understanding Regions</li> <li>Adding and understanding Platforms</li> <li>Adding and understanding Tenants and Tenant Groups</li> <li>Adding Interfaces to a Device</li> <li>Adding VLANs and understanding VLAN Groups</li> <li>Understanding IP Address Management (IPAM) in Nautobot</li> <li>How to navigate to the object you are interested in</li> <li>How to use the Search Bar to find the object you are interested in</li> </ul> <p>This guide does not cover every possible operation in Nautobot's Web UI. However, after reading this guide and working through the included exercises, the user should have a good feel for:</p> <ul> <li>Performing basic tasks</li> <li>How to navigate to a specific object and its related objects</li> <li>The Web UI's general structure and organization</li> <li>Extrapolating to use the Web UI for almost any task</li> </ul>"},{"location":"user-guides/getting-started/index.html#requirements","title":"Requirements","text":"<ol> <li>A functional Nautobot installation</li> </ol>"},{"location":"user-guides/getting-started/creating-devices.html","title":"Creating Devices in Nautobot","text":"<p>Every piece of hardware which is installed within a site or rack exists in Nautobot as a device.</p> <p>More information on Devices can be found in the Devices section of the Nautobot documentation.</p> <p>A network Device in Nautobot has a few required attributes:</p> <ul> <li>A Device Role</li> <li>A Device Type<ul> <li>A Device Type requires a Manufacturer</li> </ul> </li> <li>A Site</li> </ul> <p>Looking at the list above, there are four objects in Nautobot that must be present prior to creating a related Device. The following sections will guide you through how to create each object type.</p>"},{"location":"user-guides/getting-started/creating-devices.html#creating-a-device-role","title":"Creating a Device Role","text":"<p>Devices can be organized by functional roles, which are fully customizable by the user.</p> <p>More information on Device Roles can be found in the Device Roles section of the Nautobot documentation.</p> <p>To create a new Device, you will need an existing Device Role or need to create a new Device Role instance.</p> <p>Note</p> <p>You might create roles for core switches, distribution switches, and access switches within your network.</p> <p>To create a new Device Role:</p> <ol> <li>Click on Devices in the top navigation menu</li> <li>Find Device Roles on the drop-down menu</li> <li>Select <code>+</code></li> <li>In the <code>Add a new device role</code> form, populate the <code>Name</code><ul> <li>The <code>Slug</code> will auto-populate based on the <code>Name</code> field, but can be manually overwritten</li> </ul> </li> <li>Click on Create</li> </ol> <p>Note</p> <p>A <code>slug</code> is a short label for something, containing only letters, numbers, underscores or hyphens. They\u2019re generally used within URLs. For example: <code>/dcim/device-roles/customer-edge/</code></p> <p></p>"},{"location":"user-guides/getting-started/creating-devices.html#creating-a-manufacturer","title":"Creating a Manufacturer","text":"<p>A Manufacturer represents the \"make\" of a device; e.g. Cisco or Dell. Each device type must be assigned to a manufacturer.</p> <p>More information on Manufacturers is in the Manufacturers section of the Nautobot documentation.</p> <p>To create a new Device Type, you will need an existing Manufacturer or need to create a new Manufacturer instance.</p> <p>To create a new Manufacturer:</p> <ol> <li>Click on Devices in the top navigation menu</li> <li>Find Manufacturers on the drop-down</li> <li>Select +</li> <li>In the <code>Add a new manufacturer</code> form, populate the <code>Name</code><ul> <li>The <code>Slug</code> will auto-populate based on the entered <code>Name</code>, but can be manually overwritten</li> </ul> </li> <li>Click on <code>Create</code></li> </ol> <p></p>"},{"location":"user-guides/getting-started/creating-devices.html#creating-a-device-type","title":"Creating a Device Type","text":"<p>A device type represents a particular make and model of hardware that exists in the real world. Device types define the physical attributes of a device (rack height and depth) and its individual components (console, power, network interfaces, and so on).</p> <p>More information on Device Types is in the Device Types section of the Nautobot documentation.</p> <p>To create a new Device, you will need an existing Device Type or need to create a new Device Type instance.</p> <p>To create a new Device Type:</p> <ol> <li>Click on Devices in the top navigation menu</li> <li>Find Device Types</li> <li>Select + to go to the <code>Add a new device type</code> form</li> <li>Select the <code>Manufacturer</code> from the drop-down selector</li> <li>Populate the <code>Model</code> (name)</li> <li>Click on <code>Create</code></li> </ol> <p></p>"},{"location":"user-guides/getting-started/creating-devices.html#creating-a-site","title":"Creating a Site","text":"<p>How you choose to employ sites when modeling your network may vary depending on the nature of your organization, but generally a site will equate to a building or campus. For example, a chain of banks might create a site to represent each of its branches, a site for its corporate headquarters, and two additional sites for its presence in two co-location facilities.</p> <p>More information on Sites is found in the Sites section of the Nautobot documentation.</p> <p>To create a new Device, you will need an existing Site or need to create a new Site instance.</p> <p>To create a new Site:</p> <ol> <li>Click on Organization in the top navigation menu</li> <li>Find Sites</li> <li>Select + to go to the <code>Add a new site</code> form</li> <li>Populate the Site's <code>Name</code><ul> <li>The <code>Slug</code> will auto-populate based on the <code>Name</code> field, but can be manually overwritten</li> </ul> </li> <li>Set the <code>Status</code> to <code>Active</code> in the drop-down selector</li> <li>Click on <code>Create</code> at the bottom of the form (not shown)</li> </ol> <p></p>"},{"location":"user-guides/getting-started/creating-devices.html#creating-a-device","title":"Creating a Device","text":"<p>To create a new Device:</p> <ol> <li>Click on Devices in the top navigation menu</li> <li>Find Devices</li> <li>Select + to go to the <code>Add a new device</code> form</li> <li>Populate the <code>Name</code></li> <li>Select the <code>Device Role</code> from the drop-down selector</li> <li>Select the <code>Device Type</code> from the down-down selector</li> <li>Select the <code>Site</code> from the drop-down selector</li> <li>Set the <code>Status</code> to the appropriate value in the drop-down selector</li> <li>Click on <code>Create</code> at the bottom of the form (not shown)</li> </ol> <p></p>"},{"location":"user-guides/getting-started/interfaces.html","title":"Interfaces","text":"<p>Interfaces in Nautobot represent network interfaces used to exchange data with connected devices.</p> <p>More information on Interfaces is in the Interfaces section of the Nautobot documentation.</p> <p>Interfaces can be added at the Device or the Device Type level:</p> <ul> <li>Interfaces added to an individual Device are for that Device only</li> <li>Interfaces added to the Device Type will be applied to all NEW implementations of that Device Type (not existing implementations)</li> </ul> <p>Which one you select depends on your use case; in some instances you will need to use both, as in the example below.</p>"},{"location":"user-guides/getting-started/interfaces.html#interface-add-example","title":"Interface Add Example","text":"<p>Let\u2019s take an example:</p> <ul> <li>We want to define a Device Type of <code>MX240-edge</code></li> <li>This Device Type will have 20x 10G (<code>xe-[0-1]/0/[0-9]</code>) Interfaces and one LAG (<code>ae0</code>) Interface</li> <li>The <code>xe-0/0/9</code> and <code>xe-1/0/9</code> Interfaces will be members of the <code>ae0</code> Interface</li> </ul>"},{"location":"user-guides/getting-started/interfaces.html#creating-a-device-type","title":"Creating a Device Type","text":"<p>We are going to use the Device Type to achieve part of this goal. Using the Device Type will also provide repeatability because the Device Type object also serves as a template. This templating feature is demonstrated in this example.</p> <p>Device Types can serve as templates for Devices, and as such the two are very similar. Here is a screenshot of a Device Type:</p> <p></p> <p>Creating a Device Type is very similar to creating a Device.</p> <p>To create a Device Type:</p> <ol> <li>Click on Devices in the top navigation menu</li> <li>Click on the Device Types option in the drop-down menu</li> <li>On the Device Types page <code>Add +</code> a new Device Type<ul> <li>A Device Type requires a Manufacturer object to be created prior to creating the Device Type</li> <li>Device Type requires Manufacturer, Model, Slug, and Height values at creation</li> <li>In this example, name the Device Type <code>MX240-edge</code></li> </ul> </li> <li>On the home page for the specific Device Type, click on <code>+Add Components</code> and select <code>Interfaces</code></li> </ol> <p></p> <p>You will now see the <code>Interface Template</code> form:</p> <ol> <li>Add the <code>ae0</code> Interface Template<ul> <li><code>Manufacturer</code> will auto-populate to the Manufacturer of the Device Type you are editing</li> <li><code>Device Type</code> will auto-populate to the Device Type you are editing</li> <li>Populate a <code>Name</code></li> <li>Select a <code>Type</code> of <code>Link Aggregation Group (LAG)</code> from the drop-down selector</li> <li>Add a <code>Description</code> and <code>Label</code> (optional)</li> </ul> </li> <li>Click <code>Create and Add More</code></li> <li>Create the <code>xe-</code> Interfaces<ul> <li>This example shows bulk creation using a range (<code>xe-[0-1]/0/[0-9]</code>) in <code>Name</code></li> <li>Select the appropriate Type from the drop-down selector</li> </ul> </li> <li>Click on <code>Create</code></li> </ol> <p></p> <p>Clicking the <code>Create</code> button will take you back to the home screen for the Device Type you are editing. There, you will see that the Interfaces tab now has the expected 21 Interfaces listed.</p> <p></p> <p>Note</p> <p>As of this writing (Nautobot 1.0.3), Interfaces cannot be assigned in to a LAG in the Device Type template; component Interfaces must be designated in the specific instantiation of a Device created from the Device Type.</p>"},{"location":"user-guides/getting-started/interfaces.html#creating-a-new-device-using-the-device-type","title":"Creating a New Device Using the Device Type","text":"<p>Create a new Device with these attributes:</p> <ul> <li>Name = <code>edge2.van1</code></li> <li>Device role select <code>Customer Edge</code></li> <li>Device type select <code>Juniper MX240-edge</code> (this will show up as a fusion of the Manufacturer (<code>Juniper</code>) for the Device Type and the Device Type (<code>MX240-edge</code>) Names)</li> <li>Site select <code>Vancouver 1</code></li> </ul> <p>On the main screen for the new Device, you will see an Interfaces tab with the expected Interfaces from the Device Type template:</p> <p></p> <p>Note</p> <p>Device Type properties only apply to new instantiations of Devices from the Type; Devices created prior to a modification of the Device Type will not inherit the changes retroactively</p>"},{"location":"user-guides/getting-started/interfaces.html#specifying-the-lag-components-on-the-device","title":"Specifying the LAG Components on the Device","text":"<p>As of this writing (Nautobot 1.0.3), LAG component Interfaces cannot be assigned in the Device Type template, so we will edit this new Device, specifying the component <code>ae0</code> Interfaces.</p> <ol> <li>On the new Device's main page, select the appropriate Interfaces (<code>xe-0/0/9</code> and <code>xe-1/0/9</code>) to be added to <code>ae0</code> and click on the <code>Edit</code> button</li> <li>On the <code>Editing Interfaces</code> form, select <code>ae0</code> in the <code>Parent LAG</code> drop-down selector</li> <li>Click on <code>Apply</code>; you will be taken back to the main page for the Device</li> </ol> <p></p> <p>On the Device's main page, notice that <code>xe-0/0/9</code> and <code>xe-1/0/9</code> are now assigned to the <code>ae0</code> LAG:</p> <p></p>"},{"location":"user-guides/getting-started/ipam.html","title":"IP Address Management","text":"<p>This next section will demonstrate how to:</p> <ul> <li>Create a Regional Internet Registry</li> <li>Create an Aggregate</li> <li>Create assignable IP addresses</li> <li>Assign an IP address to an Interface on a Device</li> </ul> <p>These type of operations fall under an umbrella called IP Address Management (IPAM). The Nautobot documentation IPAM section has more detail on IPAM and each operation.</p>"},{"location":"user-guides/getting-started/ipam.html#creating-a-regional-internet-registry-rir","title":"Creating a Regional Internet Registry (RIR)","text":"<p>A RIR allocates globally-routeable IP address space. There are five top-level RIRs, each responsible for a particular section of the globe. Nautobot also considers RFCs 1918 and 6589 to be RIR-like because they allocate private IP space.</p> <p>Nautobot requires any IP allocation be attributed to a RIR.</p> <p>To create a RIR:</p> <ol> <li>Click on IPAM in the top-level navigation menu</li> <li>Find RIRs and click on the +; this takes you to the <code>Add a new RIR</code> form</li> <li>Specify the RIR <code>Name</code></li> <li>The <code>Slug</code> will auto-populate based on the <code>Name</code> field, but this default can be manually overwritten</li> <li>There is a checkbox to flag <code>Private</code> (internal use) only</li> <li>Click on the <code>Create</code> button</li> </ol> <p></p>"},{"location":"user-guides/getting-started/ipam.html#creating-an-aggregate","title":"Creating an Aggregate","text":"<p>An aggregate is a consolidated allocation of IP address space, whether it is public or private. An aggregate must map back to a RIR that has allocated the space.</p> <p>To create an Aggregate:</p> <ol> <li>Click on IPAM in the top-level navigation menu</li> <li>Find Aggregates and click on the +; this takes you to the <code>Add a new aggregate</code> form</li> <li>Specify the <code>Prefix</code> in a <code>prefix/mask</code> format</li> <li>Select a <code>RIR</code> from the drop-down selector</li> <li>Click the <code>Create</code> button</li> </ol> <p></p> <p>You will then be taken to the <code>Aggregates</code> main page, where you will see the Aggregate you just created.</p> <p></p>"},{"location":"user-guides/getting-started/ipam.html#creating-a-prefix","title":"Creating a Prefix","text":"<p>A Prefix is an IPv4 or IPv6 network and mask expressed in CIDR notation (e.g. 192.0.2.0/24). Prefixes are automatically organized by their parent Aggregates. Additionally, each Prefix can be assigned to a particular Site and virtual routing and forwarding (VRF) instance.</p> <p>To create a prefix:</p> <ol> <li>Click on IPAM in the top-level navigation menu</li> <li>Look for Prefixes and click on the +<ul> <li>This will take you to the <code>Add a new prefix</code> form</li> </ul> </li> <li>Populate the <code>Prefix</code> in CIDR notation</li> <li>Select a <code>Status</code> from the drop-down selector</li> <li>If all addresses in the Prefix are usable, check the <code>Is a pool</code> flag</li> <li>Click on the <code>Create</code> button (not shown)</li> </ol> <p></p>"},{"location":"user-guides/getting-started/ipam.html#verifying-a-prefix-in-an-aggregate","title":"Verifying a Prefix in an Aggregate","text":"<p>To view the Prefixes in an Aggregate:</p> <ol> <li>Click on IPAM in the top-level navigation menu</li> <li>Click on Aggregates to go to the Aggregates main page</li> <li>Find the Aggregate you are interested in and click on it</li> <li>On the main page for the specific Aggregate, look for a specific Prefix (<code>10.10.10.0/24</code> in this example)</li> </ol> <p>Note</p> <p>Nautobot will break an Aggregate into the highest-level child Prefixes to carve out user-defined Prefixes</p> <p></p>"},{"location":"user-guides/getting-started/ipam.html#creating-ip-addresses","title":"Creating IP Addresses","text":"<p>To create an IP address:</p> <ol> <li>Click on IPAM in the top-level navigation menu</li> <li>Find IP Addresses and click on the +<ul> <li>This will take you to the <code>Add a new IP address</code> form</li> </ul> </li> <li>In this example, we are going to create multiple individual addresses, so click on the <code>Bulk Create</code> tab</li> <li>Populate an Address pattern<ul> <li>This example uses <code>10.10.10.[0-1,2-3,6-7]/31</code> to create 3 non-contiguous /31's</li> <li>The specified mask should be exactly as would be configured on the Device's Interface</li> </ul> </li> <li>Select <code>Active</code> for <code>Status</code> from the drop-down selector</li> <li>Click on the <code>Create</code> button</li> </ol> <p></p>"},{"location":"user-guides/getting-started/ipam.html#assigning-ip-addresses","title":"Assigning IP Addresses","text":"<p>To assign an IP Address to a specific Device and Interface:</p> <ol> <li>Click on IPAM in the top-level navigation menu</li> <li>Click on IP Addresses to go to the main IP Addresses page</li> <li>Find the IP address you wish to assign to an Interface and click on it</li> <li>On the main page for the Address, click on the <code>Edit</code> button to go to the <code>Editing IP address</code> page </li> </ol> <p></p> <p>Once on the <code>Editing IP address</code> page:</p> <ol> <li>Select a <code>Device</code> from the drop-down selector</li> <li>Select an <code>Interface</code> on the Device</li> <li>Click on the <code>Update</code> button<ul> <li>This will take you back to the main page for the IP Address, where you will see the assignment shown as <code>device (interface)</code></li> </ul> </li> </ol> <p></p>"},{"location":"user-guides/getting-started/ipam.html#finding-an-ip-address-for-an-interface","title":"Finding an IP Address for an Interface","text":"<ol> <li>Click on Devices on the top-level navigation menu</li> <li>Click on Devices to go to the main page for Devices</li> <li>Search for the Device you are interested in (<code>edge2.van1</code> in this example) and click on the link to go to the main page for the Device</li> <li>Go to the <code>Interfaces</code> tab and look for the row with the Interface you are interested in; find the IP Address(es) in the IP Addresses column in the row</li> </ol>"},{"location":"user-guides/getting-started/ipam.html#finding-ip-addresses-in-a-prefix","title":"Finding IP Addresses in a Prefix","text":"<p>To find information on a particular Prefix:</p> <ol> <li>Click on IPAM in the top-level drop-down menu</li> <li>Click on Prefixes to get to the Prefixes main page</li> <li>Find the Prefix you are interested in and click on the link</li> <li>To view the available and allocated IP Addresses, click on the <code>IP Addresses</code> tab</li> </ol> <p></p> <p></p>"},{"location":"user-guides/getting-started/platforms.html","title":"Platforms","text":"<p>A Platform object can hold various information about a device, such as the OS, OS version, and NAPALM driver.</p> <p>Further information is available in the Platforms section of the Nautobot docs.</p> <p>While use of Platforms is optional, they provide great value in many use cases.</p>"},{"location":"user-guides/getting-started/platforms.html#creating-a-platform","title":"Creating a Platform","text":"<p>To create a Platform:</p> <ol> <li>Click on Devices in the top navigation menu</li> <li>Find Platforms and click on the + icon in the menu<ul> <li>This takes you to the <code>Add a new platform</code> form</li> </ul> </li> <li>Provide a <code>Name</code> (required)</li> <li>The <code>Slug</code> will auto-populate based on the <code>Name</code> field; you may override this if necessary</li> <li>Select a <code>Manufacturer</code> from the drop-down selector (optional)</li> <li>Provide the name of the <code>Network driver</code> (optional)</li> <li>Provide the name of the <code>NAPALM driver</code> (optional) (Note: this must be the exact name of the NAPALM driver)</li> <li>Provide <code>NAPALM arguments</code> (optional)</li> <li>Provide <code>Description</code> (optional)</li> <li>Click on the <code>Create</code> button</li> </ol> <p>Tip</p> <p>The network driver, if specified, is used with the netutils library to automatically populate a <code>network_driver_mappings</code> derived property mapping the <code>network_driver</code> field to tool-specific driver names such as <code>ansible</code>, <code>netmiko</code>, <code>pyats</code>, etc.</p> <p>Tip</p> <p>NAPALM Driver Options include:</p> <ul> <li>eos (Arista)</li> <li>ios (Cisco)</li> <li>nxos (used with <code>nxapi</code> feature)</li> <li>nxos_ssh (used for ssh login)</li> <li>junos</li> </ul> <p></p> <p>Once completed, you will be sent to the Platforms page, where all the Platform variants are shown.</p> <p>Tip</p> <p>Different use cases for Platforms may require different information. For example, to use a specific Platform with the Device Onboarding Plugin, you may be required to override the default Slug value with that of the Netmiko device_type</p> <p></p>"},{"location":"user-guides/getting-started/platforms.html#adding-a-platform-to-an-existing-or-new-device","title":"Adding a Platform to an Existing or New Device","text":"<p>The Platform attribute is optional for a Device.</p> <p>It is quite easy to add a Platform to an existing Device or while creating a new Device.</p> <p>A Device's <code>Platform</code> is specified on the <code>Add a new device</code> or <code>Editing device</code> page, depending on whether you are adding or editing a Device.</p>"},{"location":"user-guides/getting-started/platforms.html#reaching-the-editing-device-page-for-an-existing-device","title":"Reaching the <code>Editing device</code> page for an Existing Device","text":"<p>The quickest way to reach the <code>Editing device</code> page for a Device is to search for the Device name in the Search Bar.</p> <p>Tip</p> <p>See the Search Bar section of this guide for more information on using the Search Bar</p> <ol> <li>Type the device name in the Search Bar in the upper-right of the page</li> <li>Click on the device name on the results page</li> <li>Click on the <code>Edit</code> button on the main page for the Device</li> </ol> <p></p>"},{"location":"user-guides/getting-started/platforms.html#reaching-the-add-a-new-device-page","title":"Reaching the <code>Add a new device</code> Page","text":"<p>For a new Device, follow the steps to create a new Device to reach the <code>Add a new device</code> page.</p>"},{"location":"user-guides/getting-started/platforms.html#specifying-the-devices-platform","title":"Specifying the Device's Platform","text":"<ol> <li>While on the Add a new device/Editing device page, scroll down to the 'Management' section</li> <li>In the <code>Platform</code> field drop-down selector, select the appropriate Platform</li> <li>Click the 'Update' (edit Device) or <code>Create</code> (add Device) button</li> </ol> <p>Tip</p> <p>The only choices that will appear in the <code>Platform</code> drop-down selector will be those Platforms that have the same Manufacturer specified in the Device's <code>Hardware</code> section.</p> <p></p>"},{"location":"user-guides/getting-started/regions.html","title":"Regions","text":"<p>Regions are administrative domains, used to organize Sites and other Regions. They can be nested recursively. A Region might represent a continent, country, city, campus, or other area. A Region can contain Sites and other Regions.</p> <p>Additional information on Regions is in the Regions section of the Nautobot documentation.</p> <p>In the following exercise, we will create three Regions:</p> <ul> <li>North America<ul> <li>Intended to hold Regions that represent each component country</li> </ul> </li> <li>Canada<ul> <li>Intended to hold Regions that represent markets in Canada</li> </ul> </li> <li>Vancouver<ul> <li>Intended to hold Sites within the Vancouver market</li> </ul> </li> </ul>"},{"location":"user-guides/getting-started/regions.html#creating-a-region","title":"Creating a Region","text":"<p>To create a Region:</p> <ol> <li>Click on Organization in the top menu</li> <li>Click on Regions in the Organization drop-down menu<ul> <li>From this page you can view any existing Regions</li> </ul> </li> <li>Click on the blue <code>+ Add</code> button</li> </ol> <p></p> <p>The screenshots below show the creation of each Region.</p> <p>North America:</p> <ol> <li>Leave the <code>Parent</code> blank; North America will be a top-tier Region</li> <li>Populate the <code>Name</code> to be <code>North America</code><ul> <li>The <code>Slug</code> will auto-populate based on the <code>Name</code> field, but can be manually overwritten</li> </ul> </li> <li>Click on the <code>Create and Add Another</code> button</li> </ol> <p>Canada:</p> <ol> <li>Select North America as the <code>Parent</code> from the drop-down menu selector</li> <li>Populate the <code>Name</code> to be <code>Canada</code><ul> <li>The <code>Slug</code> will auto-populate based on the <code>Name</code> field, but can be manually overwritten</li> </ul> </li> <li>Click on the <code>Create and Add Another</code> button</li> </ol> <p>Vancouver:</p> <ol> <li>Select Canada as the <code>Parent</code> from the drop-down menu selector</li> <li>Populate the <code>Name</code> to be <code>Vancouver</code><ul> <li>The <code>Slug</code> will auto-populate based on the <code>Name</code> field, but can be manually overwritten</li> </ul> </li> <li>Click on the <code>Create</code> button</li> </ol> <p></p>"},{"location":"user-guides/getting-started/regions.html#adding-a-site-to-a-region","title":"Adding a Site to a Region","text":"<p>It's quite easy to add an existing Site to a Region.</p> <p>To access the page where you can modify a Site:</p> <ol> <li>Click on Organization in the top navigation menu</li> <li>Click on Sites in the drop-down menu</li> <li>The Sites page will appear; click on the specific Site you want to modify (<code>Vancouver 1</code> in this example shown).</li> <li>On the page for the Site, click on the <code>Edit</code> button</li> </ol> <p></p> <p>Once you're on the <code>Editing site</code> form:</p> <ol> <li>Look for the <code>Region</code> drop-down selection menu and select the appropriate Region</li> <li>Observe that the correct <code>Region</code> for the <code>Site</code> is selected</li> <li>Click on the <code>Update</code> button</li> </ol> <p>The page for the Site you updated will appear again, showing the updated Region hierarchy for the Site.</p> <p></p> <p>Note</p> <p>In the example, notice that we assigned the <code>Vancouver 1</code> Site to <code>Vancouver</code>, which is tier-3 Region. Notice that the Regional hierarchy is displayed for the <code>Vancouver 1</code> Site: <code>North America / Canada / Vancouver</code></p>"},{"location":"user-guides/getting-started/search-bar.html","title":"The Search Bar","text":"<p>The exercises in the prior sections in this Getting Started Guide walked you through how to navigate to the proper objects.</p> <p>You can also use the Search Bar to find desired objects with either partial or complete alpha/numeric characters or exact UUID.</p> <p>We will show two quick examples.</p> <p>Example one:</p> <ol> <li>Type in <code>10.10.10.0</code> in the Search Bar and click on <code>Search</code><ul> <li>This takes you to a search results page</li> </ul> </li> <li>Aggregate search result <code>10.0.0.0/8</code> (this is the Aggregate for the Prefix <code>10.10.10.0/24</code>)</li> <li>Prefix search result <code>10.10.10.0/24</code></li> <li>IP Address search result <code>10.10.10.0/31</code></li> <li>Interface related to <code>10.10.10.0/31</code></li> <li>Interface Parent (Device) for <code>10.10.10.0/31</code></li> </ol> <p>Clicking on any of these objects takes you to the main page for that object. This example shows the result of clicking on the IP Address object (4).</p> <p></p> <p>Example two shows a Device-specific search:</p> <ol> <li>Search for <code>edge</code><ul> <li>This takes you to a search results page</li> </ul> </li> <li>In the drop-down selector to the right, select <code>Devices</code></li> <li>Search results for Devices with <code>edge</code> in the name</li> <li>Tenants for each Device (if applicable)</li> <li>Device Type for each Device</li> <li>Site for each Device</li> </ol> <p>Clicking on an of the links for the results takes you to the main page for that object. For example:</p> <ul> <li>Clicking on the <code>Vancouver 1</code> Site takes you to the main page for the Site.</li> <li>Clicking on the <code>edge2.van1</code> Device takes you to the main page for the Device</li> </ul> <p></p> <p>END OF Getting Started in the Web UI GUIDE</p>"},{"location":"user-guides/getting-started/tenants.html","title":"Tenants","text":"<p>A 'Tenant' signifies ownership of an object in Nautobot and as such, any object may only have a single Tenant assigned.</p> <p>More information on Tenants can be found in the Tenants section of the Nautobot docs.</p>"},{"location":"user-guides/getting-started/tenants.html#creating-a-tenant","title":"Creating a Tenant","text":"<p>To create a Tenant:</p> <ol> <li>Click on Organization on the top navigation menu</li> <li>Find Tenants and click on the <code>+</code></li> <li>Populate the <code>Name</code> field</li> <li>The <code>Slug</code> field will auto-populate based on the <code>Name</code> field, but this can be manually overwritten</li> <li>Click the <code>Create</code> button</li> </ol> <p></p>"},{"location":"user-guides/getting-started/tenants.html#assigning-a-tenant-to-an-object","title":"Assigning a Tenant to an Object","text":"<p>It is simple to assign a Tenant to an existing object. This next example will add a Tenant to an existing Device.</p> <ol> <li>Click on Devices in the top navigation menu</li> <li>Look for the Devices option and click on it<ul> <li>This will take you to the Devices page</li> </ul> </li> <li>Click on the specific Device you want to add the Tenant to<ul> <li>This will take you to the main page for that Device</li> </ul> </li> <li>On the specific Device page, click on the <code>Edit</code> button</li> </ol> <p></p> <p>Once on the page to edit the Device:</p> <ol> <li>Make a selection from the <code>Tenant</code> drop-down menu selector</li> <li>Click the <code>Update</code> button</li> </ol> <p>This will take you back to the main page for the Device.</p> <p></p> <p>Notice that the <code>Tenant</code> field is now populated/updated.</p>"},{"location":"user-guides/getting-started/vlans-and-vlan-groups.html","title":"VLANS and VLAN Groups","text":"<p>Each VLAN may be assigned to a site, tenant, and/or VLAN group.</p> <p>Each VLAN must be assigned a status. The following statuses are available by default:</p> <ul> <li>Active</li> <li>Reserved</li> <li>Deprecated</li> </ul> <p>In general, VLANs can have overlapping names and IDs. The exception to this is VLANs within a VLAN Group: each VLAN within a group must have a unique ID and name. A VLAN Group may be assigned to a specific site, but a Group cannot belong to multiple sites. VLANs may be assigned to a specific site as well.</p> <p>The Nautobot documentation has more info about VLANs and VLAN Groups.</p>"},{"location":"user-guides/getting-started/vlans-and-vlan-groups.html#vlan-example","title":"VLAN Example","text":"<p>The following example will show:</p> <ul> <li>Creating a <code>vlan 200</code> without a site assignment (global scope)</li> <li>Creating two VLANs, each with overlapping Names and IDs: ID = <code>100</code> and Name = <code>vlan 100</code><ul> <li>Neither of the <code>vlan 100</code> instances will be assigned to a group, but each of the VLANs will be assigned to a different site (site-specific scope)</li> </ul> </li> <li>How the site-specific and global scopes affect which VLANs can be assigned on which Devices</li> </ul> <p>Note</p> <p>This example will require a Site (<code>Ottawa 1</code>) within a Region (<code>Ottawa</code>) in the <code>North America</code> Region in addition to the <code>Vancouver 1</code> Site and <code>Vancouver</code> Region created prior. Refer back to the Create a Site and Create a Region sections to do so.</p>"},{"location":"user-guides/getting-started/vlans-and-vlan-groups.html#creating-the-vlans","title":"Creating the VLANs","text":"<ol> <li>Click on IPAM in the top navigation menu</li> <li>Look for the VLANS option and click on the + to go to the <code>Add a new VLAN</code> form</li> <li>Populate <code>ID</code> with <code>200</code></li> <li>Populate <code>Name</code> with <code>vlan 200</code></li> <li>Select <code>Status</code> as <code>Active</code></li> <li>Click on <code>Create and Add Another</code> to save; you will then be taken to the <code>Add a new VLAN</code> form</li> </ol> <p>Note</p> <p>The required parameters to create a new VLAN are bolded in the <code>Add a new VLAN</code> form: ID, Name, and Status</p> <p></p> <p>Now we'll create two instances of VLANs, each with ID = <code>100</code> and Name = <code>vlan 100</code> and an <code>Active</code> Status. The differentiator will be that one instance will be assigned to the <code>Vancouver 1</code> Site and the other to the <code>Ottawa 1</code> Site.</p> <p>On the <code>Add a new VLAN</code> form:</p> <ol> <li>Populate <code>ID</code> with <code>100</code></li> <li>Populate <code>Name</code> with <code>vlan 100</code></li> <li>Select <code>Status</code> as <code>Active</code></li> <li>Select <code>Vancouver</code> from the <code>Region</code> selector drop-down</li> <li>Select <code>Vancouver 1</code> from the <code>Site</code> selector drop-down</li> <li>Click on the <code>Create and Add Another</code> button</li> </ol> <p>Note</p> <p>The <code>Region</code> drop-down selection in step 4 is optional and only meant to narrow down the options presented in the Site drop-down selector in Step 5. A VLAN cannot be assigned to a Region.</p> <ol> <li>Populate <code>ID</code> with <code>100</code></li> <li>Populate <code>Name</code> with <code>vlan 100</code></li> <li>Select <code>Status</code> as <code>Active</code></li> <li>Select <code>Ottawa</code> from the <code>Region</code> selector drop-down</li> <li>Select <code>Ottawa 1</code> from the <code>Site</code> selector drop-down</li> <li>Click on the <code>Create</code> button when complete with the second instance</li> </ol> <p></p> <p>Once you've created the three VLANs and then hit the <code>Create</code> button, you will be taken to the VLANs main page. On that page, you'll see the three VLANs and the Site assignment for each one. Each <code>vlan 100</code> instance will have a Site assignment, while <code>vlan 200</code> will not:</p> <p></p>"},{"location":"user-guides/getting-started/vlans-and-vlan-groups.html#assigning-vlans-to-an-interface","title":"Assigning VLANs to an Interface","text":"<p>To assign a VLAN to an Interface:</p> <ol> <li>Click on IPAM on the top-level navigation menu</li> <li>Select Devices to go to the Devices main page</li> <li>Click on the name of the Device you wish to add a VLAN to (<code>edge2.van1</code>) in this example</li> <li>Click on the <code>Edit</code> button for the <code>xe-0/0/0</code> Interface to go to the <code>Editing interface xe-0/0/0</code> page</li> <li>On the <code>Editing interface xe-0/0/0</code> page, set <code>802.1Q</code> Mode to <code>Access</code> (or whatever mode you need) and then click on the VLAN drop-down selector. Notice that there are two choices:<ul> <li>One choice is the <code>vlan 100</code> instance specifically assigned to the <code>Vancouver 1</code> Site</li> <li>The other choice is <code>vlan 200</code>, which was not assigned to a Site, and thus has a global scope</li> </ul> </li> </ol> <p></p> <p>Note</p> <p>The <code>vlan 100</code> instance that is assigned to the <code>Ottawa 1</code> Site does not show up as an option for the <code>Vancouver1</code> Site</p> <p></p>"}]}